@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
declare external i8* @malloc( i64 ) nounwind
%__Array__float__5 = type { [5 x float] }
@string1 = private unnamed_addr constant [19 x i8] c"ARRAY[ %d] = %.4f\0A\00"
define private dso_local void @__ctor_init_5__float( [5 x float]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 5
br label %loop
loop:
%ths = phi float* [%ths_base, %enter], [%A2, %cond]
store float 0.00000, float* %ths
br label %cond
cond:
%A2 = getelementptr inbounds float, float* %ths, i64 1
%A3 = icmp eq float* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_5__float( [5 x float]* %ths_ar, [5 x float]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 5
%oth_base = getelementptr inbounds [5 x float], [5 x float]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi float* [%ths_base, %enter], [%A2, %cond]
%oth = phi float* [%oth_base, %enter], [%A3, %cond]
%r1 = load float, float* %oth
store float %r1, float* %ths
br label %cond
cond:
%A2 = getelementptr inbounds float, float* %ths, i64 1
%A3 = getelementptr inbounds float, float* %oth, i64 1
%A4 = icmp eq float* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_5__float( [5 x float]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 0
%top = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi float* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds float, float* %ths, i64 -1
%A3 = icmp eq float* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor___Array__float__5( %__Array__float__5* %ths) {
enter:
%r1 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
call void @__dtor_5__float( [5 x float]* %r1, i32 5)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor___Array__float__5( %__Array__float__5* %ths, i32 %istate) {
enter:
%r2 = icmp uge i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
call void @__dtor_5__float( [5 x float]* %r1, i32 5)
br label %L2
L2:
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
define external void @__C___Array__float__5__$ctor( %__Array__float__5* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
call void @__ctor_init_5__float( [5 x float]* %r1, i32 0)
br label %L1
L1:
ret void
}
define external void @__C___Array__float__5__$ctor__$5xfloat$( %__Array__float__5* %ths, [5 x float]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
call void @__ctor_copy_5__float( [5 x float]* %r2, [5 x float]* %r1)
br label %L1
L1:
ret void
}
define external float* @__C___Array__float__5__$get__i32( %__Array__float__5* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x float], [5 x float]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret float* %r3
}
define external float* @__C___Array__float__5__$get__i32__const( %__Array__float__5* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Array__float__5, %__Array__float__5* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x float], [5 x float]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret float* %r3
}

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r1 = alloca i32, align 4
%r2 = alloca %__Array__float__5, align 8
%r10 = alloca [5 x float], align 8
%r5 = getelementptr inbounds [5 x float], [5 x float]* %r10, i32 0, i32 0
store float 0x3FF19999A0000000, float* %r5
%r6 = getelementptr inbounds [5 x float], [5 x float]* %r10, i32 0, i32 1
store float 0x40019999A0000000, float* %r6
%r7 = getelementptr inbounds [5 x float], [5 x float]* %r10, i32 0, i32 2
store float 0x400A666660000000, float* %r7
%r8 = getelementptr inbounds [5 x float], [5 x float]* %r10, i32 0, i32 3
store float 0x40119999A0000000, float* %r8
%r9 = getelementptr inbounds [5 x float], [5 x float]* %r10, i32 0, i32 4
store float 0x4016000000000000, float* %r9
call void @__C___Array__float__5__$ctor__$5xfloat$( %__Array__float__5* %r2, [5 x float]* %r10)
%r11 = call float* @__C___Array__float__5__$get__i32( %__Array__float__5* %r2, i32 1)
store float 0xC0263851E0000000, float* %r11
%r12 = call float* @__C___Array__float__5__$get__i32( %__Array__float__5* %r2, i32 3)
store float 0xC040AA3D80000000, float* %r12
%r13 = alloca i32, align 4
store i32 0, i32* %r13
br label %L4
L4:
%r14 = load i32, i32* %r13
%r15 = icmp slt i32 %r14, 5
br i1 %r15, label %L3, label %L2
L3:
%r18 = getelementptr inbounds [19 x i8], [19 x i8]* @string1, i64 0, i64 0
%r19 = load i32, i32* %r13
%r16 = load i32, i32* %r13
%r17 = call float* @__C___Array__float__5__$get__i32( %__Array__float__5* %r2, i32 %r16)
%r20 = load float, float* %r17
%r21 = fpext float %r20 to double
call void(i8*,  ...) @printf( i8* %r18, i32 %r19, double %r21)
%r22 = load i32, i32* %r13
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r13
br label %L4
L2:
store i32 0, i32* %r1
br label %L5
L5:
call void @__dtor___Array__float__5( %__Array__float__5* %r2)
br label %L1
L1:
%r24 = load i32, i32* %r1
ret i32 %r24
}


