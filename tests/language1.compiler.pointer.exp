
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
declare external i8* @malloc( i64 ) nounwind


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
@string1 = private unnamed_addr constant [26 x i8] c"CALL printNumber [%d] %f\0A\00"
define external void @printNumber__double__i32$( double %r1, i32* %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds [26 x i8], [26 x i8]* @string1, i64 0, i64 0
%r4 = load i32, i32* %r2
call void(i8*,  ...) @printf( i8* %r3, i32 %r4, double %r1)
%r5 = load i32, i32* %r2
%r6 = add nsw i32 %r5, 1
store i32 %r6, i32* %r2
br label %L1
L1:
ret void
}
define external i32 @printNumber__double__i32( double %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds [26 x i8], [26 x i8]* @string1, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r3, i32 %r2, double %r1)
%r4 = add nsw i32 %r2, 1
br label %L1
L1:
ret i32 %r4
}
@g_pnp = internal global void(double, i32*)* null
@string2 = private unnamed_addr constant [14 x i8] c"RES cnt = %d\0A\00"
@string3 = private unnamed_addr constant [13 x i8] c"Hello World!\00"
@string4 = private unnamed_addr constant [22 x i8] c"Initials %c %c %s %s\0A\00"
@string5 = private unnamed_addr constant [16 x i8] c"PTR &cnt -> %d\0A\00"
@string6 = private unnamed_addr constant [16 x i8] c"PTR &num -> %d\0A\00"

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
store void(double, i32*)* @printNumber__double__i32$, void(double, i32*)** @g_pnp
%r1 = alloca i32, align 4
%r2 = alloca void(double, i32*)*
store void(double, i32*)* @printNumber__double__i32$, void(double, i32*)** %r2
%r3 = alloca i32(double, i32)*
store i32(double, i32)* @printNumber__double__i32, i32(double, i32)** %r3
%r4 = alloca i32, align 4
store i32 31, i32* %r4
%r5 = alloca i32, align 4
store i32 23, i32* %r5
%r6 = load void(double, i32*)*, void(double, i32*)** %r2
call void %r6( double 0x4008E147AE147AE1, i32* %r4)
%r10 = load i32, i32* %r4
%r7 = load i32(double, i32)*, i32(double, i32)** %r3
%r8 = call i32 %r7( double 0x4010E147AE147AE1, i32 4)
%r9 = mul nsw i32 %r8, 2
%r11 = add nsw i32 %r10, %r9
store i32 %r11, i32* %r4
%r12 = load i32(double, i32)*, i32(double, i32)** %r3
%r13 = load i32, i32* %r4
%r14 = call i32 %r12( double 0x401CE147AE147AE1, i32 %r13)
%r15 = load void(double, i32*)*, void(double, i32*)** @g_pnp
call void %r15( double 0x403319999999999A, i32* %r4)
%r16 = getelementptr inbounds [14 x i8], [14 x i8]* @string2, i64 0, i64 0
%r17 = load i32, i32* %r4
call void(i8*,  ...) @printf( i8* %r16, i32 %r17)
%r18 = alloca i8*
%r19 = getelementptr inbounds [13 x i8], [13 x i8]* @string3, i64 0, i64 0
store i8* %r19, i8** %r18
%r20 = alloca i8*
%r21 = load i8*, i8** %r18
%r22 = getelementptr i8, i8* %r21, i32 6
store i8* %r22, i8** %r20
%r23 = alloca i8*
%r24 = load i8*, i8** %r20
%r25 = getelementptr i8, i8* %r24, i32 -5
store i8* %r25, i8** %r23
%r26 = alloca i8, align 1
%r27 = load i8*, i8** %r18
%r28 = getelementptr i8, i8* %r27, i32 0
%r29 = load i8, i8* %r28
store i8 %r29, i8* %r26
%r30 = alloca i8, align 1
%r31 = load i8*, i8** %r18
%r32 = getelementptr i8, i8* %r31, i32 6
%r33 = load i8, i8* %r32
store i8 %r33, i8* %r30
%r34 = getelementptr inbounds [22 x i8], [22 x i8]* @string4, i64 0, i64 0
%r35 = load i8, i8* %r26
%r36 = zext i8 %r35 to i32
%r37 = load i8, i8* %r30
%r38 = zext i8 %r37 to i32
%r39 = load i8*, i8** %r20
%r40 = load i8*, i8** %r23
call void(i8*,  ...) @printf( i8* %r34, i32 %r36, i32 %r38, i8* %r39, i8* %r40)
%r41 = alloca i32*
store i32* %r4, i32** %r41
%r42 = alloca i32*
store i32* %r5, i32** %r42
%r44 = getelementptr inbounds [16 x i8], [16 x i8]* @string5, i64 0, i64 0
%r43 = load i32*, i32** %r41
%r45 = load i32, i32* %r43
call void(i8*,  ...) @printf( i8* %r44, i32 %r45)
%r47 = getelementptr inbounds [16 x i8], [16 x i8]* @string6, i64 0, i64 0
%r46 = load i32*, i32** %r42
%r48 = load i32, i32* %r46
call void(i8*,  ...) @printf( i8* %r47, i32 %r48)
store i32 0, i32* %r1
br label %L2
L2:
br label %L1
L1:
%r49 = load i32, i32* %r1
ret i32 %r49
}


