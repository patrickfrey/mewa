
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]



define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}


declare external void @printf( i8*, ... ) #1 nounwind

declare external i8* @malloc( i64 ) #1 nounwind
@string1 = private unnamed_addr constant [26 x i8] c"CALL printNumber [%d] %f\0A\00"

define external void @printNumber__double__i32$( double %r1, i32* %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds [26 x i8], [26 x i8]* @string1, i64 0, i64 0
%r4 = load i32, i32* %r2
call void(i8*,  ...) @printf( i8* %r3, i32 %r4, double %r1)
%r5 = load i32, i32* %r2
%r6 = add nsw i32 %r5, 1
store i32 %r6, i32* %r2
br label %exit
exit:
ret void
}

define external i32 @printNumber__double__i32( double %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds [26 x i8], [26 x i8]* @string1, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r3, i32 %r2, double %r1)
%r4 = add nsw i32 %r2, 1
ret i32 %r4
}
@g_pnp = internal global void(double, i32*)* null
@string2 = private unnamed_addr constant [14 x i8] c"RES cnt = %d\0A\00"

declare dso_local i32 @__gxx_personality_v0(...)
define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
store void(double, i32*)* @printNumber__double__i32$, void(double, i32*)** @g_pnp
%r1 = alloca void(double, i32*)*
store void(double, i32*)* @printNumber__double__i32$, void(double, i32*)** %r1
%r2 = alloca i32(double, i32)*
store i32(double, i32)* @printNumber__double__i32, i32(double, i32)** %r2
%r3 = alloca i32, align 4
store i32 31, i32* %r3
%r4 = load void(double, i32*)*, void(double, i32*)** %r1
call void %r4( double 0x4008E147AE147AE1, i32* %r3)
%r8 = load i32, i32* %r3
%r5 = load i32(double, i32)*, i32(double, i32)** %r2
%r6 = call i32 %r5( double 0x4010E147AE147AE1, i32 4)
%r7 = mul nsw i32 %r6, 2
%r9 = add nsw i32 %r8, %r7
store i32 %r9, i32* %r3
%r10 = load i32(double, i32)*, i32(double, i32)** %r2
%r11 = load i32, i32* %r3
%r12 = call i32 %r10( double 0x401CE147AE147AE1, i32 %r11)
%r13 = load void(double, i32*)*, void(double, i32*)** @g_pnp
call void %r13( double 0x403319999999999A, i32* %r3)
%r14 = getelementptr inbounds [14 x i8], [14 x i8]* @string2, i64 0, i64 0
%r15 = load i32, i32* %r3
call void(i8*,  ...) @printf( i8* %r14, i32 %r15)
br label %exit
exit:
ret i32 0
}


