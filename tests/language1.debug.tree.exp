Shift token "extern" at line 1 in state 1, goto 4
Shift token DQSTRING = "C" at line 1 in state 4, goto 30
Shift token "procedure" at line 1 in state 30, goto 58
Shift token IDENT = "printf" at line 1 in state 58, goto 86
Shift token '(' at line 1 in state 86, goto 168
Shift token "const" at line 1 in state 168, goto 19
Shift token IDENT = "byte" at line 1 in state 19, goto 18
Reduce #1 to typename by token '^' at line 1 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 1 in state 7, goto 43
Shift token '^' at line 1 in state 43, goto 70
Reduce #3 to typespec by token IDENT = "fmt" at line 1 in state 70, call typespec "const^", goto 253
Shift token IDENT = "fmt" at line 1 in state 253, goto 353
Reduce #2 to extern_parameters by token "..." at line 1 in state 353, call extern_paramdef, goto 251
Reduce #1 to extern_paramlist by token "..." at line 1 in state 251, call extern_paramdeflist, goto 291
Shift token "..." at line 1 in state 291, goto 367
Shift token ')' at line 1 in state 367, goto 402
Shift token ';' at line 1 in state 402, goto 424
Reduce #9 to extern_definition by token "extern" at line 2 in state 424, call extern_procdef_vararg, goto 3
Shift token "extern" at line 2 in state 3, goto 4
Shift token DQSTRING = "C" at line 2 in state 4, goto 30
Shift token "procedure" at line 2 in state 30, goto 58
Shift token IDENT = "putchar" at line 2 in state 58, goto 86
Shift token '(' at line 2 in state 86, goto 168
Shift token "const" at line 2 in state 168, goto 19
Shift token IDENT = "byte" at line 2 in state 19, goto 18
Reduce #1 to typename by token ')' at line 2 in state 18, goto 7
Reduce #1 to generic_typename by token ')' at line 2 in state 7, goto 43
Reduce #2 to typespec by token ')' at line 2 in state 43, call typespec "const ", goto 253
Reduce #1 to extern_parameters by token ')' at line 2 in state 253, call extern_paramdef, goto 251
Reduce #1 to extern_paramlist by token ')' at line 2 in state 251, call extern_paramdeflist, goto 291
Shift token ')' at line 2 in state 291, goto 366
Shift token ';' at line 2 in state 366, goto 401
Reduce #8 to extern_definition by token "extern" at line 3 in state 401, call extern_procdef, goto 3
Shift token "extern" at line 3 in state 3, goto 4
Shift token DQSTRING = "C" at line 3 in state 4, goto 30
Shift token "function" at line 3 in state 30, goto 57
Shift token IDENT = "malloc" at line 3 in state 57, goto 85
Shift token IDENT = "byte" at line 3 in state 85, goto 18
Reduce #1 to typename by token '^' at line 3 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 3 in state 7, goto 8
Shift token '^' at line 3 in state 8, goto 36
Reduce #2 to typespec by token '(' at line 3 in state 36, call typespec "^", goto 167
Shift token '(' at line 3 in state 167, goto 290
Shift token IDENT = "long" at line 3 in state 290, goto 18
Reduce #1 to typename by token ')' at line 3 in state 18, goto 7
Reduce #1 to generic_typename by token ')' at line 3 in state 7, goto 8
Reduce #1 to typespec by token ')' at line 3 in state 8, call typespec "", goto 253
Reduce #1 to extern_parameters by token ')' at line 3 in state 253, call extern_paramdef, goto 251
Reduce #1 to extern_paramlist by token ')' at line 3 in state 251, call extern_paramdeflist, goto 365
Shift token ')' at line 3 in state 365, goto 399
Shift token ';' at line 3 in state 399, goto 422
Reduce #9 to extern_definition by token "extern" at line 4 in state 422, call extern_funcdef, goto 3
Shift token "extern" at line 4 in state 3, goto 4
Shift token DQSTRING = "C" at line 4 in state 4, goto 30
Shift token "procedure" at line 4 in state 30, goto 58
Shift token IDENT = "free" at line 4 in state 58, goto 86
Shift token '(' at line 4 in state 86, goto 168
Shift token IDENT = "byte" at line 4 in state 168, goto 18
Reduce #1 to typename by token '^' at line 4 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 4 in state 7, goto 8
Shift token '^' at line 4 in state 8, goto 36
Reduce #2 to typespec by token ')' at line 4 in state 36, call typespec "^", goto 253
Reduce #1 to extern_parameters by token ')' at line 4 in state 253, call extern_paramdef, goto 251
Reduce #1 to extern_paramlist by token ')' at line 4 in state 251, call extern_paramdeflist, goto 291
Shift token ')' at line 4 in state 291, goto 366
Shift token ';' at line 4 in state 366, goto 401
Reduce #8 to extern_definition by token "private" at line 6 in state 401, call extern_procdef, goto 3
Reduce #0 to extern_definitionlist by token "private" at line 6 in state 3, goto 29
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 29, goto 29
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 29, goto 29
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 29, goto 29
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 29, goto 2
Shift token "private" at line 6 in state 2, goto 27
Reduce #1 to linkage by token "function" at line 6 in state 27, call linkage {private=true,linkage="internal"}, goto 15
Shift token "function" at line 6 in state 15, goto 39
Shift token IDENT = "allocmem" at line 6 in state 39, goto 66
Shift token IDENT = "byte" at line 6 in state 66, goto 18
Reduce #1 to typename by token '^' at line 6 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 6 in state 7, goto 8
Shift token '^' at line 6 in state 8, goto 36
Reduce #2 to typespec by token '(' at line 6 in state 36, call typespec "^", goto 123
Shift token '(' at line 6 in state 123, goto 126
Shift token IDENT = "long" at line 6 in state 126, goto 18
Reduce #1 to typename by token IDENT = "bytes" at line 6 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "bytes" at line 6 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "bytes" at line 6 in state 8, call typespec "", goto 233
Shift token IDENT = "bytes" at line 6 in state 233, goto 342
Reduce #2 to paramdecl by token ')' at line 6 in state 342, call paramdef, goto 236
Reduce #1 to parameters by token ')' at line 6 in state 236, goto 235
Reduce #1 to parameterlist by token ')' at line 6 in state 235, call paramdeflist, goto 234
Shift token ')' at line 6 in state 234, goto 343
Shift token '{' at line 7 in state 343, goto 378
Shift token "return" at line 8 in state 378, goto 110
Shift token IDENT = "malloc" at line 8 in state 110, goto 95
Reduce #1 to expression by token '(' at line 8 in state 95, call variable, goto 221
Shift token '(' at line 8 in state 221, goto 173
Shift token IDENT = "bytes" at line 8 in state 173, goto 95
Reduce #1 to expression by token ')' at line 8 in state 95, call variable, goto 229
Reduce #1 to expressionlist by token ')' at line 8 in state 229, goto 293
Shift token ')' at line 8 in state 293, goto 368
Reduce #4 to expression by token ';' at line 8 in state 368, call operator "()", goto 221
Shift token ';' at line 8 in state 221, goto 334
Reduce #3 to statement by token '}' at line 9 in state 334, call return_value, goto 91
Reduce #0 to statementlist by token '}' at line 9 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 9 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 9 in state 90, call codeblock, goto 409
Shift token '}' at line 9 in state 409, goto 430
Reduce #6 to callablebody by token "private" at line 10 in state 430, call callablebody, goto 231
Reduce #5 to functiondefinition by token "private" at line 10 in state 231, call funcdef {const=false}, goto 16
Reduce #1 to free_definition by token "private" at line 10 in state 16, call definition 1, goto 6
Shift token "private" at line 10 in state 6, goto 27
Reduce #1 to linkage by token "procedure" at line 10 in state 27, call linkage {private=true,linkage="internal"}, goto 15
Shift token "procedure" at line 10 in state 15, goto 40
Shift token IDENT = "freemem" at line 10 in state 40, goto 67
Shift token '(' at line 10 in state 67, goto 126
Shift token IDENT = "byte" at line 10 in state 126, goto 18
Reduce #1 to typename by token '^' at line 10 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 10 in state 7, goto 8
Shift token '^' at line 10 in state 8, goto 36
Reduce #2 to typespec by token IDENT = "ptr" at line 10 in state 36, call typespec "^", goto 233
Shift token IDENT = "ptr" at line 10 in state 233, goto 342
Reduce #2 to paramdecl by token ')' at line 10 in state 342, call paramdef, goto 236
Reduce #1 to parameters by token ')' at line 10 in state 236, goto 235
Reduce #1 to parameterlist by token ')' at line 10 in state 235, call paramdeflist, goto 234
Shift token ')' at line 10 in state 234, goto 343
Shift token '{' at line 11 in state 343, goto 378
Shift token IDENT = "free" at line 12 in state 378, goto 95
Reduce #1 to expression by token '(' at line 12 in state 95, call variable, goto 92
Shift token '(' at line 12 in state 92, goto 173
Shift token IDENT = "ptr" at line 12 in state 173, goto 95
Reduce #1 to expression by token ')' at line 12 in state 95, call variable, goto 229
Reduce #1 to expressionlist by token ')' at line 12 in state 229, goto 293
Shift token ')' at line 12 in state 293, goto 368
Reduce #4 to expression by token ';' at line 12 in state 368, call operator "()", goto 92
Shift token ';' at line 12 in state 92, goto 174
Reduce #2 to statement by token '}' at line 13 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 13 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 13 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 13 in state 90, call codeblock, goto 409
Shift token '}' at line 13 in state 409, goto 430
Reduce #6 to callablebody by token "struct" at line 15 in state 430, call callablebody, goto 124
Reduce #4 to functiondefinition by token "struct" at line 15 in state 124, call procdef {const=false}, goto 16
Reduce #1 to free_definition by token "struct" at line 15 in state 16, call definition 1, goto 6
Shift token "struct" at line 15 in state 6, goto 22
Shift token IDENT = "Tree" at line 15 in state 22, goto 48
Shift token '{' at line 16 in state 48, goto 77
Shift token "struct" at line 17 in state 77, goto 22
Shift token IDENT = "Data" at line 17 in state 22, goto 48
Shift token '{' at line 18 in state 48, goto 77
Shift token IDENT = "int" at line 19 in state 77, goto 18
Reduce #1 to typename by token IDENT = "val" at line 19 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "val" at line 19 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "val" at line 19 in state 8, call typespec "", goto 9
Shift token IDENT = "val" at line 19 in state 9, goto 37
Reduce #2 to variabledefinition by token ';' at line 19 in state 37, call vardef, goto 148
Shift token ';' at line 19 in state 148, goto 249
Reduce #2 to instruct_definition by token '}' at line 20 in state 249, call definition 1, goto 145
Reduce #0 to instruct_definitionlist by token '}' at line 20 in state 145, goto 247
Reduce #2 to instruct_definitionlist by token '}' at line 20 in state 247, goto 144
Shift token '}' at line 20 in state 144, goto 246
Reduce #5 to structdefinition by token IDENT = "Data" at line 21 in state 246, call structdef, goto 147
Reduce #1 to instruct_definition by token IDENT = "Data" at line 21 in state 147, call definition 1, goto 145
Shift token IDENT = "Data" at line 21 in state 145, goto 18
Reduce #1 to typename by token IDENT = "data" at line 21 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "data" at line 21 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "data" at line 21 in state 8, call typespec "", goto 9
Shift token IDENT = "data" at line 21 in state 9, goto 37
Reduce #2 to variabledefinition by token ';' at line 21 in state 37, call vardef, goto 148
Shift token ';' at line 21 in state 148, goto 249
Reduce #2 to instruct_definition by token IDENT = "Tree" at line 22 in state 249, call definition 1, goto 145
Shift token IDENT = "Tree" at line 22 in state 145, goto 18
Reduce #1 to typename by token '^' at line 22 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 22 in state 7, goto 8
Shift token '^' at line 22 in state 8, goto 36
Reduce #2 to typespec by token IDENT = "left" at line 22 in state 36, call typespec "^", goto 9
Shift token IDENT = "left" at line 22 in state 9, goto 37
Reduce #2 to variabledefinition by token ';' at line 22 in state 37, call vardef, goto 148
Shift token ';' at line 22 in state 148, goto 249
Reduce #2 to instruct_definition by token IDENT = "Tree" at line 23 in state 249, call definition 1, goto 145
Shift token IDENT = "Tree" at line 23 in state 145, goto 18
Reduce #1 to typename by token '^' at line 23 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 23 in state 7, goto 8
Shift token '^' at line 23 in state 8, goto 36
Reduce #2 to typespec by token IDENT = "right" at line 23 in state 36, call typespec "^", goto 9
Shift token IDENT = "right" at line 23 in state 9, goto 37
Reduce #2 to variabledefinition by token ';' at line 23 in state 37, call vardef, goto 148
Shift token ';' at line 23 in state 148, goto 249
Reduce #2 to instruct_definition by token '}' at line 24 in state 249, call definition 1, goto 145
Reduce #0 to instruct_definitionlist by token '}' at line 24 in state 145, goto 247
Reduce #2 to instruct_definitionlist by token '}' at line 24 in state 247, goto 247
Reduce #2 to instruct_definitionlist by token '}' at line 24 in state 247, goto 247
Reduce #2 to instruct_definitionlist by token '}' at line 24 in state 247, goto 247
Reduce #2 to instruct_definitionlist by token '}' at line 24 in state 247, goto 144
Shift token '}' at line 24 in state 144, goto 246
Reduce #5 to structdefinition by token IDENT = "Tree" at line 26 in state 246, call structdef, goto 11
Reduce #1 to free_definition by token IDENT = "Tree" at line 26 in state 11, call definition 1, goto 6
Shift token IDENT = "Tree" at line 26 in state 6, goto 18
Reduce #1 to typename by token IDENT = "g_tree" at line 26 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "g_tree" at line 26 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "g_tree" at line 26 in state 8, call typespec "", goto 9
Shift token IDENT = "g_tree" at line 26 in state 9, goto 37
Reduce #2 to variabledefinition by token ';' at line 26 in state 37, call vardef, goto 17
Shift token ';' at line 26 in state 17, goto 41
Reduce #2 to free_definition by token "private" at line 28 in state 41, call definition 1, goto 6
Shift token "private" at line 28 in state 6, goto 27
Reduce #1 to linkage by token "procedure" at line 28 in state 27, call linkage {private=true,linkage="internal"}, goto 15
Shift token "procedure" at line 28 in state 15, goto 40
Shift token IDENT = "printTree" at line 28 in state 40, goto 67
Shift token '(' at line 28 in state 67, goto 126
Shift token "const" at line 28 in state 126, goto 19
Shift token IDENT = "Tree" at line 28 in state 19, goto 18
Reduce #1 to typename by token '^' at line 28 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 28 in state 7, goto 43
Shift token '^' at line 28 in state 43, goto 70
Reduce #3 to typespec by token IDENT = "node" at line 28 in state 70, call typespec "const^", goto 233
Shift token IDENT = "node" at line 28 in state 233, goto 342
Reduce #2 to paramdecl by token ',' at line 28 in state 342, call paramdef, goto 236
Shift token ',' at line 28 in state 236, goto 344
Shift token IDENT = "int" at line 28 in state 344, goto 18
Reduce #1 to typename by token IDENT = "indent" at line 28 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "indent" at line 28 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "indent" at line 28 in state 8, call typespec "", goto 233
Shift token IDENT = "indent" at line 28 in state 233, goto 342
Reduce #2 to paramdecl by token ')' at line 28 in state 342, call paramdef, goto 236
Reduce #1 to parameters by token ')' at line 28 in state 236, goto 379
Reduce #3 to parameters by token ')' at line 28 in state 379, goto 235
Reduce #1 to parameterlist by token ')' at line 28 in state 235, call paramdeflist, goto 234
Shift token ')' at line 28 in state 234, goto 343
Shift token '{' at line 29 in state 343, goto 378
Shift token "var" at line 30 in state 378, goto 109
Shift token IDENT = "int" at line 30 in state 109, goto 18
Reduce #1 to typename by token IDENT = "ii" at line 30 in state 18, goto 7
Reduce #1 to generic_typename by token IDENT = "ii" at line 30 in state 7, goto 8
Reduce #1 to typespec by token IDENT = "ii" at line 30 in state 8, call typespec "", goto 9
Shift token IDENT = "ii" at line 30 in state 9, goto 37
Shift token '=' at line 30 in state 37, goto 64
Shift token CARDINAL = "0" at line 30 in state 64, goto 98
Reduce #1 to expression by token ';' at line 30 in state 98, call constant "constexpr uint", goto 120
Reduce #4 to variabledefinition by token ';' at line 30 in state 120, call vardef_assign, goto 220
Shift token ';' at line 30 in state 220, goto 333
Reduce #3 to statement by token "while" at line 31 in state 333, call definition, goto 91
Shift token "while" at line 31 in state 91, goto 113
Shift token '(' at line 31 in state 113, goto 224
Shift token IDENT = "ii" at line 31 in state 224, goto 95
Reduce #1 to expression by token '<' at line 31 in state 95, call variable, goto 337
Shift token '<' at line 31 in state 337, goto 175
Shift token IDENT = "indent" at line 31 in state 175, goto 95
Reduce #1 to expression by token ')' at line 31 in state 95, call variable, goto 295
Reduce #3 to expression by token ')' at line 31 in state 295, call operator "<", goto 337
Shift token ')' at line 31 in state 337, goto 372
Shift token '{' at line 32 in state 372, goto 404
Shift token IDENT = "putchar" at line 33 in state 404, goto 95
Reduce #1 to expression by token '(' at line 33 in state 95, call variable, goto 92
Shift token '(' at line 33 in state 92, goto 173
Shift token SQSTRING = " " at line 33 in state 173, goto 97
Reduce #1 to expression by token ')' at line 33 in state 97, call char_constant "constexpr float", goto 229
Reduce #1 to expressionlist by token ')' at line 33 in state 229, goto 293
Shift token ')' at line 33 in state 293, goto 368
Reduce #4 to expression by token ';' at line 33 in state 368, call operator "()", goto 92
Shift token ';' at line 33 in state 92, goto 174
Reduce #2 to statement by token IDENT = "ii" at line 34 in state 174, call free_expression, goto 91
Shift token IDENT = "ii" at line 34 in state 91, goto 95
Reduce #1 to expression by token "+=" at line 34 in state 95, call variable, goto 92
Shift token "+=" at line 34 in state 92, goto 196
Shift token CARDINAL = "1" at line 34 in state 196, goto 98
Reduce #1 to expression by token ';' at line 34 in state 98, call constant "constexpr uint", goto 316
Reduce #3 to expression by token ';' at line 34 in state 316, call assign_operator "+", goto 92
Shift token ';' at line 34 in state 92, goto 174
Reduce #2 to statement by token '}' at line 35 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 35 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 35 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 35 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 35 in state 90, call codeblock, goto 426
Shift token '}' at line 35 in state 426, goto 444
Reduce #7 to statement by token IDENT = "printf" at line 36 in state 444, call conditional_while, goto 91
Shift token IDENT = "printf" at line 36 in state 91, goto 95
Reduce #1 to expression by token '(' at line 36 in state 95, call variable, goto 92
Shift token '(' at line 36 in state 92, goto 173
Shift token DQSTRING = "Node: %d\n" at line 36 in state 173, goto 96
Reduce #1 to expression by token ',' at line 36 in state 96, call string_constant "constexpr float", goto 229
Shift token ',' at line 36 in state 229, goto 331
Shift token IDENT = "node" at line 36 in state 331, goto 95
Reduce #1 to expression by token "->" at line 36 in state 95, call variable, goto 229
Shift token "->" at line 36 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "data" at line 36 in state 179, call count, goto 172
Shift token IDENT = "data" at line 36 in state 172, goto 292
Reduce #3 to iexpression by token '.' at line 36 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token '.' at line 36 in state 93, goto 229
Shift token '.' at line 36 in state 229, goto 208
Shift token IDENT = "val" at line 36 in state 208, goto 328
Reduce #3 to expression by token ')' at line 36 in state 328, call member, goto 229
Reduce #1 to expressionlist by token ')' at line 36 in state 229, goto 370
Reduce #3 to expressionlist by token ')' at line 36 in state 370, goto 293
Shift token ')' at line 36 in state 293, goto 368
Reduce #4 to expression by token ';' at line 36 in state 368, call operator "()", goto 92
Shift token ';' at line 36 in state 92, goto 174
Reduce #2 to statement by token "if" at line 37 in state 174, call free_expression, goto 91
Shift token "if" at line 37 in state 91, goto 112
Shift token '(' at line 37 in state 112, goto 223
Shift token IDENT = "node" at line 37 in state 223, goto 95
Reduce #1 to expression by token "->" at line 37 in state 95, call variable, goto 336
Shift token "->" at line 37 in state 336, goto 179
Reduce #1 to indirection by token IDENT = "left" at line 37 in state 179, call count, goto 172
Shift token IDENT = "left" at line 37 in state 172, goto 292
Reduce #3 to iexpression by token "!=" at line 37 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token "!=" at line 37 in state 93, goto 336
Shift token "!=" at line 37 in state 336, goto 193
Shift token "null" at line 37 in state 193, goto 117
Reduce #1 to expression by token ')' at line 37 in state 117, call null "constexpr float", goto 313
Reduce #3 to expression by token ')' at line 37 in state 313, call operator "!=", goto 336
Shift token ')' at line 37 in state 336, goto 371
Shift token '{' at line 37 in state 371, goto 403
Shift token IDENT = "printTree" at line 37 in state 403, goto 95
Reduce #1 to expression by token '(' at line 37 in state 95, call variable, goto 92
Shift token '(' at line 37 in state 92, goto 173
Shift token IDENT = "node" at line 37 in state 173, goto 95
Reduce #1 to expression by token "->" at line 37 in state 95, call variable, goto 229
Shift token "->" at line 37 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "left" at line 37 in state 179, call count, goto 172
Shift token IDENT = "left" at line 37 in state 172, goto 292
Reduce #3 to iexpression by token ',' at line 37 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token ',' at line 37 in state 93, goto 229
Shift token ',' at line 37 in state 229, goto 331
Shift token IDENT = "indent" at line 37 in state 331, goto 95
Reduce #1 to expression by token '+' at line 37 in state 95, call variable, goto 229
Shift token '+' at line 37 in state 229, goto 181
Shift token CARDINAL = "1" at line 37 in state 181, goto 98
Reduce #1 to expression by token ')' at line 37 in state 98, call constant "constexpr uint", goto 301
Reduce #3 to expression by token ')' at line 37 in state 301, call operator "+", goto 229
Reduce #1 to expressionlist by token ')' at line 37 in state 229, goto 370
Reduce #3 to expressionlist by token ')' at line 37 in state 370, goto 293
Shift token ')' at line 37 in state 293, goto 368
Reduce #4 to expression by token ';' at line 37 in state 368, call operator "()", goto 92
Shift token ';' at line 37 in state 92, goto 174
Reduce #2 to statement by token '}' at line 37 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 37 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 37 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 37 in state 90, call codeblock, goto 425
Shift token '}' at line 37 in state 425, goto 443
Reduce #7 to statement by token "if" at line 38 in state 443, call conditional_if, goto 91
Shift token "if" at line 38 in state 91, goto 112
Shift token '(' at line 38 in state 112, goto 223
Shift token IDENT = "node" at line 38 in state 223, goto 95
Reduce #1 to expression by token "->" at line 38 in state 95, call variable, goto 336
Shift token "->" at line 38 in state 336, goto 179
Reduce #1 to indirection by token IDENT = "right" at line 38 in state 179, call count, goto 172
Shift token IDENT = "right" at line 38 in state 172, goto 292
Reduce #3 to iexpression by token "!=" at line 38 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token "!=" at line 38 in state 93, goto 336
Shift token "!=" at line 38 in state 336, goto 193
Shift token "null" at line 38 in state 193, goto 117
Reduce #1 to expression by token ')' at line 38 in state 117, call null "constexpr float", goto 313
Reduce #3 to expression by token ')' at line 38 in state 313, call operator "!=", goto 336
Shift token ')' at line 38 in state 336, goto 371
Shift token '{' at line 38 in state 371, goto 403
Shift token IDENT = "printTree" at line 38 in state 403, goto 95
Reduce #1 to expression by token '(' at line 38 in state 95, call variable, goto 92
Shift token '(' at line 38 in state 92, goto 173
Shift token IDENT = "node" at line 38 in state 173, goto 95
Reduce #1 to expression by token "->" at line 38 in state 95, call variable, goto 229
Shift token "->" at line 38 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "right" at line 38 in state 179, call count, goto 172
Shift token IDENT = "right" at line 38 in state 172, goto 292
Reduce #3 to iexpression by token ',' at line 38 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token ',' at line 38 in state 93, goto 229
Shift token ',' at line 38 in state 229, goto 331
Shift token IDENT = "indent" at line 38 in state 331, goto 95
Reduce #1 to expression by token '+' at line 38 in state 95, call variable, goto 229
Shift token '+' at line 38 in state 229, goto 181
Shift token CARDINAL = "1" at line 38 in state 181, goto 98
Reduce #1 to expression by token ')' at line 38 in state 98, call constant "constexpr uint", goto 301
Reduce #3 to expression by token ')' at line 38 in state 301, call operator "+", goto 229
Reduce #1 to expressionlist by token ')' at line 38 in state 229, goto 370
Reduce #3 to expressionlist by token ')' at line 38 in state 370, goto 293
Shift token ')' at line 38 in state 293, goto 368
Reduce #4 to expression by token ';' at line 38 in state 368, call operator "()", goto 92
Shift token ';' at line 38 in state 92, goto 174
Reduce #2 to statement by token '}' at line 38 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 38 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 38 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 38 in state 90, call codeblock, goto 425
Shift token '}' at line 38 in state 425, goto 443
Reduce #7 to statement by token '}' at line 39 in state 443, call conditional_if, goto 91
Reduce #0 to statementlist by token '}' at line 39 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 39 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 39 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 39 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 39 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 39 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 39 in state 90, call codeblock, goto 409
Shift token '}' at line 39 in state 409, goto 430
Reduce #6 to callablebody by token "private" at line 41 in state 430, call callablebody, goto 124
Reduce #4 to functiondefinition by token "private" at line 41 in state 124, call procdef {const=false}, goto 16
Reduce #1 to free_definition by token "private" at line 41 in state 16, call definition 1, goto 6
Shift token "private" at line 41 in state 6, goto 27
Reduce #1 to linkage by token "procedure" at line 41 in state 27, call linkage {private=true,linkage="internal"}, goto 15
Shift token "procedure" at line 41 in state 15, goto 40
Shift token IDENT = "deleteTree" at line 41 in state 40, goto 67
Shift token '(' at line 41 in state 67, goto 126
Shift token IDENT = "Tree" at line 41 in state 126, goto 18
Reduce #1 to typename by token '^' at line 41 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 41 in state 7, goto 8
Shift token '^' at line 41 in state 8, goto 36
Reduce #2 to typespec by token IDENT = "node" at line 41 in state 36, call typespec "^", goto 233
Shift token IDENT = "node" at line 41 in state 233, goto 342
Reduce #2 to paramdecl by token ')' at line 41 in state 342, call paramdef, goto 236
Reduce #1 to parameters by token ')' at line 41 in state 236, goto 235
Reduce #1 to parameterlist by token ')' at line 41 in state 235, call paramdeflist, goto 234
Shift token ')' at line 41 in state 234, goto 343
Shift token '{' at line 42 in state 343, goto 378
Shift token "if" at line 43 in state 378, goto 112
Shift token '(' at line 43 in state 112, goto 223
Shift token IDENT = "node" at line 43 in state 223, goto 95
Reduce #1 to expression by token "->" at line 43 in state 95, call variable, goto 336
Shift token "->" at line 43 in state 336, goto 179
Reduce #1 to indirection by token IDENT = "left" at line 43 in state 179, call count, goto 172
Shift token IDENT = "left" at line 43 in state 172, goto 292
Reduce #3 to iexpression by token "!=" at line 43 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token "!=" at line 43 in state 93, goto 336
Shift token "!=" at line 43 in state 336, goto 193
Shift token "null" at line 43 in state 193, goto 117
Reduce #1 to expression by token ')' at line 43 in state 117, call null "constexpr float", goto 313
Reduce #3 to expression by token ')' at line 43 in state 313, call operator "!=", goto 336
Shift token ')' at line 43 in state 336, goto 371
Shift token '{' at line 43 in state 371, goto 403
Shift token IDENT = "deleteTree" at line 43 in state 403, goto 95
Reduce #1 to expression by token '(' at line 43 in state 95, call variable, goto 92
Shift token '(' at line 43 in state 92, goto 173
Shift token IDENT = "node" at line 43 in state 173, goto 95
Reduce #1 to expression by token "->" at line 43 in state 95, call variable, goto 229
Shift token "->" at line 43 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "left" at line 43 in state 179, call count, goto 172
Shift token IDENT = "left" at line 43 in state 172, goto 292
Reduce #3 to iexpression by token ')' at line 43 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token ')' at line 43 in state 93, goto 229
Reduce #1 to expressionlist by token ')' at line 43 in state 229, goto 293
Shift token ')' at line 43 in state 293, goto 368
Reduce #4 to expression by token ';' at line 43 in state 368, call operator "()", goto 92
Shift token ';' at line 43 in state 92, goto 174
Reduce #2 to statement by token '}' at line 43 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 43 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 43 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 43 in state 90, call codeblock, goto 425
Shift token '}' at line 43 in state 425, goto 443
Reduce #7 to statement by token "if" at line 44 in state 443, call conditional_if, goto 91
Shift token "if" at line 44 in state 91, goto 112
Shift token '(' at line 44 in state 112, goto 223
Shift token IDENT = "node" at line 44 in state 223, goto 95
Reduce #1 to expression by token "->" at line 44 in state 95, call variable, goto 336
Shift token "->" at line 44 in state 336, goto 179
Reduce #1 to indirection by token IDENT = "right" at line 44 in state 179, call count, goto 172
Shift token IDENT = "right" at line 44 in state 172, goto 292
Reduce #3 to iexpression by token "!=" at line 44 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token "!=" at line 44 in state 93, goto 336
Shift token "!=" at line 44 in state 336, goto 193
Shift token "null" at line 44 in state 193, goto 117
Reduce #1 to expression by token ')' at line 44 in state 117, call null "constexpr float", goto 313
Reduce #3 to expression by token ')' at line 44 in state 313, call operator "!=", goto 336
Shift token ')' at line 44 in state 336, goto 371
Shift token '{' at line 44 in state 371, goto 403
Shift token IDENT = "deleteTree" at line 44 in state 403, goto 95
Reduce #1 to expression by token '(' at line 44 in state 95, call variable, goto 92
Shift token '(' at line 44 in state 92, goto 173
Shift token IDENT = "node" at line 44 in state 173, goto 95
Reduce #1 to expression by token "->" at line 44 in state 95, call variable, goto 229
Shift token "->" at line 44 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "right" at line 44 in state 179, call count, goto 172
Shift token IDENT = "right" at line 44 in state 172, goto 292
Reduce #3 to iexpression by token ')' at line 44 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token ')' at line 44 in state 93, goto 229
Reduce #1 to expressionlist by token ')' at line 44 in state 229, goto 293
Shift token ')' at line 44 in state 293, goto 368
Reduce #4 to expression by token ';' at line 44 in state 368, call operator "()", goto 92
Shift token ';' at line 44 in state 92, goto 174
Reduce #2 to statement by token '}' at line 44 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 44 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 44 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 44 in state 90, call codeblock, goto 425
Shift token '}' at line 44 in state 425, goto 443
Reduce #7 to statement by token "delete" at line 45 in state 443, call conditional_if, goto 91
Shift token "delete" at line 45 in state 91, goto 111
Shift token IDENT = "node" at line 45 in state 111, goto 95
Reduce #1 to expression by token ';' at line 45 in state 95, call variable, goto 222
Shift token ';' at line 45 in state 222, goto 335
Reduce #3 to statement by token '}' at line 46 in state 335, call delete, goto 91
Reduce #0 to statementlist by token '}' at line 46 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 46 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 46 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 46 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 46 in state 90, call codeblock, goto 409
Shift token '}' at line 46 in state 409, goto 430
Reduce #6 to callablebody by token "main" at line 48 in state 430, call callablebody, goto 124
Reduce #4 to functiondefinition by token "main" at line 48 in state 124, call procdef {const=false}, goto 16
Reduce #1 to free_definition by token "main" at line 48 in state 16, call definition 1, goto 6
Reduce #0 to free_definitionlist by token "main" at line 48 in state 6, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 33
Reduce #2 to free_definitionlist by token "main" at line 48 in state 33, goto 5
Shift token "main" at line 48 in state 5, goto 32
Shift token '{' at line 49 in state 32, goto 59
Shift token "var" at line 50 in state 59, goto 109
Shift token IDENT = "Tree" at line 50 in state 109, goto 18
Reduce #1 to typename by token '^' at line 50 in state 18, goto 7
Reduce #1 to generic_typename by token '^' at line 50 in state 7, goto 8
Shift token '^' at line 50 in state 8, goto 36
Reduce #2 to typespec by token IDENT = "tree" at line 50 in state 36, call typespec "^", goto 9
Shift token IDENT = "tree" at line 50 in state 9, goto 37
Shift token '=' at line 50 in state 37, goto 64
Shift token "new" at line 50 in state 64, goto 115
Shift token IDENT = "Tree" at line 50 in state 115, goto 18
Reduce #1 to typename by token ':' at line 50 in state 18, goto 7
Reduce #1 to generic_typename by token ':' at line 50 in state 7, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 226
Shift token ':' at line 50 in state 226, goto 339
Shift token '{' at line 50 in state 339, goto 121
Shift token '{' at line 50 in state 121, goto 121
Shift token CARDINAL = "11" at line 50 in state 121, goto 98
Reduce #1 to expression by token '}' at line 50 in state 98, call constant "constexpr uint", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ',' at line 50 in state 332, call structure, goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "new" at line 50 in state 331, goto 115
Shift token IDENT = "Tree" at line 50 in state 115, goto 18
Reduce #1 to typename by token ':' at line 50 in state 18, goto 7
Reduce #1 to generic_typename by token ':' at line 50 in state 7, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 226
Shift token ':' at line 50 in state 226, goto 339
Shift token '{' at line 50 in state 339, goto 121
Shift token '{' at line 50 in state 121, goto 121
Shift token CARDINAL = "1" at line 50 in state 121, goto 98
Reduce #1 to expression by token '}' at line 50 in state 98, call constant "constexpr uint", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ',' at line 50 in state 332, call structure, goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "null" at line 50 in state 331, goto 117
Reduce #1 to expression by token ',' at line 50 in state 117, call null "constexpr float", goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "null" at line 50 in state 331, goto 117
Reduce #1 to expression by token '}' at line 50 in state 117, call null "constexpr float", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ',' at line 50 in state 332, call structure, goto 374
Reduce #4 to expression by token ',' at line 50 in state 374, call allocate, goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "new" at line 50 in state 331, goto 115
Shift token IDENT = "Tree" at line 50 in state 115, goto 18
Reduce #1 to typename by token ':' at line 50 in state 18, goto 7
Reduce #1 to generic_typename by token ':' at line 50 in state 7, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 226
Shift token ':' at line 50 in state 226, goto 339
Shift token '{' at line 50 in state 339, goto 121
Shift token '{' at line 50 in state 121, goto 121
Shift token CARDINAL = "2" at line 50 in state 121, goto 98
Reduce #1 to expression by token '}' at line 50 in state 98, call constant "constexpr uint", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ',' at line 50 in state 332, call structure, goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "null" at line 50 in state 331, goto 117
Reduce #1 to expression by token ',' at line 50 in state 117, call null "constexpr float", goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "new" at line 50 in state 331, goto 115
Shift token IDENT = "Tree" at line 50 in state 115, goto 18
Reduce #1 to typename by token ':' at line 50 in state 18, goto 7
Reduce #1 to generic_typename by token ':' at line 50 in state 7, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 226
Shift token ':' at line 50 in state 226, goto 339
Shift token '{' at line 50 in state 339, goto 121
Shift token '{' at line 50 in state 121, goto 121
Shift token CARDINAL = "22" at line 50 in state 121, goto 98
Reduce #1 to expression by token '}' at line 50 in state 98, call constant "constexpr uint", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ',' at line 50 in state 332, call structure, goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "null" at line 50 in state 331, goto 117
Reduce #1 to expression by token ',' at line 50 in state 117, call null "constexpr float", goto 229
Shift token ',' at line 50 in state 229, goto 331
Shift token "null" at line 50 in state 331, goto 117
Reduce #1 to expression by token '}' at line 50 in state 117, call null "constexpr float", goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token '}' at line 50 in state 332, call structure, goto 374
Reduce #4 to expression by token '}' at line 50 in state 374, call allocate, goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token '}' at line 50 in state 332, call structure, goto 374
Reduce #4 to expression by token '}' at line 50 in state 374, call allocate, goto 229
Reduce #1 to expressionlist by token '}' at line 50 in state 229, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 370
Reduce #3 to expressionlist by token '}' at line 50 in state 370, goto 213
Shift token '}' at line 50 in state 213, goto 332
Reduce #3 to expression by token ';' at line 50 in state 332, call structure, goto 374
Reduce #4 to expression by token ';' at line 50 in state 374, call allocate, goto 120
Reduce #4 to variabledefinition by token ';' at line 50 in state 120, call vardef_assign, goto 220
Shift token ';' at line 50 in state 220, goto 333
Reduce #3 to statement by token IDENT = "printf" at line 51 in state 333, call definition, goto 91
Shift token IDENT = "printf" at line 51 in state 91, goto 95
Reduce #1 to expression by token '(' at line 51 in state 95, call variable, goto 92
Shift token '(' at line 51 in state 92, goto 173
Shift token DQSTRING = "VAL %d\n" at line 51 in state 173, goto 96
Reduce #1 to expression by token ',' at line 51 in state 96, call string_constant "constexpr float", goto 229
Shift token ',' at line 51 in state 229, goto 331
Shift token IDENT = "tree" at line 51 in state 331, goto 95
Reduce #1 to expression by token "->" at line 51 in state 95, call variable, goto 229
Shift token "->" at line 51 in state 229, goto 179
Reduce #1 to indirection by token IDENT = "data" at line 51 in state 179, call count, goto 172
Shift token IDENT = "data" at line 51 in state 172, goto 292
Reduce #3 to iexpression by token '.' at line 51 in state 292, call rep_operator "->", goto 93
Reduce #1 to expression by token '.' at line 51 in state 93, goto 229
Shift token '.' at line 51 in state 229, goto 208
Shift token IDENT = "val" at line 51 in state 208, goto 328
Reduce #3 to expression by token ')' at line 51 in state 328, call member, goto 229
Reduce #1 to expressionlist by token ')' at line 51 in state 229, goto 370
Reduce #3 to expressionlist by token ')' at line 51 in state 370, goto 293
Shift token ')' at line 51 in state 293, goto 368
Reduce #4 to expression by token ';' at line 51 in state 368, call operator "()", goto 92
Shift token ';' at line 51 in state 92, goto 174
Reduce #2 to statement by token IDENT = "printTree" at line 52 in state 174, call free_expression, goto 91
Shift token IDENT = "printTree" at line 52 in state 91, goto 95
Reduce #1 to expression by token '(' at line 52 in state 95, call variable, goto 92
Shift token '(' at line 52 in state 92, goto 173
Shift token IDENT = "tree" at line 52 in state 173, goto 95
Reduce #1 to expression by token ',' at line 52 in state 95, call variable, goto 229
Shift token ',' at line 52 in state 229, goto 331
Shift token CARDINAL = "0" at line 52 in state 331, goto 98
Reduce #1 to expression by token ')' at line 52 in state 98, call constant "constexpr uint", goto 229
Reduce #1 to expressionlist by token ')' at line 52 in state 229, goto 370
Reduce #3 to expressionlist by token ')' at line 52 in state 370, goto 293
Shift token ')' at line 52 in state 293, goto 368
Reduce #4 to expression by token ';' at line 52 in state 368, call operator "()", goto 92
Shift token ';' at line 52 in state 92, goto 174
Reduce #2 to statement by token IDENT = "deleteTree" at line 53 in state 174, call free_expression, goto 91
Shift token IDENT = "deleteTree" at line 53 in state 91, goto 95
Reduce #1 to expression by token '(' at line 53 in state 95, call variable, goto 92
Shift token '(' at line 53 in state 92, goto 173
Shift token IDENT = "tree" at line 53 in state 173, goto 95
Reduce #1 to expression by token ')' at line 53 in state 95, call variable, goto 229
Reduce #1 to expressionlist by token ')' at line 53 in state 229, goto 293
Shift token ')' at line 53 in state 293, goto 368
Reduce #4 to expression by token ';' at line 53 in state 368, call operator "()", goto 92
Shift token ';' at line 53 in state 92, goto 174
Reduce #2 to statement by token IDENT = "printf" at line 54 in state 174, call free_expression, goto 91
Shift token IDENT = "printf" at line 54 in state 91, goto 95
Reduce #1 to expression by token '(' at line 54 in state 95, call variable, goto 92
Shift token '(' at line 54 in state 92, goto 173
Shift token DQSTRING = "Done\n" at line 54 in state 173, goto 96
Reduce #1 to expression by token ')' at line 54 in state 96, call string_constant "constexpr float", goto 229
Reduce #1 to expressionlist by token ')' at line 54 in state 229, goto 293
Shift token ')' at line 54 in state 293, goto 368
Reduce #4 to expression by token ';' at line 54 in state 368, call operator "()", goto 92
Shift token ';' at line 54 in state 92, goto 174
Reduce #2 to statement by token '}' at line 55 in state 174, call free_expression, goto 91
Reduce #0 to statementlist by token '}' at line 55 in state 91, goto 171
Reduce #2 to statementlist by token '}' at line 55 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 55 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 55 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 55 in state 171, goto 171
Reduce #2 to statementlist by token '}' at line 55 in state 171, goto 90
Reduce #1 to codeblock by token '}' at line 55 in state 90, call codeblock, goto 89
Shift token '}' at line 55 in state 89, goto 170
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 1,
          name = "DQSTRING",
          value = "C"},
        {
          line = 1,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 1,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec const^",
                    obj = "const^",
                    proc = <function>},
                  line = 1,
                  step = 0},
                {
                  line = 1,
                  name = "IDENT",
                  value = "fmt"}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 1,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 1,
          step = 0}},
      call = {
        name = "extern_procdef_vararg",
        proc = <function>},
      line = 1,
      step = 0},
    {
      arg = {
        {
          line = 2,
          name = "DQSTRING",
          value = "C"},
        {
          line = 2,
          name = "IDENT",
          value = "putchar"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 2,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec const ",
                    obj = "const ",
                    proc = <function>},
                  line = 2,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 2,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 2,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 2,
      step = 0},
    {
      arg = {
        {
          line = 3,
          name = "DQSTRING",
          value = "C"},
        {
          line = 3,
          name = "IDENT",
          value = "malloc"},
        {
          arg = {
            {
              line = 3,
              name = "IDENT",
              value = "byte"}},
          call = {
            name = "typespec ^",
            obj = "^",
            proc = <function>},
          line = 3,
          step = 0},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 3,
                      name = "IDENT",
                      value = "long"}},
                  call = {
                    name = "typespec ",
                    obj = "",
                    proc = <function>},
                  line = 3,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 3,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 3,
          step = 0}},
      call = {
        name = "extern_funcdef",
        proc = <function>},
      line = 3,
      step = 0},
    {
      arg = {
        {
          line = 4,
          name = "DQSTRING",
          value = "C"},
        {
          line = 4,
          name = "IDENT",
          value = "free"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 4,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec ^",
                    obj = "^",
                    proc = <function>},
                  line = 4,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 4,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 4,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 4,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 4,
              step = 0},
            {
              line = 6,
              name = "IDENT",
              value = "allocmem"},
            {
              arg = {
                {
                  line = 6,
                  name = "IDENT",
                  value = "byte"}},
              call = {
                name = "typespec ^",
                obj = "^",
                proc = <function>},
              line = 6,
              step = 0},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 6,
                              name = "IDENT",
                              value = "long"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 6,
                          step = 0},
                        {
                          line = 6,
                          name = "IDENT",
                          value = "bytes"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 6,
                      step = 0}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 6,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 8,
                                  name = "IDENT",
                                  value = "malloc"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 8,
                              step = 0},
                            {
                              arg = {
                                {
                                  line = 8,
                                  name = "IDENT",
                                  value = "bytes"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 8,
                              step = 0}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 8,
                          step = 0}},
                      call = {
                        name = "return_value",
                        proc = <function>},
                      line = 8,
                      step = 1}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 8,
                  step = 1}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 8,
              scope = {
                0,
                2}}},
          call = {
            name = "funcdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 8,
          step = 2}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 8,
      step = 2},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 8,
              step = 2},
            {
              line = 10,
              name = "IDENT",
              value = "freemem"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 10,
                              name = "IDENT",
                              value = "byte"}},
                          call = {
                            name = "typespec ^",
                            obj = "^",
                            proc = <function>},
                          line = 10,
                          step = 2},
                        {
                          line = 10,
                          name = "IDENT",
                          value = "ptr"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 10,
                      step = 2}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 10,
                  step = 2},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "free"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 12,
                              step = 2},
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "ptr"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 12,
                              step = 2}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 12,
                          step = 2}},
                      call = {
                        name = "free_expression",
                        proc = <function>},
                      line = 12,
                      step = 2}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 12,
                  step = 2}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 12,
              scope = {
                2,
                3}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 12,
          step = 3}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 12,
      step = 3},
    {
      arg = {
        {
          arg = {
            {
              line = 15,
              name = "IDENT",
              value = "Tree"},
            {
              arg = {
                {
                  arg = {
                    {
                      line = 17,
                      name = "IDENT",
                      value = "Data"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 19,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 19,
                              step = 3},
                            {
                              line = 19,
                              name = "IDENT",
                              value = "val"}},
                          call = {
                            name = "vardef",
                            proc = <function>},
                          line = 19,
                          step = 4}},
                      call = {
                        name = "definition 1",
                        obj = 1,
                        proc = <function>},
                      line = 19,
                      step = 4}},
                  call = {
                    name = "structdef",
                    proc = <function>},
                  line = 19,
                  step = 5}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 19,
              step = 5},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 21,
                          name = "IDENT",
                          value = "Data"}},
                      call = {
                        name = "typespec ",
                        obj = "",
                        proc = <function>},
                      line = 21,
                      step = 5},
                    {
                      line = 21,
                      name = "IDENT",
                      value = "data"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 21,
                  step = 6}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 21,
              step = 6},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 22,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 22,
                      step = 6},
                    {
                      line = 22,
                      name = "IDENT",
                      value = "left"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 22,
                  step = 7}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 22,
              step = 7},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 23,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 23,
                      step = 7},
                    {
                      line = 23,
                      name = "IDENT",
                      value = "right"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 23,
                  step = 8}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 23,
              step = 8}},
          call = {
            name = "structdef",
            proc = <function>},
          line = 23,
          step = 9}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 23,
      step = 9},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  line = 26,
                  name = "IDENT",
                  value = "Tree"}},
              call = {
                name = "typespec ",
                obj = "",
                proc = <function>},
              line = 26,
              step = 9},
            {
              line = 26,
              name = "IDENT",
              value = "g_tree"}},
          call = {
            name = "vardef",
            proc = <function>},
          line = 26,
          step = 10}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 26,
      step = 10},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 26,
              step = 10},
            {
              line = 28,
              name = "IDENT",
              value = "printTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 28,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec const^",
                            obj = "const^",
                            proc = <function>},
                          line = 28,
                          step = 10},
                        {
                          line = 28,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 28,
                      step = 10},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 28,
                              name = "IDENT",
                              value = "int"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 28,
                          step = 10},
                        {
                          line = 28,
                          name = "IDENT",
                          value = "indent"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 28,
                      step = 10}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 28,
                  step = 10},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 30,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 30,
                              step = 10},
                            {
                              line = 30,
                              name = "IDENT",
                              value = "ii"},
                            {
                              arg = {
                                {
                                  line = 30,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 30,
                              step = 10}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 30,
                          step = 11}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 30,
                      step = 11},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 31,
                                  name = "IDENT",
                                  value = "ii"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 31,
                              step = 11},
                            {
                              arg = {
                                {
                                  line = 31,
                                  name = "IDENT",
                                  value = "indent"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 31,
                              step = 11}},
                          call = {
                            name = "operator <",
                            obj = "<",
                            proc = <function>},
                          line = 31,
                          step = 11},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 33,
                                          name = "IDENT",
                                          value = "putchar"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 33,
                                      step = 11},
                                    {
                                      arg = {
                                        {
                                          line = 33,
                                          name = "SQSTRING",
                                          value = " "}},
                                      call = {
                                        name = "char_constant constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 33,
                                      step = 11}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 33,
                                  step = 11}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 33,
                              step = 11},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 34,
                                          name = "IDENT",
                                          value = "ii"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 34,
                                      step = 11},
                                    {
                                      arg = {
                                        {
                                          line = 34,
                                          name = "CARDINAL",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 34,
                                      step = 11}},
                                  call = {
                                    name = "assign_operator +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 34,
                                  step = 11}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 34,
                              step = 11}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 34,
                          step = 11}},
                      call = {
                        name = "conditional_while",
                        proc = <function>},
                      line = 34,
                      scope = {
                        11,
                        12}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 36,
                                  name = "IDENT",
                                  value = "printf"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 36,
                              step = 12},
                            {
                              arg = {
                                {
                                  line = 36,
                                  name = "DQSTRING",
                                  value = "Node: %d\\n"}},
                              call = {
                                name = "string_constant constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 36,
                              step = 12},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 36,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 36,
                                      step = 12},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 36,
                                      step = 12},
                                    {
                                      line = 36,
                                      name = "IDENT",
                                      value = "data"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 36,
                                  step = 12},
                                {
                                  line = 36,
                                  name = "IDENT",
                                  value = "val"}},
                              call = {
                                name = "member",
                                proc = <function>},
                              line = 36,
                              step = 12}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 36,
                          step = 12}},
                      call = {
                        name = "free_expression",
                        proc = <function>},
                      line = 36,
                      step = 12},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 37,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 37,
                                  step = 12},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 37,
                                  step = 12},
                                {
                                  line = 37,
                                  name = "IDENT",
                                  value = "left"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 37,
                              step = 12},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 37,
                              step = 12}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 37,
                          step = 12},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 37,
                                          name = "IDENT",
                                          value = "printTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 37,
                                      step = 12},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          line = 37,
                                          name = "IDENT",
                                          value = "left"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 37,
                                      step = 12},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "IDENT",
                                              value = "indent"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 37,
                                          step = 12}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 37,
                                      step = 12}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 37,
                                  step = 12}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 37,
                              step = 12}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 37,
                          step = 12}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 37,
                      scope = {
                        12,
                        13}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 38,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 38,
                                  step = 13},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 38,
                                  step = 13},
                                {
                                  line = 38,
                                  name = "IDENT",
                                  value = "right"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 38,
                              step = 13},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 38,
                              step = 13}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 38,
                          step = 13},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 38,
                                          name = "IDENT",
                                          value = "printTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 38,
                                      step = 13},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          line = 38,
                                          name = "IDENT",
                                          value = "right"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 38,
                                      step = 13},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "IDENT",
                                              value = "indent"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 38,
                                          step = 13}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 38,
                                      step = 13}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 38,
                                  step = 13}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 38,
                              step = 13}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 38,
                          step = 13}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 38,
                      scope = {
                        13,
                        14}}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 38,
                  step = 14}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 38,
              scope = {
                10,
                15}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 38,
          step = 15}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 38,
      step = 15},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 38,
              step = 15},
            {
              line = 41,
              name = "IDENT",
              value = "deleteTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 41,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec ^",
                            obj = "^",
                            proc = <function>},
                          line = 41,
                          step = 15},
                        {
                          line = 41,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 41,
                      step = 15}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 41,
                  step = 15},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 43,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 43,
                                  step = 15},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 43,
                                  step = 15},
                                {
                                  line = 43,
                                  name = "IDENT",
                                  value = "left"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 43,
                              step = 15},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 43,
                              step = 15}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 43,
                          step = 15},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 43,
                                          name = "IDENT",
                                          value = "deleteTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 43,
                                      step = 15},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 43,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 43,
                                          step = 15},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 43,
                                          step = 15},
                                        {
                                          line = 43,
                                          name = "IDENT",
                                          value = "left"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 43,
                                      step = 15}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 43,
                                  step = 15}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 43,
                              step = 15}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 43,
                          step = 15}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 43,
                      scope = {
                        15,
                        16}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 44,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 44,
                                  step = 16},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 44,
                                  step = 16},
                                {
                                  line = 44,
                                  name = "IDENT",
                                  value = "right"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 44,
                              step = 16},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 44,
                              step = 16}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 44,
                          step = 16},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 44,
                                          name = "IDENT",
                                          value = "deleteTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 44,
                                      step = 16},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 44,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 44,
                                          step = 16},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 44,
                                          step = 16},
                                        {
                                          line = 44,
                                          name = "IDENT",
                                          value = "right"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 44,
                                      step = 16}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 44,
                                  step = 16}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 44,
                              step = 16}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 44,
                          step = 16}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 44,
                      scope = {
                        16,
                        17}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 45,
                              name = "IDENT",
                              value = "node"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 45,
                          step = 17}},
                      call = {
                        name = "delete",
                        proc = <function>},
                      line = 45,
                      step = 17}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 45,
                  step = 17}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 45,
              scope = {
                15,
                18}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 45,
          step = 18}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 45,
      step = 18},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 50,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 50,
                      step = 18},
                    {
                      line = 50,
                      name = "IDENT",
                      value = "tree"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 50,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 50,
                          step = 18},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "CARDINAL",
                                      value = "11"}},
                                  call = {
                                    name = "constant constexpr uint",
                                    obj = "constexpr uint",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "structure",
                                proc = <function>},
                              line = 50,
                              step = 18},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typespec ",
                                    obj = "",
                                    proc = <function>},
                                  line = 50,
                                  step = 18},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 50,
                              step = 18},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typespec ",
                                    obj = "",
                                    proc = <function>},
                                  line = 50,
                                  step = 18},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "CARDINAL",
                                              value = "2"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "IDENT",
                                              value = "Tree"}},
                                          call = {
                                            name = "typespec ",
                                            obj = "",
                                            proc = <function>},
                                          line = 50,
                                          step = 18},
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  arg = {
                                                    {
                                                      line = 50,
                                                      name = "CARDINAL",
                                                      value = "22"}},
                                                  call = {
                                                    name = "constant constexpr uint",
                                                    obj = "constexpr uint",
                                                    proc = <function>},
                                                  line = 50,
                                                  step = 18}},
                                              call = {
                                                name = "structure",
                                                proc = <function>},
                                              line = 50,
                                              step = 18},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null constexpr float",
                                                obj = "constexpr float",
                                                proc = <function>},
                                              line = 50,
                                              step = 18},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null constexpr float",
                                                obj = "constexpr float",
                                                proc = <function>},
                                              line = 50,
                                              step = 18}},
                                          call = {
                                            name = "structure",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "allocate",
                                        proc = <function>},
                                      line = 50,
                                      step = 18}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 50,
                              step = 18}},
                          call = {
                            name = "structure",
                            proc = <function>},
                          line = 50,
                          step = 18}},
                      call = {
                        name = "allocate",
                        proc = <function>},
                      line = 50,
                      step = 18}},
                  call = {
                    name = "vardef_assign",
                    proc = <function>},
                  line = 50,
                  step = 19}},
              call = {
                name = "definition",
                proc = <function>},
              line = 50,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 51,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 51,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 51,
                          name = "DQSTRING",
                          value = "VAL %d\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 51,
                      step = 19},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 51,
                                  name = "IDENT",
                                  value = "tree"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 51,
                              step = 19},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 51,
                              step = 19},
                            {
                              line = 51,
                              name = "IDENT",
                              value = "data"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 51,
                          step = 19},
                        {
                          line = 51,
                          name = "IDENT",
                          value = "val"}},
                      call = {
                        name = "member",
                        proc = <function>},
                      line = 51,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 51,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 51,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 52,
                          name = "IDENT",
                          value = "printTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 52,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 52,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 52,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 52,
                          name = "CARDINAL",
                          value = "0"}},
                      call = {
                        name = "constant constexpr uint",
                        obj = "constexpr uint",
                        proc = <function>},
                      line = 52,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 52,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 52,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 53,
                          name = "IDENT",
                          value = "deleteTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 53,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 53,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 53,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 53,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 53,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 54,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 54,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 54,
                          name = "DQSTRING",
                          value = "Done\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 54,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 54,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 54,
              step = 19}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 54,
          step = 19}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 54,
      scope = {
        18,
        20}}},
  call = {
    name = "program",
    proc = <function>},
  line = 54,
  step = 20}
