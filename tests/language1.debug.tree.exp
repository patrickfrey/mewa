Shift token "extern" at line 3 in state XXX, goto XXX
Shift token DQSTRING = "C" at line 3 in state XXX, goto XXX
Shift token "procedure" at line 3 in state XXX, goto XXX
Shift token IDENT = "printf" at line 3 in state XXX, goto XXX
Shift token '(' at line 3 in state XXX, goto XXX
Shift token "const" at line 3 in state XXX, goto XXX
Shift token IDENT = "byte" at line 3 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 3 in state XXX, goto XXX
Reduce #2 to typehdr by token '^' at line 3 in state XXX, call typehdr {const=true}, goto XXX
Reduce #1 to typegen by token '^' at line 3 in state XXX, goto XXX
Shift token '^' at line 3 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "fmt" at line 3 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "fmt" at line 3 in state XXX, call typespec, goto XXX
Shift token IDENT = "fmt" at line 3 in state XXX, goto XXX
Reduce #2 to extern_paramdecl by token "..." at line 3 in state XXX, call extern_paramdef, goto XXX
Reduce #1 to extern_parameters by token "..." at line 3 in state XXX, call extern_paramdef_collect, goto XXX
Reduce #1 to extern_paramlist by token "..." at line 3 in state XXX, call extern_paramdeflist, goto XXX
Shift token "..." at line 3 in state XXX, goto XXX
Shift token ')' at line 3 in state XXX, goto XXX
Shift token ';' at line 3 in state XXX, goto XXX
Reduce #9 to extern_definition by token "extern" at line 4 in state XXX, call extern_procdef_vararg, goto XXX
Shift token "extern" at line 4 in state XXX, goto XXX
Shift token DQSTRING = "C" at line 4 in state XXX, goto XXX
Shift token "procedure" at line 4 in state XXX, goto XXX
Shift token IDENT = "putchar" at line 4 in state XXX, goto XXX
Shift token '(' at line 4 in state XXX, goto XXX
Shift token "const" at line 4 in state XXX, goto XXX
Shift token IDENT = "byte" at line 4 in state XXX, goto XXX
Reduce #1 to typename by token ')' at line 4 in state XXX, goto XXX
Reduce #2 to typehdr by token ')' at line 4 in state XXX, call typehdr {const=true}, goto XXX
Reduce #1 to typegen by token ')' at line 4 in state XXX, goto XXX
Reduce #1 to typespec by token ')' at line 4 in state XXX, call typespec, goto XXX
Reduce #1 to extern_paramdecl by token ')' at line 4 in state XXX, call extern_paramdef, goto XXX
Reduce #1 to extern_parameters by token ')' at line 4 in state XXX, call extern_paramdef_collect, goto XXX
Reduce #1 to extern_paramlist by token ')' at line 4 in state XXX, call extern_paramdeflist, goto XXX
Shift token ')' at line 4 in state XXX, goto XXX
Shift token ';' at line 4 in state XXX, goto XXX
Reduce #8 to extern_definition by token "extern" at line 5 in state XXX, call extern_procdef, goto XXX
Shift token "extern" at line 5 in state XXX, goto XXX
Shift token DQSTRING = "C" at line 5 in state XXX, goto XXX
Shift token "function" at line 5 in state XXX, goto XXX
Shift token IDENT = "malloc" at line 5 in state XXX, goto XXX
Shift token IDENT = "byte" at line 5 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 5 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 5 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 5 in state XXX, goto XXX
Shift token '^' at line 5 in state XXX, goto XXX
Reduce #2 to typegen by token '(' at line 5 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token '(' at line 5 in state XXX, call typespec, goto XXX
Shift token '(' at line 5 in state XXX, goto XXX
Shift token IDENT = "long" at line 5 in state XXX, goto XXX
Reduce #1 to typename by token ')' at line 5 in state XXX, goto XXX
Reduce #1 to typehdr by token ')' at line 5 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token ')' at line 5 in state XXX, goto XXX
Reduce #1 to typespec by token ')' at line 5 in state XXX, call typespec, goto XXX
Reduce #1 to extern_paramdecl by token ')' at line 5 in state XXX, call extern_paramdef, goto XXX
Reduce #1 to extern_parameters by token ')' at line 5 in state XXX, call extern_paramdef_collect, goto XXX
Reduce #1 to extern_paramlist by token ')' at line 5 in state XXX, call extern_paramdeflist, goto XXX
Shift token ')' at line 5 in state XXX, goto XXX
Shift token ';' at line 5 in state XXX, goto XXX
Reduce #9 to extern_definition by token "extern" at line 6 in state XXX, call extern_funcdef, goto XXX
Shift token "extern" at line 6 in state XXX, goto XXX
Shift token DQSTRING = "C" at line 6 in state XXX, goto XXX
Shift token "procedure" at line 6 in state XXX, goto XXX
Shift token IDENT = "free" at line 6 in state XXX, goto XXX
Shift token '(' at line 6 in state XXX, goto XXX
Shift token IDENT = "byte" at line 6 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 6 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 6 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 6 in state XXX, goto XXX
Shift token '^' at line 6 in state XXX, goto XXX
Reduce #2 to typegen by token ')' at line 6 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token ')' at line 6 in state XXX, call typespec, goto XXX
Reduce #1 to extern_paramdecl by token ')' at line 6 in state XXX, call extern_paramdef, goto XXX
Reduce #1 to extern_parameters by token ')' at line 6 in state XXX, call extern_paramdef_collect, goto XXX
Reduce #1 to extern_paramlist by token ')' at line 6 in state XXX, call extern_paramdeflist, goto XXX
Shift token ')' at line 6 in state XXX, goto XXX
Shift token ';' at line 6 in state XXX, goto XXX
Reduce #8 to extern_definition by token "private" at line 8 in state XXX, call extern_procdef, goto XXX
Reduce #0 to extern_definitionlist by token "private" at line 8 in state XXX, goto XXX
Reduce #2 to extern_definitionlist by token "private" at line 8 in state XXX, goto XXX
Reduce #2 to extern_definitionlist by token "private" at line 8 in state XXX, goto XXX
Reduce #2 to extern_definitionlist by token "private" at line 8 in state XXX, goto XXX
Reduce #2 to extern_definitionlist by token "private" at line 8 in state XXX, goto XXX
Shift token "private" at line 8 in state XXX, goto XXX
Reduce #1 to linkage by token "function" at line 8 in state XXX, call linkage {private=true,linkage="internal",explicit=true}, goto XXX
Shift token "function" at line 8 in state XXX, goto XXX
Shift token IDENT = "allocmem" at line 8 in state XXX, goto XXX
Shift token IDENT = "byte" at line 8 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 8 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 8 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 8 in state XXX, goto XXX
Shift token '^' at line 8 in state XXX, goto XXX
Reduce #2 to typegen by token '(' at line 8 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token '(' at line 8 in state XXX, call typespec, goto XXX
Shift token '(' at line 8 in state XXX, goto XXX
Shift token IDENT = "long" at line 8 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "bytes" at line 8 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "bytes" at line 8 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "bytes" at line 8 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "bytes" at line 8 in state XXX, call typespec, goto XXX
Shift token IDENT = "bytes" at line 8 in state XXX, goto XXX
Reduce #2 to impl_paramdecl by token ')' at line 8 in state XXX, call paramdef, goto XXX
Reduce #1 to impl_parameters by token ')' at line 8 in state XXX, goto XXX
Reduce #1 to impl_paramlist by token ')' at line 8 in state XXX, call paramdeflist, goto XXX
Shift token ')' at line 8 in state XXX, goto XXX
Shift token "nothrow" at line 8 in state XXX, goto XXX
Reduce #0 to funcattribute by token '{' at line 9 in state XXX, call funcattribute {const=false,throws=true}, goto XXX
Reduce #2 to funcattribute by token '{' at line 9 in state XXX, call funcattribute {throws=false}, goto XXX
Shift token '{' at line 9 in state XXX, goto XXX
Shift token "return" at line 10 in state XXX, goto XXX
Shift token IDENT = "malloc" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 10 in state XXX, call variable, goto XXX
Shift token '(' at line 10 in state XXX, goto XXX
Shift token IDENT = "bytes" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 10 in state XXX, call variable, goto XXX
Reduce #1 to expressionlist by token ')' at line 10 in state XXX, goto XXX
Shift token ')' at line 10 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 10 in state XXX, call operator "()", goto XXX
Shift token ';' at line 10 in state XXX, goto XXX
Reduce #3 to statement by token '}' at line 11 in state XXX, call return_value, goto XXX
Reduce #0 to statementlist by token '}' at line 11 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 11 in state XXX, goto XXX
Shift token '}' at line 11 in state XXX, goto XXX
Reduce #7 to callablebody by token "private" at line 12 in state XXX, call callablebody, goto XXX
Reduce #5 to functiondefinition by token "private" at line 12 in state XXX, call funcdef, goto XXX
Reduce #1 to free_definition by token "private" at line 12 in state XXX, call definition 1, goto XXX
Shift token "private" at line 12 in state XXX, goto XXX
Reduce #1 to linkage by token "procedure" at line 12 in state XXX, call linkage {private=true,linkage="internal",explicit=true}, goto XXX
Shift token "procedure" at line 12 in state XXX, goto XXX
Shift token IDENT = "freemem" at line 12 in state XXX, goto XXX
Shift token '(' at line 12 in state XXX, goto XXX
Shift token IDENT = "byte" at line 12 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 12 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 12 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 12 in state XXX, goto XXX
Shift token '^' at line 12 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "ptr" at line 12 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "ptr" at line 12 in state XXX, call typespec, goto XXX
Shift token IDENT = "ptr" at line 12 in state XXX, goto XXX
Reduce #2 to impl_paramdecl by token ')' at line 12 in state XXX, call paramdef, goto XXX
Reduce #1 to impl_parameters by token ')' at line 12 in state XXX, goto XXX
Reduce #1 to impl_paramlist by token ')' at line 12 in state XXX, call paramdeflist, goto XXX
Shift token ')' at line 12 in state XXX, goto XXX
Shift token "nothrow" at line 12 in state XXX, goto XXX
Reduce #0 to funcattribute by token '{' at line 13 in state XXX, call funcattribute {const=false,throws=true}, goto XXX
Reduce #2 to funcattribute by token '{' at line 13 in state XXX, call funcattribute {throws=false}, goto XXX
Shift token '{' at line 13 in state XXX, goto XXX
Shift token IDENT = "free" at line 14 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 14 in state XXX, call variable, goto XXX
Shift token '(' at line 14 in state XXX, goto XXX
Shift token IDENT = "ptr" at line 14 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 14 in state XXX, call variable, goto XXX
Reduce #1 to expressionlist by token ')' at line 14 in state XXX, goto XXX
Shift token ')' at line 14 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 14 in state XXX, call operator "()", goto XXX
Shift token ';' at line 14 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 15 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 15 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 15 in state XXX, goto XXX
Shift token '}' at line 15 in state XXX, goto XXX
Reduce #7 to callablebody by token "struct" at line 17 in state XXX, call callablebody, goto XXX
Reduce #4 to functiondefinition by token "struct" at line 17 in state XXX, call procdef, goto XXX
Reduce #1 to free_definition by token "struct" at line 17 in state XXX, call definition 1, goto XXX
Shift token "struct" at line 17 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 17 in state XXX, goto XXX
Shift token '{' at line 18 in state XXX, goto XXX
Shift token "struct" at line 19 in state XXX, goto XXX
Shift token IDENT = "Data" at line 19 in state XXX, goto XXX
Shift token '{' at line 20 in state XXX, goto XXX
Shift token IDENT = "int" at line 21 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "val" at line 21 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "val" at line 21 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "val" at line 21 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "val" at line 21 in state XXX, call typespec, goto XXX
Shift token IDENT = "val" at line 21 in state XXX, goto XXX
Reduce #2 to variabledefinition by token ';' at line 21 in state XXX, call vardef, goto XXX
Shift token ';' at line 21 in state XXX, goto XXX
Reduce #2 to instruct_definition by token '}' at line 22 in state XXX, call definition 2, goto XXX
Reduce #0 to instruct_definitionlist by token '}' at line 22 in state XXX, goto XXX
Reduce #2 to instruct_definitionlist by token '}' at line 22 in state XXX, goto XXX
Shift token '}' at line 22 in state XXX, goto XXX
Reduce #5 to structdefinition by token IDENT = "Data" at line 23 in state XXX, call structdef, goto XXX
Reduce #1 to instruct_definition by token IDENT = "Data" at line 23 in state XXX, call definition 1, goto XXX
Shift token IDENT = "Data" at line 23 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "data" at line 23 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "data" at line 23 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "data" at line 23 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "data" at line 23 in state XXX, call typespec, goto XXX
Shift token IDENT = "data" at line 23 in state XXX, goto XXX
Reduce #2 to variabledefinition by token ';' at line 23 in state XXX, call vardef, goto XXX
Shift token ';' at line 23 in state XXX, goto XXX
Reduce #2 to instruct_definition by token IDENT = "Tree" at line 24 in state XXX, call definition 2, goto XXX
Shift token IDENT = "Tree" at line 24 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 24 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 24 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 24 in state XXX, goto XXX
Shift token '^' at line 24 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "left" at line 24 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "left" at line 24 in state XXX, call typespec, goto XXX
Shift token IDENT = "left" at line 24 in state XXX, goto XXX
Reduce #2 to variabledefinition by token ';' at line 24 in state XXX, call vardef, goto XXX
Shift token ';' at line 24 in state XXX, goto XXX
Reduce #2 to instruct_definition by token IDENT = "Tree" at line 25 in state XXX, call definition 2, goto XXX
Shift token IDENT = "Tree" at line 25 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 25 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 25 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 25 in state XXX, goto XXX
Shift token '^' at line 25 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "right" at line 25 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "right" at line 25 in state XXX, call typespec, goto XXX
Shift token IDENT = "right" at line 25 in state XXX, goto XXX
Reduce #2 to variabledefinition by token ';' at line 25 in state XXX, call vardef, goto XXX
Shift token ';' at line 25 in state XXX, goto XXX
Reduce #2 to instruct_definition by token '}' at line 26 in state XXX, call definition 2, goto XXX
Reduce #0 to instruct_definitionlist by token '}' at line 26 in state XXX, goto XXX
Reduce #2 to instruct_definitionlist by token '}' at line 26 in state XXX, goto XXX
Reduce #2 to instruct_definitionlist by token '}' at line 26 in state XXX, goto XXX
Reduce #2 to instruct_definitionlist by token '}' at line 26 in state XXX, goto XXX
Reduce #2 to instruct_definitionlist by token '}' at line 26 in state XXX, goto XXX
Shift token '}' at line 26 in state XXX, goto XXX
Reduce #5 to structdefinition by token IDENT = "Tree" at line 28 in state XXX, call structdef, goto XXX
Reduce #1 to free_definition by token IDENT = "Tree" at line 28 in state XXX, call definition 1, goto XXX
Shift token IDENT = "Tree" at line 28 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "g_tree" at line 28 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "g_tree" at line 28 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "g_tree" at line 28 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "g_tree" at line 28 in state XXX, call typespec, goto XXX
Shift token IDENT = "g_tree" at line 28 in state XXX, goto XXX
Reduce #2 to variabledefinition by token ';' at line 28 in state XXX, call vardef, goto XXX
Shift token ';' at line 28 in state XXX, goto XXX
Reduce #2 to free_definition by token "private" at line 30 in state XXX, call definition 1, goto XXX
Shift token "private" at line 30 in state XXX, goto XXX
Reduce #1 to linkage by token "procedure" at line 30 in state XXX, call linkage {private=true,linkage="internal",explicit=true}, goto XXX
Shift token "procedure" at line 30 in state XXX, goto XXX
Shift token IDENT = "printTree" at line 30 in state XXX, goto XXX
Shift token '(' at line 30 in state XXX, goto XXX
Shift token "const" at line 30 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 30 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 30 in state XXX, goto XXX
Reduce #2 to typehdr by token '^' at line 30 in state XXX, call typehdr {const=true}, goto XXX
Reduce #1 to typegen by token '^' at line 30 in state XXX, goto XXX
Shift token '^' at line 30 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "node" at line 30 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "node" at line 30 in state XXX, call typespec, goto XXX
Shift token IDENT = "node" at line 30 in state XXX, goto XXX
Reduce #2 to impl_paramdecl by token ',' at line 30 in state XXX, call paramdef, goto XXX
Shift token ',' at line 30 in state XXX, goto XXX
Shift token "const" at line 30 in state XXX, goto XXX
Shift token IDENT = "int" at line 30 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "indent" at line 30 in state XXX, goto XXX
Reduce #2 to typehdr by token IDENT = "indent" at line 30 in state XXX, call typehdr {const=true}, goto XXX
Reduce #1 to typegen by token IDENT = "indent" at line 30 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "indent" at line 30 in state XXX, call typespec, goto XXX
Shift token IDENT = "indent" at line 30 in state XXX, goto XXX
Reduce #2 to impl_paramdecl by token ')' at line 30 in state XXX, call paramdef, goto XXX
Reduce #1 to impl_parameters by token ')' at line 30 in state XXX, goto XXX
Reduce #3 to impl_parameters by token ')' at line 30 in state XXX, goto XXX
Reduce #1 to impl_paramlist by token ')' at line 30 in state XXX, call paramdeflist, goto XXX
Shift token ')' at line 30 in state XXX, goto XXX
Shift token "nothrow" at line 30 in state XXX, goto XXX
Reduce #0 to funcattribute by token '{' at line 31 in state XXX, call funcattribute {const=false,throws=true}, goto XXX
Reduce #2 to funcattribute by token '{' at line 31 in state XXX, call funcattribute {throws=false}, goto XXX
Shift token '{' at line 31 in state XXX, goto XXX
Shift token "var" at line 32 in state XXX, goto XXX
Shift token IDENT = "int" at line 32 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "ii" at line 32 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "ii" at line 32 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "ii" at line 32 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "ii" at line 32 in state XXX, call typespec, goto XXX
Shift token IDENT = "ii" at line 32 in state XXX, goto XXX
Shift token '=' at line 32 in state XXX, goto XXX
Shift token UINTEGER = "0" at line 32 in state XXX, goto XXX
Reduce #1 to expression by token ';' at line 32 in state XXX, call constant "constexpr uint", goto XXX
Reduce #4 to variabledefinition by token ';' at line 32 in state XXX, call vardef_assign, goto XXX
Shift token ';' at line 32 in state XXX, goto XXX
Reduce #3 to statement by token "while" at line 33 in state XXX, call definition 1, goto XXX
Shift token "while" at line 33 in state XXX, goto XXX
Shift token '(' at line 33 in state XXX, goto XXX
Shift token IDENT = "ii" at line 33 in state XXX, goto XXX
Reduce #1 to expression by token '<' at line 33 in state XXX, call variable, goto XXX
Shift token '<' at line 33 in state XXX, goto XXX
Shift token IDENT = "indent" at line 33 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 33 in state XXX, call variable, goto XXX
Reduce #3 to expression by token ')' at line 33 in state XXX, call binop "<", goto XXX
Shift token ')' at line 33 in state XXX, goto XXX
Shift token '{' at line 34 in state XXX, goto XXX
Shift token IDENT = "putchar" at line 35 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 35 in state XXX, call variable, goto XXX
Shift token '(' at line 35 in state XXX, goto XXX
Shift token SQSTRING = " " at line 35 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 35 in state XXX, call char_constant, goto XXX
Reduce #1 to expressionlist by token ')' at line 35 in state XXX, goto XXX
Shift token ')' at line 35 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 35 in state XXX, call operator "()", goto XXX
Shift token ';' at line 35 in state XXX, goto XXX
Reduce #2 to statement by token IDENT = "ii" at line 36 in state XXX, call free_expression, goto XXX
Shift token IDENT = "ii" at line 36 in state XXX, goto XXX
Reduce #1 to expression by token "+=" at line 36 in state XXX, call variable, goto XXX
Shift token "+=" at line 36 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 36 in state XXX, goto XXX
Reduce #1 to expression by token ';' at line 36 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ';' at line 36 in state XXX, call assign_operator "+", goto XXX
Shift token ';' at line 36 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 37 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 37 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 37 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 37 in state XXX, goto XXX
Shift token '}' at line 37 in state XXX, goto XXX
Reduce #3 to codeblock by token IDENT = "printf" at line 38 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token IDENT = "printf" at line 38 in state XXX, call conditional_while, goto XXX
Shift token IDENT = "printf" at line 38 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 38 in state XXX, call variable, goto XXX
Shift token '(' at line 38 in state XXX, goto XXX
Shift token DQSTRING = "Node: %d\n" at line 38 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 38 in state XXX, call string_constant, goto XXX
Shift token ',' at line 38 in state XXX, goto XXX
Shift token IDENT = "node" at line 38 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 38 in state XXX, call variable, goto XXX
Shift token "->" at line 38 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "data" at line 38 in state XXX, call count, goto XXX
Shift token IDENT = "data" at line 38 in state XXX, goto XXX
Reduce #3 to iexpression by token '.' at line 38 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token '.' at line 38 in state XXX, goto XXX
Shift token '.' at line 38 in state XXX, goto XXX
Shift token IDENT = "val" at line 38 in state XXX, goto XXX
Reduce #3 to expression by token ')' at line 38 in state XXX, call member, goto XXX
Reduce #1 to expressionlist by token ')' at line 38 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 38 in state XXX, goto XXX
Shift token ')' at line 38 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 38 in state XXX, call operator "()", goto XXX
Shift token ';' at line 38 in state XXX, goto XXX
Reduce #2 to statement by token "if" at line 39 in state XXX, call free_expression, goto XXX
Shift token "if" at line 39 in state XXX, goto XXX
Shift token '(' at line 39 in state XXX, goto XXX
Shift token IDENT = "node" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 39 in state XXX, call variable, goto XXX
Shift token "->" at line 39 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "left" at line 39 in state XXX, call count, goto XXX
Shift token IDENT = "left" at line 39 in state XXX, goto XXX
Reduce #3 to iexpression by token "!=" at line 39 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token "!=" at line 39 in state XXX, goto XXX
Shift token "!=" at line 39 in state XXX, goto XXX
Shift token "null" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 39 in state XXX, call null, goto XXX
Reduce #3 to expression by token ')' at line 39 in state XXX, call binop "!=", goto XXX
Shift token ')' at line 39 in state XXX, goto XXX
Shift token '{' at line 39 in state XXX, goto XXX
Shift token IDENT = "printTree" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 39 in state XXX, call variable, goto XXX
Shift token '(' at line 39 in state XXX, goto XXX
Shift token IDENT = "node" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 39 in state XXX, call variable, goto XXX
Shift token "->" at line 39 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "left" at line 39 in state XXX, call count, goto XXX
Shift token IDENT = "left" at line 39 in state XXX, goto XXX
Reduce #3 to iexpression by token ',' at line 39 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token ',' at line 39 in state XXX, goto XXX
Shift token ',' at line 39 in state XXX, goto XXX
Shift token IDENT = "indent" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token '+' at line 39 in state XXX, call variable, goto XXX
Shift token '+' at line 39 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 39 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 39 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ')' at line 39 in state XXX, call binop "+", goto XXX
Reduce #1 to expressionlist by token ')' at line 39 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 39 in state XXX, goto XXX
Shift token ')' at line 39 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 39 in state XXX, call operator "()", goto XXX
Shift token ';' at line 39 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 39 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 39 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 39 in state XXX, goto XXX
Shift token '}' at line 39 in state XXX, goto XXX
Reduce #3 to codeblock by token "if" at line 40 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token "if" at line 40 in state XXX, call conditional_if, goto XXX
Shift token "if" at line 40 in state XXX, goto XXX
Shift token '(' at line 40 in state XXX, goto XXX
Shift token IDENT = "node" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 40 in state XXX, call variable, goto XXX
Shift token "->" at line 40 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "right" at line 40 in state XXX, call count, goto XXX
Shift token IDENT = "right" at line 40 in state XXX, goto XXX
Reduce #3 to iexpression by token "!=" at line 40 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token "!=" at line 40 in state XXX, goto XXX
Shift token "!=" at line 40 in state XXX, goto XXX
Shift token "null" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 40 in state XXX, call null, goto XXX
Reduce #3 to expression by token ')' at line 40 in state XXX, call binop "!=", goto XXX
Shift token ')' at line 40 in state XXX, goto XXX
Shift token '{' at line 40 in state XXX, goto XXX
Shift token IDENT = "printTree" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 40 in state XXX, call variable, goto XXX
Shift token '(' at line 40 in state XXX, goto XXX
Shift token IDENT = "node" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 40 in state XXX, call variable, goto XXX
Shift token "->" at line 40 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "right" at line 40 in state XXX, call count, goto XXX
Shift token IDENT = "right" at line 40 in state XXX, goto XXX
Reduce #3 to iexpression by token ',' at line 40 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token ',' at line 40 in state XXX, goto XXX
Shift token ',' at line 40 in state XXX, goto XXX
Shift token IDENT = "indent" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token '+' at line 40 in state XXX, call variable, goto XXX
Shift token '+' at line 40 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 40 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 40 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ')' at line 40 in state XXX, call binop "+", goto XXX
Reduce #1 to expressionlist by token ')' at line 40 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 40 in state XXX, goto XXX
Shift token ')' at line 40 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 40 in state XXX, call operator "()", goto XXX
Shift token ';' at line 40 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 40 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 40 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 40 in state XXX, goto XXX
Shift token '}' at line 40 in state XXX, goto XXX
Reduce #3 to codeblock by token '}' at line 41 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token '}' at line 41 in state XXX, call conditional_if, goto XXX
Reduce #0 to statementlist by token '}' at line 41 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 41 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 41 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 41 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 41 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 41 in state XXX, goto XXX
Shift token '}' at line 41 in state XXX, goto XXX
Reduce #7 to callablebody by token "private" at line 43 in state XXX, call callablebody, goto XXX
Reduce #4 to functiondefinition by token "private" at line 43 in state XXX, call procdef, goto XXX
Reduce #1 to free_definition by token "private" at line 43 in state XXX, call definition 1, goto XXX
Shift token "private" at line 43 in state XXX, goto XXX
Reduce #1 to linkage by token "procedure" at line 43 in state XXX, call linkage {private=true,linkage="internal",explicit=true}, goto XXX
Shift token "procedure" at line 43 in state XXX, goto XXX
Shift token IDENT = "deleteTree" at line 43 in state XXX, goto XXX
Shift token '(' at line 43 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 43 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 43 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 43 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 43 in state XXX, goto XXX
Shift token '^' at line 43 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "node" at line 43 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "node" at line 43 in state XXX, call typespec, goto XXX
Shift token IDENT = "node" at line 43 in state XXX, goto XXX
Reduce #2 to impl_paramdecl by token ')' at line 43 in state XXX, call paramdef, goto XXX
Reduce #1 to impl_parameters by token ')' at line 43 in state XXX, goto XXX
Reduce #1 to impl_paramlist by token ')' at line 43 in state XXX, call paramdeflist, goto XXX
Shift token ')' at line 43 in state XXX, goto XXX
Shift token "nothrow" at line 43 in state XXX, goto XXX
Reduce #0 to funcattribute by token '{' at line 44 in state XXX, call funcattribute {const=false,throws=true}, goto XXX
Reduce #2 to funcattribute by token '{' at line 44 in state XXX, call funcattribute {throws=false}, goto XXX
Shift token '{' at line 44 in state XXX, goto XXX
Shift token "if" at line 45 in state XXX, goto XXX
Shift token '(' at line 45 in state XXX, goto XXX
Shift token IDENT = "node" at line 45 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 45 in state XXX, call variable, goto XXX
Shift token "->" at line 45 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "left" at line 45 in state XXX, call count, goto XXX
Shift token IDENT = "left" at line 45 in state XXX, goto XXX
Reduce #3 to iexpression by token "!=" at line 45 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token "!=" at line 45 in state XXX, goto XXX
Shift token "!=" at line 45 in state XXX, goto XXX
Shift token "null" at line 45 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 45 in state XXX, call null, goto XXX
Reduce #3 to expression by token ')' at line 45 in state XXX, call binop "!=", goto XXX
Shift token ')' at line 45 in state XXX, goto XXX
Shift token '{' at line 45 in state XXX, goto XXX
Shift token IDENT = "deleteTree" at line 45 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 45 in state XXX, call variable, goto XXX
Shift token '(' at line 45 in state XXX, goto XXX
Shift token IDENT = "node" at line 45 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 45 in state XXX, call variable, goto XXX
Shift token "->" at line 45 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "left" at line 45 in state XXX, call count, goto XXX
Shift token IDENT = "left" at line 45 in state XXX, goto XXX
Reduce #3 to iexpression by token ')' at line 45 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token ')' at line 45 in state XXX, goto XXX
Reduce #1 to expressionlist by token ')' at line 45 in state XXX, goto XXX
Shift token ')' at line 45 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 45 in state XXX, call operator "()", goto XXX
Shift token ';' at line 45 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 45 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 45 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 45 in state XXX, goto XXX
Shift token '}' at line 45 in state XXX, goto XXX
Reduce #3 to codeblock by token "if" at line 46 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token "if" at line 46 in state XXX, call conditional_if, goto XXX
Shift token "if" at line 46 in state XXX, goto XXX
Shift token '(' at line 46 in state XXX, goto XXX
Shift token IDENT = "node" at line 46 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 46 in state XXX, call variable, goto XXX
Shift token "->" at line 46 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "right" at line 46 in state XXX, call count, goto XXX
Shift token IDENT = "right" at line 46 in state XXX, goto XXX
Reduce #3 to iexpression by token "!=" at line 46 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token "!=" at line 46 in state XXX, goto XXX
Shift token "!=" at line 46 in state XXX, goto XXX
Shift token "null" at line 46 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 46 in state XXX, call null, goto XXX
Reduce #3 to expression by token ')' at line 46 in state XXX, call binop "!=", goto XXX
Shift token ')' at line 46 in state XXX, goto XXX
Shift token '{' at line 46 in state XXX, goto XXX
Shift token IDENT = "deleteTree" at line 46 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 46 in state XXX, call variable, goto XXX
Shift token '(' at line 46 in state XXX, goto XXX
Shift token IDENT = "node" at line 46 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 46 in state XXX, call variable, goto XXX
Shift token "->" at line 46 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "right" at line 46 in state XXX, call count, goto XXX
Shift token IDENT = "right" at line 46 in state XXX, goto XXX
Reduce #3 to iexpression by token ')' at line 46 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token ')' at line 46 in state XXX, goto XXX
Reduce #1 to expressionlist by token ')' at line 46 in state XXX, goto XXX
Shift token ')' at line 46 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 46 in state XXX, call operator "()", goto XXX
Shift token ';' at line 46 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 46 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 46 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 46 in state XXX, goto XXX
Shift token '}' at line 46 in state XXX, goto XXX
Reduce #3 to codeblock by token "delete" at line 47 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token "delete" at line 47 in state XXX, call conditional_if, goto XXX
Shift token "delete" at line 47 in state XXX, goto XXX
Shift token IDENT = "node" at line 47 in state XXX, goto XXX
Reduce #1 to expression by token ';' at line 47 in state XXX, call variable, goto XXX
Shift token ';' at line 47 in state XXX, goto XXX
Reduce #3 to statement by token '}' at line 48 in state XXX, call delete, goto XXX
Reduce #0 to statementlist by token '}' at line 48 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 48 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 48 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 48 in state XXX, goto XXX
Shift token '}' at line 48 in state XXX, goto XXX
Reduce #7 to callablebody by token "main" at line 50 in state XXX, call callablebody, goto XXX
Reduce #4 to functiondefinition by token "main" at line 50 in state XXX, call procdef, goto XXX
Reduce #1 to free_definition by token "main" at line 50 in state XXX, call definition 1, goto XXX
Reduce #0 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Reduce #2 to free_definitionlist by token "main" at line 50 in state XXX, goto XXX
Shift token "main" at line 50 in state XXX, goto XXX
Shift token '{' at line 51 in state XXX, goto XXX
Shift token "var" at line 52 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 52 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 52 in state XXX, goto XXX
Reduce #1 to typehdr by token '^' at line 52 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token '^' at line 52 in state XXX, goto XXX
Shift token '^' at line 52 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "tree" at line 52 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "tree" at line 52 in state XXX, call typespec, goto XXX
Shift token IDENT = "tree" at line 52 in state XXX, goto XXX
Shift token '=' at line 52 in state XXX, goto XXX
Shift token "new" at line 52 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 52 in state XXX, goto XXX
Reduce #1 to typename by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typehdr by token ':' at line 52 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typespec by token ':' at line 52 in state XXX, call typespec, goto XXX
Shift token ':' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token UINTEGER = "11" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ',' at line 52 in state XXX, call structure, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "new" at line 52 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 52 in state XXX, goto XXX
Reduce #1 to typename by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typehdr by token ':' at line 52 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typespec by token ':' at line 52 in state XXX, call typespec, goto XXX
Shift token ':' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ',' at line 52 in state XXX, call structure, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "null" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 52 in state XXX, call null, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "null" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call null, goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ',' at line 52 in state XXX, call structure, goto XXX
Reduce #4 to expression by token ',' at line 52 in state XXX, call allocate, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "new" at line 52 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 52 in state XXX, goto XXX
Reduce #1 to typename by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typehdr by token ':' at line 52 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typespec by token ':' at line 52 in state XXX, call typespec, goto XXX
Shift token ':' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token UINTEGER = "2" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ',' at line 52 in state XXX, call structure, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "null" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 52 in state XXX, call null, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "new" at line 52 in state XXX, goto XXX
Shift token IDENT = "Tree" at line 52 in state XXX, goto XXX
Reduce #1 to typename by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typehdr by token ':' at line 52 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token ':' at line 52 in state XXX, goto XXX
Reduce #1 to typespec by token ':' at line 52 in state XXX, call typespec, goto XXX
Shift token ':' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token '{' at line 52 in state XXX, goto XXX
Shift token UINTEGER = "22" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ',' at line 52 in state XXX, call structure, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "null" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 52 in state XXX, call null, goto XXX
Shift token ',' at line 52 in state XXX, goto XXX
Shift token "null" at line 52 in state XXX, goto XXX
Reduce #1 to expression by token '}' at line 52 in state XXX, call null, goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token '}' at line 52 in state XXX, call structure, goto XXX
Reduce #4 to expression by token '}' at line 52 in state XXX, call allocate, goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token '}' at line 52 in state XXX, call structure, goto XXX
Reduce #4 to expression by token '}' at line 52 in state XXX, call allocate, goto XXX
Reduce #1 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expressionlist by token '}' at line 52 in state XXX, goto XXX
Shift token '}' at line 52 in state XXX, goto XXX
Reduce #3 to expression by token ';' at line 52 in state XXX, call structure, goto XXX
Reduce #4 to expression by token ';' at line 52 in state XXX, call allocate, goto XXX
Reduce #4 to variabledefinition by token ';' at line 52 in state XXX, call vardef_assign, goto XXX
Shift token ';' at line 52 in state XXX, goto XXX
Reduce #3 to statement by token IDENT = "printf" at line 53 in state XXX, call definition 1, goto XXX
Shift token IDENT = "printf" at line 53 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 53 in state XXX, call variable, goto XXX
Shift token '(' at line 53 in state XXX, goto XXX
Shift token DQSTRING = "VAL %d\n" at line 53 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 53 in state XXX, call string_constant, goto XXX
Shift token ',' at line 53 in state XXX, goto XXX
Shift token IDENT = "tree" at line 53 in state XXX, goto XXX
Reduce #1 to expression by token "->" at line 53 in state XXX, call variable, goto XXX
Shift token "->" at line 53 in state XXX, goto XXX
Reduce #1 to indirection by token IDENT = "data" at line 53 in state XXX, call count, goto XXX
Shift token IDENT = "data" at line 53 in state XXX, goto XXX
Reduce #3 to iexpression by token '.' at line 53 in state XXX, call rep_operator "->", goto XXX
Reduce #1 to expression by token '.' at line 53 in state XXX, goto XXX
Shift token '.' at line 53 in state XXX, goto XXX
Shift token IDENT = "val" at line 53 in state XXX, goto XXX
Reduce #3 to expression by token ')' at line 53 in state XXX, call member, goto XXX
Reduce #1 to expressionlist by token ')' at line 53 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 53 in state XXX, goto XXX
Shift token ')' at line 53 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 53 in state XXX, call operator "()", goto XXX
Shift token ';' at line 53 in state XXX, goto XXX
Reduce #2 to statement by token IDENT = "printTree" at line 54 in state XXX, call free_expression, goto XXX
Shift token IDENT = "printTree" at line 54 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 54 in state XXX, call variable, goto XXX
Shift token '(' at line 54 in state XXX, goto XXX
Shift token IDENT = "tree" at line 54 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 54 in state XXX, call variable, goto XXX
Shift token ',' at line 54 in state XXX, goto XXX
Shift token UINTEGER = "0" at line 54 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 54 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token ')' at line 54 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 54 in state XXX, goto XXX
Shift token ')' at line 54 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 54 in state XXX, call operator "()", goto XXX
Shift token ';' at line 54 in state XXX, goto XXX
Reduce #2 to statement by token IDENT = "deleteTree" at line 55 in state XXX, call free_expression, goto XXX
Shift token IDENT = "deleteTree" at line 55 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 55 in state XXX, call variable, goto XXX
Shift token '(' at line 55 in state XXX, goto XXX
Shift token IDENT = "tree" at line 55 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 55 in state XXX, call variable, goto XXX
Reduce #1 to expressionlist by token ')' at line 55 in state XXX, goto XXX
Shift token ')' at line 55 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 55 in state XXX, call operator "()", goto XXX
Shift token ';' at line 55 in state XXX, goto XXX
Reduce #2 to statement by token IDENT = "printf" at line 56 in state XXX, call free_expression, goto XXX
Shift token IDENT = "printf" at line 56 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 56 in state XXX, call variable, goto XXX
Shift token '(' at line 56 in state XXX, goto XXX
Shift token DQSTRING = "Done\n" at line 56 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 56 in state XXX, call string_constant, goto XXX
Reduce #1 to expressionlist by token ')' at line 56 in state XXX, goto XXX
Shift token ')' at line 56 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 56 in state XXX, call operator "()", goto XXX
Shift token ';' at line 56 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 57 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 57 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 57 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 57 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 57 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 57 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 57 in state XXX, goto XXX
Shift token '}' at line 57 in state XXX, goto XXX
Reduce #2 to main_procedure by token $ at line 59 in state XXX, call main_procdef, goto XXX
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 3,
          name = "DQSTRING",
          value = "C"},
        {
          line = 3,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 3,
                                  name = "IDENT",
                                  value = "byte"}},
                              call = {
                                name = "typehdr {const=true}",
                                obj = {
                                  const = true},
                                proc = <function>},
                              line = 3,
                              step = 0}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 3,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 3,
                      step = 0},
                    {
                      line = 3,
                      name = "IDENT",
                      value = "fmt"}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 3,
                  step = 0}},
              call = {
                name = "extern_paramdef_collect",
                proc = <function>},
              line = 3,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 3,
          step = 0}},
      call = {
        name = "extern_procdef_vararg",
        proc = <function>},
      line = 3,
      step = 0},
    {
      arg = {
        {
          line = 4,
          name = "DQSTRING",
          value = "C"},
        {
          line = 4,
          name = "IDENT",
          value = "putchar"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 4,
                              name = "IDENT",
                              value = "byte"}},
                          call = {
                            name = "typehdr {const=true}",
                            obj = {
                              const = true},
                            proc = <function>},
                          line = 4,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 4,
                      step = 0}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 4,
                  step = 0}},
              call = {
                name = "extern_paramdef_collect",
                proc = <function>},
              line = 4,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 4,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 4,
      step = 0},
    {
      arg = {
        {
          line = 5,
          name = "DQSTRING",
          value = "C"},
        {
          line = 5,
          name = "IDENT",
          value = "malloc"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 5,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typehdr {const=false}",
                    obj = {
                      const = false},
                    proc = <function>},
                  line = 5,
                  step = 0}},
              call = {
                name = "typegen_pointer {const=false}",
                obj = {
                  const = false},
                proc = <function>},
              line = 5,
              step = 0}},
          call = {
            name = "typespec",
            proc = <function>},
          line = 5,
          step = 0},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 5,
                              name = "IDENT",
                              value = "long"}},
                          call = {
                            name = "typehdr {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 5,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 5,
                      step = 0}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 5,
                  step = 0}},
              call = {
                name = "extern_paramdef_collect",
                proc = <function>},
              line = 5,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 5,
          step = 0}},
      call = {
        name = "extern_funcdef",
        proc = <function>},
      line = 5,
      step = 0},
    {
      arg = {
        {
          line = 6,
          name = "DQSTRING",
          value = "C"},
        {
          line = 6,
          name = "IDENT",
          value = "free"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 6,
                                  name = "IDENT",
                                  value = "byte"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 6,
                              step = 0}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 6,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 6,
                      step = 0}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 6,
                  step = 0}},
              call = {
                name = "extern_paramdef_collect",
                proc = <function>},
              line = 6,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 6,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 6,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal",explicit=true}",
                obj = {
                  explicit = true,
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 6,
              step = 0},
            {
              line = 8,
              name = "IDENT",
              value = "allocmem"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 8,
                          name = "IDENT",
                          value = "byte"}},
                      call = {
                        name = "typehdr {const=false}",
                        obj = {
                          const = false},
                        proc = <function>},
                      line = 8,
                      step = 0}},
                  call = {
                    name = "typegen_pointer {const=false}",
                    obj = {
                      const = false},
                    proc = <function>},
                  line = 8,
                  step = 0}},
              call = {
                name = "typespec",
                proc = <function>},
              line = 8,
              step = 0},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 8,
                                  name = "IDENT",
                                  value = "long"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 8,
                              step = 0}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 8,
                          step = 0},
                        {
                          line = 8,
                          name = "IDENT",
                          value = "bytes"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 8,
                      step = 0}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 8,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {},
                      call = {
                        name = "funcattribute {const=false,throws=true}",
                        obj = {
                          const = false,
                          throws = true},
                        proc = <function>},
                      line = 8,
                      step = 0}},
                  call = {
                    name = "funcattribute {throws=false}",
                    obj = {
                      throws = false},
                    proc = <function>},
                  line = 8,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 10,
                              name = "IDENT",
                              value = "malloc"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 10,
                          step = 0},
                        {
                          arg = {
                            {
                              line = 10,
                              name = "IDENT",
                              value = "bytes"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 10,
                          step = 0}},
                      call = {
                        name = "operator ()",
                        obj = "()",
                        proc = <function>},
                      line = 10,
                      step = 1}},
                  call = {
                    name = "return_value",
                    proc = <function>},
                  line = 10,
                  step = 2}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 10,
              scope = {
                0,
                3}}},
          call = {
            name = "funcdef",
            proc = <function>},
          id = 1,
          line = 10,
          step = 3}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 10,
      step = 3},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal",explicit=true}",
                obj = {
                  explicit = true,
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 10,
              step = 3},
            {
              line = 12,
              name = "IDENT",
              value = "freemem"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 12,
                                      name = "IDENT",
                                      value = "byte"}},
                                  call = {
                                    name = "typehdr {const=false}",
                                    obj = {
                                      const = false},
                                    proc = <function>},
                                  line = 12,
                                  step = 3}},
                              call = {
                                name = "typegen_pointer {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 12,
                              step = 3}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 12,
                          step = 3},
                        {
                          line = 12,
                          name = "IDENT",
                          value = "ptr"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 12,
                      step = 3}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 12,
                  step = 3},
                {
                  arg = {
                    {
                      arg = {},
                      call = {
                        name = "funcattribute {const=false,throws=true}",
                        obj = {
                          const = false,
                          throws = true},
                        proc = <function>},
                      line = 12,
                      step = 3}},
                  call = {
                    name = "funcattribute {throws=false}",
                    obj = {
                      throws = false},
                    proc = <function>},
                  line = 12,
                  step = 3},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 14,
                              name = "IDENT",
                              value = "free"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 14,
                          step = 3},
                        {
                          arg = {
                            {
                              line = 14,
                              name = "IDENT",
                              value = "ptr"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 14,
                          step = 3}},
                      call = {
                        name = "operator ()",
                        obj = "()",
                        proc = <function>},
                      line = 14,
                      step = 4}},
                  call = {
                    name = "free_expression",
                    proc = <function>},
                  line = 14,
                  step = 4}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 14,
              scope = {
                3,
                5}}},
          call = {
            name = "procdef",
            proc = <function>},
          id = 2,
          line = 14,
          step = 5}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 14,
      step = 5},
    {
      arg = {
        {
          arg = {
            {
              line = 17,
              name = "IDENT",
              value = "Tree"},
            {
              arg = {
                {
                  arg = {
                    {
                      line = 19,
                      name = "IDENT",
                      value = "Data"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 21,
                                      name = "IDENT",
                                      value = "int"}},
                                  call = {
                                    name = "typehdr {const=false}",
                                    obj = {
                                      const = false},
                                    proc = <function>},
                                  line = 21,
                                  step = 5}},
                              call = {
                                name = "typespec",
                                proc = <function>},
                              line = 21,
                              step = 5},
                            {
                              line = 21,
                              name = "IDENT",
                              value = "val"}},
                          call = {
                            name = "vardef",
                            proc = <function>},
                          line = 21,
                          step = 6}},
                      call = {
                        name = "definition 2",
                        obj = 2,
                        proc = <function>},
                      line = 21,
                      step = 6}},
                  call = {
                    name = "structdef",
                    proc = <function>},
                  line = 21,
                  step = 7}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 21,
              step = 7},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 23,
                              name = "IDENT",
                              value = "Data"}},
                          call = {
                            name = "typehdr {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 23,
                          step = 7}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 23,
                      step = 7},
                    {
                      line = 23,
                      name = "IDENT",
                      value = "data"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 23,
                  step = 8}},
              call = {
                name = "definition 2",
                obj = 2,
                proc = <function>},
              line = 23,
              step = 8},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 24,
                                  name = "IDENT",
                                  value = "Tree"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 24,
                              step = 8}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 24,
                          step = 8}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 24,
                      step = 8},
                    {
                      line = 24,
                      name = "IDENT",
                      value = "left"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 24,
                  step = 9}},
              call = {
                name = "definition 2",
                obj = 2,
                proc = <function>},
              line = 24,
              step = 9},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 25,
                                  name = "IDENT",
                                  value = "Tree"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 25,
                              step = 9}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 25,
                          step = 9}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 25,
                      step = 9},
                    {
                      line = 25,
                      name = "IDENT",
                      value = "right"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 25,
                  step = 10}},
              call = {
                name = "definition 2",
                obj = 2,
                proc = <function>},
              line = 25,
              step = 10}},
          call = {
            name = "structdef",
            proc = <function>},
          line = 25,
          step = 11}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 25,
      step = 11},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 28,
                      name = "IDENT",
                      value = "Tree"}},
                  call = {
                    name = "typehdr {const=false}",
                    obj = {
                      const = false},
                    proc = <function>},
                  line = 28,
                  step = 11}},
              call = {
                name = "typespec",
                proc = <function>},
              line = 28,
              step = 11},
            {
              line = 28,
              name = "IDENT",
              value = "g_tree"}},
          call = {
            name = "vardef",
            proc = <function>},
          line = 28,
          step = 12}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 28,
      step = 12},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal",explicit=true}",
                obj = {
                  explicit = true,
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 28,
              step = 12},
            {
              line = 30,
              name = "IDENT",
              value = "printTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 30,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typehdr {const=true}",
                                    obj = {
                                      const = true},
                                    proc = <function>},
                                  line = 30,
                                  step = 12}},
                              call = {
                                name = "typegen_pointer {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 30,
                              step = 12}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 30,
                          step = 12},
                        {
                          line = 30,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 30,
                      step = 12},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 30,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typehdr {const=true}",
                                obj = {
                                  const = true},
                                proc = <function>},
                              line = 30,
                              step = 12}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 30,
                          step = 12},
                        {
                          line = 30,
                          name = "IDENT",
                          value = "indent"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 30,
                      step = 12}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 30,
                  step = 12},
                {
                  arg = {
                    {
                      arg = {},
                      call = {
                        name = "funcattribute {const=false,throws=true}",
                        obj = {
                          const = false,
                          throws = true},
                        proc = <function>},
                      line = 30,
                      step = 12}},
                  call = {
                    name = "funcattribute {throws=false}",
                    obj = {
                      throws = false},
                    proc = <function>},
                  line = 30,
                  step = 12},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 32,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 32,
                              step = 12}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 32,
                          step = 12},
                        {
                          line = 32,
                          name = "IDENT",
                          value = "ii"},
                        {
                          arg = {
                            {
                              line = 32,
                              name = "UINTEGER",
                              value = "0"}},
                          call = {
                            name = "constant constexpr uint",
                            obj = "constexpr uint",
                            proc = <function>},
                          line = 32,
                          step = 12}},
                      call = {
                        name = "vardef_assign",
                        proc = <function>},
                      line = 32,
                      step = 13}},
                  call = {
                    name = "definition 1",
                    obj = 1,
                    proc = <function>},
                  line = 32,
                  step = 14},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 33,
                              name = "IDENT",
                              value = "ii"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 33,
                          step = 14},
                        {
                          arg = {
                            {
                              line = 33,
                              name = "IDENT",
                              value = "indent"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 33,
                          step = 14}},
                      call = {
                        name = "binop <",
                        obj = "<",
                        proc = <function>},
                      line = 33,
                      step = 15},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 35,
                                      name = "IDENT",
                                      value = "putchar"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 35,
                                  step = 15},
                                {
                                  arg = {
                                    {
                                      line = 35,
                                      name = "SQSTRING",
                                      value = " "}},
                                  call = {
                                    name = "char_constant",
                                    proc = <function>},
                                  line = 35,
                                  step = 15}},
                              call = {
                                name = "operator ()",
                                obj = "()",
                                proc = <function>},
                              line = 35,
                              step = 16}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 35,
                          step = 16},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 36,
                                      name = "IDENT",
                                      value = "ii"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 36,
                                  step = 16},
                                {
                                  arg = {
                                    {
                                      line = 36,
                                      name = "UINTEGER",
                                      value = "1"}},
                                  call = {
                                    name = "constant constexpr uint",
                                    obj = "constexpr uint",
                                    proc = <function>},
                                  line = 36,
                                  step = 16}},
                              call = {
                                name = "assign_operator +",
                                obj = "+",
                                proc = <function>},
                              line = 36,
                              step = 17}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 36,
                          step = 17}},
                      call = {
                        name = "codeblock",
                        proc = <function>},
                      line = 36,
                      scope = {
                        15,
                        18}}},
                  call = {
                    name = "conditional_while",
                    proc = <function>},
                  line = 36,
                  step = 18},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 38,
                              name = "IDENT",
                              value = "printf"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 38,
                          step = 18},
                        {
                          arg = {
                            {
                              line = 38,
                              name = "DQSTRING",
                              value = "Node: %d\\n"}},
                          call = {
                            name = "string_constant",
                            proc = <function>},
                          line = 38,
                          step = 18},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 38,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 38,
                                  step = 18},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 38,
                                  step = 18},
                                {
                                  line = 38,
                                  name = "IDENT",
                                  value = "data"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 38,
                              step = 18},
                            {
                              line = 38,
                              name = "IDENT",
                              value = "val"}},
                          call = {
                            name = "member",
                            proc = <function>},
                          line = 38,
                          step = 18}},
                      call = {
                        name = "operator ()",
                        obj = "()",
                        proc = <function>},
                      line = 38,
                      step = 19}},
                  call = {
                    name = "free_expression",
                    proc = <function>},
                  line = 38,
                  step = 19},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 39,
                                  name = "IDENT",
                                  value = "node"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 39,
                              step = 19},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 39,
                              step = 19},
                            {
                              line = 39,
                              name = "IDENT",
                              value = "left"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 39,
                          step = 19},
                        {
                          arg = {},
                          call = {
                            name = "null",
                            proc = <function>},
                          line = 39,
                          step = 19}},
                      call = {
                        name = "binop !=",
                        obj = "!=",
                        proc = <function>},
                      line = 39,
                      step = 20},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 39,
                                      name = "IDENT",
                                      value = "printTree"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 39,
                                  step = 20},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 39,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 39,
                                      step = 20},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 39,
                                      step = 20},
                                    {
                                      line = 39,
                                      name = "IDENT",
                                      value = "left"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 39,
                                  step = 20},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 39,
                                          name = "IDENT",
                                          value = "indent"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 39,
                                      step = 20},
                                    {
                                      arg = {
                                        {
                                          line = 39,
                                          name = "UINTEGER",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 39,
                                      step = 20}},
                                  call = {
                                    name = "binop +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 39,
                                  step = 21}},
                              call = {
                                name = "operator ()",
                                obj = "()",
                                proc = <function>},
                              line = 39,
                              step = 22}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 39,
                          step = 22}},
                      call = {
                        name = "codeblock",
                        proc = <function>},
                      line = 39,
                      scope = {
                        20,
                        23}}},
                  call = {
                    name = "conditional_if",
                    proc = <function>},
                  line = 39,
                  step = 23},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 40,
                                  name = "IDENT",
                                  value = "node"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 40,
                              step = 23},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 40,
                              step = 23},
                            {
                              line = 40,
                              name = "IDENT",
                              value = "right"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 40,
                          step = 23},
                        {
                          arg = {},
                          call = {
                            name = "null",
                            proc = <function>},
                          line = 40,
                          step = 23}},
                      call = {
                        name = "binop !=",
                        obj = "!=",
                        proc = <function>},
                      line = 40,
                      step = 24},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 40,
                                      name = "IDENT",
                                      value = "printTree"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 40,
                                  step = 24},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 40,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 40,
                                      step = 24},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 40,
                                      step = 24},
                                    {
                                      line = 40,
                                      name = "IDENT",
                                      value = "right"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 40,
                                  step = 24},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 40,
                                          name = "IDENT",
                                          value = "indent"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 40,
                                      step = 24},
                                    {
                                      arg = {
                                        {
                                          line = 40,
                                          name = "UINTEGER",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 40,
                                      step = 24}},
                                  call = {
                                    name = "binop +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 40,
                                  step = 25}},
                              call = {
                                name = "operator ()",
                                obj = "()",
                                proc = <function>},
                              line = 40,
                              step = 26}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 40,
                          step = 26}},
                      call = {
                        name = "codeblock",
                        proc = <function>},
                      line = 40,
                      scope = {
                        24,
                        27}}},
                  call = {
                    name = "conditional_if",
                    proc = <function>},
                  line = 40,
                  step = 27}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 40,
              scope = {
                12,
                28}}},
          call = {
            name = "procdef",
            proc = <function>},
          id = 3,
          line = 40,
          step = 28}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 40,
      step = 28},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal",explicit=true}",
                obj = {
                  explicit = true,
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 40,
              step = 28},
            {
              line = 43,
              name = "IDENT",
              value = "deleteTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 43,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typehdr {const=false}",
                                    obj = {
                                      const = false},
                                    proc = <function>},
                                  line = 43,
                                  step = 28}},
                              call = {
                                name = "typegen_pointer {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 43,
                              step = 28}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 43,
                          step = 28},
                        {
                          line = 43,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 43,
                      step = 28}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 43,
                  step = 28},
                {
                  arg = {
                    {
                      arg = {},
                      call = {
                        name = "funcattribute {const=false,throws=true}",
                        obj = {
                          const = false,
                          throws = true},
                        proc = <function>},
                      line = 43,
                      step = 28}},
                  call = {
                    name = "funcattribute {throws=false}",
                    obj = {
                      throws = false},
                    proc = <function>},
                  line = 43,
                  step = 28},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 45,
                                  name = "IDENT",
                                  value = "node"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 45,
                              step = 28},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 45,
                              step = 28},
                            {
                              line = 45,
                              name = "IDENT",
                              value = "left"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 45,
                          step = 28},
                        {
                          arg = {},
                          call = {
                            name = "null",
                            proc = <function>},
                          line = 45,
                          step = 28}},
                      call = {
                        name = "binop !=",
                        obj = "!=",
                        proc = <function>},
                      line = 45,
                      step = 29},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 45,
                                      name = "IDENT",
                                      value = "deleteTree"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 45,
                                  step = 29},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 45,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 45,
                                      step = 29},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 45,
                                      step = 29},
                                    {
                                      line = 45,
                                      name = "IDENT",
                                      value = "left"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 45,
                                  step = 29}},
                              call = {
                                name = "operator ()",
                                obj = "()",
                                proc = <function>},
                              line = 45,
                              step = 30}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 45,
                          step = 30}},
                      call = {
                        name = "codeblock",
                        proc = <function>},
                      line = 45,
                      scope = {
                        29,
                        31}}},
                  call = {
                    name = "conditional_if",
                    proc = <function>},
                  line = 45,
                  step = 31},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 46,
                                  name = "IDENT",
                                  value = "node"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 46,
                              step = 31},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 46,
                              step = 31},
                            {
                              line = 46,
                              name = "IDENT",
                              value = "right"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 46,
                          step = 31},
                        {
                          arg = {},
                          call = {
                            name = "null",
                            proc = <function>},
                          line = 46,
                          step = 31}},
                      call = {
                        name = "binop !=",
                        obj = "!=",
                        proc = <function>},
                      line = 46,
                      step = 32},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 46,
                                      name = "IDENT",
                                      value = "deleteTree"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 46,
                                  step = 32},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 46,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 46,
                                      step = 32},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 46,
                                      step = 32},
                                    {
                                      line = 46,
                                      name = "IDENT",
                                      value = "right"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 46,
                                  step = 32}},
                              call = {
                                name = "operator ()",
                                obj = "()",
                                proc = <function>},
                              line = 46,
                              step = 33}},
                          call = {
                            name = "free_expression",
                            proc = <function>},
                          line = 46,
                          step = 33}},
                      call = {
                        name = "codeblock",
                        proc = <function>},
                      line = 46,
                      scope = {
                        32,
                        34}}},
                  call = {
                    name = "conditional_if",
                    proc = <function>},
                  line = 46,
                  step = 34},
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 47,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 47,
                      step = 34}},
                  call = {
                    name = "delete",
                    proc = <function>},
                  line = 47,
                  step = 34}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 47,
              scope = {
                28,
                35}}},
          call = {
            name = "procdef",
            proc = <function>},
          id = 4,
          line = 47,
          step = 35}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 47,
      step = 35},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 52,
                                  name = "IDENT",
                                  value = "Tree"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 52,
                              step = 35}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 52,
                          step = 35}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 52,
                      step = 35},
                    {
                      line = 52,
                      name = "IDENT",
                      value = "tree"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 52,
                                  name = "IDENT",
                                  value = "Tree"}},
                              call = {
                                name = "typehdr {const=false}",
                                obj = {
                                  const = false},
                                proc = <function>},
                              line = 52,
                              step = 35}},
                          call = {
                            name = "typespec",
                            proc = <function>},
                          line = 52,
                          step = 35},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 52,
                                      name = "UINTEGER",
                                      value = "11"}},
                                  call = {
                                    name = "constant constexpr uint",
                                    obj = "constexpr uint",
                                    proc = <function>},
                                  line = 52,
                                  step = 35}},
                              call = {
                                name = "structure",
                                proc = <function>},
                              line = 52,
                              step = 36},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 52,
                                          name = "IDENT",
                                          value = "Tree"}},
                                      call = {
                                        name = "typehdr {const=false}",
                                        obj = {
                                          const = false},
                                        proc = <function>},
                                      line = 52,
                                      step = 36}},
                                  call = {
                                    name = "typespec",
                                    proc = <function>},
                                  line = 52,
                                  step = 36},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 52,
                                              name = "UINTEGER",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 52,
                                          step = 36}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 52,
                                      step = 37},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null",
                                        proc = <function>},
                                      line = 52,
                                      step = 37},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null",
                                        proc = <function>},
                                      line = 52,
                                      step = 37}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 52,
                                  step = 38}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 52,
                              step = 39},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 52,
                                          name = "IDENT",
                                          value = "Tree"}},
                                      call = {
                                        name = "typehdr {const=false}",
                                        obj = {
                                          const = false},
                                        proc = <function>},
                                      line = 52,
                                      step = 39}},
                                  call = {
                                    name = "typespec",
                                    proc = <function>},
                                  line = 52,
                                  step = 39},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 52,
                                              name = "UINTEGER",
                                              value = "2"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 52,
                                          step = 39}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 52,
                                      step = 40},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null",
                                        proc = <function>},
                                      line = 52,
                                      step = 40},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 52,
                                                  name = "IDENT",
                                                  value = "Tree"}},
                                              call = {
                                                name = "typehdr {const=false}",
                                                obj = {
                                                  const = false},
                                                proc = <function>},
                                              line = 52,
                                              step = 40}},
                                          call = {
                                            name = "typespec",
                                            proc = <function>},
                                          line = 52,
                                          step = 40},
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  arg = {
                                                    {
                                                      line = 52,
                                                      name = "UINTEGER",
                                                      value = "22"}},
                                                  call = {
                                                    name = "constant constexpr uint",
                                                    obj = "constexpr uint",
                                                    proc = <function>},
                                                  line = 52,
                                                  step = 40}},
                                              call = {
                                                name = "structure",
                                                proc = <function>},
                                              line = 52,
                                              step = 41},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null",
                                                proc = <function>},
                                              line = 52,
                                              step = 41},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null",
                                                proc = <function>},
                                              line = 52,
                                              step = 41}},
                                          call = {
                                            name = "structure",
                                            proc = <function>},
                                          line = 52,
                                          step = 42}},
                                      call = {
                                        name = "allocate",
                                        proc = <function>},
                                      line = 52,
                                      step = 43}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 52,
                                  step = 44}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 52,
                              step = 45}},
                          call = {
                            name = "structure",
                            proc = <function>},
                          line = 52,
                          step = 46}},
                      call = {
                        name = "allocate",
                        proc = <function>},
                      line = 52,
                      step = 47}},
                  call = {
                    name = "vardef_assign",
                    proc = <function>},
                  line = 52,
                  step = 48}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 52,
              step = 49},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 53,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 53,
                      step = 49},
                    {
                      arg = {
                        {
                          line = 53,
                          name = "DQSTRING",
                          value = "VAL %d\\n"}},
                      call = {
                        name = "string_constant",
                        proc = <function>},
                      line = 53,
                      step = 49},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 53,
                                  name = "IDENT",
                                  value = "tree"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 53,
                              step = 49},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 53,
                              step = 49},
                            {
                              line = 53,
                              name = "IDENT",
                              value = "data"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 53,
                          step = 49},
                        {
                          line = 53,
                          name = "IDENT",
                          value = "val"}},
                      call = {
                        name = "member",
                        proc = <function>},
                      line = 53,
                      step = 49}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 53,
                  step = 50}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 53,
              step = 50},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 54,
                          name = "IDENT",
                          value = "printTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 54,
                      step = 50},
                    {
                      arg = {
                        {
                          line = 54,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 54,
                      step = 50},
                    {
                      arg = {
                        {
                          line = 54,
                          name = "UINTEGER",
                          value = "0"}},
                      call = {
                        name = "constant constexpr uint",
                        obj = "constexpr uint",
                        proc = <function>},
                      line = 54,
                      step = 50}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 54,
                  step = 51}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 54,
              step = 51},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 55,
                          name = "IDENT",
                          value = "deleteTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 55,
                      step = 51},
                    {
                      arg = {
                        {
                          line = 55,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 55,
                      step = 51}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 55,
                  step = 52}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 55,
              step = 52},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 56,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 56,
                      step = 52},
                    {
                      arg = {
                        {
                          line = 56,
                          name = "DQSTRING",
                          value = "Done\\n"}},
                      call = {
                        name = "string_constant",
                        proc = <function>},
                      line = 56,
                      step = 52}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 56,
                  step = 53}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 56,
              step = 53}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 56,
          scope = {
            35,
            54}}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 56,
      step = 54}},
  call = {
    name = "program",
    proc = <function>},
  line = 56,
  step = 54}
