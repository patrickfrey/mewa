Shift token "extern" at line 1 in state 1, goto 4
Shift token DQSTRING = "C" at line 1 in state 4, goto 27
Shift token "procedure" at line 1 in state 27, goto 49
Shift token IDENT = "printf" at line 1 in state 49, goto 70
Shift token '(' at line 1 in state 70, goto 135
Shift token "const" at line 1 in state 135, goto 18
Shift token IDENT = "byte" at line 1 in state 18, goto 17
Reduce #1 to typename by token '^' at line 1 in state 17, goto 39
Shift token '^' at line 1 in state 39, goto 59
Reduce #3 to typespec by token IDENT = "fmt" at line 1 in state 59, call typespec "const^", goto 245
Shift token IDENT = "fmt" at line 1 in state 245, goto 313
Reduce #2 to extern_parameters by token "..." at line 1 in state 313, call extern_paramdef, goto 243
Reduce #1 to extern_paramlist by token "..." at line 1 in state 243, call extern_paramdeflist, goto 244
Shift token "..." at line 1 in state 244, goto 312
Shift token ')' at line 1 in state 312, goto 339
Shift token ';' at line 1 in state 339, goto 357
Reduce #9 to extern_definition by token "extern" at line 2 in state 357, call extern_procdef_vararg, goto 3
Shift token "extern" at line 2 in state 3, goto 4
Shift token DQSTRING = "C" at line 2 in state 4, goto 27
Shift token "procedure" at line 2 in state 27, goto 49
Shift token IDENT = "putchar" at line 2 in state 49, goto 70
Shift token '(' at line 2 in state 70, goto 135
Shift token "const" at line 2 in state 135, goto 18
Shift token IDENT = "byte" at line 2 in state 18, goto 17
Reduce #1 to typename by token ')' at line 2 in state 17, goto 39
Reduce #2 to typespec by token ')' at line 2 in state 39, call typespec "const ", goto 245
Reduce #1 to extern_parameters by token ')' at line 2 in state 245, call extern_paramdef, goto 243
Reduce #1 to extern_paramlist by token ')' at line 2 in state 243, call extern_paramdeflist, goto 244
Shift token ')' at line 2 in state 244, goto 311
Shift token ';' at line 2 in state 311, goto 338
Reduce #8 to extern_definition by token "extern" at line 3 in state 338, call extern_procdef, goto 3
Shift token "extern" at line 3 in state 3, goto 4
Shift token DQSTRING = "C" at line 3 in state 4, goto 27
Shift token "function" at line 3 in state 27, goto 48
Shift token IDENT = "malloc" at line 3 in state 48, goto 69
Shift token IDENT = "byte" at line 3 in state 69, goto 17
Reduce #1 to typename by token '^' at line 3 in state 17, goto 8
Shift token '^' at line 3 in state 8, goto 32
Reduce #2 to typespec by token '(' at line 3 in state 32, call typespec "^", goto 134
Shift token '(' at line 3 in state 134, goto 242
Shift token IDENT = "long" at line 3 in state 242, goto 17
Reduce #1 to typename by token ')' at line 3 in state 17, goto 8
Reduce #1 to typespec by token ')' at line 3 in state 8, call typespec "", goto 245
Reduce #1 to extern_parameters by token ')' at line 3 in state 245, call extern_paramdef, goto 243
Reduce #1 to extern_paramlist by token ')' at line 3 in state 243, call extern_paramdeflist, goto 310
Shift token ')' at line 3 in state 310, goto 336
Shift token ';' at line 3 in state 336, goto 355
Reduce #9 to extern_definition by token "extern" at line 4 in state 355, call extern_funcdef, goto 3
Shift token "extern" at line 4 in state 3, goto 4
Shift token DQSTRING = "C" at line 4 in state 4, goto 27
Shift token "procedure" at line 4 in state 27, goto 49
Shift token IDENT = "free" at line 4 in state 49, goto 70
Shift token '(' at line 4 in state 70, goto 135
Shift token IDENT = "byte" at line 4 in state 135, goto 17
Reduce #1 to typename by token '^' at line 4 in state 17, goto 8
Shift token '^' at line 4 in state 8, goto 32
Reduce #2 to typespec by token ')' at line 4 in state 32, call typespec "^", goto 245
Reduce #1 to extern_parameters by token ')' at line 4 in state 245, call extern_paramdef, goto 243
Reduce #1 to extern_paramlist by token ')' at line 4 in state 243, call extern_paramdeflist, goto 244
Shift token ')' at line 4 in state 244, goto 311
Shift token ';' at line 4 in state 311, goto 338
Reduce #8 to extern_definition by token "private" at line 6 in state 338, call extern_procdef, goto 3
Reduce #0 to extern_definitionlist by token "private" at line 6 in state 3, goto 26
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 26, goto 26
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 26, goto 26
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 26, goto 26
Reduce #2 to extern_definitionlist by token "private" at line 6 in state 26, goto 2
Shift token "private" at line 6 in state 2, goto 24
Reduce #1 to linkage by token "function" at line 6 in state 24, call linkage {private=true,linkage="internal"}, goto 14
Shift token "function" at line 6 in state 14, goto 35
Shift token IDENT = "allocmem" at line 6 in state 35, goto 55
Shift token IDENT = "byte" at line 6 in state 55, goto 17
Reduce #1 to typename by token '^' at line 6 in state 17, goto 8
Shift token '^' at line 6 in state 8, goto 32
Reduce #2 to typespec by token '(' at line 6 in state 32, call typespec "^", goto 105
Shift token '(' at line 6 in state 105, goto 108
Shift token IDENT = "long" at line 6 in state 108, goto 17
Reduce #1 to typename by token IDENT = "bytes" at line 6 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "bytes" at line 6 in state 8, call typespec "", goto 198
Shift token IDENT = "bytes" at line 6 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 6 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 6 in state 201, goto 200
Reduce #1 to parameterlist by token ')' at line 6 in state 200, call paramdeflist, goto 199
Shift token ')' at line 6 in state 199, goto 296
Shift token '{' at line 7 in state 296, goto 324
Shift token "return" at line 8 in state 324, goto 94
Shift token IDENT = "malloc" at line 8 in state 94, goto 79
Reduce #1 to expression by token '(' at line 8 in state 79, call variable, goto 188
Shift token '(' at line 8 in state 188, goto 140
Shift token IDENT = "bytes" at line 8 in state 140, goto 79
Reduce #1 to expression by token ')' at line 8 in state 79, call variable, goto 194
Reduce #1 to expressionlist by token ')' at line 8 in state 194, goto 247
Shift token ')' at line 8 in state 247, goto 315
Reduce #4 to expression by token ';' at line 8 in state 315, call operator "()", goto 188
Shift token ';' at line 8 in state 188, goto 288
Reduce #3 to statement by token '}' at line 9 in state 288, call return_value, goto 75
Reduce #0 to statementlist by token '}' at line 9 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 9 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 9 in state 74, call codeblock, goto 347
Shift token '}' at line 9 in state 347, goto 363
Reduce #6 to callablebody by token "private" at line 10 in state 363, call callablebody, goto 196
Reduce #5 to functiondefinition by token "private" at line 10 in state 196, call funcdef {const=false}, goto 15
Reduce #1 to free_definition by token "private" at line 10 in state 15, call definition 1, goto 7
Shift token "private" at line 10 in state 7, goto 24
Reduce #1 to linkage by token "procedure" at line 10 in state 24, call linkage {private=true,linkage="internal"}, goto 14
Shift token "procedure" at line 10 in state 14, goto 36
Shift token IDENT = "freemem" at line 10 in state 36, goto 56
Shift token '(' at line 10 in state 56, goto 108
Shift token IDENT = "byte" at line 10 in state 108, goto 17
Reduce #1 to typename by token '^' at line 10 in state 17, goto 8
Shift token '^' at line 10 in state 8, goto 32
Reduce #2 to typespec by token IDENT = "ptr" at line 10 in state 32, call typespec "^", goto 198
Shift token IDENT = "ptr" at line 10 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 10 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 10 in state 201, goto 200
Reduce #1 to parameterlist by token ')' at line 10 in state 200, call paramdeflist, goto 199
Shift token ')' at line 10 in state 199, goto 296
Shift token '{' at line 11 in state 296, goto 324
Shift token IDENT = "free" at line 12 in state 324, goto 79
Reduce #1 to expression by token '(' at line 12 in state 79, call variable, goto 76
Shift token '(' at line 12 in state 76, goto 140
Shift token IDENT = "ptr" at line 12 in state 140, goto 79
Reduce #1 to expression by token ')' at line 12 in state 79, call variable, goto 194
Reduce #1 to expressionlist by token ')' at line 12 in state 194, goto 247
Shift token ')' at line 12 in state 247, goto 315
Reduce #4 to expression by token ';' at line 12 in state 315, call operator "()", goto 76
Shift token ';' at line 12 in state 76, goto 141
Reduce #2 to statement by token '}' at line 13 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 13 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 13 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 13 in state 74, call codeblock, goto 347
Shift token '}' at line 13 in state 347, goto 363
Reduce #6 to callablebody by token "struct" at line 15 in state 363, call callablebody, goto 106
Reduce #4 to functiondefinition by token "struct" at line 15 in state 106, call procdef {const=false}, goto 15
Reduce #1 to free_definition by token "struct" at line 15 in state 15, call definition 1, goto 7
Shift token "struct" at line 15 in state 7, goto 21
Shift token IDENT = "Tree" at line 15 in state 21, goto 44
Shift token '{' at line 16 in state 44, goto 66
Shift token "struct" at line 17 in state 66, goto 21
Shift token IDENT = "Data" at line 17 in state 21, goto 44
Shift token '{' at line 18 in state 44, goto 66
Shift token IDENT = "int" at line 19 in state 66, goto 17
Reduce #1 to typename by token IDENT = "val" at line 19 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "val" at line 19 in state 8, call typespec "", goto 9
Shift token IDENT = "val" at line 19 in state 9, goto 33
Reduce #2 to variabledefinition by token ';' at line 19 in state 33, call vardef, goto 16
Shift token ';' at line 19 in state 16, goto 37
Reduce #2 to struct_definition by token '}' at line 20 in state 37, call definition 1, goto 128
Reduce #0 to struct_definitionlist by token '}' at line 20 in state 128, goto 213
Reduce #2 to struct_definitionlist by token '}' at line 20 in state 213, goto 127
Shift token '}' at line 20 in state 127, goto 212
Reduce #5 to structdefinition by token IDENT = "Data" at line 21 in state 212, call structdef, goto 11
Reduce #1 to struct_definition by token IDENT = "Data" at line 21 in state 11, call definition 1, goto 128
Shift token IDENT = "Data" at line 21 in state 128, goto 17
Reduce #1 to typename by token IDENT = "data" at line 21 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "data" at line 21 in state 8, call typespec "", goto 9
Shift token IDENT = "data" at line 21 in state 9, goto 33
Reduce #2 to variabledefinition by token ';' at line 21 in state 33, call vardef, goto 16
Shift token ';' at line 21 in state 16, goto 37
Reduce #2 to struct_definition by token IDENT = "Tree" at line 22 in state 37, call definition 1, goto 128
Shift token IDENT = "Tree" at line 22 in state 128, goto 17
Reduce #1 to typename by token '^' at line 22 in state 17, goto 8
Shift token '^' at line 22 in state 8, goto 32
Reduce #2 to typespec by token IDENT = "left" at line 22 in state 32, call typespec "^", goto 9
Shift token IDENT = "left" at line 22 in state 9, goto 33
Reduce #2 to variabledefinition by token ';' at line 22 in state 33, call vardef, goto 16
Shift token ';' at line 22 in state 16, goto 37
Reduce #2 to struct_definition by token IDENT = "Tree" at line 23 in state 37, call definition 1, goto 128
Shift token IDENT = "Tree" at line 23 in state 128, goto 17
Reduce #1 to typename by token '^' at line 23 in state 17, goto 8
Shift token '^' at line 23 in state 8, goto 32
Reduce #2 to typespec by token IDENT = "right" at line 23 in state 32, call typespec "^", goto 9
Shift token IDENT = "right" at line 23 in state 9, goto 33
Reduce #2 to variabledefinition by token ';' at line 23 in state 33, call vardef, goto 16
Shift token ';' at line 23 in state 16, goto 37
Reduce #2 to struct_definition by token '}' at line 24 in state 37, call definition 1, goto 128
Reduce #0 to struct_definitionlist by token '}' at line 24 in state 128, goto 213
Reduce #2 to struct_definitionlist by token '}' at line 24 in state 213, goto 213
Reduce #2 to struct_definitionlist by token '}' at line 24 in state 213, goto 213
Reduce #2 to struct_definitionlist by token '}' at line 24 in state 213, goto 213
Reduce #2 to struct_definitionlist by token '}' at line 24 in state 213, goto 127
Shift token '}' at line 24 in state 127, goto 212
Reduce #5 to structdefinition by token IDENT = "Tree" at line 26 in state 212, call structdef, goto 11
Reduce #1 to struct_definition by token IDENT = "Tree" at line 26 in state 11, call definition 1, goto 6
Reduce #1 to free_definition by token IDENT = "Tree" at line 26 in state 6, goto 7
Shift token IDENT = "Tree" at line 26 in state 7, goto 17
Reduce #1 to typename by token IDENT = "g_tree" at line 26 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "g_tree" at line 26 in state 8, call typespec "", goto 9
Shift token IDENT = "g_tree" at line 26 in state 9, goto 33
Reduce #2 to variabledefinition by token ';' at line 26 in state 33, call vardef, goto 16
Shift token ';' at line 26 in state 16, goto 37
Reduce #2 to struct_definition by token "private" at line 28 in state 37, call definition 1, goto 6
Reduce #1 to free_definition by token "private" at line 28 in state 6, goto 7
Shift token "private" at line 28 in state 7, goto 24
Reduce #1 to linkage by token "procedure" at line 28 in state 24, call linkage {private=true,linkage="internal"}, goto 14
Shift token "procedure" at line 28 in state 14, goto 36
Shift token IDENT = "printTree" at line 28 in state 36, goto 56
Shift token '(' at line 28 in state 56, goto 108
Shift token "const" at line 28 in state 108, goto 18
Shift token IDENT = "Tree" at line 28 in state 18, goto 17
Reduce #1 to typename by token '^' at line 28 in state 17, goto 39
Shift token '^' at line 28 in state 39, goto 59
Reduce #3 to typespec by token IDENT = "node" at line 28 in state 59, call typespec "const^", goto 198
Shift token IDENT = "node" at line 28 in state 198, goto 295
Reduce #2 to paramdecl by token ',' at line 28 in state 295, call paramdef, goto 201
Shift token ',' at line 28 in state 201, goto 297
Shift token IDENT = "int" at line 28 in state 297, goto 17
Reduce #1 to typename by token IDENT = "indent" at line 28 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "indent" at line 28 in state 8, call typespec "", goto 198
Shift token IDENT = "indent" at line 28 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 28 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 28 in state 201, goto 325
Reduce #3 to parameters by token ')' at line 28 in state 325, goto 200
Reduce #1 to parameterlist by token ')' at line 28 in state 200, call paramdeflist, goto 199
Shift token ')' at line 28 in state 199, goto 296
Shift token '{' at line 29 in state 296, goto 324
Shift token "var" at line 30 in state 324, goto 93
Shift token IDENT = "int" at line 30 in state 93, goto 17
Reduce #1 to typename by token IDENT = "ii" at line 30 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "ii" at line 30 in state 8, call typespec "", goto 9
Shift token IDENT = "ii" at line 30 in state 9, goto 33
Shift token '=' at line 30 in state 33, goto 53
Shift token CARDINAL = "0" at line 30 in state 53, goto 82
Reduce #1 to expression by token ';' at line 30 in state 82, call constant "constexpr uint", goto 102
Reduce #4 to variabledefinition by token ';' at line 30 in state 102, call vardef_assign, goto 187
Shift token ';' at line 30 in state 187, goto 287
Reduce #3 to statement by token "while" at line 31 in state 287, call definition, goto 75
Shift token "while" at line 31 in state 75, goto 97
Shift token '(' at line 31 in state 97, goto 191
Shift token IDENT = "ii" at line 31 in state 191, goto 79
Reduce #1 to expression by token '<' at line 31 in state 79, call variable, goto 291
Shift token '<' at line 31 in state 291, goto 162
Shift token IDENT = "indent" at line 31 in state 162, goto 79
Reduce #1 to expression by token ')' at line 31 in state 79, call variable, goto 269
Reduce #3 to expression by token ')' at line 31 in state 269, call operator "<", goto 291
Shift token ')' at line 31 in state 291, goto 319
Shift token '{' at line 32 in state 319, goto 343
Shift token IDENT = "putchar" at line 33 in state 343, goto 79
Reduce #1 to expression by token '(' at line 33 in state 79, call variable, goto 76
Shift token '(' at line 33 in state 76, goto 140
Shift token SQSTRING = " " at line 33 in state 140, goto 81
Reduce #1 to expression by token ')' at line 33 in state 81, call char_constant "constexpr float", goto 194
Reduce #1 to expressionlist by token ')' at line 33 in state 194, goto 247
Shift token ')' at line 33 in state 247, goto 315
Reduce #4 to expression by token ';' at line 33 in state 315, call operator "()", goto 76
Shift token ';' at line 33 in state 76, goto 141
Reduce #2 to statement by token IDENT = "ii" at line 34 in state 141, call free_expression, goto 75
Shift token IDENT = "ii" at line 34 in state 75, goto 79
Reduce #1 to expression by token "+=" at line 34 in state 79, call variable, goto 76
Shift token "+=" at line 34 in state 76, goto 163
Shift token CARDINAL = "1" at line 34 in state 163, goto 82
Reduce #1 to expression by token ';' at line 34 in state 82, call constant "constexpr uint", goto 270
Reduce #3 to expression by token ';' at line 34 in state 270, call assign_operator "+", goto 76
Shift token ';' at line 34 in state 76, goto 141
Reduce #2 to statement by token '}' at line 35 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 35 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 35 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 35 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 35 in state 74, call codeblock, goto 360
Shift token '}' at line 35 in state 360, goto 372
Reduce #7 to statement by token IDENT = "printf" at line 36 in state 372, call conditional_while, goto 75
Shift token IDENT = "printf" at line 36 in state 75, goto 79
Reduce #1 to expression by token '(' at line 36 in state 79, call variable, goto 76
Shift token '(' at line 36 in state 76, goto 140
Shift token DQSTRING = "Node: %d\n" at line 36 in state 140, goto 80
Reduce #1 to expression by token ',' at line 36 in state 80, call string_constant "constexpr float", goto 194
Shift token ',' at line 36 in state 194, goto 285
Shift token IDENT = "node" at line 36 in state 285, goto 79
Reduce #1 to expression by token "->" at line 36 in state 79, call variable, goto 194
Shift token "->" at line 36 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "data" at line 36 in state 144, call count, goto 139
Shift token IDENT = "data" at line 36 in state 139, goto 246
Reduce #3 to iexpression by token '.' at line 36 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token '.' at line 36 in state 77, goto 194
Shift token '.' at line 36 in state 194, goto 175
Shift token IDENT = "val" at line 36 in state 175, goto 282
Reduce #3 to expression by token ')' at line 36 in state 282, call member, goto 194
Reduce #1 to expressionlist by token ')' at line 36 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 36 in state 317, goto 247
Shift token ')' at line 36 in state 247, goto 315
Reduce #4 to expression by token ';' at line 36 in state 315, call operator "()", goto 76
Shift token ';' at line 36 in state 76, goto 141
Reduce #2 to statement by token "if" at line 37 in state 141, call free_expression, goto 75
Shift token "if" at line 37 in state 75, goto 96
Shift token '(' at line 37 in state 96, goto 190
Shift token IDENT = "node" at line 37 in state 190, goto 79
Reduce #1 to expression by token "->" at line 37 in state 79, call variable, goto 290
Shift token "->" at line 37 in state 290, goto 144
Reduce #1 to indirection by token IDENT = "left" at line 37 in state 144, call count, goto 139
Shift token IDENT = "left" at line 37 in state 139, goto 246
Reduce #3 to iexpression by token "!=" at line 37 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token "!=" at line 37 in state 77, goto 290
Shift token "!=" at line 37 in state 290, goto 158
Shift token "null" at line 37 in state 158, goto 100
Reduce #1 to expression by token ')' at line 37 in state 100, call null "constexpr float", goto 265
Reduce #3 to expression by token ')' at line 37 in state 265, call operator "!=", goto 290
Shift token ')' at line 37 in state 290, goto 318
Shift token '{' at line 37 in state 318, goto 342
Shift token IDENT = "printTree" at line 37 in state 342, goto 79
Reduce #1 to expression by token '(' at line 37 in state 79, call variable, goto 76
Shift token '(' at line 37 in state 76, goto 140
Shift token IDENT = "node" at line 37 in state 140, goto 79
Reduce #1 to expression by token "->" at line 37 in state 79, call variable, goto 194
Shift token "->" at line 37 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "left" at line 37 in state 144, call count, goto 139
Shift token IDENT = "left" at line 37 in state 139, goto 246
Reduce #3 to iexpression by token ',' at line 37 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token ',' at line 37 in state 77, goto 194
Shift token ',' at line 37 in state 194, goto 285
Shift token IDENT = "indent" at line 37 in state 285, goto 79
Reduce #1 to expression by token '+' at line 37 in state 79, call variable, goto 194
Shift token '+' at line 37 in state 194, goto 146
Shift token CARDINAL = "1" at line 37 in state 146, goto 82
Reduce #1 to expression by token ')' at line 37 in state 82, call constant "constexpr uint", goto 253
Reduce #3 to expression by token ')' at line 37 in state 253, call operator "+", goto 194
Reduce #1 to expressionlist by token ')' at line 37 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 37 in state 317, goto 247
Shift token ')' at line 37 in state 247, goto 315
Reduce #4 to expression by token ';' at line 37 in state 315, call operator "()", goto 76
Shift token ';' at line 37 in state 76, goto 141
Reduce #2 to statement by token '}' at line 37 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 37 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 37 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 37 in state 74, call codeblock, goto 359
Shift token '}' at line 37 in state 359, goto 371
Reduce #7 to statement by token "if" at line 38 in state 371, call conditional_if, goto 75
Shift token "if" at line 38 in state 75, goto 96
Shift token '(' at line 38 in state 96, goto 190
Shift token IDENT = "node" at line 38 in state 190, goto 79
Reduce #1 to expression by token "->" at line 38 in state 79, call variable, goto 290
Shift token "->" at line 38 in state 290, goto 144
Reduce #1 to indirection by token IDENT = "right" at line 38 in state 144, call count, goto 139
Shift token IDENT = "right" at line 38 in state 139, goto 246
Reduce #3 to iexpression by token "!=" at line 38 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token "!=" at line 38 in state 77, goto 290
Shift token "!=" at line 38 in state 290, goto 158
Shift token "null" at line 38 in state 158, goto 100
Reduce #1 to expression by token ')' at line 38 in state 100, call null "constexpr float", goto 265
Reduce #3 to expression by token ')' at line 38 in state 265, call operator "!=", goto 290
Shift token ')' at line 38 in state 290, goto 318
Shift token '{' at line 38 in state 318, goto 342
Shift token IDENT = "printTree" at line 38 in state 342, goto 79
Reduce #1 to expression by token '(' at line 38 in state 79, call variable, goto 76
Shift token '(' at line 38 in state 76, goto 140
Shift token IDENT = "node" at line 38 in state 140, goto 79
Reduce #1 to expression by token "->" at line 38 in state 79, call variable, goto 194
Shift token "->" at line 38 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "right" at line 38 in state 144, call count, goto 139
Shift token IDENT = "right" at line 38 in state 139, goto 246
Reduce #3 to iexpression by token ',' at line 38 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token ',' at line 38 in state 77, goto 194
Shift token ',' at line 38 in state 194, goto 285
Shift token IDENT = "indent" at line 38 in state 285, goto 79
Reduce #1 to expression by token '+' at line 38 in state 79, call variable, goto 194
Shift token '+' at line 38 in state 194, goto 146
Shift token CARDINAL = "1" at line 38 in state 146, goto 82
Reduce #1 to expression by token ')' at line 38 in state 82, call constant "constexpr uint", goto 253
Reduce #3 to expression by token ')' at line 38 in state 253, call operator "+", goto 194
Reduce #1 to expressionlist by token ')' at line 38 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 38 in state 317, goto 247
Shift token ')' at line 38 in state 247, goto 315
Reduce #4 to expression by token ';' at line 38 in state 315, call operator "()", goto 76
Shift token ';' at line 38 in state 76, goto 141
Reduce #2 to statement by token '}' at line 38 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 38 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 38 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 38 in state 74, call codeblock, goto 359
Shift token '}' at line 38 in state 359, goto 371
Reduce #7 to statement by token '}' at line 39 in state 371, call conditional_if, goto 75
Reduce #0 to statementlist by token '}' at line 39 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 39 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 39 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 39 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 39 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 39 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 39 in state 74, call codeblock, goto 347
Shift token '}' at line 39 in state 347, goto 363
Reduce #6 to callablebody by token "private" at line 41 in state 363, call callablebody, goto 106
Reduce #4 to functiondefinition by token "private" at line 41 in state 106, call procdef {const=false}, goto 15
Reduce #1 to free_definition by token "private" at line 41 in state 15, call definition 1, goto 7
Shift token "private" at line 41 in state 7, goto 24
Reduce #1 to linkage by token "procedure" at line 41 in state 24, call linkage {private=true,linkage="internal"}, goto 14
Shift token "procedure" at line 41 in state 14, goto 36
Shift token IDENT = "deleteTree" at line 41 in state 36, goto 56
Shift token '(' at line 41 in state 56, goto 108
Shift token IDENT = "Tree" at line 41 in state 108, goto 17
Reduce #1 to typename by token '^' at line 41 in state 17, goto 8
Shift token '^' at line 41 in state 8, goto 32
Reduce #2 to typespec by token IDENT = "node" at line 41 in state 32, call typespec "^", goto 198
Shift token IDENT = "node" at line 41 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 41 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 41 in state 201, goto 200
Reduce #1 to parameterlist by token ')' at line 41 in state 200, call paramdeflist, goto 199
Shift token ')' at line 41 in state 199, goto 296
Shift token '{' at line 42 in state 296, goto 324
Shift token "if" at line 43 in state 324, goto 96
Shift token '(' at line 43 in state 96, goto 190
Shift token IDENT = "node" at line 43 in state 190, goto 79
Reduce #1 to expression by token "->" at line 43 in state 79, call variable, goto 290
Shift token "->" at line 43 in state 290, goto 144
Reduce #1 to indirection by token IDENT = "left" at line 43 in state 144, call count, goto 139
Shift token IDENT = "left" at line 43 in state 139, goto 246
Reduce #3 to iexpression by token "!=" at line 43 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token "!=" at line 43 in state 77, goto 290
Shift token "!=" at line 43 in state 290, goto 158
Shift token "null" at line 43 in state 158, goto 100
Reduce #1 to expression by token ')' at line 43 in state 100, call null "constexpr float", goto 265
Reduce #3 to expression by token ')' at line 43 in state 265, call operator "!=", goto 290
Shift token ')' at line 43 in state 290, goto 318
Shift token '{' at line 43 in state 318, goto 342
Shift token IDENT = "deleteTree" at line 43 in state 342, goto 79
Reduce #1 to expression by token '(' at line 43 in state 79, call variable, goto 76
Shift token '(' at line 43 in state 76, goto 140
Shift token IDENT = "node" at line 43 in state 140, goto 79
Reduce #1 to expression by token "->" at line 43 in state 79, call variable, goto 194
Shift token "->" at line 43 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "left" at line 43 in state 144, call count, goto 139
Shift token IDENT = "left" at line 43 in state 139, goto 246
Reduce #3 to iexpression by token ')' at line 43 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token ')' at line 43 in state 77, goto 194
Reduce #1 to expressionlist by token ')' at line 43 in state 194, goto 247
Shift token ')' at line 43 in state 247, goto 315
Reduce #4 to expression by token ';' at line 43 in state 315, call operator "()", goto 76
Shift token ';' at line 43 in state 76, goto 141
Reduce #2 to statement by token '}' at line 43 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 43 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 43 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 43 in state 74, call codeblock, goto 359
Shift token '}' at line 43 in state 359, goto 371
Reduce #7 to statement by token "if" at line 44 in state 371, call conditional_if, goto 75
Shift token "if" at line 44 in state 75, goto 96
Shift token '(' at line 44 in state 96, goto 190
Shift token IDENT = "node" at line 44 in state 190, goto 79
Reduce #1 to expression by token "->" at line 44 in state 79, call variable, goto 290
Shift token "->" at line 44 in state 290, goto 144
Reduce #1 to indirection by token IDENT = "right" at line 44 in state 144, call count, goto 139
Shift token IDENT = "right" at line 44 in state 139, goto 246
Reduce #3 to iexpression by token "!=" at line 44 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token "!=" at line 44 in state 77, goto 290
Shift token "!=" at line 44 in state 290, goto 158
Shift token "null" at line 44 in state 158, goto 100
Reduce #1 to expression by token ')' at line 44 in state 100, call null "constexpr float", goto 265
Reduce #3 to expression by token ')' at line 44 in state 265, call operator "!=", goto 290
Shift token ')' at line 44 in state 290, goto 318
Shift token '{' at line 44 in state 318, goto 342
Shift token IDENT = "deleteTree" at line 44 in state 342, goto 79
Reduce #1 to expression by token '(' at line 44 in state 79, call variable, goto 76
Shift token '(' at line 44 in state 76, goto 140
Shift token IDENT = "node" at line 44 in state 140, goto 79
Reduce #1 to expression by token "->" at line 44 in state 79, call variable, goto 194
Shift token "->" at line 44 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "right" at line 44 in state 144, call count, goto 139
Shift token IDENT = "right" at line 44 in state 139, goto 246
Reduce #3 to iexpression by token ')' at line 44 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token ')' at line 44 in state 77, goto 194
Reduce #1 to expressionlist by token ')' at line 44 in state 194, goto 247
Shift token ')' at line 44 in state 247, goto 315
Reduce #4 to expression by token ';' at line 44 in state 315, call operator "()", goto 76
Shift token ';' at line 44 in state 76, goto 141
Reduce #2 to statement by token '}' at line 44 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 44 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 44 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 44 in state 74, call codeblock, goto 359
Shift token '}' at line 44 in state 359, goto 371
Reduce #7 to statement by token "delete" at line 45 in state 371, call conditional_if, goto 75
Shift token "delete" at line 45 in state 75, goto 95
Shift token IDENT = "node" at line 45 in state 95, goto 79
Reduce #1 to expression by token ';' at line 45 in state 79, call variable, goto 189
Shift token ';' at line 45 in state 189, goto 289
Reduce #3 to statement by token '}' at line 46 in state 289, call delete, goto 75
Reduce #0 to statementlist by token '}' at line 46 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 46 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 46 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 46 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 46 in state 74, call codeblock, goto 347
Shift token '}' at line 46 in state 347, goto 363
Reduce #6 to callablebody by token "main" at line 48 in state 363, call callablebody, goto 106
Reduce #4 to functiondefinition by token "main" at line 48 in state 106, call procdef {const=false}, goto 15
Reduce #1 to free_definition by token "main" at line 48 in state 15, call definition 1, goto 7
Reduce #0 to free_definitionlist by token "main" at line 48 in state 7, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 30
Reduce #2 to free_definitionlist by token "main" at line 48 in state 30, goto 5
Shift token "main" at line 48 in state 5, goto 29
Shift token '{' at line 49 in state 29, goto 50
Shift token "var" at line 50 in state 50, goto 93
Shift token IDENT = "Tree" at line 50 in state 93, goto 17
Reduce #1 to typename by token '^' at line 50 in state 17, goto 8
Shift token '^' at line 50 in state 8, goto 32
Reduce #2 to typespec by token IDENT = "tree" at line 50 in state 32, call typespec "^", goto 9
Shift token IDENT = "tree" at line 50 in state 9, goto 33
Shift token '=' at line 50 in state 33, goto 53
Shift token "new" at line 50 in state 53, goto 98
Shift token IDENT = "Tree" at line 50 in state 98, goto 17
Reduce #1 to typename by token ':' at line 50 in state 17, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 192
Shift token ':' at line 50 in state 192, goto 292
Shift token '{' at line 50 in state 292, goto 103
Shift token '{' at line 50 in state 103, goto 103
Shift token CARDINAL = "11" at line 50 in state 103, goto 82
Reduce #1 to expression by token '}' at line 50 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ',' at line 50 in state 286, call structure, goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "new" at line 50 in state 285, goto 98
Shift token IDENT = "Tree" at line 50 in state 98, goto 17
Reduce #1 to typename by token ':' at line 50 in state 17, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 192
Shift token ':' at line 50 in state 192, goto 292
Shift token '{' at line 50 in state 292, goto 103
Shift token '{' at line 50 in state 103, goto 103
Shift token CARDINAL = "1" at line 50 in state 103, goto 82
Reduce #1 to expression by token '}' at line 50 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ',' at line 50 in state 286, call structure, goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "null" at line 50 in state 285, goto 100
Reduce #1 to expression by token ',' at line 50 in state 100, call null "constexpr float", goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "null" at line 50 in state 285, goto 100
Reduce #1 to expression by token '}' at line 50 in state 100, call null "constexpr float", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ',' at line 50 in state 286, call structure, goto 320
Reduce #4 to expression by token ',' at line 50 in state 320, call allocate, goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "new" at line 50 in state 285, goto 98
Shift token IDENT = "Tree" at line 50 in state 98, goto 17
Reduce #1 to typename by token ':' at line 50 in state 17, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 192
Shift token ':' at line 50 in state 192, goto 292
Shift token '{' at line 50 in state 292, goto 103
Shift token '{' at line 50 in state 103, goto 103
Shift token CARDINAL = "2" at line 50 in state 103, goto 82
Reduce #1 to expression by token '}' at line 50 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ',' at line 50 in state 286, call structure, goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "null" at line 50 in state 285, goto 100
Reduce #1 to expression by token ',' at line 50 in state 100, call null "constexpr float", goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "new" at line 50 in state 285, goto 98
Shift token IDENT = "Tree" at line 50 in state 98, goto 17
Reduce #1 to typename by token ':' at line 50 in state 17, goto 8
Reduce #1 to typespec by token ':' at line 50 in state 8, call typespec "", goto 192
Shift token ':' at line 50 in state 192, goto 292
Shift token '{' at line 50 in state 292, goto 103
Shift token '{' at line 50 in state 103, goto 103
Shift token CARDINAL = "22" at line 50 in state 103, goto 82
Reduce #1 to expression by token '}' at line 50 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ',' at line 50 in state 286, call structure, goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "null" at line 50 in state 285, goto 100
Reduce #1 to expression by token ',' at line 50 in state 100, call null "constexpr float", goto 194
Shift token ',' at line 50 in state 194, goto 285
Shift token "null" at line 50 in state 285, goto 100
Reduce #1 to expression by token '}' at line 50 in state 100, call null "constexpr float", goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token '}' at line 50 in state 286, call structure, goto 320
Reduce #4 to expression by token '}' at line 50 in state 320, call allocate, goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token '}' at line 50 in state 286, call structure, goto 320
Reduce #4 to expression by token '}' at line 50 in state 320, call allocate, goto 194
Reduce #1 to expressionlist by token '}' at line 50 in state 194, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 317
Reduce #3 to expressionlist by token '}' at line 50 in state 317, goto 180
Shift token '}' at line 50 in state 180, goto 286
Reduce #3 to expression by token ';' at line 50 in state 286, call structure, goto 320
Reduce #4 to expression by token ';' at line 50 in state 320, call allocate, goto 102
Reduce #4 to variabledefinition by token ';' at line 50 in state 102, call vardef_assign, goto 187
Shift token ';' at line 50 in state 187, goto 287
Reduce #3 to statement by token IDENT = "printf" at line 51 in state 287, call definition, goto 75
Shift token IDENT = "printf" at line 51 in state 75, goto 79
Reduce #1 to expression by token '(' at line 51 in state 79, call variable, goto 76
Shift token '(' at line 51 in state 76, goto 140
Shift token DQSTRING = "VAL %d\n" at line 51 in state 140, goto 80
Reduce #1 to expression by token ',' at line 51 in state 80, call string_constant "constexpr float", goto 194
Shift token ',' at line 51 in state 194, goto 285
Shift token IDENT = "tree" at line 51 in state 285, goto 79
Reduce #1 to expression by token "->" at line 51 in state 79, call variable, goto 194
Shift token "->" at line 51 in state 194, goto 144
Reduce #1 to indirection by token IDENT = "data" at line 51 in state 144, call count, goto 139
Shift token IDENT = "data" at line 51 in state 139, goto 246
Reduce #3 to iexpression by token '.' at line 51 in state 246, call rep_operator "->", goto 77
Reduce #1 to expression by token '.' at line 51 in state 77, goto 194
Shift token '.' at line 51 in state 194, goto 175
Shift token IDENT = "val" at line 51 in state 175, goto 282
Reduce #3 to expression by token ')' at line 51 in state 282, call member, goto 194
Reduce #1 to expressionlist by token ')' at line 51 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 51 in state 317, goto 247
Shift token ')' at line 51 in state 247, goto 315
Reduce #4 to expression by token ';' at line 51 in state 315, call operator "()", goto 76
Shift token ';' at line 51 in state 76, goto 141
Reduce #2 to statement by token IDENT = "printTree" at line 52 in state 141, call free_expression, goto 75
Shift token IDENT = "printTree" at line 52 in state 75, goto 79
Reduce #1 to expression by token '(' at line 52 in state 79, call variable, goto 76
Shift token '(' at line 52 in state 76, goto 140
Shift token IDENT = "tree" at line 52 in state 140, goto 79
Reduce #1 to expression by token ',' at line 52 in state 79, call variable, goto 194
Shift token ',' at line 52 in state 194, goto 285
Shift token CARDINAL = "0" at line 52 in state 285, goto 82
Reduce #1 to expression by token ')' at line 52 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token ')' at line 52 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 52 in state 317, goto 247
Shift token ')' at line 52 in state 247, goto 315
Reduce #4 to expression by token ';' at line 52 in state 315, call operator "()", goto 76
Shift token ';' at line 52 in state 76, goto 141
Reduce #2 to statement by token IDENT = "deleteTree" at line 53 in state 141, call free_expression, goto 75
Shift token IDENT = "deleteTree" at line 53 in state 75, goto 79
Reduce #1 to expression by token '(' at line 53 in state 79, call variable, goto 76
Shift token '(' at line 53 in state 76, goto 140
Shift token IDENT = "tree" at line 53 in state 140, goto 79
Reduce #1 to expression by token ')' at line 53 in state 79, call variable, goto 194
Reduce #1 to expressionlist by token ')' at line 53 in state 194, goto 247
Shift token ')' at line 53 in state 247, goto 315
Reduce #4 to expression by token ';' at line 53 in state 315, call operator "()", goto 76
Shift token ';' at line 53 in state 76, goto 141
Reduce #2 to statement by token IDENT = "printf" at line 54 in state 141, call free_expression, goto 75
Shift token IDENT = "printf" at line 54 in state 75, goto 79
Reduce #1 to expression by token '(' at line 54 in state 79, call variable, goto 76
Shift token '(' at line 54 in state 76, goto 140
Shift token DQSTRING = "Done\n" at line 54 in state 140, goto 80
Reduce #1 to expression by token ')' at line 54 in state 80, call string_constant "constexpr float", goto 194
Reduce #1 to expressionlist by token ')' at line 54 in state 194, goto 247
Shift token ')' at line 54 in state 247, goto 315
Reduce #4 to expression by token ';' at line 54 in state 315, call operator "()", goto 76
Shift token ';' at line 54 in state 76, goto 141
Reduce #2 to statement by token '}' at line 55 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 55 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 55 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 55 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 55 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 55 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 55 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 55 in state 74, call codeblock, goto 73
Shift token '}' at line 55 in state 73, goto 137
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 1,
          name = "DQSTRING",
          value = "C"},
        {
          line = 1,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 1,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec const^",
                    obj = "const^",
                    proc = <function>},
                  line = 1,
                  step = 0},
                {
                  line = 1,
                  name = "IDENT",
                  value = "fmt"}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 1,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 1,
          step = 0}},
      call = {
        name = "extern_procdef_vararg",
        proc = <function>},
      line = 1,
      step = 0},
    {
      arg = {
        {
          line = 2,
          name = "DQSTRING",
          value = "C"},
        {
          line = 2,
          name = "IDENT",
          value = "putchar"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 2,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec const ",
                    obj = "const ",
                    proc = <function>},
                  line = 2,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 2,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 2,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 2,
      step = 0},
    {
      arg = {
        {
          line = 3,
          name = "DQSTRING",
          value = "C"},
        {
          line = 3,
          name = "IDENT",
          value = "malloc"},
        {
          arg = {
            {
              line = 3,
              name = "IDENT",
              value = "byte"}},
          call = {
            name = "typespec ^",
            obj = "^",
            proc = <function>},
          line = 3,
          step = 0},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 3,
                      name = "IDENT",
                      value = "long"}},
                  call = {
                    name = "typespec ",
                    obj = "",
                    proc = <function>},
                  line = 3,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 3,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 3,
          step = 0}},
      call = {
        name = "extern_funcdef",
        proc = <function>},
      line = 3,
      step = 0},
    {
      arg = {
        {
          line = 4,
          name = "DQSTRING",
          value = "C"},
        {
          line = 4,
          name = "IDENT",
          value = "free"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 4,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec ^",
                    obj = "^",
                    proc = <function>},
                  line = 4,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 4,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 4,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 4,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 4,
              step = 0},
            {
              line = 6,
              name = "IDENT",
              value = "allocmem"},
            {
              arg = {
                {
                  line = 6,
                  name = "IDENT",
                  value = "byte"}},
              call = {
                name = "typespec ^",
                obj = "^",
                proc = <function>},
              line = 6,
              step = 0},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 6,
                              name = "IDENT",
                              value = "long"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 6,
                          step = 0},
                        {
                          line = 6,
                          name = "IDENT",
                          value = "bytes"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 6,
                      step = 0}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 6,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 8,
                                  name = "IDENT",
                                  value = "malloc"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 8,
                              step = 0},
                            {
                              arg = {
                                {
                                  line = 8,
                                  name = "IDENT",
                                  value = "bytes"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 8,
                              step = 0}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 8,
                          step = 0}},
                      call = {
                        name = "return_value",
                        proc = <function>},
                      line = 8,
                      step = 1}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 8,
                  step = 1}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 8,
              scope = {
                0,
                2}}},
          call = {
            name = "funcdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 8,
          step = 2}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 8,
      step = 2},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 8,
              step = 2},
            {
              line = 10,
              name = "IDENT",
              value = "freemem"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 10,
                              name = "IDENT",
                              value = "byte"}},
                          call = {
                            name = "typespec ^",
                            obj = "^",
                            proc = <function>},
                          line = 10,
                          step = 2},
                        {
                          line = 10,
                          name = "IDENT",
                          value = "ptr"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 10,
                      step = 2}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 10,
                  step = 2},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "free"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 12,
                              step = 2},
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "ptr"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 12,
                              step = 2}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 12,
                          step = 2}},
                      call = {
                        name = "free_expression",
                        proc = <function>},
                      line = 12,
                      step = 2}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 12,
                  step = 2}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 12,
              scope = {
                2,
                3}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 12,
          step = 3}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 12,
      step = 3},
    {
      arg = {
        {
          arg = {
            {
              line = 15,
              name = "IDENT",
              value = "Tree"},
            {
              arg = {
                {
                  arg = {
                    {
                      line = 17,
                      name = "IDENT",
                      value = "Data"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 19,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 19,
                              step = 3},
                            {
                              line = 19,
                              name = "IDENT",
                              value = "val"}},
                          call = {
                            name = "vardef",
                            proc = <function>},
                          line = 19,
                          step = 4}},
                      call = {
                        name = "definition 1",
                        obj = 1,
                        proc = <function>},
                      line = 19,
                      step = 4}},
                  call = {
                    name = "structdef",
                    proc = <function>},
                  line = 19,
                  step = 5}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 19,
              step = 5},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 21,
                          name = "IDENT",
                          value = "Data"}},
                      call = {
                        name = "typespec ",
                        obj = "",
                        proc = <function>},
                      line = 21,
                      step = 5},
                    {
                      line = 21,
                      name = "IDENT",
                      value = "data"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 21,
                  step = 6}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 21,
              step = 6},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 22,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 22,
                      step = 6},
                    {
                      line = 22,
                      name = "IDENT",
                      value = "left"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 22,
                  step = 7}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 22,
              step = 7},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 23,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 23,
                      step = 7},
                    {
                      line = 23,
                      name = "IDENT",
                      value = "right"}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 23,
                  step = 8}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 23,
              step = 8}},
          call = {
            name = "structdef",
            proc = <function>},
          line = 23,
          step = 9}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 23,
      step = 9},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  line = 26,
                  name = "IDENT",
                  value = "Tree"}},
              call = {
                name = "typespec ",
                obj = "",
                proc = <function>},
              line = 26,
              step = 9},
            {
              line = 26,
              name = "IDENT",
              value = "g_tree"}},
          call = {
            name = "vardef",
            proc = <function>},
          line = 26,
          step = 10}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 26,
      step = 10},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 26,
              step = 10},
            {
              line = 28,
              name = "IDENT",
              value = "printTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 28,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec const^",
                            obj = "const^",
                            proc = <function>},
                          line = 28,
                          step = 10},
                        {
                          line = 28,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 28,
                      step = 10},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 28,
                              name = "IDENT",
                              value = "int"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 28,
                          step = 10},
                        {
                          line = 28,
                          name = "IDENT",
                          value = "indent"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 28,
                      step = 10}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 28,
                  step = 10},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 30,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 30,
                              step = 10},
                            {
                              line = 30,
                              name = "IDENT",
                              value = "ii"},
                            {
                              arg = {
                                {
                                  line = 30,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 30,
                              step = 10}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 30,
                          step = 11}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 30,
                      step = 11},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 31,
                                  name = "IDENT",
                                  value = "ii"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 31,
                              step = 11},
                            {
                              arg = {
                                {
                                  line = 31,
                                  name = "IDENT",
                                  value = "indent"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 31,
                              step = 11}},
                          call = {
                            name = "operator <",
                            obj = "<",
                            proc = <function>},
                          line = 31,
                          step = 11},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 33,
                                          name = "IDENT",
                                          value = "putchar"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 33,
                                      step = 11},
                                    {
                                      arg = {
                                        {
                                          line = 33,
                                          name = "SQSTRING",
                                          value = " "}},
                                      call = {
                                        name = "char_constant constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 33,
                                      step = 11}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 33,
                                  step = 11}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 33,
                              step = 11},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 34,
                                          name = "IDENT",
                                          value = "ii"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 34,
                                      step = 11},
                                    {
                                      arg = {
                                        {
                                          line = 34,
                                          name = "CARDINAL",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 34,
                                      step = 11}},
                                  call = {
                                    name = "assign_operator +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 34,
                                  step = 11}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 34,
                              step = 11}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 34,
                          step = 11}},
                      call = {
                        name = "conditional_while",
                        proc = <function>},
                      line = 34,
                      scope = {
                        11,
                        12}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 36,
                                  name = "IDENT",
                                  value = "printf"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 36,
                              step = 12},
                            {
                              arg = {
                                {
                                  line = 36,
                                  name = "DQSTRING",
                                  value = "Node: %d\\n"}},
                              call = {
                                name = "string_constant constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 36,
                              step = 12},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 36,
                                          name = "IDENT",
                                          value = "node"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 36,
                                      step = 12},
                                    {
                                      arg = {},
                                      call = {
                                        name = "count",
                                        proc = <function>},
                                      line = 36,
                                      step = 12},
                                    {
                                      line = 36,
                                      name = "IDENT",
                                      value = "data"}},
                                  call = {
                                    name = "rep_operator ->",
                                    obj = "->",
                                    proc = <function>},
                                  line = 36,
                                  step = 12},
                                {
                                  line = 36,
                                  name = "IDENT",
                                  value = "val"}},
                              call = {
                                name = "member",
                                proc = <function>},
                              line = 36,
                              step = 12}},
                          call = {
                            name = "operator ()",
                            obj = "()",
                            proc = <function>},
                          line = 36,
                          step = 12}},
                      call = {
                        name = "free_expression",
                        proc = <function>},
                      line = 36,
                      step = 12},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 37,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 37,
                                  step = 12},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 37,
                                  step = 12},
                                {
                                  line = 37,
                                  name = "IDENT",
                                  value = "left"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 37,
                              step = 12},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 37,
                              step = 12}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 37,
                          step = 12},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 37,
                                          name = "IDENT",
                                          value = "printTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 37,
                                      step = 12},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          line = 37,
                                          name = "IDENT",
                                          value = "left"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 37,
                                      step = 12},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "IDENT",
                                              value = "indent"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 37,
                                          step = 12},
                                        {
                                          arg = {
                                            {
                                              line = 37,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 37,
                                          step = 12}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 37,
                                      step = 12}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 37,
                                  step = 12}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 37,
                              step = 12}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 37,
                          step = 12}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 37,
                      scope = {
                        12,
                        13}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 38,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 38,
                                  step = 13},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 38,
                                  step = 13},
                                {
                                  line = 38,
                                  name = "IDENT",
                                  value = "right"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 38,
                              step = 13},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 38,
                              step = 13}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 38,
                          step = 13},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 38,
                                          name = "IDENT",
                                          value = "printTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 38,
                                      step = 13},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          line = 38,
                                          name = "IDENT",
                                          value = "right"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 38,
                                      step = 13},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "IDENT",
                                              value = "indent"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 38,
                                          step = 13},
                                        {
                                          arg = {
                                            {
                                              line = 38,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 38,
                                          step = 13}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 38,
                                      step = 13}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 38,
                                  step = 13}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 38,
                              step = 13}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 38,
                          step = 13}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 38,
                      scope = {
                        13,
                        14}}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 38,
                  step = 14}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 38,
              scope = {
                10,
                15}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 38,
          step = 15}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 38,
      step = 15},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 38,
              step = 15},
            {
              line = 41,
              name = "IDENT",
              value = "deleteTree"},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 41,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec ^",
                            obj = "^",
                            proc = <function>},
                          line = 41,
                          step = 15},
                        {
                          line = 41,
                          name = "IDENT",
                          value = "node"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 41,
                      step = 15}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 41,
                  step = 15},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 43,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 43,
                                  step = 15},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 43,
                                  step = 15},
                                {
                                  line = 43,
                                  name = "IDENT",
                                  value = "left"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 43,
                              step = 15},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 43,
                              step = 15}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 43,
                          step = 15},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 43,
                                          name = "IDENT",
                                          value = "deleteTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 43,
                                      step = 15},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 43,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 43,
                                          step = 15},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 43,
                                          step = 15},
                                        {
                                          line = 43,
                                          name = "IDENT",
                                          value = "left"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 43,
                                      step = 15}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 43,
                                  step = 15}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 43,
                              step = 15}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 43,
                          step = 15}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 43,
                      scope = {
                        15,
                        16}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 44,
                                      name = "IDENT",
                                      value = "node"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 44,
                                  step = 16},
                                {
                                  arg = {},
                                  call = {
                                    name = "count",
                                    proc = <function>},
                                  line = 44,
                                  step = 16},
                                {
                                  line = 44,
                                  name = "IDENT",
                                  value = "right"}},
                              call = {
                                name = "rep_operator ->",
                                obj = "->",
                                proc = <function>},
                              line = 44,
                              step = 16},
                            {
                              arg = {},
                              call = {
                                name = "null constexpr float",
                                obj = "constexpr float",
                                proc = <function>},
                              line = 44,
                              step = 16}},
                          call = {
                            name = "operator !=",
                            obj = "!=",
                            proc = <function>},
                          line = 44,
                          step = 16},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 44,
                                          name = "IDENT",
                                          value = "deleteTree"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 44,
                                      step = 16},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 44,
                                              name = "IDENT",
                                              value = "node"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 44,
                                          step = 16},
                                        {
                                          arg = {},
                                          call = {
                                            name = "count",
                                            proc = <function>},
                                          line = 44,
                                          step = 16},
                                        {
                                          line = 44,
                                          name = "IDENT",
                                          value = "right"}},
                                      call = {
                                        name = "rep_operator ->",
                                        obj = "->",
                                        proc = <function>},
                                      line = 44,
                                      step = 16}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 44,
                                  step = 16}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 44,
                              step = 16}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 44,
                          step = 16}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 44,
                      scope = {
                        16,
                        17}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 45,
                              name = "IDENT",
                              value = "node"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 45,
                          step = 17}},
                      call = {
                        name = "delete",
                        proc = <function>},
                      line = 45,
                      step = 17}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 45,
                  step = 17}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 45,
              scope = {
                15,
                18}}},
          call = {
            name = "procdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 45,
          step = 18}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 45,
      step = 18},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 50,
                          name = "IDENT",
                          value = "Tree"}},
                      call = {
                        name = "typespec ^",
                        obj = "^",
                        proc = <function>},
                      line = 50,
                      step = 18},
                    {
                      line = 50,
                      name = "IDENT",
                      value = "tree"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 50,
                              name = "IDENT",
                              value = "Tree"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 50,
                          step = 18},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "CARDINAL",
                                      value = "11"}},
                                  call = {
                                    name = "constant constexpr uint",
                                    obj = "constexpr uint",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "structure",
                                proc = <function>},
                              line = 50,
                              step = 18},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typespec ",
                                    obj = "",
                                    proc = <function>},
                                  line = 50,
                                  step = 18},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "CARDINAL",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 50,
                              step = 18},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 50,
                                      name = "IDENT",
                                      value = "Tree"}},
                                  call = {
                                    name = "typespec ",
                                    obj = "",
                                    proc = <function>},
                                  line = 50,
                                  step = 18},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "CARDINAL",
                                              value = "2"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "structure",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {},
                                      call = {
                                        name = "null constexpr float",
                                        obj = "constexpr float",
                                        proc = <function>},
                                      line = 50,
                                      step = 18},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 50,
                                              name = "IDENT",
                                              value = "Tree"}},
                                          call = {
                                            name = "typespec ",
                                            obj = "",
                                            proc = <function>},
                                          line = 50,
                                          step = 18},
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  arg = {
                                                    {
                                                      line = 50,
                                                      name = "CARDINAL",
                                                      value = "22"}},
                                                  call = {
                                                    name = "constant constexpr uint",
                                                    obj = "constexpr uint",
                                                    proc = <function>},
                                                  line = 50,
                                                  step = 18}},
                                              call = {
                                                name = "structure",
                                                proc = <function>},
                                              line = 50,
                                              step = 18},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null constexpr float",
                                                obj = "constexpr float",
                                                proc = <function>},
                                              line = 50,
                                              step = 18},
                                            {
                                              arg = {},
                                              call = {
                                                name = "null constexpr float",
                                                obj = "constexpr float",
                                                proc = <function>},
                                              line = 50,
                                              step = 18}},
                                          call = {
                                            name = "structure",
                                            proc = <function>},
                                          line = 50,
                                          step = 18}},
                                      call = {
                                        name = "allocate",
                                        proc = <function>},
                                      line = 50,
                                      step = 18}},
                                  call = {
                                    name = "structure",
                                    proc = <function>},
                                  line = 50,
                                  step = 18}},
                              call = {
                                name = "allocate",
                                proc = <function>},
                              line = 50,
                              step = 18}},
                          call = {
                            name = "structure",
                            proc = <function>},
                          line = 50,
                          step = 18}},
                      call = {
                        name = "allocate",
                        proc = <function>},
                      line = 50,
                      step = 18}},
                  call = {
                    name = "vardef_assign",
                    proc = <function>},
                  line = 50,
                  step = 19}},
              call = {
                name = "definition",
                proc = <function>},
              line = 50,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 51,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 51,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 51,
                          name = "DQSTRING",
                          value = "VAL %d\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 51,
                      step = 19},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 51,
                                  name = "IDENT",
                                  value = "tree"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 51,
                              step = 19},
                            {
                              arg = {},
                              call = {
                                name = "count",
                                proc = <function>},
                              line = 51,
                              step = 19},
                            {
                              line = 51,
                              name = "IDENT",
                              value = "data"}},
                          call = {
                            name = "rep_operator ->",
                            obj = "->",
                            proc = <function>},
                          line = 51,
                          step = 19},
                        {
                          line = 51,
                          name = "IDENT",
                          value = "val"}},
                      call = {
                        name = "member",
                        proc = <function>},
                      line = 51,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 51,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 51,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 52,
                          name = "IDENT",
                          value = "printTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 52,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 52,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 52,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 52,
                          name = "CARDINAL",
                          value = "0"}},
                      call = {
                        name = "constant constexpr uint",
                        obj = "constexpr uint",
                        proc = <function>},
                      line = 52,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 52,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 52,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 53,
                          name = "IDENT",
                          value = "deleteTree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 53,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 53,
                          name = "IDENT",
                          value = "tree"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 53,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 53,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 53,
              step = 19},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 54,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 54,
                      step = 19},
                    {
                      arg = {
                        {
                          line = 54,
                          name = "DQSTRING",
                          value = "Done\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 54,
                      step = 19}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 54,
                  step = 19}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 54,
              step = 19}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 54,
          step = 19}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 54,
      scope = {
        18,
        20}}},
  call = {
    name = "program",
    proc = <function>},
  line = 54,
  step = 20}
