Shift token "extern" at line 3 in state XXX, goto XXX
Shift token DQSTRING = "C" at line 3 in state XXX, goto XXX
Shift token "procedure" at line 3 in state XXX, goto XXX
Shift token IDENT = "printf" at line 3 in state XXX, goto XXX
Shift token '(' at line 3 in state XXX, goto XXX
Shift token "const" at line 3 in state XXX, goto XXX
Shift token IDENT = "byte" at line 3 in state XXX, goto XXX
Reduce #1 to typename by token '^' at line 3 in state XXX, goto XXX
Reduce #2 to typehdr by token '^' at line 3 in state XXX, call typehdr {const=true}, goto XXX
Reduce #1 to typegen by token '^' at line 3 in state XXX, goto XXX
Shift token '^' at line 3 in state XXX, goto XXX
Reduce #2 to typegen by token IDENT = "fmt" at line 3 in state XXX, call typegen_pointer {const=false}, goto XXX
Reduce #1 to typespec by token IDENT = "fmt" at line 3 in state XXX, call typespec, goto XXX
Shift token IDENT = "fmt" at line 3 in state XXX, goto XXX
Reduce #2 to extern_paramdecl by token "..." at line 3 in state XXX, call extern_paramdef, goto XXX
Reduce #1 to extern_parameters by token "..." at line 3 in state XXX, call extern_paramdef_collect, goto XXX
Reduce #1 to extern_paramlist by token "..." at line 3 in state XXX, call extern_paramdeflist, goto XXX
Shift token "..." at line 3 in state XXX, goto XXX
Shift token ')' at line 3 in state XXX, goto XXX
Shift token ';' at line 3 in state XXX, goto XXX
Reduce #9 to extern_definition by token "main" at line 5 in state XXX, call extern_procdef_vararg, goto XXX
Reduce #0 to extern_definitionlist by token "main" at line 5 in state XXX, goto XXX
Reduce #2 to extern_definitionlist by token "main" at line 5 in state XXX, goto XXX
Reduce #0 to free_definitionlist by token "main" at line 5 in state XXX, goto XXX
Shift token "main" at line 5 in state XXX, goto XXX
Shift token '{' at line 6 in state XXX, goto XXX
Shift token "var" at line 7 in state XXX, goto XXX
Shift token IDENT = "int" at line 7 in state XXX, goto XXX
Reduce #1 to typename by token IDENT = "ii" at line 7 in state XXX, goto XXX
Reduce #1 to typehdr by token IDENT = "ii" at line 7 in state XXX, call typehdr {const=false}, goto XXX
Reduce #1 to typegen by token IDENT = "ii" at line 7 in state XXX, goto XXX
Reduce #1 to typespec by token IDENT = "ii" at line 7 in state XXX, call typespec, goto XXX
Shift token IDENT = "ii" at line 7 in state XXX, goto XXX
Shift token '=' at line 7 in state XXX, goto XXX
Shift token UINTEGER = "0" at line 7 in state XXX, goto XXX
Reduce #1 to expression by token ';' at line 7 in state XXX, call constant "constexpr uint", goto XXX
Reduce #4 to variabledefinition by token ';' at line 7 in state XXX, call vardef, goto XXX
Shift token ';' at line 7 in state XXX, goto XXX
Reduce #3 to statement by token "while" at line 8 in state XXX, call definition 1, goto XXX
Shift token "while" at line 8 in state XXX, goto XXX
Shift token '(' at line 8 in state XXX, goto XXX
Shift token IDENT = "ii" at line 8 in state XXX, goto XXX
Reduce #1 to expression by token '<' at line 8 in state XXX, call variable, goto XXX
Shift token '<' at line 8 in state XXX, goto XXX
Shift token UINTEGER = "5" at line 8 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 8 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ')' at line 8 in state XXX, call binop "<", goto XXX
Shift token ')' at line 8 in state XXX, goto XXX
Shift token '{' at line 9 in state XXX, goto XXX
Shift token "if" at line 10 in state XXX, goto XXX
Shift token '(' at line 10 in state XXX, goto XXX
Shift token IDENT = "ii" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "==" at line 10 in state XXX, call variable, goto XXX
Shift token "==" at line 10 in state XXX, goto XXX
Shift token UINTEGER = "0" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "||" at line 10 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token "||" at line 10 in state XXX, call binop "==", goto XXX
Shift token "||" at line 10 in state XXX, goto XXX
Shift token IDENT = "ii" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "==" at line 10 in state XXX, call variable, goto XXX
Shift token "==" at line 10 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "||" at line 10 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token "||" at line 10 in state XXX, call binop "==", goto XXX
Reduce #3 to expression by token "||" at line 10 in state XXX, call binop "||", goto XXX
Shift token "||" at line 10 in state XXX, goto XXX
Shift token IDENT = "ii" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "==" at line 10 in state XXX, call variable, goto XXX
Shift token "==" at line 10 in state XXX, goto XXX
Shift token UINTEGER = "2" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "||" at line 10 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token "||" at line 10 in state XXX, call binop "==", goto XXX
Reduce #3 to expression by token "||" at line 10 in state XXX, call binop "||", goto XXX
Shift token "||" at line 10 in state XXX, goto XXX
Shift token IDENT = "ii" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token "==" at line 10 in state XXX, call variable, goto XXX
Shift token "==" at line 10 in state XXX, goto XXX
Shift token UINTEGER = "3" at line 10 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 10 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ')' at line 10 in state XXX, call binop "==", goto XXX
Reduce #3 to expression by token ')' at line 10 in state XXX, call binop "||", goto XXX
Shift token ')' at line 10 in state XXX, goto XXX
Shift token '{' at line 11 in state XXX, goto XXX
Shift token IDENT = "printf" at line 12 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 12 in state XXX, call variable, goto XXX
Shift token '(' at line 12 in state XXX, goto XXX
Shift token DQSTRING = "Value is smaller than %d\n" at line 12 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 12 in state XXX, call string_constant, goto XXX
Shift token ',' at line 12 in state XXX, goto XXX
Shift token UINTEGER = "4" at line 12 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 12 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token ')' at line 12 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 12 in state XXX, goto XXX
Shift token ')' at line 12 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 12 in state XXX, call operator "()", goto XXX
Shift token ';' at line 12 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 13 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 13 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 13 in state XXX, goto XXX
Shift token '}' at line 13 in state XXX, goto XXX
Reduce #3 to codeblock by token "else" at line 14 in state XXX, call codeblock, goto XXX
Shift token "else" at line 14 in state XXX, goto XXX
Shift token '{' at line 15 in state XXX, goto XXX
Shift token IDENT = "printf" at line 16 in state XXX, goto XXX
Reduce #1 to expression by token '(' at line 16 in state XXX, call variable, goto XXX
Shift token '(' at line 16 in state XXX, goto XXX
Shift token DQSTRING = "Value is bigger than %d\n" at line 16 in state XXX, goto XXX
Reduce #1 to expression by token ',' at line 16 in state XXX, call string_constant, goto XXX
Shift token ',' at line 16 in state XXX, goto XXX
Shift token UINTEGER = "4" at line 16 in state XXX, goto XXX
Reduce #1 to expression by token ')' at line 16 in state XXX, call constant "constexpr uint", goto XXX
Reduce #1 to expressionlist by token ')' at line 16 in state XXX, goto XXX
Reduce #3 to expressionlist by token ')' at line 16 in state XXX, goto XXX
Shift token ')' at line 16 in state XXX, goto XXX
Reduce #4 to expression by token ';' at line 16 in state XXX, call operator "()", goto XXX
Shift token ';' at line 16 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 17 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 17 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 17 in state XXX, goto XXX
Shift token '}' at line 17 in state XXX, goto XXX
Reduce #3 to codeblock by token IDENT = "ii" at line 18 in state XXX, call codeblock, goto XXX
Reduce #2 to elseblock by token IDENT = "ii" at line 18 in state XXX, call conditional_else, goto XXX
Reduce #6 to statement by token IDENT = "ii" at line 18 in state XXX, call conditional_if, goto XXX
Shift token IDENT = "ii" at line 18 in state XXX, goto XXX
Reduce #1 to expression by token "+=" at line 18 in state XXX, call variable, goto XXX
Shift token "+=" at line 18 in state XXX, goto XXX
Shift token UINTEGER = "1" at line 18 in state XXX, goto XXX
Reduce #1 to expression by token ';' at line 18 in state XXX, call constant "constexpr uint", goto XXX
Reduce #3 to expression by token ';' at line 18 in state XXX, call assign_operator "+", goto XXX
Shift token ';' at line 18 in state XXX, goto XXX
Reduce #2 to statement by token '}' at line 19 in state XXX, call free_expression, goto XXX
Reduce #0 to statementlist by token '}' at line 19 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 19 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 19 in state XXX, goto XXX
Shift token '}' at line 19 in state XXX, goto XXX
Reduce #3 to codeblock by token '}' at line 20 in state XXX, call codeblock, goto XXX
Reduce #5 to statement by token '}' at line 20 in state XXX, call conditional_while, goto XXX
Reduce #0 to statementlist by token '}' at line 20 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 20 in state XXX, goto XXX
Reduce #2 to statementlist by token '}' at line 20 in state XXX, goto XXX
Shift token '}' at line 20 in state XXX, goto XXX
Reduce #2 to main_procedure by token $ at line 21 in state XXX, call main_procdef, goto XXX
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 3,
          name = "DQSTRING",
          value = "C"},
        {
          line = 3,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 3,
                                  name = "IDENT",
                                  value = "byte"}},
                              call = {
                                name = "typehdr {const=true}",
                                obj = {
                                  const = true},
                                proc = <function>},
                              line = 3,
                              step = 0}},
                          call = {
                            name = "typegen_pointer {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 3,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 3,
                      step = 0},
                    {
                      line = 3,
                      name = "IDENT",
                      value = "fmt"}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 3,
                  step = 0}},
              call = {
                name = "extern_paramdef_collect",
                proc = <function>},
              line = 3,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 3,
          step = 0}},
      call = {
        name = "extern_procdef_vararg",
        proc = <function>},
      line = 3,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 7,
                              name = "IDENT",
                              value = "int"}},
                          call = {
                            name = "typehdr {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 7,
                          step = 0}},
                      call = {
                        name = "typespec",
                        proc = <function>},
                      line = 7,
                      step = 0},
                    {
                      line = 7,
                      name = "IDENT",
                      value = "ii"},
                    {
                      arg = {
                        {
                          line = 7,
                          name = "UINTEGER",
                          value = "0"}},
                      call = {
                        name = "constant constexpr uint",
                        obj = "constexpr uint",
                        proc = <function>},
                      line = 7,
                      step = 0}},
                  call = {
                    name = "vardef",
                    proc = <function>},
                  line = 7,
                  step = 1}},
              call = {
                name = "definition 1",
                obj = 1,
                proc = <function>},
              line = 7,
              step = 2},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 8,
                          name = "IDENT",
                          value = "ii"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 8,
                      step = 2},
                    {
                      arg = {
                        {
                          line = 8,
                          name = "UINTEGER",
                          value = "5"}},
                      call = {
                        name = "constant constexpr uint",
                        obj = "constexpr uint",
                        proc = <function>},
                      line = 8,
                      step = 2}},
                  call = {
                    name = "binop <",
                    obj = "<",
                    proc = <function>},
                  line = 8,
                  step = 3},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 10,
                                              name = "IDENT",
                                              value = "ii"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 10,
                                          step = 3},
                                        {
                                          arg = {
                                            {
                                              line = 10,
                                              name = "UINTEGER",
                                              value = "0"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 10,
                                          step = 3}},
                                      call = {
                                        name = "binop ==",
                                        obj = "==",
                                        proc = <function>},
                                      line = 10,
                                      step = 4},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 10,
                                              name = "IDENT",
                                              value = "ii"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 10,
                                          step = 4},
                                        {
                                          arg = {
                                            {
                                              line = 10,
                                              name = "UINTEGER",
                                              value = "1"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 10,
                                          step = 4}},
                                      call = {
                                        name = "binop ==",
                                        obj = "==",
                                        proc = <function>},
                                      line = 10,
                                      step = 5}},
                                  call = {
                                    name = "binop ||",
                                    obj = "||",
                                    proc = <function>},
                                  line = 10,
                                  step = 6},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 10,
                                          name = "IDENT",
                                          value = "ii"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 10,
                                      step = 6},
                                    {
                                      arg = {
                                        {
                                          line = 10,
                                          name = "UINTEGER",
                                          value = "2"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 10,
                                      step = 6}},
                                  call = {
                                    name = "binop ==",
                                    obj = "==",
                                    proc = <function>},
                                  line = 10,
                                  step = 7}},
                              call = {
                                name = "binop ||",
                                obj = "||",
                                proc = <function>},
                              line = 10,
                              step = 8},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      line = 10,
                                      name = "IDENT",
                                      value = "ii"}},
                                  call = {
                                    name = "variable",
                                    proc = <function>},
                                  line = 10,
                                  step = 8},
                                {
                                  arg = {
                                    {
                                      line = 10,
                                      name = "UINTEGER",
                                      value = "3"}},
                                  call = {
                                    name = "constant constexpr uint",
                                    obj = "constexpr uint",
                                    proc = <function>},
                                  line = 10,
                                  step = 8}},
                              call = {
                                name = "binop ==",
                                obj = "==",
                                proc = <function>},
                              line = 10,
                              step = 9}},
                          call = {
                            name = "binop ||",
                            obj = "||",
                            proc = <function>},
                          line = 10,
                          step = 10},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 12,
                                          name = "IDENT",
                                          value = "printf"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 12,
                                      step = 10},
                                    {
                                      arg = {
                                        {
                                          line = 12,
                                          name = "DQSTRING",
                                          value = "Value is smaller than %d\\n"}},
                                      call = {
                                        name = "string_constant",
                                        proc = <function>},
                                      line = 12,
                                      step = 10},
                                    {
                                      arg = {
                                        {
                                          line = 12,
                                          name = "UINTEGER",
                                          value = "4"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 12,
                                      step = 10}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 12,
                                  step = 11}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 12,
                              step = 11}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 12,
                          scope = {
                            10,
                            12}},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "IDENT",
                                              value = "printf"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 16,
                                          step = 12},
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "DQSTRING",
                                              value = "Value is bigger than %d\\n"}},
                                          call = {
                                            name = "string_constant",
                                            proc = <function>},
                                          line = 16,
                                          step = 12},
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "UINTEGER",
                                              value = "4"}},
                                          call = {
                                            name = "constant constexpr uint",
                                            obj = "constexpr uint",
                                            proc = <function>},
                                          line = 16,
                                          step = 12}},
                                      call = {
                                        name = "operator ()",
                                        obj = "()",
                                        proc = <function>},
                                      line = 16,
                                      step = 13}},
                                  call = {
                                    name = "free_expression",
                                    proc = <function>},
                                  line = 16,
                                  step = 13}},
                              call = {
                                name = "codeblock",
                                proc = <function>},
                              line = 16,
                              scope = {
                                12,
                                14}}},
                          call = {
                            name = "conditional_else",
                            proc = <function>},
                          line = 16,
                          step = 14}},
                      call = {
                        name = "conditional_if",
                        proc = <function>},
                      line = 16,
                      step = 14},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 18,
                                  name = "IDENT",
                                  value = "ii"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 18,
                              step = 14},
                            {
                              arg = {
                                {
                                  line = 18,
                                  name = "UINTEGER",
                                  value = "1"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 18,
                              step = 14}},
                          call = {
                            name = "assign_operator +",
                            obj = "+",
                            proc = <function>},
                          line = 18,
                          step = 15}},
                      call = {
                        name = "free_expression",
                        proc = <function>},
                      line = 18,
                      step = 15}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 18,
                  scope = {
                    3,
                    16}}},
              call = {
                name = "conditional_while",
                proc = <function>},
              line = 18,
              step = 16}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 18,
          scope = {
            0,
            17}}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 18,
      step = 17}},
  call = {
    name = "program",
    proc = <function>},
  line = 18,
  step = 17}
