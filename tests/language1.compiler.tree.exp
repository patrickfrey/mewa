; ModuleID = 'examples/language1/sources/tree.prg'
source_filename = "examples/language1/sources/tree.prg"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

%Tree__Data__1 = type { i32 }

%Tree__1 = type { %Tree__Data__1, %Tree__1*, %Tree__1* }

define private dso_local void @__ctor_Tree__Data__1( %Tree__Data__1* %ptr) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %ptr, i32 0, i32 0
store i32 0, i32* %r1
br label %end
end:
ret void
}

define private dso_local void @__ctor_copy_Tree__Data__1( %Tree__Data__1* %ptr, %Tree__Data__1* %oth) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %ptr, i32 0, i32 0
%r2 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %oth, i32 0, i32 0
%r4 = load i32, i32* %r2
store i32 %r4, i32* %r1
br label %end
end:
ret void
}

define private dso_local void @__ctor_assign_Tree__Data__1( %Tree__Data__1* %ptr, %Tree__Data__1* %oth) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %ptr, i32 0, i32 0
%r2 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %oth, i32 0, i32 0
%r5 = load i32, i32* %r2
store i32 %r5, i32* %r1
br label %end
end:
ret void
}

define private dso_local void @__ctor_elements_Tree__Data__1( %Tree__Data__1* %ptr, i32 %p1) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %ptr, i32 0, i32 0
store i32 0, i32* %r1
br label %end
end:
ret void
}

define private dso_local void @__dtor_Tree__Data__1( %Tree__Data__1* %ptr) alwaysinline {
enter:
br label %end
end:
ret void
}

define private dso_local void @__ctor_Tree__1( %Tree__1* %ptr) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 0
call void @__ctor_Tree__Data__1( %Tree__Data__1* %r1)
%r3 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 1
store %Tree__1* null, %Tree__1** %r3
%r8 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 2
store %Tree__1* null, %Tree__1** %r8
br label %end
end:
ret void
}

define private dso_local void @__ctor_elements_Tree__1( %Tree__1* %ptr, %Tree__Data__1 %p1, %Tree__1* %p2, %Tree__1* %p3) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 0
call void @__ctor_Tree__Data__1( %Tree__Data__1* %r1)
%r3 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 1
store %Tree__1* null, %Tree__1** %r3
%r8 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 2
store %Tree__1* null, %Tree__1** %r8
br label %end
end:
ret void
}

define private dso_local void @__dtor_Tree__1( %Tree__1* %ptr) alwaysinline {
enter:
%r1 = getelementptr inbounds %Tree__1, %Tree__1* %ptr, i32 0, i32 0
call void @__dtor_Tree__Data__1( %Tree__Data__1* %r1)
br label %end
end:
ret void
}



define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}


declare external void @printf( i8*, ... ) #1 nounwind


declare external void @putchar( i8 ) #1 nounwind


declare external i8* @malloc( i64 ) #1 nounwind


declare external void @free( i8* ) #1 nounwind


define internal i8* @allocmem__i64( i64 %r1 ) #0 nounwind {
entry:
%r2 = call i8* @malloc( i64 %r1)
ret i8* %r2
}


define internal void @freemem__i8$( i8* %r1 ) #0 nounwind {
entry:
call void @free( i8* %r1)
ret void
}

@g_tree = internal global %Tree__1 zeroinitializer, align 8

@string1 = private unnamed_addr constant [10 x i8] c"Node: %d\0A\00"


define internal void @printTree__Tree__1$__i32( %Tree__1* %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L3
L3:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, %r2
br i1 %r5, label %L2, label %L1
L2:
call void @putchar( i8 32)
%r10 = load i32, i32* %r3
%r13 = add nsw i32 %r10, 1
store i32 %r13, i32* %r3
br label %L3
L1:
%r14 = getelementptr inbounds [10 x i8], [10 x i8]* @string1, i64 0, i64 0
%r15 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 0
%r16 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r15, i32 0, i32 0
%r17 = load i32, i32* %r16
call void(i8*, ...) @printf( i8* %r14, i32 %r17)
%r19 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 1
%r20 = load %Tree__1*, %Tree__1** %r19
%r21 = icmp ne %Tree__1* %r20, null
br i1 %r21, label %L5, label %L4
L5:
%r22 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 1
%r26 = load %Tree__1*, %Tree__1** %r22
%r25 = add nsw i32 %r2, 1
call void @printTree__Tree__1$__i32( %Tree__1* %r26, i32 %r25)
br label %L4
L4:
%r28 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 2
%r29 = load %Tree__1*, %Tree__1** %r28
%r30 = icmp ne %Tree__1* %r29, null
br i1 %r30, label %L7, label %L6
L7:
%r31 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 2
%r35 = load %Tree__1*, %Tree__1** %r31
%r34 = add nsw i32 %r2, 1
call void @printTree__Tree__1$__i32( %Tree__1* %r35, i32 %r34)
br label %L6
L6:
ret void
}


define internal void @deleteTree__Tree__1$( %Tree__1* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 1
%r3 = load %Tree__1*, %Tree__1** %r2
%r4 = icmp ne %Tree__1* %r3, null
br i1 %r4, label %L2, label %L1
L2:
%r5 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 1
%r6 = load %Tree__1*, %Tree__1** %r5
call void @deleteTree__Tree__1$( %Tree__1* %r6)
br label %L1
L1:
%r8 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 2
%r9 = load %Tree__1*, %Tree__1** %r8
%r10 = icmp ne %Tree__1* %r9, null
br i1 %r10, label %L4, label %L3
L4:
%r11 = getelementptr inbounds %Tree__1, %Tree__1* %r1, i32 0, i32 2
%r12 = load %Tree__1*, %Tree__1** %r11
call void @deleteTree__Tree__1$( %Tree__1* %r12)
br label %L3
L3:
call void @__dtor_Tree__1( %Tree__1* %r1)
%r14 = bitcast %Tree__1* %r1 to i8*
call void @freemem__i8$( i8* %r14)
ret void
}

@string2 = private unnamed_addr constant [8 x i8] c"VAL %d\0A\00"

@string3 = private unnamed_addr constant [6 x i8] c"Done\0A\00"


declare dso_local i32 @__gxx_personality_v0(...)
define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r25 = alloca %Tree__1*
%r19 = call i8* @allocmem__i64( i64 24)
%r20 = bitcast i8* %r19 to %Tree__1*
%r21 = getelementptr inbounds %Tree__1, %Tree__1* %r20, i32 0, i32 0
%r22 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r21, i32 0, i32 0
store i32 11, i32* %r22
%r23 = getelementptr inbounds %Tree__1, %Tree__1* %r20, i32 0, i32 1
%r1 = call i8* @allocmem__i64( i64 24)
%r2 = bitcast i8* %r1 to %Tree__1*
%r3 = getelementptr inbounds %Tree__1, %Tree__1* %r2, i32 0, i32 0
%r4 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r3, i32 0, i32 0
store i32 1, i32* %r4
%r5 = getelementptr inbounds %Tree__1, %Tree__1* %r2, i32 0, i32 1
store %Tree__1* null, %Tree__1** %r5
%r6 = getelementptr inbounds %Tree__1, %Tree__1* %r2, i32 0, i32 2
store %Tree__1* null, %Tree__1** %r6
store %Tree__1* %r2, %Tree__1** %r23
%r24 = getelementptr inbounds %Tree__1, %Tree__1* %r20, i32 0, i32 2
%r13 = call i8* @allocmem__i64( i64 24)
%r14 = bitcast i8* %r13 to %Tree__1*
%r15 = getelementptr inbounds %Tree__1, %Tree__1* %r14, i32 0, i32 0
%r16 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r15, i32 0, i32 0
store i32 2, i32* %r16
%r17 = getelementptr inbounds %Tree__1, %Tree__1* %r14, i32 0, i32 1
store %Tree__1* null, %Tree__1** %r17
%r18 = getelementptr inbounds %Tree__1, %Tree__1* %r14, i32 0, i32 2
%r7 = call i8* @allocmem__i64( i64 24)
%r8 = bitcast i8* %r7 to %Tree__1*
%r9 = getelementptr inbounds %Tree__1, %Tree__1* %r8, i32 0, i32 0
%r10 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r9, i32 0, i32 0
store i32 22, i32* %r10
%r11 = getelementptr inbounds %Tree__1, %Tree__1* %r8, i32 0, i32 1
store %Tree__1* null, %Tree__1** %r11
%r12 = getelementptr inbounds %Tree__1, %Tree__1* %r8, i32 0, i32 2
store %Tree__1* null, %Tree__1** %r12
store %Tree__1* %r8, %Tree__1** %r18
store %Tree__1* %r14, %Tree__1** %r24
store %Tree__1* %r20, %Tree__1** %r25
%r26 = getelementptr inbounds [8 x i8], [8 x i8]* @string2, i64 0, i64 0
%r27 = load %Tree__1*, %Tree__1** %r25
%r28 = getelementptr inbounds %Tree__1, %Tree__1* %r27, i32 0, i32 0
%r29 = getelementptr inbounds %Tree__Data__1, %Tree__Data__1* %r28, i32 0, i32 0
%r30 = load i32, i32* %r29
call void(i8*, ...) @printf( i8* %r26, i32 %r30)
%r32 = load %Tree__1*, %Tree__1** %r25
call void @printTree__Tree__1$__i32( %Tree__1* %r32, i32 0)
%r34 = load %Tree__1*, %Tree__1** %r25
call void @deleteTree__Tree__1$( %Tree__1* %r34)
%r36 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
call void(i8*, ...) @printf( i8* %r36)
br label %exit
exit:
ret i32 0
}



attributes #0 = {
	"disable-tail-calls"="false" "frame-pointer"="all" "min-legal-vector-width"="0" 
	"correctly-rounded-divide-sqrt-fp-math"="false" "less-precise-fpmad"="false" "no-infs-fp-math"="false" 
	"no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "unsafe-fp-math"="false" 
	"no-jump-tables"="false" "stack-protector-buffer-size"="8" 
	"target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "use-soft-float"="false"
}
attributes #1 = {
	"no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "stack-protector-buffer-size"="8" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
