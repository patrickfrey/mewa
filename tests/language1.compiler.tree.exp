
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
declare external void @putchar( i8 ) nounwind
declare external i8* @malloc( i64 ) nounwind
declare external void @free( i8* ) nounwind
%Tree__Data = type { i32 }
%Tree = type { %Tree__Data, %Tree*, %Tree* }
define private dso_local void @__ctor_init_Tree__Data( %Tree__Data* %ths)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree__Data, %Tree__Data* %ths, i32 0, i32 0
store i32 0, i32* %r1
br label %end
end:
ret void
}
define private dso_local void @__ctor_copy_Tree__Data( %Tree__Data* %ths, %Tree__Data* %oth)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree__Data, %Tree__Data* %ths, i32 0, i32 0
%r2 = getelementptr inbounds %Tree__Data, %Tree__Data* %oth, i32 0, i32 0
%r3 = load i32, i32* %r2
store i32 %r3, i32* %r1
br label %end
end:
ret void
}
define private dso_local void @__ctor_elements_Tree__Data( %Tree__Data* %ths, i32 %p1)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree__Data, %Tree__Data* %ths, i32 0, i32 0
store i32 %p1, i32* %r1
br label %end
end:
ret void
}
define private dso_local void @__dtor_Tree__Data( %Tree__Data* %ths) {
enter:
br label %end
end:
ret void
}
define private dso_local void @__ctor_init_Tree( %Tree* %ths)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 0
call void @__ctor_init_Tree__Data( %Tree__Data* %r1)
%r3 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 1
store %Tree* null, %Tree** %r3
%r6 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 2
store %Tree* null, %Tree** %r6
br label %end
end:
ret void
}
define private dso_local void @__ctor_copy_Tree( %Tree* %ths, %Tree* %oth)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 0
%r2 = getelementptr inbounds %Tree, %Tree* %oth, i32 0, i32 0
call void @__ctor_copy_Tree__Data( %Tree__Data* %r1, %Tree__Data* %r2)
%r3 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 1
%r4 = getelementptr inbounds %Tree, %Tree* %oth, i32 0, i32 1
%r5 = load %Tree*, %Tree** %r4
store %Tree* %r5, %Tree** %r3
%r6 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 2
%r7 = getelementptr inbounds %Tree, %Tree* %oth, i32 0, i32 2
%r8 = load %Tree*, %Tree** %r7
store %Tree* %r8, %Tree** %r6
br label %end
end:
ret void
}
define private dso_local void @__ctor_elements_Tree( %Tree* %ths, %Tree__Data* %p1, %Tree* %p2, %Tree* %p3)#0 nounwind {
enter:
%r1 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 0
call void @__ctor_copy_Tree__Data( %Tree__Data* %r1, %Tree__Data* %p1)
%r3 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 1
store %Tree* %p2, %Tree** %r3
%r6 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 2
store %Tree* %p3, %Tree** %r6
br label %end
end:
ret void
}
define private dso_local void @__dtor_Tree( %Tree* %ths) {
enter:
%r1 = getelementptr inbounds %Tree, %Tree* %ths, i32 0, i32 0
call void @__dtor_Tree__Data( %Tree__Data* %r1)
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
define internal i8* @allocmem__i64( i64 %r1 ) #0 nounwind {
entry:
%r2 = call i8* @malloc( i64 %r1)
br label %L1
L1:
ret i8* %r2
}
define internal void @freemem__i8$( i8* %r1 ) #0 nounwind {
entry:
call void @free( i8* %r1)
br label %L1
L1:
ret void
}
@g_tree = internal global %Tree zeroinitializer, align 8
@string1 = private unnamed_addr constant [10 x i8] c"Node: %d\0A\00"
define internal void @printTree__Tree$__i32( %Tree* %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L3
L3:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, %r2
br i1 %r5, label %L2, label %L1
L2:
call void @putchar( i8 32)
%r6 = load i32, i32* %r3
%r7 = add nsw i32 %r6, 1
store i32 %r7, i32* %r3
br label %L3
L1:
%r8 = getelementptr inbounds [10 x i8], [10 x i8]* @string1, i64 0, i64 0
%r9 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 0
%r10 = getelementptr inbounds %Tree__Data, %Tree__Data* %r9, i32 0, i32 0
%r11 = load i32, i32* %r10
call void(i8*,  ...) @printf( i8* %r8, i32 %r11)
%r12 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 1
%r13 = load %Tree*, %Tree** %r12
%r14 = icmp ne %Tree* %r13, null
br i1 %r14, label %L5, label %L4
L5:
%r15 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 1
%r17 = load %Tree*, %Tree** %r15
%r16 = add nsw i32 %r2, 1
call void @printTree__Tree$__i32( %Tree* %r17, i32 %r16)
br label %L4
L4:
%r18 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 2
%r19 = load %Tree*, %Tree** %r18
%r20 = icmp ne %Tree* %r19, null
br i1 %r20, label %L7, label %L6
L7:
%r21 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 2
%r23 = load %Tree*, %Tree** %r21
%r22 = add nsw i32 %r2, 1
call void @printTree__Tree$__i32( %Tree* %r23, i32 %r22)
br label %L6
L6:
br label %L8
L8:
ret void
}
define internal void @deleteTree__Tree$( %Tree* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 1
%r3 = load %Tree*, %Tree** %r2
%r4 = icmp ne %Tree* %r3, null
br i1 %r4, label %L2, label %L1
L2:
%r5 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 1
%r6 = load %Tree*, %Tree** %r5
call void @deleteTree__Tree$( %Tree* %r6)
br label %L1
L1:
%r7 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 2
%r8 = load %Tree*, %Tree** %r7
%r9 = icmp ne %Tree* %r8, null
br i1 %r9, label %L4, label %L3
L4:
%r10 = getelementptr inbounds %Tree, %Tree* %r1, i32 0, i32 2
%r11 = load %Tree*, %Tree** %r10
call void @deleteTree__Tree$( %Tree* %r11)
br label %L3
L3:
call void @__dtor_Tree( %Tree* %r1)
%r12 = bitcast %Tree* %r1 to i8*
call void @freemem__i8$( i8* %r12)
br label %L5
L5:
ret void
}
@string2 = private unnamed_addr constant [8 x i8] c"VAL %d\0A\00"
@string3 = private unnamed_addr constant [6 x i8] c"Done\0A\00"

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
call void @__ctor_init_Tree( %Tree* @g_tree)
%r1 = alloca i32, align 4
%r14 = alloca %Tree*
%r11 = call i8* @allocmem__i64( i64 24)
%r12 = bitcast i8* %r11 to %Tree*
%r13 = alloca %Tree__Data, align 8
call void @__ctor_elements_Tree__Data( %Tree__Data* %r13, i32 11)
%r2 = call i8* @allocmem__i64( i64 24)
%r3 = bitcast i8* %r2 to %Tree*
%r4 = alloca %Tree__Data, align 8
call void @__ctor_elements_Tree__Data( %Tree__Data* %r4, i32 1)
call void @__ctor_elements_Tree( %Tree* %r3, %Tree__Data* %r4, %Tree* null, %Tree* null)
%r8 = call i8* @allocmem__i64( i64 24)
%r9 = bitcast i8* %r8 to %Tree*
%r10 = alloca %Tree__Data, align 8
call void @__ctor_elements_Tree__Data( %Tree__Data* %r10, i32 2)
%r5 = call i8* @allocmem__i64( i64 24)
%r6 = bitcast i8* %r5 to %Tree*
%r7 = alloca %Tree__Data, align 8
call void @__ctor_elements_Tree__Data( %Tree__Data* %r7, i32 22)
call void @__ctor_elements_Tree( %Tree* %r6, %Tree__Data* %r7, %Tree* null, %Tree* null)
call void @__ctor_elements_Tree( %Tree* %r9, %Tree__Data* %r10, %Tree* null, %Tree* %r6)
call void @__ctor_elements_Tree( %Tree* %r12, %Tree__Data* %r13, %Tree* %r3, %Tree* %r9)
store %Tree* %r12, %Tree** %r14
%r15 = getelementptr inbounds [8 x i8], [8 x i8]* @string2, i64 0, i64 0
%r16 = load %Tree*, %Tree** %r14
%r17 = getelementptr inbounds %Tree, %Tree* %r16, i32 0, i32 0
%r18 = getelementptr inbounds %Tree__Data, %Tree__Data* %r17, i32 0, i32 0
%r19 = load i32, i32* %r18
call void(i8*,  ...) @printf( i8* %r15, i32 %r19)
%r20 = load %Tree*, %Tree** %r14
call void @printTree__Tree$__i32( %Tree* %r20, i32 0)
%r21 = load %Tree*, %Tree** %r14
call void @deleteTree__Tree$( %Tree* %r21)
%r22 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r22)
store i32 0, i32* %r1
br label %L5
L5:
call void @__dtor_Tree__Data( %Tree__Data* %r7)
br label %L4
L4:
call void @__dtor_Tree__Data( %Tree__Data* %r10)
br label %L3
L3:
call void @__dtor_Tree__Data( %Tree__Data* %r4)
br label %L2
L2:
call void @__dtor_Tree__Data( %Tree__Data* %r13)
br label %L6
L6:
br label %L1
L1:
br label %IL1
IL1:
call void @__dtor_Tree( %Tree* @g_tree)
%r23 = load i32, i32* %r1
ret i32 %r23
}


