
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
%IntArray = type { [5 x i32] }
%FloatArray = type { [5 x float] }
%DoubleArray = type { [5 x double] }
define private dso_local void @__ctor_init_5__i32( [5 x i32]* %ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x i32], [5 x i32]* %ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [5 x i32], [5 x i32]* %ar, i32 0, i32 5
br label %loop
loop:
%ths = phi i32* [%ths_base, %enter], [%A2, %cond]
store i32 0, i32* %ths
br label %cond
cond:
%A2 = getelementptr inbounds i32, i32* %ths, i64 1
%A3 = icmp eq i32* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_5__i32( [5 x i32]* %ths_ar, [5 x i32]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x i32], [5 x i32]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [5 x i32], [5 x i32]* %ths_ar, i32 0, i32 5
%oth_base = getelementptr inbounds [5 x i32], [5 x i32]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi i32* [%ths_base, %enter], [%A2, %cond]
%oth = phi i32* [%oth_base, %enter], [%A3, %cond]
%r1 = load i32, i32* %oth
store i32 %r1, i32* %ths
br label %cond
cond:
%A2 = getelementptr inbounds i32, i32* %ths, i64 1
%A3 = getelementptr inbounds i32, i32* %oth, i64 1
%A4 = icmp eq i32* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_5__i32( [5 x i32]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [5 x i32], [5 x i32]* %ar, i32 0, i32 0
%top = getelementptr inbounds [5 x i32], [5 x i32]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi i32* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds i32, i32* %ths, i64 -1
%A3 = icmp eq i32* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_IntArray( %IntArray* %ths) {
enter:
%r1 = getelementptr inbounds %IntArray, %IntArray* %ths, i32 0, i32 0
call void @__dtor_5__i32( [5 x i32]* %r1, i32 5)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor_IntArray( %IntArray* %ths, i32 %istate) {
enter:
%r2 = icmp sle i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %IntArray, %IntArray* %ths, i32 0, i32 0
call void @__dtor_5__i32( [5 x i32]* %r1, i32 5)
br label %L2
L2:
br label %end
end:
ret void
}
define private dso_local void @__ctor_init_5__float( [5 x float]* %ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 5
br label %loop
loop:
%ths = phi float* [%ths_base, %enter], [%A2, %cond]
store float 0.00000, float* %ths
br label %cond
cond:
%A2 = getelementptr inbounds float, float* %ths, i64 1
%A3 = icmp eq float* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_5__float( [5 x float]* %ths_ar, [5 x float]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [5 x float], [5 x float]* %ths_ar, i32 0, i32 5
%oth_base = getelementptr inbounds [5 x float], [5 x float]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi float* [%ths_base, %enter], [%A2, %cond]
%oth = phi float* [%oth_base, %enter], [%A3, %cond]
%r1 = load float, float* %oth
store float %r1, float* %ths
br label %cond
cond:
%A2 = getelementptr inbounds float, float* %ths, i64 1
%A3 = getelementptr inbounds float, float* %oth, i64 1
%A4 = icmp eq float* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_5__float( [5 x float]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 0
%top = getelementptr inbounds [5 x float], [5 x float]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi float* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds float, float* %ths, i64 -1
%A3 = icmp eq float* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_FloatArray( %FloatArray* %ths) {
enter:
%r1 = getelementptr inbounds %FloatArray, %FloatArray* %ths, i32 0, i32 0
call void @__dtor_5__float( [5 x float]* %r1, i32 5)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor_FloatArray( %FloatArray* %ths, i32 %istate) {
enter:
%r2 = icmp sle i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %FloatArray, %FloatArray* %ths, i32 0, i32 0
call void @__dtor_5__float( [5 x float]* %r1, i32 5)
br label %L2
L2:
br label %end
end:
ret void
}
define private dso_local void @__ctor_init_5__double( [5 x double]* %ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x double], [5 x double]* %ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [5 x double], [5 x double]* %ar, i32 0, i32 5
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
store double 0.00000, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = icmp eq double* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_5__double( [5 x double]* %ths_ar, [5 x double]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [5 x double], [5 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [5 x double], [5 x double]* %ths_ar, i32 0, i32 5
%oth_base = getelementptr inbounds [5 x double], [5 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
%oth = phi double* [%oth_base, %enter], [%A3, %cond]
%r1 = load double, double* %oth
store double %r1, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_5__double( [5 x double]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [5 x double], [5 x double]* %ar, i32 0, i32 0
%top = getelementptr inbounds [5 x double], [5 x double]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi double* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds double, double* %ths, i64 -1
%A3 = icmp eq double* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_DoubleArray( %DoubleArray* %ths) {
enter:
%r1 = getelementptr inbounds %DoubleArray, %DoubleArray* %ths, i32 0, i32 0
call void @__dtor_5__double( [5 x double]* %r1, i32 5)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor_DoubleArray( %DoubleArray* %ths, i32 %istate) {
enter:
%r2 = icmp sle i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %DoubleArray, %DoubleArray* %ths, i32 0, i32 0
call void @__dtor_5__double( [5 x double]* %r1, i32 5)
br label %L2
L2:
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
define external void @__C_IntArray__$ctor( %IntArray* %ths ) #0 nounwind {
entry:
br label %L1
L1:
ret void
}
define external void @__C_IntArray__$ctor__$5xi32$( %IntArray* %ths, [5 x i32]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %IntArray, %IntArray* %ths, i32 0, i32 0
call void @__ctor_copy_5__i32( [5 x i32]* %r2, [5 x i32]* %r1)
br label %L1
L1:
ret void
}
define external i32* @__C_IntArray__$get__i32( %IntArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %IntArray, %IntArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x i32], [5 x i32]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret i32* %r3
}
define external i32* @__C_IntArray__$get__i32__const( %IntArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %IntArray, %IntArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x i32], [5 x i32]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret i32* %r3
}
define external void @__C_FloatArray__$ctor( %FloatArray* %ths ) #0 nounwind {
entry:
br label %L1
L1:
ret void
}
define external void @__C_FloatArray__$ctor__$5xfloat$( %FloatArray* %ths, [5 x float]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %FloatArray, %FloatArray* %ths, i32 0, i32 0
call void @__ctor_copy_5__float( [5 x float]* %r2, [5 x float]* %r1)
br label %L1
L1:
ret void
}
define external float* @__C_FloatArray__$get__i32( %FloatArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %FloatArray, %FloatArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x float], [5 x float]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret float* %r3
}
define external float* @__C_FloatArray__$get__i32__const( %FloatArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %FloatArray, %FloatArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x float], [5 x float]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret float* %r3
}
define external void @__C_DoubleArray__$ctor( %DoubleArray* %ths ) #0 nounwind {
entry:
br label %L1
L1:
ret void
}
define external void @__C_DoubleArray__$ctor__$5xdouble$( %DoubleArray* %ths, [5 x double]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %DoubleArray, %DoubleArray* %ths, i32 0, i32 0
call void @__ctor_copy_5__double( [5 x double]* %r2, [5 x double]* %r1)
br label %L1
L1:
ret void
}
define external double* @__C_DoubleArray__$get__i32( %DoubleArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %DoubleArray, %DoubleArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x double], [5 x double]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret double* %r3
}
define external double* @__C_DoubleArray__$get__i32__const( %DoubleArray* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %DoubleArray, %DoubleArray* %ths, i32 0, i32 0
%r4 = zext i32 %r1 to i64
%r3 = getelementptr inbounds [5 x double], [5 x double]* %r2, i64 0, i64 %r4
br label %L1
L1:
ret double* %r3
}
@string1 = private unnamed_addr constant [17 x i8] c"ARRAY[ %d] = %d\0A\00"
define external void @printIntArray(  ) #0 nounwind {
entry:
%r1 = alloca %IntArray, align 8
%r7 = alloca [5 x i32], align 8
%r2 = getelementptr inbounds [5 x i32], [5 x i32]* %r7, i32 0, i32 0
store i32 911, i32* %r2
%r3 = getelementptr inbounds [5 x i32], [5 x i32]* %r7, i32 0, i32 1
store i32 822, i32* %r3
%r4 = getelementptr inbounds [5 x i32], [5 x i32]* %r7, i32 0, i32 2
store i32 733, i32* %r4
%r5 = getelementptr inbounds [5 x i32], [5 x i32]* %r7, i32 0, i32 3
store i32 644, i32* %r5
%r6 = getelementptr inbounds [5 x i32], [5 x i32]* %r7, i32 0, i32 4
store i32 555, i32* %r6
call void @__C_IntArray__$ctor__$5xi32$( %IntArray* %r1, [5 x i32]* %r7)
%r8 = alloca i32, align 4
store i32 0, i32* %r8
br label %L3
L3:
%r9 = load i32, i32* %r8
%r10 = icmp slt i32 %r9, 5
br i1 %r10, label %L2, label %L1
L2:
%r11 = getelementptr inbounds [17 x i8], [17 x i8]* @string1, i64 0, i64 0
%r14 = load i32, i32* %r8
%r12 = load i32, i32* %r8
%r13 = call i32* @__C_IntArray__$get__i32( %IntArray* %r1, i32 %r12)
%r15 = load i32, i32* %r13
call void(i8*,  ...) @printf( i8* %r11, i32 %r14, i32 %r15)
%r16 = load i32, i32* %r8
%r17 = add nsw i32 %r16, 1
store i32 %r17, i32* %r8
br label %L3
L1:
br label %L4
L4:
call void @__dtor_IntArray( %IntArray* %r1)
br label %L5
L5:
ret void
}
@string2 = private unnamed_addr constant [12 x i8] c"FL = %f %f\0A\00"
@string3 = private unnamed_addr constant [17 x i8] c"ARRAY[ %d] = %f\0A\00"
define external void @printFloatArray(  ) #0 nounwind {
entry:
%r1 = alloca float, align 4
store float 0x4002666660000000, float* %r1
%r2 = alloca double, align 8
%r3 = load float, float* %r1
%r4 = fpext float %r3 to double
store double %r4, double* %r2
%r5 = getelementptr inbounds [12 x i8], [12 x i8]* @string2, i64 0, i64 0
%r6 = load float, float* %r1
%r7 = fpext float %r6 to double
%r8 = load double, double* %r2
call void(i8*,  ...) @printf( i8* %r5, double %r7, double %r8)
%r9 = alloca %FloatArray, align 8
%r15 = alloca [5 x float], align 8
%r10 = getelementptr inbounds [5 x float], [5 x float]* %r15, i32 0, i32 0
store float 0x40223851E0000000, float* %r10
%r11 = getelementptr inbounds [5 x float], [5 x float]* %r15, i32 0, i32 1
store float 0x402070A3E0000000, float* %r11
%r12 = getelementptr inbounds [5 x float], [5 x float]* %r15, i32 0, i32 2
store float 0x401D51EB80000000, float* %r12
%r13 = getelementptr inbounds [5 x float], [5 x float]* %r15, i32 0, i32 3
store float 0x4019C28F60000000, float* %r13
%r14 = getelementptr inbounds [5 x float], [5 x float]* %r15, i32 0, i32 4
store float 0x4016333340000000, float* %r14
call void @__C_FloatArray__$ctor__$5xfloat$( %FloatArray* %r9, [5 x float]* %r15)
%r16 = alloca i32, align 4
store i32 0, i32* %r16
br label %L3
L3:
%r17 = load i32, i32* %r16
%r18 = icmp slt i32 %r17, 5
br i1 %r18, label %L2, label %L1
L2:
%r19 = getelementptr inbounds [17 x i8], [17 x i8]* @string3, i64 0, i64 0
%r22 = load i32, i32* %r16
%r20 = load i32, i32* %r16
%r21 = call float* @__C_FloatArray__$get__i32( %FloatArray* %r9, i32 %r20)
%r23 = load float, float* %r21
%r24 = fpext float %r23 to double
call void(i8*,  ...) @printf( i8* %r19, i32 %r22, double %r24)
%r25 = load i32, i32* %r16
%r26 = add nsw i32 %r25, 1
store i32 %r26, i32* %r16
br label %L3
L1:
br label %L4
L4:
call void @__dtor_FloatArray( %FloatArray* %r9)
br label %L5
L5:
ret void
}
@string4 = private unnamed_addr constant [12 x i8] c"DB = %f %f\0A\00"
define external void @printDoubleArray(  ) #0 nounwind {
entry:
%r1 = alloca double, align 8
store double 0x400999999999999A, double* %r1
%r2 = alloca double, align 8
%r3 = load double, double* %r1
store double %r3, double* %r2
%r4 = getelementptr inbounds [12 x i8], [12 x i8]* @string4, i64 0, i64 0
%r5 = load double, double* %r1
%r6 = load double, double* %r2
call void(i8*,  ...) @printf( i8* %r4, double %r5, double %r6)
%r7 = alloca %DoubleArray, align 8
%r13 = alloca [5 x double], align 8
%r8 = getelementptr inbounds [5 x double], [5 x double]* %r13, i32 0, i32 0
store double 0x40223851EB851EB8, double* %r8
%r9 = getelementptr inbounds [5 x double], [5 x double]* %r13, i32 0, i32 1
store double 0x402070A3D70A3D71, double* %r9
%r10 = getelementptr inbounds [5 x double], [5 x double]* %r13, i32 0, i32 2
store double 0x401D51EB851EB852, double* %r10
%r11 = getelementptr inbounds [5 x double], [5 x double]* %r13, i32 0, i32 3
store double 0x4019C28F5C28F5C3, double* %r11
%r12 = getelementptr inbounds [5 x double], [5 x double]* %r13, i32 0, i32 4
store double 0x4016333333333333, double* %r12
call void @__C_DoubleArray__$ctor__$5xdouble$( %DoubleArray* %r7, [5 x double]* %r13)
%r14 = alloca i32, align 4
store i32 0, i32* %r14
br label %L3
L3:
%r15 = load i32, i32* %r14
%r16 = icmp slt i32 %r15, 5
br i1 %r16, label %L2, label %L1
L2:
%r17 = getelementptr inbounds [17 x i8], [17 x i8]* @string3, i64 0, i64 0
%r20 = load i32, i32* %r14
%r18 = load i32, i32* %r14
%r19 = call double* @__C_DoubleArray__$get__i32( %DoubleArray* %r7, i32 %r18)
%r21 = load double, double* %r19
call void(i8*,  ...) @printf( i8* %r17, i32 %r20, double %r21)
%r22 = load i32, i32* %r14
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r14
br label %L3
L1:
br label %L4
L4:
call void @__dtor_DoubleArray( %DoubleArray* %r7)
br label %L5
L5:
ret void
}

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r1 = alloca i32, align 4
call void @printIntArray( )
call void @printFloatArray( )
call void @printDoubleArray( )
store i32 0, i32* %r1
br label %L1
L1:
%r2 = load i32, i32* %r1
ret i32 %r2
}


