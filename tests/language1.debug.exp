== Language 'language1', type system 'language1/typesystem' ==
-- Lexems:
TOKEN BOOLEAN ((true)|(false)) 0 [tf]  ~ 1
TOKEN IDENT [a-zA-Z_]+[a-zA-Z_0-9]* 0 [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]  ~ 2
TOKEN DQSTRING ["]((([^\\"\n]+)|([\\][^"\n]))*)["] 1 ["]  ~ 3
TOKEN SQSTRING [']((([^\\'\n]+)|([\\][^'\n]))*)['] 1 [']  ~ 4
TOKEN UINTEGER [0123456789]+ 0 [0123456789]  ~ 5
TOKEN FLOAT [0123456789]*[.][0123456789]+ 0 [0123456789.]  ~ 6
TOKEN FLOAT [0123456789]*[.][0123456789]+[Ee][+-]{0,1}[0123456789]+ 0 [0123456789.]  ~ 6
TOKEN ILLEGAL [0123456789]+[A-Za-z_] 0 [0123456789]  ~ 7
TOKEN ILLEGAL [0123456789]*[.][0123456789]+[A-Za-z_] 0 [0123456789.]  ~ 7
TOKEN ILLEGAL [0123456789]*[.][0123456789]+[Ee][+-]{0,1}[0123456789]+[A-Za-z_] 0 [0123456789.]  ~ 7
KEYWORD extern [e] ~ 8
KEYWORD function [f] ~ 9
KEYWORD ( [(] ~ 10
KEYWORD ) [)] ~ 11
KEYWORD ; [;] ~ 12
KEYWORD procedure [p] ~ 13
KEYWORD ... [.] ~ 14
KEYWORD , [,] ~ 15
KEYWORD operator [o] ~ 16
KEYWORD const [c] ~ 17
KEYWORD nothrow [n] ~ 18
KEYWORD :: [:] ~ 19
KEYWORD any [a] ~ 20
KEYWORD class [c] ~ 21
KEYWORD ^ [^] ~ 22
KEYWORD struct [s] ~ 23
KEYWORD [ [[] ~ 24
KEYWORD ] []] ~ 25
KEYWORD & [&] ~ 26
KEYWORD typedef [t] ~ 27
KEYWORD { [{] ~ 28
KEYWORD } [}] ~ 29
KEYWORD generic [g] ~ 30
KEYWORD interface [i] ~ 31
KEYWORD namespace [n] ~ 32
KEYWORD : [:] ~ 33
KEYWORD private [p] ~ 34
KEYWORD public [p] ~ 35
KEYWORD constructor [c] ~ 36
KEYWORD destructor [d] ~ 37
KEYWORD -> [-] ~ 38
KEYWORD = [=] ~ 39
KEYWORD + [+] ~ 40
KEYWORD - [-] ~ 41
KEYWORD * [*] ~ 42
KEYWORD / [/] ~ 43
KEYWORD % [%] ~ 44
KEYWORD && [&] ~ 45
KEYWORD || [|] ~ 46
KEYWORD | [|] ~ 47
KEYWORD << [<] ~ 48
KEYWORD >> [>] ~ 49
KEYWORD ~ [~] ~ 50
KEYWORD ! [!] ~ 51
KEYWORD == [=] ~ 52
KEYWORD != [!] ~ 53
KEYWORD >= [>] ~ 54
KEYWORD <= [<] ~ 55
KEYWORD > [>] ~ 56
KEYWORD < [<] ~ 57
KEYWORD lambda [l] ~ 58
KEYWORD main [m] ~ 59
KEYWORD elseif [e] ~ 60
KEYWORD else [e] ~ 61
KEYWORD catch [c] ~ 62
KEYWORD try [t] ~ 63
KEYWORD var [v] ~ 64
KEYWORD return [r] ~ 65
KEYWORD throw [t] ~ 66
KEYWORD delete [d] ~ 67
KEYWORD if [i] ~ 68
KEYWORD while [w] ~ 69
KEYWORD with [w] ~ 70
KEYWORD new [n] ~ 71
KEYWORD cast [c] ~ 72
KEYWORD null [n] ~ 73
KEYWORD += [+] ~ 74
KEYWORD -= [-] ~ 75
KEYWORD *= [*] ~ 76
KEYWORD /= [/] ~ 77
KEYWORD ^= [^] ~ 78
KEYWORD %= [%] ~ 79
KEYWORD &&= [&] ~ 80
KEYWORD ||= [|] ~ 81
KEYWORD &= [&] ~ 82
KEYWORD |= [|] ~ 83
KEYWORD <<= [<] ~ 84
KEYWORD >>= [>] ~ 85
KEYWORD . [.] ~ 86
COMMENT /* */ [/]
COMMENT // [/]

-- Nonterminals:
(XX) program
(XX) extern_definitionlist
(XX) free_definitionlist
(XX) namespace_definitionlist
(XX) instruct_definitionlist
(XX) inclass_definitionlist
(XX) ininterf_definitionlist
(XX) extern_definition
(XX) extern_paramdecl
(XX) extern_parameters
(XX) extern_paramlist
(XX) ininterf_definition
(XX) funcattribute
(XX) instruct_definition
(XX) inclass_definition
(XX) free_definition
(XX) namespace_definition
(XX) typename
(XX) typehdr
(XX) typegen
(XX) typespec
(XX) typedefinition
(XX) structdefinition
(XX) interfacedefinition
(XX) inheritlist
(XX) namespacedefinition
(XX) classdefinition
(XX) linkage
(XX) functiondefinition
(XX) constructordefinition
(XX) operatordefinition
(XX) operatordecl
(XX) lambda_paramlist
(XX) lambda_parameters
(XX) lamda_expression
(XX) generic_instance_defelem
(XX) generic_instance_deflist
(XX) generic_instance
(XX) generic_defaultlist
(XX) generic_identlist
(XX) generic_header
(XX) callablebody
(XX) main_procedure
(XX) impl_paramlist
(XX) impl_parameters
(XX) impl_paramdecl
(XX) codeblock
(XX) statementlist
(XX) elseblock
(XX) catchblock
(XX) tryblock
(XX) statement
(XX) variabledefinition
(XX) expression
(XX) iexpression
(XX) indirection
(XX) expressionlist

-- Productions:
program = extern_definitionlist free_definitionlist main_procedure (XX)
extern_definitionlist = extern_definition extern_definitionlist
extern_definitionlist = 
free_definitionlist = free_definition free_definitionlist
free_definitionlist = 
namespace_definitionlist = namespace_definition namespace_definitionlist
namespace_definitionlist = 
instruct_definitionlist = instruct_definition instruct_definitionlist
instruct_definitionlist = 
inclass_definitionlist = inclass_definition inclass_definitionlist
inclass_definitionlist = 
ininterf_definitionlist = ininterf_definition ininterf_definitionlist
ininterf_definitionlist = 
extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" (XX)
extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" (XX)
extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" (XX)
extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" (XX)
extern_paramdecl = typespec IDENT (XX)
extern_paramdecl = typespec (XX)
extern_parameters = extern_paramdecl "," extern_parameters (XX)
extern_parameters = extern_paramdecl (XX)
extern_paramlist = extern_parameters (XX)
extern_paramlist =  (XX)
ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";" (XX)
ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute ";" (XX)
ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";" (XX)
ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute ";" (XX)
funcattribute = "const" funcattribute (XX)
funcattribute = "nothrow" funcattribute (XX)
funcattribute =  (XX)
instruct_definition = typedefinition ";" (XX)
instruct_definition = variabledefinition ";" (XX)
instruct_definition = structdefinition (XX)
inclass_definition = typedefinition ";" (XX)
inclass_definition = variabledefinition ";" (XX)
inclass_definition = structdefinition (XX)
inclass_definition = classdefinition (XX)
inclass_definition = interfacedefinition (XX)
inclass_definition = functiondefinition (XX)
inclass_definition = operatordefinition (XX)
inclass_definition = constructordefinition (XX)
free_definition = namespacedefinition
free_definition = typedefinition ";" (XX)
free_definition = variabledefinition ";" (XX)
free_definition = structdefinition (XX)
free_definition = classdefinition (XX)
free_definition = interfacedefinition (XX)
free_definition = functiondefinition (XX)
namespace_definition = namespacedefinition (XX)
namespace_definition = typedefinition ";" (XX)
namespace_definition = structdefinition (XX)
namespace_definition = classdefinition (XX)
namespace_definition = interfacedefinition (XX)
namespace_definition = functiondefinition (XX)
typename/L1 = IDENT
typename/L1 = IDENT "::" typename
typehdr/L1 = typename (XX)
typehdr/L1 = "const" typename (XX)
typehdr/L1 = "any" "class" "^" (XX)
typehdr/L1 = "any" "const" "class" "^" (XX)
typehdr/L1 = "any" "struct" "^" (XX)
typehdr/L1 = "any" "const" "struct" "^" (XX)
typegen/L1 = typehdr
typegen/L1 = typegen "[" generic_instance "]" (XX)
typegen/L1 = typegen "^" (XX)
typegen/L1 = typegen "const" "^" (XX)
typespec/L1 = typegen (XX)
typespec/L1 = typegen "&" (XX)
typedefinition = "typedef" typegen IDENT (XX)
typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" (XX)
typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" (XX)
typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow" (XX)
typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow" (XX)
structdefinition = "struct" IDENT "{" instruct_definitionlist "}" (XX)
structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}" (XX)
interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" (XX)
inheritlist = typegen "," inheritlist (XX)
inheritlist = typegen (XX)
namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" (XX)
classdefinition = "class" IDENT "{" inclass_definitionlist "}" (XX)
classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" (XX)
classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}" (XX)
classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}" (XX)
linkage = "private" (XX)
linkage = "public" (XX)
linkage =  (XX)
functiondefinition = linkage "function" IDENT typespec callablebody (XX)
functiondefinition = linkage "procedure" IDENT callablebody (XX)
functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody (XX)
functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody (XX)
constructordefinition = linkage "constructor" callablebody (XX)
constructordefinition = "destructor" codeblock (XX)
operatordefinition = linkage "operator" operatordecl typespec callablebody (XX)
operatordefinition = linkage "operator" operatordecl callablebody (XX)
operatordecl = "->" (XX)
operatordecl = "=" (XX)
operatordecl = "+" (XX)
operatordecl = "-" (XX)
operatordecl = "*" (XX)
operatordecl = "/" (XX)
operatordecl = "%" (XX)
operatordecl = "&&" (XX)
operatordecl = "||" (XX)
operatordecl = "&" (XX)
operatordecl = "|" (XX)
operatordecl = "<<" (XX)
operatordecl = ">>" (XX)
operatordecl = "~" (XX)
operatordecl = "!" (XX)
operatordecl = "(" ")" (XX)
operatordecl = "[" "]" (XX)
operatordecl = "==" (XX)
operatordecl = "!=" (XX)
operatordecl = ">=" (XX)
operatordecl = "<=" (XX)
operatordecl = ">" (XX)
operatordecl = "<" (XX)
lambda_paramlist = lambda_parameters (XX)
lambda_paramlist =  (XX)
lambda_parameters = IDENT "," lambda_parameters
lambda_parameters = IDENT
lamda_expression = "lambda" "(" lambda_paramlist ")" codeblock (XX)
generic_instance_defelem = typegen
generic_instance_defelem = UINTEGER (XX)
generic_instance_defelem = lamda_expression
generic_instance_deflist = generic_instance_defelem (XX)
generic_instance_deflist = generic_instance_defelem "," generic_instance_deflist (XX)
generic_instance = generic_instance_deflist (XX)
generic_defaultlist = IDENT "=" typegen "," generic_defaultlist (XX)
generic_defaultlist = IDENT "=" typegen (XX)
generic_identlist = IDENT "," generic_identlist (XX)
generic_identlist = IDENT "," generic_defaultlist (XX)
generic_identlist = IDENT (XX)
generic_header = generic_identlist (XX)
generic_header = generic_defaultlist (XX)
callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist "}" (scope:84)
main_procedure = "main" codeblock (XX)
main_procedure = 
impl_paramlist = impl_parameters (XX)
impl_paramlist =  (XX)
impl_parameters = impl_paramdecl "," impl_parameters
impl_parameters = impl_paramdecl
impl_paramdecl = typespec IDENT (XX)
codeblock/L1 = "{" statementlist "}" (scope:88)
statementlist/L1 = statement statementlist (step)
statementlist/L1 = 
elseblock/L1 = "elseif" "(" expression ")" codeblock elseblock (XX)
elseblock/L1 = "elseif" "(" expression ")" codeblock (XX)
elseblock/L1 = "else" codeblock (XX)
catchblock = "catch" IDENT codeblock (step:91)
catchblock = "catch" IDENT "," IDENT codeblock (step:91)
tryblock = "try" codeblock (XX)
statement/L1 = structdefinition (XX)
statement/L1 = classdefinition (XX)
statement/L1 = functiondefinition (XX)
statement/L1 = typedefinition ";" (XX)
statement/L1 = "var" variabledefinition ";" (step:16)
statement/L1 = expression ";" (XX)
statement/L1 = "return" expression ";" (step:94)
statement/L1 = "return" ";" (step:95)
statement/L1 = "throw" expression "," expression ";" (XX)
statement/L1 = "throw" expression ";" (XX)
statement/L1 = tryblock catchblock (scope:97)
statement/L1 = "delete" expression ";" (XX)
statement/L1 = "if" "(" expression ")" codeblock elseblock (XX)
statement/L1 = "if" "(" expression ")" codeblock (XX)
statement/L1 = "while" "(" expression ")" codeblock (XX)
statement/L1 = "with" "(" expression ")" codeblock (XX)
statement/L1 = "with" "(" expression ")" ";" (XX)
statement/L1 = codeblock
variabledefinition = typespec IDENT (step:102)
variabledefinition = typespec IDENT "=" expression (step:102)
expression/L1 = "{" expressionlist "}" (step:103)
expression/L1 = "{" "}" (step:103)
expression/L1 = "new" typespec ":" expression (step:104)
expression/L1 = "cast" typespec ":" expression (step:105)
expression/L2 = IDENT (XX)
expression/L2 = BOOLEAN (XX)
expression/L2 = UINTEGER (XX)
expression/L2 = FLOAT (XX)
expression/L2 = "null" (XX)
expression/L2 = DQSTRING (XX)
expression/L2 = SQSTRING (XX)
expression/L2 = lamda_expression
expression/L2 = "(" expression ")"
expression/L3 = expression "=" expression (step:113)
expression/L3 = expression "+=" expression (step:114)
expression/L3 = expression "-=" expression (step:115)
expression/L3 = expression "*=" expression (step:116)
expression/L3 = expression "/=" expression (step:117)
expression/L3 = expression "^=" expression (step:118)
expression/L3 = expression "%=" expression (step:119)
expression/L3 = expression "&&=" expression (step:120)
expression/L3 = expression "||=" expression (step:121)
expression/L3 = expression "&=" expression (step:122)
expression/L3 = expression "|=" expression (step:123)
expression/L3 = expression "<<=" expression (step:124)
expression/L3 = expression ">>=" expression (step:125)
expression/L4 = expression "||" expression (step:126)
expression/L5 = expression "&&" expression (step:127)
expression/L6 = expression "|" expression (step:128)
expression/L7 = expression "^" expression (step:129)
expression/L7 = expression "&" expression (step:130)
expression/L8 = expression "==" expression (step:131)
expression/L8 = expression "!=" expression (step:132)
expression/L8 = expression "<=" expression (step:133)
expression/L8 = expression "<" expression (step:134)
expression/L8 = expression ">=" expression (step:135)
expression/L8 = expression ">" expression (step:136)
expression/L9 = expression "+" expression (step:137)
expression/L9 = expression "-" expression (step:138)
expression/L9 = "&" expression (XX)
expression/L9 = "-" expression (step:140)
expression/L9 = "+" expression (step:141)
expression/L9 = "~" expression (step:142)
expression/L9 = "!" expression (step:143)
expression/L10 = expression "*" expression (step:144)
expression/L10 = expression "/" expression (step:145)
expression/L10 = expression "%" expression (step:146)
expression/L11 = expression "<<" expression (step:147)
expression/L11 = expression ">>" expression (step:148)
expression/L12 = iexpression
expression/L12 = expression "." IDENT (XX)
expression/L12 = "*" expression (step:150)
expression/L13 = expression "(" expressionlist ")" (step:151)
expression/L13 = expression "(" ")" (step:151)
expression/L13 = expression "[" expressionlist "]" (step:152)
iexpression/L14 = expression indirection IDENT (XX)
indirection/L14 = "->" indirection (XX)
indirection/L14 = "->" (XX)
expressionlist/L0 = expression "," expressionlist
expressionlist/L0 = expression

-- LR(XX) states:
[XX]
	program = . extern_definitionlist free_definitionlist main_procedure
	extern_definitionlist = . extern_definition extern_definitionlist
	extern_definitionlist = .
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	program = extern_definitionlist . free_definitionlist main_procedure
	free_definitionlist = . free_definition free_definitionlist
	free_definitionlist = .
	free_definition = . namespacedefinition
	free_definition = . typedefinition ";"
	free_definition = . variabledefinition ";"
	free_definition = . structdefinition
	free_definition = . classdefinition
	free_definition = . interfacedefinition
	free_definition = . functiondefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	extern_definitionlist = . extern_definition extern_definitionlist
	extern_definitionlist = extern_definition . extern_definitionlist
	extern_definitionlist = .
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	program = extern_definitionlist free_definitionlist . main_procedure
	main_procedure = . "main" codeblock
	main_procedure = .
[XX]
	free_definitionlist = . free_definition free_definitionlist
	free_definitionlist = free_definition . free_definitionlist
	free_definitionlist = .
	free_definition = . namespacedefinition
	free_definition = . typedefinition ";"
	free_definition = . variabledefinition ";"
	free_definition = . structdefinition
	free_definition = . classdefinition
	free_definition = . interfacedefinition
	free_definition = . functiondefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	typehdr/L1 = typename .
[XX]
	typegen/L1 = typehdr .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	typespec/L1 = typegen .
	typespec/L1 = typegen . "&"
[XX]
	variabledefinition = typespec . IDENT
	variabledefinition = typespec . IDENT "=" expression
[XX]
	free_definition = typedefinition . ";"
[XX]
	free_definition = structdefinition .
[XX]
	free_definition = interfacedefinition .
[XX]
	free_definition = namespacedefinition .
[XX]
	free_definition = classdefinition .
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody
[XX]
	free_definition = functiondefinition .
[XX]
	free_definition = variabledefinition . ";"
[XX]
	typename/L1 = IDENT .
	typename/L1 = IDENT . "::" typename
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = "const" . typename
[XX]
	typehdr/L1 = "any" . "class" "^"
	typehdr/L1 = "any" . "const" "class" "^"
	typehdr/L1 = "any" . "struct" "^"
	typehdr/L1 = "any" . "const" "struct" "^"
[XX]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}"
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typedefinition = "typedef" . typegen IDENT
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")" "nothrow"
[XX]
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = "generic" . linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = "generic" . linkage "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}"
[XX]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}"
[XX]
	linkage = "private" .
[XX]
	linkage = "public" .
[XX]
	extern_definitionlist = extern_definition extern_definitionlist .
[XX]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	program = extern_definitionlist free_definitionlist main_procedure .
[XX]
	main_procedure = "main" . codeblock
	codeblock/L1 = . "{" statementlist "}"
[XX]
	free_definitionlist = free_definition free_definitionlist .
[XX]
	typegen/L1 = typegen "const" . "^"
[XX]
	typegen/L1 = typegen "^" .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = typegen "[" . generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	generic_instance_defelem = . typegen
	generic_instance_defelem = . UINTEGER
	generic_instance_defelem = . lamda_expression
	generic_instance_deflist = . generic_instance_defelem
	generic_instance_deflist = . generic_instance_defelem "," generic_instance_deflist
	generic_instance = . generic_instance_deflist
[XX]
	typespec/L1 = typegen "&" .
[XX]
	variabledefinition = typespec IDENT .
	variabledefinition = typespec IDENT . "=" expression
[XX]
	free_definition = typedefinition ";" .
[XX]
	functiondefinition = linkage "function" . IDENT typespec callablebody
[XX]
	functiondefinition = linkage "procedure" . IDENT callablebody
[XX]
	free_definition = variabledefinition ";" .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typename/L1 = IDENT "::" . typename
[XX]
	typehdr/L1 = "const" typename .
[XX]
	typehdr/L1 = "any" "const" . "class" "^"
	typehdr/L1 = "any" "const" . "struct" "^"
[XX]
	typehdr/L1 = "any" "class" . "^"
[XX]
	typehdr/L1 = "any" "struct" . "^"
[XX]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}"
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	typedefinition = "typedef" typegen . IDENT
[XX]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")" "nothrow"
[XX]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")"
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage . "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = "generic" linkage . "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "generic" "struct" . IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}"
[XX]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}"
[XX]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	main_procedure = "main" codeblock .
[XX]
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	codeblock/L1 = . "{" statementlist "}"
	codeblock/L1 = "{" . statementlist "}"
	statementlist/L1 = . statement statementlist
	statementlist/L1 = .
	tryblock = . "try" codeblock
	statement/L1 = . structdefinition
	statement/L1 = . classdefinition
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "return" ";"
	statement/L1 = . "throw" expression "," expression ";"
	statement/L1 = . "throw" expression ";"
	statement/L1 = . tryblock catchblock
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" codeblock elseblock
	statement/L1 = . "if" "(" expression ")" codeblock
	statement/L1 = . "while" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" ";"
	statement/L1 = . codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	typegen/L1 = typegen "const" "^" .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	generic_instance_defelem = typegen .
[XX]
	generic_instance_defelem = lamda_expression .
[XX]
	generic_instance_deflist = generic_instance_defelem .
	generic_instance_deflist = generic_instance_defelem . "," generic_instance_deflist
[XX]
	generic_instance = generic_instance_deflist .
[XX]
	typegen/L1 = typegen "[" generic_instance . "]"
[XX]
	generic_instance_defelem = UINTEGER .
[XX]
	lamda_expression = "lambda" . "(" lambda_paramlist ")" codeblock
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	variabledefinition = typespec IDENT "=" . expression
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	functiondefinition = linkage "function" IDENT . typespec callablebody
[XX]
	functiondefinition = linkage "procedure" IDENT . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	typename/L1 = IDENT "::" typename .
[XX]
	typehdr/L1 = "any" "const" "class" . "^"
[XX]
	typehdr/L1 = "any" "const" "struct" . "^"
[XX]
	typehdr/L1 = "any" "class" "^" .
[XX]
	typehdr/L1 = "any" "struct" "^" .
[XX]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" codeblock
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	inheritlist = . typegen "," inheritlist
	inheritlist = . typegen
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}"
[XX]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	typedefinition = "typedef" typegen IDENT .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")" "nothrow"
[XX]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")"
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage "function" . IDENT "[" generic_header "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" . IDENT "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "generic" "struct" IDENT . "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist
	ininterf_definitionlist = .
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" funcattribute ";"
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}"
[XX]
	namespace_definitionlist = . namespace_definition namespace_definitionlist
	namespace_definitionlist = .
	namespace_definition = . namespacedefinition
	namespace_definition = . typedefinition ";"
	namespace_definition = . structdefinition
	namespace_definition = . classdefinition
	namespace_definition = . interfacedefinition
	namespace_definition = . functiondefinition
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";"
[XX]
	statement/L1 = typedefinition . ";"
[XX]
	statement/L1 = structdefinition .
[XX]
	statement/L1 = classdefinition .
[XX]
	statement/L1 = functiondefinition .
[XX]
	expression/L2 = lamda_expression .
[XX]
	statement/L1 = codeblock .
[XX]
	codeblock/L1 = "{" statementlist . "}"
[XX]
	catchblock = . "catch" IDENT codeblock
	catchblock = . "catch" IDENT "," IDENT codeblock
	statement/L1 = tryblock . catchblock
[XX]
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	codeblock/L1 = . "{" statementlist "}"
	statementlist/L1 = . statement statementlist
	statementlist/L1 = statement . statementlist
	statementlist/L1 = .
	tryblock = . "try" codeblock
	statement/L1 = . structdefinition
	statement/L1 = . classdefinition
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "return" ";"
	statement/L1 = . "throw" expression "," expression ";"
	statement/L1 = . "throw" expression ";"
	statement/L1 = . tryblock catchblock
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" codeblock elseblock
	statement/L1 = . "if" "(" expression ")" codeblock
	statement/L1 = . "while" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" ";"
	statement/L1 = . codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L12 = iexpression .
[XX]
	expression/L2 = BOOLEAN .
[XX]
	expression/L2 = IDENT .
[XX]
	expression/L2 = DQSTRING .
[XX]
	expression/L2 = SQSTRING .
[XX]
	expression/L2 = UINTEGER .
[XX]
	expression/L2 = FLOAT .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L2 = "(" . expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = "&" . expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	codeblock/L1 = . "{" statementlist "}"
	codeblock/L1 = "{" . statementlist "}"
	statementlist/L1 = . statement statementlist
	statementlist/L1 = .
	tryblock = . "try" codeblock
	statement/L1 = . structdefinition
	statement/L1 = . classdefinition
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "return" ";"
	statement/L1 = . "throw" expression "," expression ";"
	statement/L1 = . "throw" expression ";"
	statement/L1 = . tryblock catchblock
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" codeblock elseblock
	statement/L1 = . "if" "(" expression ")" codeblock
	statement/L1 = . "while" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" ";"
	statement/L1 = . codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = "{" . "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
	expressionlist/L0 = . expression "," expressionlist
	expressionlist/L0 = . expression
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = "+" . expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = "-" . expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L12 = "*" . expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = "~" . expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L9 = "!" . expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	codeblock/L1 = . "{" statementlist "}"
	tryblock = "try" . codeblock
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	statement/L1 = "var" . variabledefinition ";"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "return" . expression ";"
	statement/L1 = "return" . ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "throw" . expression "," expression ";"
	statement/L1 = "throw" . expression ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "delete" . expression ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	statement/L1 = "if" . "(" expression ")" codeblock elseblock
	statement/L1 = "if" . "(" expression ")" codeblock
[XX]
	statement/L1 = "while" . "(" expression ")" codeblock
[XX]
	statement/L1 = "with" . "(" expression ")" codeblock
	statement/L1 = "with" . "(" expression ")" ";"
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	expression/L1 = "new" . typespec ":" expression
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	expression/L1 = "cast" . typespec ":" expression
[XX]
	expression/L2 = "null" .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	generic_instance_defelem = . typegen
	generic_instance_defelem = . UINTEGER
	generic_instance_defelem = . lamda_expression
	generic_instance_deflist = . generic_instance_defelem
	generic_instance_deflist = . generic_instance_defelem "," generic_instance_deflist
	generic_instance_deflist = generic_instance_defelem "," . generic_instance_deflist
[XX]
	typegen/L1 = typegen "[" generic_instance "]" .
[XX]
	lambda_paramlist = . lambda_parameters
	lambda_paramlist = .
	lambda_parameters = . IDENT "," lambda_parameters
	lambda_parameters = . IDENT
	lamda_expression = "lambda" "(" . lambda_paramlist ")" codeblock
[XX]
	variabledefinition = typespec IDENT "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = "{" . "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
	expressionlist/L0 = . expression "," expressionlist
	expressionlist/L0 = . expression
[XX]
	functiondefinition = linkage "function" IDENT typespec . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	functiondefinition = linkage "procedure" IDENT callablebody .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	callablebody = "(" . impl_paramlist ")" funcattribute "{" statementlist "}"
	impl_paramlist = . impl_parameters
	impl_paramlist = .
	impl_parameters = . impl_paramdecl "," impl_parameters
	impl_parameters = . impl_paramdecl
	impl_paramdecl = . typespec IDENT
[XX]
	typehdr/L1 = "any" "const" "class" "^" .
[XX]
	typehdr/L1 = "any" "const" "struct" "^" .
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}"
[XX]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = inclass_definition . inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" codeblock
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	inclass_definition = typedefinition . ";"
[XX]
	inclass_definition = structdefinition .
[XX]
	inclass_definition = interfacedefinition .
[XX]
	inclass_definition = classdefinition .
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody
	constructordefinition = linkage . "constructor" callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody
	operatordefinition = linkage . "operator" operatordecl callablebody
[XX]
	inclass_definition = functiondefinition .
[XX]
	inclass_definition = constructordefinition .
[XX]
	inclass_definition = operatordefinition .
[XX]
	inclass_definition = variabledefinition . ";"
[XX]
	constructordefinition = "destructor" . codeblock
	codeblock/L1 = . "{" statementlist "}"
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	inheritlist = typegen . "," inheritlist
	inheritlist = typegen .
[XX]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}"
[XX]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = instruct_definition . instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	instruct_definition = typedefinition . ";"
[XX]
	instruct_definition = structdefinition .
[XX]
	instruct_definition = variabledefinition . ";"
[XX]
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")" "nothrow"
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")"
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage "function" IDENT . "[" generic_header "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT . "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[XX]
	structdefinition = "generic" "struct" IDENT "[" . generic_header "]" "{" instruct_definitionlist "}"
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}"
[XX]
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist
	ininterf_definitionlist = .
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" funcattribute ";"
	operatordecl = . "->"
	operatordecl = . "="
	operatordecl = . "+"
	operatordecl = . "-"
	operatordecl = . "*"
	operatordecl = . "/"
	operatordecl = . "%"
	operatordecl = . "&&"
	operatordecl = . "||"
	operatordecl = . "&"
	operatordecl = . "|"
	operatordecl = . "<<"
	operatordecl = . ">>"
	operatordecl = . "~"
	operatordecl = . "!"
	operatordecl = . "(" ")"
	operatordecl = . "[" "]"
	operatordecl = . "=="
	operatordecl = . "!="
	operatordecl = . ">="
	operatordecl = . "<="
	operatordecl = . ">"
	operatordecl = . "<"
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}"
[XX]
	namespace_definitionlist = . namespace_definition namespace_definitionlist
	namespace_definitionlist = namespace_definition . namespace_definitionlist
	namespace_definitionlist = .
	namespace_definition = . namespacedefinition
	namespace_definition = . typedefinition ";"
	namespace_definition = . structdefinition
	namespace_definition = . classdefinition
	namespace_definition = . interfacedefinition
	namespace_definition = . functiondefinition
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	namespace_definition = typedefinition . ";"
[XX]
	namespace_definition = structdefinition .
[XX]
	namespace_definition = interfacedefinition .
[XX]
	namespace_definition = namespacedefinition .
[XX]
	namespace_definition = classdefinition .
[XX]
	namespace_definition = functiondefinition .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";"
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	statement/L1 = typedefinition ";" .
[XX]
	codeblock/L1 = "{" statementlist "}" .
[XX]
	statement/L1 = tryblock catchblock .
[XX]
	catchblock = "catch" . IDENT codeblock
	catchblock = "catch" . IDENT "," IDENT codeblock
[XX]
	statementlist/L1 = statement statementlist .
[XX]
	iexpression/L14 = expression indirection . IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = expression "(" . expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = expression "(" . ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
	expressionlist/L0 = . expression "," expressionlist
	expressionlist/L0 = . expression
[XX]
	statement/L1 = expression ";" .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = expression "^" . expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	expression/L13 = expression "[" . expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
	expressionlist/L0 = . expression "," expressionlist
	expressionlist/L0 = . expression
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L7 = expression "&" . expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	indirection/L14 = . "->" indirection
	indirection/L14 = "->" . indirection
	indirection/L14 = . "->"
	indirection/L14 = "->" .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = expression "=" . expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = expression "+" . expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = expression "-" . expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = expression "*" . expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = expression "/" . expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L10 = expression "%" . expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L5 = expression "&&" . expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L4 = expression "||" . expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L6 = expression "|" . expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = expression "<<" . expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L11 = expression ">>" . expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = expression "==" . expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = expression "!=" . expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = expression ">=" . expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = expression "<=" . expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L8 = expression ">" . expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = expression "<" . expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = expression "+=" . expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = expression "-=" . expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = expression "*=" . expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = expression "/=" . expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = expression "^=" . expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = expression "%=" . expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = expression "&&=" . expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = expression "||=" . expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = expression "&=" . expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = expression "|=" . expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = expression "<<=" . expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L3 = expression ">>=" . expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	expression/L12 = expression "." . IDENT
[XX]
	expression/L2 = "(" expression . ")"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "&" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
	expressionlist/L0 = expression . "," expressionlist
	expressionlist/L0 = expression .
[XX]
	expression/L1 = "{" expressionlist . "}"
[XX]
	expression/L1 = "{" "}" .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "+" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L12 = "*" expression .
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "~" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "!" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	tryblock = "try" codeblock .
[XX]
	statement/L1 = "var" variabledefinition . ";"
[XX]
	statement/L1 = "return" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	statement/L1 = "return" ";" .
[XX]
	statement/L1 = "throw" expression . "," expression ";"
	statement/L1 = "throw" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	statement/L1 = "delete" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "if" "(" . expression ")" codeblock elseblock
	statement/L1 = "if" "(" . expression ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "while" "(" . expression ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "with" "(" . expression ")" codeblock
	statement/L1 = "with" "(" . expression ")" ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	expression/L1 = "new" typespec . ":" expression
[XX]
	expression/L1 = "cast" typespec . ":" expression
[XX]
	generic_instance_deflist = generic_instance_defelem "," generic_instance_deflist .
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist . ")" codeblock
[XX]
	lambda_paramlist = lambda_parameters .
[XX]
	lambda_parameters = IDENT . "," lambda_parameters
	lambda_parameters = IDENT .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
	expressionlist/L0 = expression . "," expressionlist
	expressionlist/L0 = expression .
[XX]
	functiondefinition = linkage "function" IDENT typespec callablebody .
[XX]
	impl_paramdecl = typespec . IDENT
[XX]
	callablebody = "(" impl_paramlist . ")" funcattribute "{" statementlist "}"
[XX]
	impl_paramlist = impl_parameters .
[XX]
	impl_parameters = impl_paramdecl . "," impl_parameters
	impl_parameters = impl_paramdecl .
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" .
[XX]
	inclass_definitionlist = inclass_definition inclass_definitionlist .
[XX]
	inclass_definition = typedefinition ";" .
[XX]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody
	operatordefinition = linkage "operator" . operatordecl callablebody
	operatordecl = . "->"
	operatordecl = . "="
	operatordecl = . "+"
	operatordecl = . "-"
	operatordecl = . "*"
	operatordecl = . "/"
	operatordecl = . "%"
	operatordecl = . "&&"
	operatordecl = . "||"
	operatordecl = . "&"
	operatordecl = . "|"
	operatordecl = . "<<"
	operatordecl = . ">>"
	operatordecl = . "~"
	operatordecl = . "!"
	operatordecl = . "(" ")"
	operatordecl = . "[" "]"
	operatordecl = . "=="
	operatordecl = . "!="
	operatordecl = . ">="
	operatordecl = . "<="
	operatordecl = . ">"
	operatordecl = . "<"
[XX]
	constructordefinition = linkage "constructor" . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	inclass_definition = variabledefinition ";" .
[XX]
	constructordefinition = "destructor" codeblock .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	inheritlist = . typegen "," inheritlist
	inheritlist = typegen "," . inheritlist
	inheritlist = . typegen
[XX]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" codeblock
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" .
[XX]
	instruct_definitionlist = instruct_definition instruct_definitionlist .
[XX]
	instruct_definition = typedefinition ";" .
[XX]
	instruct_definition = variabledefinition ";" .
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")" "nothrow"
[XX]
	extern_parameters = extern_paramdecl . "," extern_parameters
	extern_parameters = extern_paramdecl .
[XX]
	extern_paramlist = extern_parameters .
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")"
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")" "nothrow"
[XX]
	extern_paramdecl = typespec . IDENT
	extern_paramdecl = typespec .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" . generic_header "]" typespec callablebody
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" . generic_header "]" callablebody
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[XX]
	generic_header = generic_defaultlist .
[XX]
	generic_header = generic_identlist .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typegen
	generic_identlist = IDENT . "," generic_identlist
	generic_identlist = IDENT . "," generic_defaultlist
	generic_identlist = IDENT .
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header . "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" .
[XX]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist .
[XX]
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	operatordecl = "(" . ")"
[XX]
	operatordecl = "[" . "]"
[XX]
	operatordecl = "&" .
[XX]
	operatordecl = "->" .
[XX]
	operatordecl = "=" .
[XX]
	operatordecl = "+" .
[XX]
	operatordecl = "-" .
[XX]
	operatordecl = "*" .
[XX]
	operatordecl = "/" .
[XX]
	operatordecl = "%" .
[XX]
	operatordecl = "&&" .
[XX]
	operatordecl = "||" .
[XX]
	operatordecl = "|" .
[XX]
	operatordecl = "<<" .
[XX]
	operatordecl = ">>" .
[XX]
	operatordecl = "~" .
[XX]
	operatordecl = "!" .
[XX]
	operatordecl = "==" .
[XX]
	operatordecl = "!=" .
[XX]
	operatordecl = ">=" .
[XX]
	operatordecl = "<=" .
[XX]
	operatordecl = ">" .
[XX]
	operatordecl = "<" .
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" .
[XX]
	namespace_definitionlist = namespace_definition namespace_definitionlist .
[XX]
	namespace_definition = typedefinition ";" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";"
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";"
[XX]
	codeblock/L1 = . "{" statementlist "}"
	catchblock = "catch" IDENT . codeblock
	catchblock = "catch" IDENT . "," IDENT codeblock
[XX]
	iexpression/L14 = expression indirection IDENT .
[XX]
	expression/L13 = expression "(" expressionlist . ")"
[XX]
	expression/L13 = expression "(" ")" .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression "^" expression .
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L13 = expression "[" expressionlist . "]"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L7 = expression "&" expression .
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	indirection/L14 = "->" indirection .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression "=" expression .
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression "+" expression .
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = expression "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression "*" expression .
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression "/" expression .
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L10 = expression "%" expression .
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L5 = expression "&&" expression .
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L4 = expression "||" expression .
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L6 = expression "|" expression .
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression "<<" expression .
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L11 = expression ">>" expression .
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression "==" expression .
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression "!=" expression .
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression ">=" expression .
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression "<=" expression .
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L8 = expression ">" expression .
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression "<" expression .
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression "+=" expression .
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression "-=" expression .
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression "*=" expression .
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression "/=" expression .
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression "^=" expression .
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression "%=" expression .
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression "&&=" expression .
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression "||=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression "|=" expression .
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression "<<=" expression .
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L3 = expression ">>=" expression .
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L12 = expression "." IDENT .
[XX]
	expression/L2 = "(" expression ")" .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
	expressionlist/L0 = . expression "," expressionlist
	expressionlist/L0 = expression "," . expressionlist
	expressionlist/L0 = . expression
[XX]
	expression/L1 = "{" expressionlist "}" .
[XX]
	statement/L1 = "var" variabledefinition ";" .
[XX]
	statement/L1 = "return" expression ";" .
[XX]
	statement/L1 = "throw" expression ";" .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	statement/L1 = "throw" expression "," . expression ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	statement/L1 = "delete" expression ";" .
[XX]
	statement/L1 = "if" "(" expression . ")" codeblock elseblock
	statement/L1 = "if" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	statement/L1 = "while" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	statement/L1 = "with" "(" expression . ")" codeblock
	statement/L1 = "with" "(" expression . ")" ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = "new" typespec ":" . expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L1 = "cast" typespec ":" . expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" . codeblock
	codeblock/L1 = . "{" statementlist "}"
[XX]
	lambda_parameters = . IDENT "," lambda_parameters
	lambda_parameters = IDENT "," . lambda_parameters
	lambda_parameters = . IDENT
[XX]
	impl_paramdecl = typespec IDENT .
[XX]
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
	callablebody = "(" impl_paramlist ")" . funcattribute "{" statementlist "}"
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	impl_parameters = . impl_paramdecl "," impl_parameters
	impl_parameters = impl_paramdecl "," . impl_parameters
	impl_parameters = . impl_paramdecl
	impl_paramdecl = . typespec IDENT
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	operatordefinition = linkage "operator" operatordecl . typespec callablebody
	operatordefinition = linkage "operator" operatordecl . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	constructordefinition = linkage "constructor" callablebody .
[XX]
	inheritlist = typegen "," inheritlist .
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}"
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")"
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")" "nothrow"
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = extern_paramdecl "," . extern_parameters
	extern_parameters = . extern_paramdecl
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" .
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" . "nothrow"
[XX]
	extern_paramdecl = typespec IDENT .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header . "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header . "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = IDENT "," . generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = IDENT "," . generic_defaultlist
	generic_identlist = . IDENT
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	generic_defaultlist = IDENT "=" . typegen "," generic_defaultlist
	generic_defaultlist = IDENT "=" . typegen
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" . "{" instruct_definitionlist "}"
[XX]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" funcattribute ";"
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" funcattribute ";"
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	operatordecl = "(" ")" .
[XX]
	operatordecl = "[" "]" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";"
[XX]
	catchblock = "catch" IDENT codeblock .
[XX]
	catchblock = "catch" IDENT "," . IDENT codeblock
[XX]
	expression/L13 = expression "(" expressionlist ")" .
[XX]
	expression/L13 = expression "[" expressionlist "]" .
[XX]
	expressionlist/L0 = expression "," expressionlist .
[XX]
	statement/L1 = "throw" expression "," expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	codeblock/L1 = . "{" statementlist "}"
	statement/L1 = "if" "(" expression ")" . codeblock elseblock
	statement/L1 = "if" "(" expression ")" . codeblock
[XX]
	codeblock/L1 = . "{" statementlist "}"
	statement/L1 = "while" "(" expression ")" . codeblock
[XX]
	codeblock/L1 = . "{" statementlist "}"
	statement/L1 = "with" "(" expression ")" . codeblock
	statement/L1 = "with" "(" expression ")" . ";"
[XX]
	expression/L1 = "new" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	expression/L1 = "cast" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" codeblock .
[XX]
	lambda_parameters = IDENT "," lambda_parameters .
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute . "{" statementlist "}"
[XX]
	funcattribute = . "const" funcattribute
	funcattribute = "const" . funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
[XX]
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = "nothrow" . funcattribute
	funcattribute = .
[XX]
	impl_parameters = impl_paramdecl "," impl_parameters .
[XX]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	operatordefinition = linkage "operator" operatordecl callablebody .
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" .
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" .
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" . "nothrow"
[XX]
	extern_parameters = extern_paramdecl "," extern_parameters .
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow" .
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" . typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" . inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" codeblock
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	inheritlist = . typegen "," inheritlist
	inheritlist = . typegen
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" . inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_identlist = IDENT "," generic_defaultlist .
[XX]
	generic_identlist = IDENT "," generic_identlist .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	generic_defaultlist = IDENT "=" typegen . "," generic_defaultlist
	generic_defaultlist = IDENT "=" typegen .
[XX]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" . instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" funcattribute ";"
[XX]
	extern_paramdecl = . typespec IDENT
	extern_paramdecl = . typespec
	extern_parameters = . extern_paramdecl "," extern_parameters
	extern_parameters = . extern_paramdecl
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" funcattribute ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" funcattribute ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" .
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";"
[XX]
	codeblock/L1 = . "{" statementlist "}"
	catchblock = "catch" IDENT "," IDENT . codeblock
[XX]
	statement/L1 = "throw" expression "," expression ";" .
[XX]
	elseblock/L1 = . "elseif" "(" expression ")" codeblock elseblock
	elseblock/L1 = . "elseif" "(" expression ")" codeblock
	elseblock/L1 = . "else" codeblock
	statement/L1 = "if" "(" expression ")" codeblock . elseblock
	statement/L1 = "if" "(" expression ")" codeblock .
[XX]
	statement/L1 = "while" "(" expression ")" codeblock .
[XX]
	statement/L1 = "with" "(" expression ")" codeblock .
[XX]
	statement/L1 = "with" "(" expression ")" ";" .
[XX]
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	callablebody = "(" impl_paramlist ")" funcattribute "{" . statementlist "}"
	codeblock/L1 = . "{" statementlist "}"
	statementlist/L1 = . statement statementlist
	statementlist/L1 = .
	tryblock = . "try" codeblock
	statement/L1 = . structdefinition
	statement/L1 = . classdefinition
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "return" ";"
	statement/L1 = . "throw" expression "," expression ";"
	statement/L1 = . "throw" expression ";"
	statement/L1 = . tryblock catchblock
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" codeblock elseblock
	statement/L1 = . "if" "(" expression ")" codeblock
	statement/L1 = . "while" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" codeblock
	statement/L1 = . "with" "(" expression ")" ";"
	statement/L1 = . codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	funcattribute = "const" funcattribute .
[XX]
	funcattribute = "nothrow" funcattribute .
[XX]
	operatordefinition = linkage "operator" operatordecl typespec callablebody .
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow" .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec . callablebody
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist . "}"
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist . "{" inclass_definitionlist "}"
[XX]
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist
	generic_defaultlist = IDENT "=" typegen "," . generic_defaultlist
	generic_defaultlist = . IDENT "=" typegen
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist . "}"
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . funcattribute ";"
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . funcattribute ";"
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" .
[XX]
	catchblock = "catch" IDENT "," IDENT codeblock .
[XX]
	statement/L1 = "if" "(" expression ")" codeblock elseblock .
[XX]
	elseblock/L1 = "elseif" . "(" expression ")" codeblock elseblock
	elseblock/L1 = "elseif" . "(" expression ")" codeblock
[XX]
	codeblock/L1 = . "{" statementlist "}"
	elseblock/L1 = "else" . codeblock
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist . "}"
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}" .
[XX]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typehdr/L1 = . typename
	typehdr/L1 = . "const" typename
	typehdr/L1 = . "any" "class" "^"
	typehdr/L1 = . "any" "const" "class" "^"
	typehdr/L1 = . "any" "struct" "^"
	typehdr/L1 = . "any" "const" "struct" "^"
	typegen/L1 = . typehdr
	typegen/L1 = . typegen "[" generic_instance "]"
	typegen/L1 = . typegen "^"
	typegen/L1 = . typegen "const" "^"
	typespec/L1 = . typegen
	typespec/L1 = . typegen "&"
	typedefinition = . "typedef" typegen IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" . inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" codeblock
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
[XX]
	generic_defaultlist = IDENT "=" typegen "," generic_defaultlist .
[XX]
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typegen
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}" .
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . funcattribute ";"
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . funcattribute ";"
	funcattribute = . "const" funcattribute
	funcattribute = . "nothrow" funcattribute
	funcattribute = .
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute . ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" .
[XX]
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock
	elseblock/L1 = "elseif" "(" . expression ")" codeblock elseblock
	elseblock/L1 = "elseif" "(" . expression ")" codeblock
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" expression
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . UINTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . lamda_expression
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression/L14 = . expression indirection IDENT
[XX]
	elseblock/L1 = "else" codeblock .
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist "}" .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist . "}"
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute ";" .
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute ";" .
[XX]
	elseblock/L1 = "elseif" "(" expression . ")" codeblock elseblock
	elseblock/L1 = "elseif" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	indirection/L14 = . "->" indirection
	indirection/L14 = . "->"
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}" .
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";" .
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";" .
[XX]
	codeblock/L1 = . "{" statementlist "}"
	elseblock/L1 = "elseif" "(" expression ")" . codeblock elseblock
	elseblock/L1 = "elseif" "(" expression ")" . codeblock
[XX]
	elseblock/L1 = . "elseif" "(" expression ")" codeblock elseblock
	elseblock/L1 = "elseif" "(" expression ")" codeblock . elseblock
	elseblock/L1 = . "elseif" "(" expression ")" codeblock
	elseblock/L1 = "elseif" "(" expression ")" codeblock .
	elseblock/L1 = . "else" codeblock
[XX]
	elseblock/L1 = "elseif" "(" expression ")" codeblock elseblock .

-- LR(XX) state cores (for calculation of SHIFT follow state):
[XX]
	program = extern_definitionlist . free_definitionlist main_procedure
[XX]
	extern_definitionlist = extern_definition . extern_definitionlist
[XX]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	program = extern_definitionlist free_definitionlist . main_procedure
[XX]
	free_definitionlist = free_definition . free_definitionlist
[XX]
	typehdr/L1 = typename .
[XX]
	typegen/L1 = typehdr .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	typespec/L1 = typegen .
	typespec/L1 = typegen . "&"
[XX]
	variabledefinition = typespec . IDENT
	variabledefinition = typespec . IDENT "=" expression
[XX]
	free_definition = typedefinition . ";"
[XX]
	free_definition = structdefinition .
[XX]
	free_definition = interfacedefinition .
[XX]
	free_definition = namespacedefinition .
[XX]
	free_definition = classdefinition .
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody
[XX]
	free_definition = functiondefinition .
[XX]
	free_definition = variabledefinition . ";"
[XX]
	typename/L1 = IDENT .
	typename/L1 = IDENT . "::" typename
[XX]
	typehdr/L1 = "const" . typename
[XX]
	typehdr/L1 = "any" . "class" "^"
	typehdr/L1 = "any" . "const" "class" "^"
	typehdr/L1 = "any" . "struct" "^"
	typehdr/L1 = "any" . "const" "struct" "^"
[XX]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}"
[XX]
	typedefinition = "typedef" . typegen IDENT
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")"
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")" "nothrow"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")" "nothrow"
[XX]
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
	functiondefinition = "generic" . linkage "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = "generic" . linkage "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}"
[XX]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}"
[XX]
	linkage = "private" .
[XX]
	linkage = "public" .
[XX]
	extern_definitionlist = extern_definition extern_definitionlist .
[XX]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	program = extern_definitionlist free_definitionlist main_procedure .
[XX]
	main_procedure = "main" . codeblock
[XX]
	free_definitionlist = free_definition free_definitionlist .
[XX]
	typegen/L1 = typegen "const" . "^"
[XX]
	typegen/L1 = typegen "^" .
[XX]
	typegen/L1 = typegen "[" . generic_instance "]"
[XX]
	typespec/L1 = typegen "&" .
[XX]
	variabledefinition = typespec IDENT .
	variabledefinition = typespec IDENT . "=" expression
[XX]
	free_definition = typedefinition ";" .
[XX]
	functiondefinition = linkage "function" . IDENT typespec callablebody
[XX]
	functiondefinition = linkage "procedure" . IDENT callablebody
[XX]
	free_definition = variabledefinition ";" .
[XX]
	typename/L1 = IDENT "::" . typename
[XX]
	typehdr/L1 = "const" typename .
[XX]
	typehdr/L1 = "any" "const" . "class" "^"
	typehdr/L1 = "any" "const" . "struct" "^"
[XX]
	typehdr/L1 = "any" "class" . "^"
[XX]
	typehdr/L1 = "any" "struct" . "^"
[XX]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}"
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	typedefinition = "typedef" typegen . IDENT
[XX]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")" "nothrow"
[XX]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")"
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage . "function" IDENT "[" generic_header "]" typespec callablebody
	functiondefinition = "generic" linkage . "procedure" IDENT "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "generic" "struct" . IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}"
[XX]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}"
[XX]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";"
[XX]
	main_procedure = "main" codeblock .
[XX]
	codeblock/L1 = "{" . statementlist "}"
[XX]
	typegen/L1 = typegen "const" "^" .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	generic_instance_defelem = typegen .
[XX]
	generic_instance_defelem = lamda_expression .
[XX]
	generic_instance_deflist = generic_instance_defelem .
	generic_instance_deflist = generic_instance_defelem . "," generic_instance_deflist
[XX]
	generic_instance = generic_instance_deflist .
[XX]
	typegen/L1 = typegen "[" generic_instance . "]"
[XX]
	generic_instance_defelem = UINTEGER .
[XX]
	lamda_expression = "lambda" . "(" lambda_paramlist ")" codeblock
[XX]
	variabledefinition = typespec IDENT "=" . expression
[XX]
	functiondefinition = linkage "function" IDENT . typespec callablebody
[XX]
	functiondefinition = linkage "procedure" IDENT . callablebody
[XX]
	typename/L1 = IDENT "::" typename .
[XX]
	typehdr/L1 = "any" "const" "class" . "^"
[XX]
	typehdr/L1 = "any" "const" "struct" . "^"
[XX]
	typehdr/L1 = "any" "class" "^" .
[XX]
	typehdr/L1 = "any" "struct" "^" .
[XX]
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}"
[XX]
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}"
[XX]
	typedefinition = "typedef" typegen IDENT .
[XX]
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")" "nothrow"
[XX]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")"
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage "function" . IDENT "[" generic_header "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" . IDENT "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "generic" "struct" IDENT . "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}"
[XX]
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";"
[XX]
	statement/L1 = typedefinition . ";"
[XX]
	statement/L1 = structdefinition .
[XX]
	statement/L1 = classdefinition .
[XX]
	statement/L1 = functiondefinition .
[XX]
	expression/L2 = lamda_expression .
[XX]
	statement/L1 = codeblock .
[XX]
	codeblock/L1 = "{" statementlist . "}"
[XX]
	statement/L1 = tryblock . catchblock
[XX]
	statementlist/L1 = statement . statementlist
[XX]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L12 = iexpression .
[XX]
	expression/L2 = BOOLEAN .
[XX]
	expression/L2 = IDENT .
[XX]
	expression/L2 = DQSTRING .
[XX]
	expression/L2 = SQSTRING .
[XX]
	expression/L2 = UINTEGER .
[XX]
	expression/L2 = FLOAT .
[XX]
	expression/L2 = "(" . expression ")"
[XX]
	expression/L9 = "&" . expression
[XX]
	codeblock/L1 = "{" . statementlist "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = "{" . "}"
[XX]
	expression/L9 = "+" . expression
[XX]
	expression/L9 = "-" . expression
[XX]
	expression/L12 = "*" . expression
[XX]
	expression/L9 = "~" . expression
[XX]
	expression/L9 = "!" . expression
[XX]
	tryblock = "try" . codeblock
[XX]
	statement/L1 = "var" . variabledefinition ";"
[XX]
	statement/L1 = "return" . expression ";"
	statement/L1 = "return" . ";"
[XX]
	statement/L1 = "throw" . expression "," expression ";"
	statement/L1 = "throw" . expression ";"
[XX]
	statement/L1 = "delete" . expression ";"
[XX]
	statement/L1 = "if" . "(" expression ")" codeblock elseblock
	statement/L1 = "if" . "(" expression ")" codeblock
[XX]
	statement/L1 = "while" . "(" expression ")" codeblock
[XX]
	statement/L1 = "with" . "(" expression ")" codeblock
	statement/L1 = "with" . "(" expression ")" ";"
[XX]
	expression/L1 = "new" . typespec ":" expression
[XX]
	expression/L1 = "cast" . typespec ":" expression
[XX]
	expression/L2 = "null" .
[XX]
	generic_instance_deflist = generic_instance_defelem "," . generic_instance_deflist
[XX]
	typegen/L1 = typegen "[" generic_instance "]" .
[XX]
	lamda_expression = "lambda" "(" . lambda_paramlist ")" codeblock
[XX]
	variabledefinition = typespec IDENT "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = "{" . "}"
[XX]
	functiondefinition = linkage "function" IDENT typespec . callablebody
[XX]
	functiondefinition = linkage "procedure" IDENT callablebody .
[XX]
	callablebody = "(" . impl_paramlist ")" funcattribute "{" statementlist "}"
[XX]
	typehdr/L1 = "any" "const" "class" "^" .
[XX]
	typehdr/L1 = "any" "const" "struct" "^" .
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}"
[XX]
	inclass_definitionlist = inclass_definition . inclass_definitionlist
[XX]
	inclass_definition = typedefinition . ";"
[XX]
	inclass_definition = structdefinition .
[XX]
	inclass_definition = interfacedefinition .
[XX]
	inclass_definition = classdefinition .
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody
	constructordefinition = linkage . "constructor" callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody
	operatordefinition = linkage . "operator" operatordecl callablebody
[XX]
	inclass_definition = functiondefinition .
[XX]
	inclass_definition = constructordefinition .
[XX]
	inclass_definition = operatordefinition .
[XX]
	inclass_definition = variabledefinition . ";"
[XX]
	constructordefinition = "destructor" . codeblock
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	inheritlist = typegen . "," inheritlist
	inheritlist = typegen .
[XX]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}"
[XX]
	instruct_definitionlist = instruct_definition . instruct_definitionlist
[XX]
	instruct_definition = typedefinition . ";"
[XX]
	instruct_definition = structdefinition .
[XX]
	instruct_definition = variabledefinition . ";"
[XX]
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}"
[XX]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")" "nothrow"
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")"
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")" "nothrow"
[XX]
	functiondefinition = "generic" linkage "function" IDENT . "[" generic_header "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT . "[" generic_header "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	structdefinition = "generic" "struct" IDENT "[" . generic_header "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}"
[XX]
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist
[XX]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" funcattribute ";"
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}"
[XX]
	namespace_definitionlist = namespace_definition . namespace_definitionlist
[XX]
	namespace_definition = typedefinition . ";"
[XX]
	namespace_definition = structdefinition .
[XX]
	namespace_definition = interfacedefinition .
[XX]
	namespace_definition = namespacedefinition .
[XX]
	namespace_definition = classdefinition .
[XX]
	namespace_definition = functiondefinition .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";"
[XX]
	statement/L1 = typedefinition ";" .
[XX]
	codeblock/L1 = "{" statementlist "}" .
[XX]
	statement/L1 = tryblock catchblock .
[XX]
	catchblock = "catch" . IDENT codeblock
	catchblock = "catch" . IDENT "," IDENT codeblock
[XX]
	statementlist/L1 = statement statementlist .
[XX]
	iexpression/L14 = expression indirection . IDENT
[XX]
	expression/L13 = expression "(" . expressionlist ")"
	expression/L13 = expression "(" . ")"
[XX]
	statement/L1 = expression ";" .
[XX]
	expression/L7 = expression "^" . expression
[XX]
	expression/L13 = expression "[" . expressionlist "]"
[XX]
	expression/L7 = expression "&" . expression
[XX]
	indirection/L14 = "->" . indirection
	indirection/L14 = "->" .
[XX]
	expression/L3 = expression "=" . expression
[XX]
	expression/L9 = expression "+" . expression
[XX]
	expression/L9 = expression "-" . expression
[XX]
	expression/L10 = expression "*" . expression
[XX]
	expression/L10 = expression "/" . expression
[XX]
	expression/L10 = expression "%" . expression
[XX]
	expression/L5 = expression "&&" . expression
[XX]
	expression/L4 = expression "||" . expression
[XX]
	expression/L6 = expression "|" . expression
[XX]
	expression/L11 = expression "<<" . expression
[XX]
	expression/L11 = expression ">>" . expression
[XX]
	expression/L8 = expression "==" . expression
[XX]
	expression/L8 = expression "!=" . expression
[XX]
	expression/L8 = expression ">=" . expression
[XX]
	expression/L8 = expression "<=" . expression
[XX]
	expression/L8 = expression ">" . expression
[XX]
	expression/L8 = expression "<" . expression
[XX]
	expression/L3 = expression "+=" . expression
[XX]
	expression/L3 = expression "-=" . expression
[XX]
	expression/L3 = expression "*=" . expression
[XX]
	expression/L3 = expression "/=" . expression
[XX]
	expression/L3 = expression "^=" . expression
[XX]
	expression/L3 = expression "%=" . expression
[XX]
	expression/L3 = expression "&&=" . expression
[XX]
	expression/L3 = expression "||=" . expression
[XX]
	expression/L3 = expression "&=" . expression
[XX]
	expression/L3 = expression "|=" . expression
[XX]
	expression/L3 = expression "<<=" . expression
[XX]
	expression/L3 = expression ">>=" . expression
[XX]
	expression/L12 = expression "." . IDENT
[XX]
	expression/L2 = "(" expression . ")"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "&" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	expressionlist/L0 = expression . "," expressionlist
	expressionlist/L0 = expression .
[XX]
	expression/L1 = "{" expressionlist . "}"
[XX]
	expression/L1 = "{" "}" .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "+" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L12 = "*" expression .
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "~" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "!" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	tryblock = "try" codeblock .
[XX]
	statement/L1 = "var" variabledefinition . ";"
[XX]
	statement/L1 = "return" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "return" ";" .
[XX]
	statement/L1 = "throw" expression . "," expression ";"
	statement/L1 = "throw" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "delete" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "if" "(" . expression ")" codeblock elseblock
	statement/L1 = "if" "(" . expression ")" codeblock
[XX]
	statement/L1 = "while" "(" . expression ")" codeblock
[XX]
	statement/L1 = "with" "(" . expression ")" codeblock
	statement/L1 = "with" "(" . expression ")" ";"
[XX]
	expression/L1 = "new" typespec . ":" expression
[XX]
	expression/L1 = "cast" typespec . ":" expression
[XX]
	generic_instance_deflist = generic_instance_defelem "," generic_instance_deflist .
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist . ")" codeblock
[XX]
	lambda_paramlist = lambda_parameters .
[XX]
	lambda_parameters = IDENT . "," lambda_parameters
	lambda_parameters = IDENT .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
	expressionlist/L0 = expression . "," expressionlist
	expressionlist/L0 = expression .
[XX]
	functiondefinition = linkage "function" IDENT typespec callablebody .
[XX]
	impl_paramdecl = typespec . IDENT
[XX]
	callablebody = "(" impl_paramlist . ")" funcattribute "{" statementlist "}"
[XX]
	impl_paramlist = impl_parameters .
[XX]
	impl_parameters = impl_paramdecl . "," impl_parameters
	impl_parameters = impl_paramdecl .
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" .
[XX]
	inclass_definitionlist = inclass_definition inclass_definitionlist .
[XX]
	inclass_definition = typedefinition ";" .
[XX]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody
	operatordefinition = linkage "operator" . operatordecl callablebody
[XX]
	constructordefinition = linkage "constructor" . callablebody
[XX]
	inclass_definition = variabledefinition ";" .
[XX]
	constructordefinition = "destructor" codeblock .
[XX]
	inheritlist = typegen "," . inheritlist
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}"
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" .
[XX]
	instruct_definitionlist = instruct_definition instruct_definitionlist .
[XX]
	instruct_definition = typedefinition ";" .
[XX]
	instruct_definition = variabledefinition ";" .
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")"
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")" "nothrow"
[XX]
	extern_parameters = extern_paramdecl . "," extern_parameters
	extern_parameters = extern_paramdecl .
[XX]
	extern_paramlist = extern_parameters .
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")"
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")" "nothrow"
[XX]
	extern_paramdecl = typespec . IDENT
	extern_paramdecl = typespec .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" . generic_header "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" . generic_header "]" callablebody
[XX]
	generic_header = generic_defaultlist .
[XX]
	generic_header = generic_identlist .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typegen
	generic_identlist = IDENT . "," generic_identlist
	generic_identlist = IDENT . "," generic_defaultlist
	generic_identlist = IDENT .
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header . "]" "{" instruct_definitionlist "}"
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" .
[XX]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist .
[XX]
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" funcattribute ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" funcattribute ";"
[XX]
	operatordecl = "(" . ")"
[XX]
	operatordecl = "[" . "]"
[XX]
	operatordecl = "&" .
[XX]
	operatordecl = "->" .
[XX]
	operatordecl = "=" .
[XX]
	operatordecl = "+" .
[XX]
	operatordecl = "-" .
[XX]
	operatordecl = "*" .
[XX]
	operatordecl = "/" .
[XX]
	operatordecl = "%" .
[XX]
	operatordecl = "&&" .
[XX]
	operatordecl = "||" .
[XX]
	operatordecl = "|" .
[XX]
	operatordecl = "<<" .
[XX]
	operatordecl = ">>" .
[XX]
	operatordecl = "~" .
[XX]
	operatordecl = "!" .
[XX]
	operatordecl = "==" .
[XX]
	operatordecl = "!=" .
[XX]
	operatordecl = ">=" .
[XX]
	operatordecl = "<=" .
[XX]
	operatordecl = ">" .
[XX]
	operatordecl = "<" .
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" .
[XX]
	namespace_definitionlist = namespace_definition namespace_definitionlist .
[XX]
	namespace_definition = typedefinition ";" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";"
[XX]
	catchblock = "catch" IDENT . codeblock
	catchblock = "catch" IDENT . "," IDENT codeblock
[XX]
	iexpression/L14 = expression indirection IDENT .
[XX]
	expression/L13 = expression "(" expressionlist . ")"
[XX]
	expression/L13 = expression "(" ")" .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression "^" expression .
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L13 = expression "[" expressionlist . "]"
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L7 = expression "&" expression .
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	indirection/L14 = "->" indirection .
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression "=" expression .
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression "+" expression .
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = expression "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression "*" expression .
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression "/" expression .
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L10 = expression "%" expression .
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L5 = expression "&&" expression .
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L4 = expression "||" expression .
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L6 = expression "|" expression .
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression "<<" expression .
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L11 = expression ">>" expression .
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression "==" expression .
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression "!=" expression .
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression ">=" expression .
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression "<=" expression .
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L8 = expression ">" expression .
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression "<" expression .
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression "+=" expression .
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression "-=" expression .
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression "*=" expression .
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression "/=" expression .
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression "^=" expression .
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression "%=" expression .
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression "&&=" expression .
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression "||=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression "|=" expression .
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression "<<=" expression .
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L3 = expression ">>=" expression .
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L12 = expression "." IDENT .
[XX]
	expression/L2 = "(" expression ")" .
[XX]
	expressionlist/L0 = expression "," . expressionlist
[XX]
	expression/L1 = "{" expressionlist "}" .
[XX]
	statement/L1 = "var" variabledefinition ";" .
[XX]
	statement/L1 = "return" expression ";" .
[XX]
	statement/L1 = "throw" expression ";" .
[XX]
	statement/L1 = "throw" expression "," . expression ";"
[XX]
	statement/L1 = "delete" expression ";" .
[XX]
	statement/L1 = "if" "(" expression . ")" codeblock elseblock
	statement/L1 = "if" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "while" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "with" "(" expression . ")" codeblock
	statement/L1 = "with" "(" expression . ")" ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L1 = "new" typespec ":" . expression
[XX]
	expression/L1 = "cast" typespec ":" . expression
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" . codeblock
[XX]
	lambda_parameters = IDENT "," . lambda_parameters
[XX]
	impl_paramdecl = typespec IDENT .
[XX]
	callablebody = "(" impl_paramlist ")" . funcattribute "{" statementlist "}"
[XX]
	impl_parameters = impl_paramdecl "," . impl_parameters
[XX]
	operatordefinition = linkage "operator" operatordecl . typespec callablebody
	operatordefinition = linkage "operator" operatordecl . callablebody
[XX]
	constructordefinition = linkage "constructor" callablebody .
[XX]
	inheritlist = typegen "," inheritlist .
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}"
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")"
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")" "nothrow"
[XX]
	extern_parameters = extern_paramdecl "," . extern_parameters
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" .
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" . "nothrow"
[XX]
	extern_paramdecl = typespec IDENT .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header . "]" typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header . "]" callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . ":" inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_identlist = IDENT "," . generic_identlist
	generic_identlist = IDENT "," . generic_defaultlist
[XX]
	generic_defaultlist = IDENT "=" . typegen "," generic_defaultlist
	generic_defaultlist = IDENT "=" . typegen
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" . "{" instruct_definitionlist "}"
[XX]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" funcattribute ";"
[XX]
	operatordecl = "(" ")" .
[XX]
	operatordecl = "[" "]" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";"
[XX]
	catchblock = "catch" IDENT codeblock .
[XX]
	catchblock = "catch" IDENT "," . IDENT codeblock
[XX]
	expression/L13 = expression "(" expressionlist ")" .
[XX]
	expression/L13 = expression "[" expressionlist "]" .
[XX]
	expressionlist/L0 = expression "," expressionlist .
[XX]
	statement/L1 = "throw" expression "," expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	statement/L1 = "if" "(" expression ")" . codeblock elseblock
	statement/L1 = "if" "(" expression ")" . codeblock
[XX]
	statement/L1 = "while" "(" expression ")" . codeblock
[XX]
	statement/L1 = "with" "(" expression ")" . codeblock
	statement/L1 = "with" "(" expression ")" . ";"
[XX]
	expression/L1 = "new" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	expression/L1 = "cast" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" codeblock .
[XX]
	lambda_parameters = IDENT "," lambda_parameters .
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute . "{" statementlist "}"
[XX]
	funcattribute = "const" . funcattribute
[XX]
	funcattribute = "nothrow" . funcattribute
[XX]
	impl_parameters = impl_paramdecl "," impl_parameters .
[XX]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody
[XX]
	operatordefinition = linkage "operator" operatordecl callablebody .
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" .
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" .
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" . "nothrow"
[XX]
	extern_parameters = extern_paramdecl "," extern_parameters .
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow" .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" . typespec callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" . callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" . inclass_definitionlist "}"
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" . inheritlist "{" inclass_definitionlist "}"
[XX]
	generic_identlist = IDENT "," generic_defaultlist .
[XX]
	generic_identlist = IDENT "," generic_identlist .
[XX]
	typegen/L1 = typegen . "[" generic_instance "]"
	typegen/L1 = typegen . "^"
	typegen/L1 = typegen . "const" "^"
	generic_defaultlist = IDENT "=" typegen . "," generic_defaultlist
	generic_defaultlist = IDENT "=" typegen .
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" . instruct_definitionlist "}"
[XX]
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" funcattribute ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" .
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";"
[XX]
	catchblock = "catch" IDENT "," IDENT . codeblock
[XX]
	statement/L1 = "throw" expression "," expression ";" .
[XX]
	statement/L1 = "if" "(" expression ")" codeblock . elseblock
	statement/L1 = "if" "(" expression ")" codeblock .
[XX]
	statement/L1 = "while" "(" expression ")" codeblock .
[XX]
	statement/L1 = "with" "(" expression ")" codeblock .
[XX]
	statement/L1 = "with" "(" expression ")" ";" .
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" . statementlist "}"
[XX]
	funcattribute = "const" funcattribute .
[XX]
	funcattribute = "nothrow" funcattribute .
[XX]
	operatordefinition = linkage "operator" operatordecl typespec callablebody .
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow" .
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec . callablebody
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist . "}"
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist . "{" inclass_definitionlist "}"
[XX]
	generic_defaultlist = IDENT "=" typegen "," . generic_defaultlist
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist . "}"
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . funcattribute ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" .
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";"
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" .
[XX]
	catchblock = "catch" IDENT "," IDENT codeblock .
[XX]
	statement/L1 = "if" "(" expression ")" codeblock elseblock .
[XX]
	elseblock/L1 = "elseif" . "(" expression ")" codeblock elseblock
	elseblock/L1 = "elseif" . "(" expression ")" codeblock
[XX]
	elseblock/L1 = "else" . codeblock
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist . "}"
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}" .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" . inclass_definitionlist "}"
[XX]
	generic_defaultlist = IDENT "=" typegen "," generic_defaultlist .
[XX]
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typegen
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}" .
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . funcattribute ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . funcattribute ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute . ";"
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" .
[XX]
	elseblock/L1 = "elseif" "(" . expression ")" codeblock elseblock
	elseblock/L1 = "elseif" "(" . expression ")" codeblock
[XX]
	elseblock/L1 = "else" codeblock .
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist "}" .
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist . "}"
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute ";" .
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute . ";"
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute ";" .
[XX]
	elseblock/L1 = "elseif" "(" expression . ")" codeblock elseblock
	elseblock/L1 = "elseif" "(" expression . ")" codeblock
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression/L14 = expression . indirection IDENT
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}" .
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";" .
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";" .
[XX]
	elseblock/L1 = "elseif" "(" expression ")" . codeblock elseblock
	elseblock/L1 = "elseif" "(" expression ")" . codeblock
[XX]
	elseblock/L1 = "elseif" "(" expression ")" codeblock . elseblock
	elseblock/L1 = "elseif" "(" expression ")" codeblock .
[XX]
	elseblock/L1 = "elseif" "(" expression ")" codeblock elseblock .

-- LR(XX) used FOLLOW sets labeled:
[XX]: {$}
[XX]: {$ IDENT "function" "procedure" "const" "any" "class" "struct" "typedef" "generic" "interface" "namespace" "private" "public" "main"}
[XX]: {$ "main"}
[XX]: {'('}
[XX]: {')'}
[XX]: {IDENT}
[XX]: {';'}
[XX]: {']'}
[XX]: {'}'}
[XX]: {'{'}
[XX]: {"catch"}
[XX]: {':'}
[XX]: {$ IDENT "extern" "function" "procedure" "const" "any" "class" "struct" "typedef" "generic" "interface" "namespace" "private" "public" "main"}
[XX]: {"function" "procedure"}
[XX]: {IDENT "const" '^' '[' '&'}
[XX]: {IDENT "const" '^' '['}
[XX]: {',' ']'}
[XX]: {'(' ';' '^' '[' '&' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {$ BOOLEAN IDENT DQSTRING SQSTRING UINTEGER FLOAT "function" '(' "procedure" "class" "struct" '&' "typedef" '{' '}' "generic" "private" "public" '+' '-' '*' '~' '!' "lambda" "try" "var" "return" "throw" "delete" "if" "while" "with" "new" "cast" "null"}
[XX]: {'(' "const" '^' '[' '&'}
[XX]: {"function" "procedure" "operator" "constructor"}
[XX]: {$ IDENT "function" "procedure" "operator" "const" "any" "class" "struct" "typedef" '}' "generic" "interface" "private" "public" "constructor" "destructor"}
[XX]: {$ IDENT "function" "procedure" "operator" "const" "any" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public" "constructor" "destructor" "main"}
[XX]: {',' "const" '^' '[' '{'}
[XX]: {$ IDENT "const" "any" "struct" "typedef" '}' "generic"}
[XX]: {$ IDENT "function" "procedure" "const" "any" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public" "main"}
[XX]: {$ "function" "procedure" "operator" '}'}
[XX]: {$ "function" "procedure" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public"}
[XX]: {'(' ';' ',' '^' '[' '&' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {'(' ';' ',' '^' '[' '&' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {"const" '^' '[' '&' ':'}
[XX]: {',' "const" '^' '[' ']'}
[XX]: {')' ','}
[XX]: {IDENT ')' ','}
[XX]: {IDENT ')' ',' "const" '^' '[' '&'}
[XX]: {IDENT '(' "const" "any"}
[XX]: {')' "..."}
[XX]: {')' "..." ','}
[XX]: {IDENT ')' "..." ','}
[XX]: {IDENT ')' "..." ',' "const" '^' '[' '&'}
[XX]: {'(' ')' '^' '[' '&' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {'(' ')' ';' ',' '^' '[' ']' '&' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {$ BOOLEAN IDENT DQSTRING SQSTRING UINTEGER FLOAT "function" '(' "procedure" "class" "struct" '&' "typedef" '{' '}' "generic" "private" "public" '+' '-' '*' '~' '!' "lambda" "elseif" "else" "try" "var" "return" "throw" "delete" "if" "while" "with" "new" "cast" "null"}
[XX]: {'(' ')' ',' '^' '[' ']' '&' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" "==" "!=" ">=" "<=" '>' '<' "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {$ BOOLEAN IDENT DQSTRING SQSTRING UINTEGER FLOAT "function" '(' "procedure" "operator" "const" "any" "class" "struct" '&' "typedef" '{' '}' "generic" "interface" "namespace" "private" "public" "constructor" "destructor" '+' '-' '*' '~' '!' "lambda" "main" "try" "var" "return" "throw" "delete" "if" "while" "with" "new" "cast" "null"}
[XX]: {$ BOOLEAN IDENT DQSTRING SQSTRING UINTEGER FLOAT "function" '(' "procedure" "const" "any" "class" "struct" '&' "typedef" '{' '}' "generic" "interface" "namespace" "private" "public" '+' '-' '*' '~' '!' "lambda" "main" "try" "var" "return" "throw" "delete" "if" "while" "with" "new" "cast" "null"}
[XX]: {')' ']' '}'}
[XX]: {IDENT '(' ')' "..." ',' "const" '^' '[' ']' '&' '{' ':'}
[XX]: {$ BOOLEAN IDENT DQSTRING SQSTRING UINTEGER FLOAT "function" '(' ')' ';' "procedure" ',' "operator" "const" "any" "class" '^' "struct" '[' ']' '&' "typedef" '{' '}' "generic" "interface" "private" "public" "constructor" "destructor" "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '~' '!' "==" "!=" ">=" "<=" '>' '<' "lambda" "elseif" "else" "catch" "try" "var" "return" "throw" "delete" "if" "while" "with" "new" "cast" "null" "+=" "-=" "*=" "/=" "^=" "%=" "&&=" "||=" "&=" "|=" "<<=" ">>=" '.'}
[XX]: {IDENT '(' ')' "..." ',' "const" '^' '[' '&' ':'}
[XX]: {IDENT '(' ')' "..." ',' ':'}
[XX]: {';' '{'}

-- LALR(XX) states (merged LR(XX) elements assigned to LR(XX) states):
[XX]
	program = . extern_definitionlist free_definitionlist main_procedure, FOLLOW [XX] -> GOTO XX
	extern_definitionlist = . extern_definition extern_definitionlist, FOLLOW [XX] -> GOTO XX
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definitionlist = ., FOLLOW [XX] -> REDUCE extern_definitionlist #0
[XX]
	program = extern_definitionlist . free_definitionlist main_procedure, FOLLOW [XX] -> GOTO XX
	free_definitionlist = . free_definition free_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	free_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	free_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . namespacedefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	free_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT "namespace" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	free_definitionlist = ., FOLLOW [XX] -> REDUCE free_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	extern_definitionlist = extern_definition . extern_definitionlist, FOLLOW [XX] -> GOTO XX
	extern_definitionlist = . extern_definition extern_definitionlist, FOLLOW [XX] -> GOTO XX
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "extern" GOTO XX
	extern_definitionlist = ., FOLLOW [XX] -> REDUCE extern_definitionlist #0
[XX]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
[XX]
	program = extern_definitionlist free_definitionlist . main_procedure, FOLLOW [XX] -> GOTO XX
	main_procedure = . "main" codeblock, FOLLOW [XX] -> SHIFT "main" GOTO XX
	main_procedure = ., FOLLOW [XX] -> REDUCE main_procedure #0
[XX]
	free_definitionlist = free_definition . free_definitionlist, FOLLOW [XX] -> GOTO XX
	free_definitionlist = . free_definition free_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	free_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	free_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . namespacedefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	free_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	free_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT "namespace" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	free_definitionlist = ., FOLLOW [XX] -> REDUCE free_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	typehdr/L1 = typename . (XX), FOLLOW [XX] -> REDUCE typehdr #1 CALL typehdr {const=false}
[XX]
	typegen/L1 = typehdr ., FOLLOW [XX] -> REDUCE typegen #1
[XX]
	typegen/L1 = typegen . "const" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typegen/L1 = typegen . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
	typegen/L1 = typegen . "[" generic_instance "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	typespec/L1 = typegen . "&", FOLLOW [XX] -> SHIFT '&' GOTO XX
	typespec/L1 = typegen . (XX), FOLLOW [XX] -> REDUCE typespec #1 CALL typespec
[XX]
	variabledefinition = typespec . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	variabledefinition = typespec . IDENT "=" expression, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	free_definition = typedefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	free_definition = structdefinition . (XX), FOLLOW [XX] -> REDUCE free_definition #1 CALL definition 1
[XX]
	free_definition = interfacedefinition . (XX), FOLLOW [XX] -> REDUCE free_definition #1 CALL definition 1
[XX]
	free_definition = namespacedefinition ., FOLLOW [XX] -> REDUCE free_definition #1
[XX]
	free_definition = classdefinition . (XX), FOLLOW [XX] -> REDUCE free_definition #1 CALL definition 1
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody, FOLLOW [XX] -> SHIFT "function" GOTO XX
	functiondefinition = linkage . "procedure" IDENT callablebody, FOLLOW [XX] -> SHIFT "procedure" GOTO XX
[XX]
	free_definition = functiondefinition . (XX), FOLLOW [XX] -> REDUCE free_definition #1 CALL definition 1
[XX]
	free_definition = variabledefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	typename/L1 = IDENT . "::" typename, FOLLOW [XX] -> SHIFT "::" GOTO XX
	typename/L1 = IDENT ., FOLLOW [XX] -> REDUCE typename #1
[XX]
	typehdr/L1 = "const" . typename, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	typehdr/L1 = "any" . "const" "class" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = "any" . "const" "struct" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = "any" . "class" "^", FOLLOW [XX] -> SHIFT "class" GOTO XX
	typehdr/L1 = "any" . "struct" "^", FOLLOW [XX] -> SHIFT "struct" GOTO XX
[XX]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" . typegen IDENT, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "function" GOTO XX
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "function" GOTO XX
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	functiondefinition = "generic" . linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = "generic" . linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> GOTO XX
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = "generic" . "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	linkage = "private" . (XX), FOLLOW [XX] -> REDUCE linkage #1 CALL linkage {private=true,linkage="internal",explicit=true}
[XX]
	linkage = "public" . (XX), FOLLOW [XX] -> REDUCE linkage #1 CALL linkage {private=false,linkage="external",explicit=true}
[XX]
	extern_definitionlist = extern_definition extern_definitionlist ., FOLLOW [XX] -> REDUCE extern_definitionlist #2
[XX]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "function" GOTO XX
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "function" GOTO XX
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
[XX]
	program = extern_definitionlist free_definitionlist main_procedure . (XX) -> ACCEPT
	program = extern_definitionlist free_definitionlist main_procedure . (XX), FOLLOW [XX] -> REDUCE program #3 CALL program
[XX]
	main_procedure = "main" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	free_definitionlist = free_definition free_definitionlist ., FOLLOW [XX] -> REDUCE free_definitionlist #2
[XX]
	typegen/L1 = typegen "const" . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
[XX]
	typegen/L1 = typegen "^" . (XX), FOLLOW [XX] -> REDUCE typegen #2 CALL typegen_pointer {const=false}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	generic_instance_defelem = . typegen, FOLLOW [XX] -> GOTO XX
	generic_instance_defelem = . lamda_expression, FOLLOW [XX] -> GOTO XX
	generic_instance_deflist = . generic_instance_defelem, FOLLOW [XX] -> GOTO XX
	generic_instance_deflist = . generic_instance_defelem "," generic_instance_deflist, FOLLOW [XX] -> GOTO XX
	generic_instance = . generic_instance_deflist, FOLLOW [XX] -> GOTO XX
	typegen/L1 = typegen "[" . generic_instance "]", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_instance_defelem = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
[XX]
	typespec/L1 = typegen "&" . (XX), FOLLOW [XX] -> REDUCE typespec #2 CALL typespec_ref
[XX]
	variabledefinition = typespec IDENT . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	variabledefinition = typespec IDENT . (step:102), FOLLOW [XX] -> REDUCE variabledefinition #2 CALL vardef
[XX]
	free_definition = typedefinition ";" . (XX), FOLLOW [XX] -> REDUCE free_definition #2 CALL definition 1
[XX]
	functiondefinition = linkage "function" . IDENT typespec callablebody, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	functiondefinition = linkage "procedure" . IDENT callablebody, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	free_definition = variabledefinition ";" . (XX), FOLLOW [XX] -> REDUCE free_definition #2 CALL definition 1
[XX]
	typename/L1 = IDENT "::" . typename, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	typehdr/L1 = "const" typename . (XX), FOLLOW [XX] -> REDUCE typehdr #2 CALL typehdr {const=true}
[XX]
	typehdr/L1 = "any" "const" . "class" "^", FOLLOW [XX] -> SHIFT "class" GOTO XX
	typehdr/L1 = "any" "const" . "struct" "^", FOLLOW [XX] -> SHIFT "struct" GOTO XX
[XX]
	typehdr/L1 = "any" "class" . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
[XX]
	typehdr/L1 = "any" "struct" . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
[XX]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT ':' GOTO XX
[XX]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	typedefinition = "typedef" typegen . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typegen/L1 = typegen . "const" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typegen/L1 = typegen . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
	typegen/L1 = typegen . "[" generic_instance "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
[XX]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	functiondefinition = "generic" linkage . "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "function" GOTO XX
	functiondefinition = "generic" linkage . "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "procedure" GOTO XX
[XX]
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	classdefinition = "generic" "class" . IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	structdefinition = "generic" "struct" . IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	main_procedure = "main" codeblock . (XX), FOLLOW [XX] -> REDUCE main_procedure #2 CALL main_procdef
[XX]
	statement/L1 = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	statement/L1 = . structdefinition, FOLLOW [XX] -> GOTO XX
	statement/L1 = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	statement/L1 = . functiondefinition, FOLLOW [XX] -> GOTO XX
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = "{" . statementlist "}", FOLLOW [XX] -> GOTO XX
	statement/L1 = . tryblock catchblock, FOLLOW [XX] -> GOTO XX
	statementlist/L1 = . statement statementlist, FOLLOW [XX] -> GOTO XX
	statement/L1 = . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	tryblock = . "try" codeblock, FOLLOW [XX] -> SHIFT "try" GOTO XX
	statement/L1 = . "var" variabledefinition ";", FOLLOW [XX] -> SHIFT "var" GOTO XX
	statement/L1 = . "return" expression ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "return" ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "throw" expression "," expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "throw" expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "delete" expression ";", FOLLOW [XX] -> SHIFT "delete" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "while" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "while" GOTO XX
	statement/L1 = . "with" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "with" GOTO XX
	statement/L1 = . "with" "(" expression ")" ";", FOLLOW [XX] -> SHIFT "with" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
	statementlist/L1 = ., FOLLOW [XX] -> REDUCE statementlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	typegen/L1 = typegen "const" "^" . (XX), FOLLOW [XX] -> REDUCE typegen #3 CALL typegen_pointer {const=true}
[XX]
	typegen/L1 = typegen . "const" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typegen/L1 = typegen . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
	typegen/L1 = typegen . "[" generic_instance "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	generic_instance_defelem = typegen ., FOLLOW [XX] -> REDUCE generic_instance_defelem #1
[XX]
	generic_instance_defelem = lamda_expression ., FOLLOW [XX] -> REDUCE generic_instance_defelem #1
[XX]
	generic_instance_deflist = generic_instance_defelem . "," generic_instance_deflist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	generic_instance_deflist = generic_instance_defelem . (XX), FOLLOW [XX] -> REDUCE generic_instance_deflist #1 CALL generic_instance_deflist
[XX]
	generic_instance = generic_instance_deflist . (XX), FOLLOW [XX] -> REDUCE generic_instance #1 CALL generic_instance
[XX]
	typegen/L1 = typegen "[" generic_instance . "]", FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	generic_instance_defelem = UINTEGER . (XX), FOLLOW [XX] -> REDUCE generic_instance_defelem #1 CALL generic_instance_dimension
[XX]
	lamda_expression = "lambda" . "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	variabledefinition = typespec IDENT "=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	functiondefinition = linkage "function" IDENT . typespec callablebody, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	functiondefinition = linkage "procedure" IDENT . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	typename/L1 = IDENT "::" typename ., FOLLOW [XX] -> REDUCE typename #3
[XX]
	typehdr/L1 = "any" "const" "class" . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
[XX]
	typehdr/L1 = "any" "const" "struct" . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
[XX]
	typehdr/L1 = "any" "class" "^" . (XX), FOLLOW [XX] -> REDUCE typehdr #3 CALL typehdr_any "any class^"
[XX]
	typehdr/L1 = "any" "struct" "^" . (XX), FOLLOW [XX] -> REDUCE typehdr #3 CALL typehdr_any "any struct^"
[XX]
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	inclass_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	inclass_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	inclass_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . constructordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . operatordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	constructordefinition = . "destructor" codeblock, FOLLOW [XX] -> SHIFT "destructor" GOTO XX
	inclass_definitionlist = ., FOLLOW [XX] -> REDUCE inclass_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen "," inheritlist, FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen, FOLLOW [XX] -> GOTO XX
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}", FOLLOW [XX] -> GOTO XX
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	instruct_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	instruct_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	instruct_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	instruct_definitionlist = ., FOLLOW [XX] -> REDUCE instruct_definitionlist #0
[XX]
	typedefinition = "typedef" typegen IDENT . (XX), FOLLOW [XX] -> REDUCE typedefinition #3 CALL typedef
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")", FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	functiondefinition = "generic" linkage "function" . IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	functiondefinition = "generic" linkage "procedure" . IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '[' GOTO XX
	classdefinition = "generic" "class" IDENT . "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '[' GOTO XX
[XX]
	structdefinition = "generic" "struct" IDENT . "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT '[' GOTO XX
[XX]
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}", FOLLOW [XX] -> GOTO XX
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist, FOLLOW [XX] -> GOTO XX
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "function" GOTO XX
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "operator" GOTO XX
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "operator" GOTO XX
	ininterf_definitionlist = ., FOLLOW [XX] -> REDUCE ininterf_definitionlist #0
[XX]
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}", FOLLOW [XX] -> GOTO XX
	namespace_definitionlist = . namespace_definition namespace_definitionlist, FOLLOW [XX] -> GOTO XX
	namespace_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	namespace_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . namespacedefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	namespace_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT "namespace" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	namespace_definitionlist = ., FOLLOW [XX] -> REDUCE namespace_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";", FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	statement/L1 = typedefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	statement/L1 = structdefinition . (XX), FOLLOW [XX] -> REDUCE statement #1 CALL definition 1
[XX]
	statement/L1 = classdefinition . (XX), FOLLOW [XX] -> REDUCE statement #1 CALL definition 1
[XX]
	statement/L1 = functiondefinition . (XX), FOLLOW [XX] -> REDUCE statement #1 CALL definition 1
[XX]
	expression/L2 = lamda_expression ., FOLLOW [XX] -> REDUCE expression #1
[XX]
	statement/L1 = codeblock ., FOLLOW [XX] -> REDUCE statement #1
[XX]
	codeblock/L1 = "{" statementlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	statement/L1 = tryblock . catchblock, FOLLOW [XX] -> GOTO XX
	catchblock = . "catch" IDENT codeblock, FOLLOW [XX] -> SHIFT "catch" GOTO XX
	catchblock = . "catch" IDENT "," IDENT codeblock, FOLLOW [XX] -> SHIFT "catch" GOTO XX
[XX]
	statement/L1 = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	statement/L1 = . structdefinition, FOLLOW [XX] -> GOTO XX
	statement/L1 = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	statement/L1 = . functiondefinition, FOLLOW [XX] -> GOTO XX
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = . codeblock, FOLLOW [XX] -> GOTO XX
	statementlist/L1 = statement . statementlist, FOLLOW [XX] -> GOTO XX
	statement/L1 = . tryblock catchblock, FOLLOW [XX] -> GOTO XX
	statementlist/L1 = . statement statementlist, FOLLOW [XX] -> GOTO XX
	statement/L1 = . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	tryblock = . "try" codeblock, FOLLOW [XX] -> SHIFT "try" GOTO XX
	statement/L1 = . "var" variabledefinition ";", FOLLOW [XX] -> SHIFT "var" GOTO XX
	statement/L1 = . "return" expression ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "return" ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "throw" expression "," expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "throw" expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "delete" expression ";", FOLLOW [XX] -> SHIFT "delete" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "while" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "while" GOTO XX
	statement/L1 = . "with" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "with" GOTO XX
	statement/L1 = . "with" "(" expression ")" ";", FOLLOW [XX] -> SHIFT "with" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
	statementlist/L1 = ., FOLLOW [XX] -> REDUCE statementlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	expression/L12 = iexpression ., FOLLOW [XX] -> REDUCE expression #1
[XX]
	expression/L2 = BOOLEAN . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL constant "constexpr bool"
[XX]
	expression/L2 = IDENT . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL variable
[XX]
	expression/L2 = DQSTRING . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL string_constant
[XX]
	expression/L2 = SQSTRING . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL char_constant
[XX]
	expression/L2 = UINTEGER . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL constant "constexpr uint"
[XX]
	expression/L2 = FLOAT . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL constant "constexpr float"
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L2 = "(" . expression ")", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = "&" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	statement/L1 = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	statement/L1 = . structdefinition, FOLLOW [XX] -> GOTO XX
	statement/L1 = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	statement/L1 = . functiondefinition, FOLLOW [XX] -> GOTO XX
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = "{" . statementlist "}", FOLLOW [XX] -> GOTO XX
	statement/L1 = . tryblock catchblock, FOLLOW [XX] -> GOTO XX
	statementlist/L1 = . statement statementlist, FOLLOW [XX] -> GOTO XX
	statement/L1 = . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression "," expressionlist, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L1 = "{" . expressionlist "}", FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = "{" . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	tryblock = . "try" codeblock, FOLLOW [XX] -> SHIFT "try" GOTO XX
	statement/L1 = . "var" variabledefinition ";", FOLLOW [XX] -> SHIFT "var" GOTO XX
	statement/L1 = . "return" expression ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "return" ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "throw" expression "," expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "throw" expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "delete" expression ";", FOLLOW [XX] -> SHIFT "delete" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "while" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "while" GOTO XX
	statement/L1 = . "with" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "with" GOTO XX
	statement/L1 = . "with" "(" expression ")" ";", FOLLOW [XX] -> SHIFT "with" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
	statementlist/L1 = ., FOLLOW [XX] -> REDUCE statementlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = "+" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = "-" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = "*" . expression, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = "~" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = "!" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	tryblock = "try" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "var" . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "return" . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "return" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "throw" . expression "," expression ";", FOLLOW [XX] -> GOTO XX
	statement/L1 = "throw" . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "delete" . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	statement/L1 = "if" . "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "if" . "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	statement/L1 = "while" . "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	statement/L1 = "with" . "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "with" . "(" expression ")" ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	expression/L1 = "new" . typespec ":" expression, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	expression/L1 = "cast" . typespec ":" expression, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	expression/L2 = "null" . (XX), FOLLOW [XX] -> REDUCE expression #1 CALL null
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	generic_instance_defelem = . typegen, FOLLOW [XX] -> GOTO XX
	generic_instance_defelem = . lamda_expression, FOLLOW [XX] -> GOTO XX
	generic_instance_deflist = . generic_instance_defelem, FOLLOW [XX] -> GOTO XX
	generic_instance_deflist = . generic_instance_defelem "," generic_instance_deflist, FOLLOW [XX] -> GOTO XX
	generic_instance_deflist = generic_instance_defelem "," . generic_instance_deflist, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_instance_defelem = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
[XX]
	typegen/L1 = typegen "[" generic_instance "]" . (XX), FOLLOW [XX] -> REDUCE typegen #4 CALL typegen_generic
[XX]
	lamda_expression = "lambda" "(" . lambda_paramlist ")" codeblock, FOLLOW [XX] -> GOTO XX
	lambda_paramlist = . lambda_parameters, FOLLOW [XX] -> GOTO XX
	lambda_parameters = . IDENT "," lambda_parameters, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	lambda_parameters = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	lambda_paramlist = . (XX), FOLLOW [XX] -> REDUCE lambda_paramlist #0 CALL lambda_paramdeflist
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	variabledefinition = typespec IDENT "=" expression . (step:102), FOLLOW [XX] -> REDUCE variabledefinition #4 CALL vardef
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression "," expressionlist, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L1 = "{" . expressionlist "}", FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = "{" . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	functiondefinition = linkage "function" IDENT typespec . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	functiondefinition = linkage "procedure" IDENT callablebody . (XX), FOLLOW [XX] -> REDUCE functiondefinition #4 CALL procdef
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	impl_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	callablebody = "(" . impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> GOTO XX
	impl_paramlist = . impl_parameters, FOLLOW [XX] -> GOTO XX
	impl_parameters = . impl_paramdecl "," impl_parameters, FOLLOW [XX] -> GOTO XX
	impl_parameters = . impl_paramdecl, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	impl_paramlist = . (XX), FOLLOW [XX] -> REDUCE impl_paramlist #0 CALL paramdeflist
[XX]
	typehdr/L1 = "any" "const" "class" "^" . (XX), FOLLOW [XX] -> REDUCE typehdr #4 CALL typehdr_any "any const class^"
[XX]
	typehdr/L1 = "any" "const" "struct" "^" . (XX), FOLLOW [XX] -> REDUCE typehdr #4 CALL typehdr_any "any const struct^"
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	inclass_definitionlist = inclass_definition . inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	inclass_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	inclass_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	inclass_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . constructordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . operatordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	constructordefinition = . "destructor" codeblock, FOLLOW [XX] -> SHIFT "destructor" GOTO XX
	inclass_definitionlist = ., FOLLOW [XX] -> REDUCE inclass_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	inclass_definition = typedefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	inclass_definition = structdefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition 1
[XX]
	inclass_definition = interfacedefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition 1
[XX]
	inclass_definition = classdefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition 1
[XX]
	functiondefinition = linkage . "function" IDENT typespec callablebody, FOLLOW [XX] -> SHIFT "function" GOTO XX
	functiondefinition = linkage . "procedure" IDENT callablebody, FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	operatordefinition = linkage . "operator" operatordecl typespec callablebody, FOLLOW [XX] -> SHIFT "operator" GOTO XX
	operatordefinition = linkage . "operator" operatordecl callablebody, FOLLOW [XX] -> SHIFT "operator" GOTO XX
	constructordefinition = linkage . "constructor" callablebody, FOLLOW [XX] -> SHIFT "constructor" GOTO XX
[XX]
	inclass_definition = functiondefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition_2pass 4
[XX]
	inclass_definition = constructordefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition_2pass 4
[XX]
	inclass_definition = operatordefinition . (XX), FOLLOW [XX] -> REDUCE inclass_definition #1 CALL definition_2pass 4
[XX]
	inclass_definition = variabledefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	constructordefinition = "destructor" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	inheritlist = typegen . "," inheritlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	typegen/L1 = typegen . "const" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typegen/L1 = typegen . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
	typegen/L1 = typegen . "[" generic_instance "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	inheritlist = typegen . (XX), FOLLOW [XX] -> REDUCE inheritlist #1 CALL inheritdef 1
[XX]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	instruct_definitionlist = instruct_definition . instruct_definitionlist, FOLLOW [XX] -> GOTO XX
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	instruct_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	instruct_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	instruct_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	instruct_definitionlist = ., FOLLOW [XX] -> REDUCE instruct_definitionlist #0
[XX]
	instruct_definition = typedefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	instruct_definition = structdefinition . (XX), FOLLOW [XX] -> REDUCE instruct_definition #1 CALL definition 1
[XX]
	instruct_definition = variabledefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	structdefinition = "generic" . "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
[XX]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")", FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")" "nothrow", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	functiondefinition = "generic" linkage "function" IDENT . "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT '[' GOTO XX
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT . "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT '[' GOTO XX
[XX]
	generic_header = . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_header = . generic_identlist, FOLLOW [XX] -> GOTO XX
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	classdefinition = "generic" "class" IDENT "[" . generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	generic_header = . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_header = . generic_identlist, FOLLOW [XX] -> GOTO XX
	structdefinition = "generic" "struct" IDENT "[" . generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist, FOLLOW [XX] -> GOTO XX
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist, FOLLOW [XX] -> GOTO XX
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "function" GOTO XX
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "procedure" GOTO XX
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "operator" GOTO XX
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT "operator" GOTO XX
	ininterf_definitionlist = ., FOLLOW [XX] -> REDUCE ininterf_definitionlist #0
[XX]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	operatordecl = . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	operatordecl = . "[" "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	operatordecl = . "&", FOLLOW [XX] -> SHIFT '&' GOTO XX
	operatordecl = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	operatordecl = . "=", FOLLOW [XX] -> SHIFT '=' GOTO XX
	operatordecl = . "+", FOLLOW [XX] -> SHIFT '+' GOTO XX
	operatordecl = . "-", FOLLOW [XX] -> SHIFT '-' GOTO XX
	operatordecl = . "*", FOLLOW [XX] -> SHIFT '*' GOTO XX
	operatordecl = . "/", FOLLOW [XX] -> SHIFT '/' GOTO XX
	operatordecl = . "%", FOLLOW [XX] -> SHIFT '%' GOTO XX
	operatordecl = . "&&", FOLLOW [XX] -> SHIFT "&&" GOTO XX
	operatordecl = . "||", FOLLOW [XX] -> SHIFT "||" GOTO XX
	operatordecl = . "|", FOLLOW [XX] -> SHIFT '|' GOTO XX
	operatordecl = . "<<", FOLLOW [XX] -> SHIFT "<<" GOTO XX
	operatordecl = . ">>", FOLLOW [XX] -> SHIFT ">>" GOTO XX
	operatordecl = . "~", FOLLOW [XX] -> SHIFT '~' GOTO XX
	operatordecl = . "!", FOLLOW [XX] -> SHIFT '!' GOTO XX
	operatordecl = . "==", FOLLOW [XX] -> SHIFT "==" GOTO XX
	operatordecl = . "!=", FOLLOW [XX] -> SHIFT "!=" GOTO XX
	operatordecl = . ">=", FOLLOW [XX] -> SHIFT ">=" GOTO XX
	operatordecl = . "<=", FOLLOW [XX] -> SHIFT "<=" GOTO XX
	operatordecl = . ">", FOLLOW [XX] -> SHIFT '>' GOTO XX
	operatordecl = . "<", FOLLOW [XX] -> SHIFT '<' GOTO XX
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	namespace_definitionlist = namespace_definition . namespace_definitionlist, FOLLOW [XX] -> GOTO XX
	namespace_definitionlist = . namespace_definition namespace_definitionlist, FOLLOW [XX] -> GOTO XX
	namespace_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	namespace_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . namespacedefinition, FOLLOW [XX] -> GOTO XX
	namespace_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	namespace_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [XX] -> SHIFT "namespace" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	namespace_definitionlist = ., FOLLOW [XX] -> REDUCE namespace_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	namespace_definition = typedefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	namespace_definition = structdefinition . (XX), FOLLOW [XX] -> REDUCE namespace_definition #1 CALL definition 1
[XX]
	namespace_definition = interfacedefinition . (XX), FOLLOW [XX] -> REDUCE namespace_definition #1 CALL definition 1
[XX]
	namespace_definition = namespacedefinition . (XX), FOLLOW [XX] -> REDUCE namespace_definition #1 CALL definition 1
[XX]
	namespace_definition = classdefinition . (XX), FOLLOW [XX] -> REDUCE namespace_definition #1 CALL definition 1
[XX]
	namespace_definition = functiondefinition . (XX), FOLLOW [XX] -> REDUCE namespace_definition #1 CALL definition 1
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";", FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	statement/L1 = typedefinition ";" . (XX), FOLLOW [XX] -> REDUCE statement #2 CALL definition 1
[XX]
	codeblock/L1 = "{" statementlist "}" . (scope:88), FOLLOW [XX] -> REDUCE codeblock #3 CALL codeblock
[XX]
	statement/L1 = tryblock catchblock . (scope:97), FOLLOW [XX] -> REDUCE statement #2 CALL trycatch
[XX]
	catchblock = "catch" . IDENT codeblock, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	catchblock = "catch" . IDENT "," IDENT codeblock, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	statementlist/L1 = statement statementlist . (step), FOLLOW [XX] -> REDUCE statementlist #2
[XX]
	iexpression/L14 = expression indirection . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression "," expressionlist, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression "(" . expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression "(" . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	statement/L1 = expression ";" . (XX), FOLLOW [XX] -> REDUCE statement #2 CALL free_expression
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = expression "^" . expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression "," expressionlist, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression "[" . expressionlist "]", FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = expression "&" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	indirection/L14 = "->" . indirection, FOLLOW [XX] -> GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = "->" . (XX), FOLLOW [XX] -> REDUCE indirection #1 CALL count
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = expression "+" . expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = expression "-" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = expression "*" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = expression "/" . expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = expression "%" . expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = expression "&&" . expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = expression "||" . expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = expression "|" . expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = expression "<<" . expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = expression ">>" . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression "==" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression "!=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression ">=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression "<=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression ">" . expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = expression "<" . expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "+=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "-=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "*=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "/=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "^=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "%=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "&&=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "||=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "&=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "|=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression "<<=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = expression ">>=" . expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L12 = expression "." . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L2 = "(" expression . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = "&" expression . (XX), FOLLOW [XX] -> REDUCE expression #2 CALL operator_address "&"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expressionlist/L0 = expression . "," expressionlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expressionlist/L0 = expression ., FOLLOW [XX] -> REDUCE expressionlist #1
[XX]
	expression/L1 = "{" expressionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	expression/L1 = "{" "}" . (step:103), FOLLOW [XX] -> REDUCE expression #2 CALL structure
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = "+" expression . (step:141), FOLLOW [XX] -> REDUCE expression #2 CALL unop "+"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = "-" expression . (step:140), FOLLOW [XX] -> REDUCE expression #2 CALL unop "-"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L12 = "*" expression . (step:150), FOLLOW [XX] -> REDUCE expression #2 CALL unop "->"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = "~" expression . (step:142), FOLLOW [XX] -> REDUCE expression #2 CALL unop "~"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = "!" expression . (step:143), FOLLOW [XX] -> REDUCE expression #2 CALL unop "!"
[XX]
	tryblock = "try" codeblock . (XX), FOLLOW [XX] -> REDUCE tryblock #2 CALL tryblock
[XX]
	statement/L1 = "var" variabledefinition . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "return" expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	statement/L1 = "return" ";" . (step:95), FOLLOW [XX] -> REDUCE statement #2 CALL return_void
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "throw" expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	statement/L1 = "throw" expression . "," expression ";", FOLLOW [XX] -> SHIFT ',' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "delete" expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "if" "(" . expression ")" codeblock elseblock, FOLLOW [XX] -> GOTO XX
	statement/L1 = "if" "(" . expression ")" codeblock, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "while" "(" . expression ")" codeblock, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "with" "(" . expression ")" codeblock, FOLLOW [XX] -> GOTO XX
	statement/L1 = "with" "(" . expression ")" ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L1 = "new" typespec . ":" expression, FOLLOW [XX] -> SHIFT ':' GOTO XX
[XX]
	expression/L1 = "cast" typespec . ":" expression, FOLLOW [XX] -> SHIFT ':' GOTO XX
[XX]
	generic_instance_deflist = generic_instance_defelem "," generic_instance_deflist . (XX), FOLLOW [XX] -> REDUCE generic_instance_deflist #3 CALL generic_instance_deflist
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist . ")" codeblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	lambda_paramlist = lambda_parameters . (XX), FOLLOW [XX] -> REDUCE lambda_paramlist #1 CALL lambda_paramdeflist
[XX]
	lambda_parameters = IDENT . "," lambda_parameters, FOLLOW [XX] -> SHIFT ',' GOTO XX
	lambda_parameters = IDENT ., FOLLOW [XX] -> REDUCE lambda_parameters #1
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expressionlist/L0 = expression . "," expressionlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expressionlist/L0 = expression ., FOLLOW [XX] -> REDUCE expressionlist #1
[XX]
	functiondefinition = linkage "function" IDENT typespec callablebody . (XX), FOLLOW [XX] -> REDUCE functiondefinition #5 CALL funcdef
[XX]
	impl_paramdecl = typespec . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	callablebody = "(" impl_paramlist . ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	impl_paramlist = impl_parameters . (XX), FOLLOW [XX] -> REDUCE impl_paramlist #1 CALL paramdeflist
[XX]
	impl_parameters = impl_paramdecl . "," impl_parameters, FOLLOW [XX] -> SHIFT ',' GOTO XX
	impl_parameters = impl_paramdecl ., FOLLOW [XX] -> REDUCE impl_parameters #1
[XX]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE classdefinition #5 CALL classdef
[XX]
	inclass_definitionlist = inclass_definition inclass_definitionlist ., FOLLOW [XX] -> REDUCE inclass_definitionlist #2
[XX]
	inclass_definition = typedefinition ";" . (XX), FOLLOW [XX] -> REDUCE inclass_definition #2 CALL definition 1
[XX]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = linkage "operator" . operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	operatordecl = . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	operatordecl = . "[" "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	operatordecl = . "&", FOLLOW [XX] -> SHIFT '&' GOTO XX
	operatordecl = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	operatordecl = . "=", FOLLOW [XX] -> SHIFT '=' GOTO XX
	operatordecl = . "+", FOLLOW [XX] -> SHIFT '+' GOTO XX
	operatordecl = . "-", FOLLOW [XX] -> SHIFT '-' GOTO XX
	operatordecl = . "*", FOLLOW [XX] -> SHIFT '*' GOTO XX
	operatordecl = . "/", FOLLOW [XX] -> SHIFT '/' GOTO XX
	operatordecl = . "%", FOLLOW [XX] -> SHIFT '%' GOTO XX
	operatordecl = . "&&", FOLLOW [XX] -> SHIFT "&&" GOTO XX
	operatordecl = . "||", FOLLOW [XX] -> SHIFT "||" GOTO XX
	operatordecl = . "|", FOLLOW [XX] -> SHIFT '|' GOTO XX
	operatordecl = . "<<", FOLLOW [XX] -> SHIFT "<<" GOTO XX
	operatordecl = . ">>", FOLLOW [XX] -> SHIFT ">>" GOTO XX
	operatordecl = . "~", FOLLOW [XX] -> SHIFT '~' GOTO XX
	operatordecl = . "!", FOLLOW [XX] -> SHIFT '!' GOTO XX
	operatordecl = . "==", FOLLOW [XX] -> SHIFT "==" GOTO XX
	operatordecl = . "!=", FOLLOW [XX] -> SHIFT "!=" GOTO XX
	operatordecl = . ">=", FOLLOW [XX] -> SHIFT ">=" GOTO XX
	operatordecl = . "<=", FOLLOW [XX] -> SHIFT "<=" GOTO XX
	operatordecl = . ">", FOLLOW [XX] -> SHIFT '>' GOTO XX
	operatordecl = . "<", FOLLOW [XX] -> SHIFT '<' GOTO XX
[XX]
	constructordefinition = linkage "constructor" . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	inclass_definition = variabledefinition ";" . (XX), FOLLOW [XX] -> REDUCE inclass_definition #2 CALL definition 2
[XX]
	constructordefinition = "destructor" codeblock . (XX), FOLLOW [XX] -> REDUCE constructordefinition #2 CALL destructordef {linkage="external"}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen "," inheritlist, FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen, FOLLOW [XX] -> GOTO XX
	inheritlist = typegen "," . inheritlist, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	inclass_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	inclass_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	inclass_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . constructordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . operatordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	constructordefinition = . "destructor" codeblock, FOLLOW [XX] -> SHIFT "destructor" GOTO XX
	inclass_definitionlist = ., FOLLOW [XX] -> REDUCE inclass_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE structdefinition #5 CALL structdef
[XX]
	instruct_definitionlist = instruct_definition instruct_definitionlist ., FOLLOW [XX] -> REDUCE instruct_definitionlist #2
[XX]
	instruct_definition = typedefinition ";" . (XX), FOLLOW [XX] -> REDUCE instruct_definition #2 CALL definition 1
[XX]
	instruct_definition = variabledefinition ";" . (XX), FOLLOW [XX] -> REDUCE instruct_definition #2 CALL definition 2
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")", FOLLOW [XX] -> GOTO XX
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")" "nothrow", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	extern_parameters = extern_paramdecl . "," extern_parameters, FOLLOW [XX] -> SHIFT ',' GOTO XX
	extern_parameters = extern_paramdecl . (XX), FOLLOW [XX] -> REDUCE extern_parameters #1 CALL extern_paramdef_collect
[XX]
	extern_paramlist = extern_parameters . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #1 CALL extern_paramdeflist
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")" "nothrow", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	extern_paramdecl = typespec . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	extern_paramdecl = typespec . (XX), FOLLOW [XX] -> REDUCE extern_paramdecl #1 CALL extern_paramdef
[XX]
	generic_header = . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_header = . generic_identlist, FOLLOW [XX] -> GOTO XX
	functiondefinition = "generic" linkage "function" IDENT "[" . generic_header "]" typespec callablebody, FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	generic_header = . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_header = . generic_identlist, FOLLOW [XX] -> GOTO XX
	functiondefinition = "generic" linkage "procedure" IDENT "[" . generic_header "]" callablebody, FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	generic_header = generic_defaultlist . (XX), FOLLOW [XX] -> REDUCE generic_header #1 CALL generic_header
[XX]
	generic_header = generic_identlist . (XX), FOLLOW [XX] -> REDUCE generic_header #1 CALL generic_header
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT ']' GOTO XX
	classdefinition = "generic" "class" IDENT "[" generic_header . "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	generic_identlist = IDENT . "," generic_identlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	generic_identlist = IDENT . "," generic_defaultlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT '=' GOTO XX
	generic_defaultlist = IDENT . "=" typegen, FOLLOW [XX] -> SHIFT '=' GOTO XX
	generic_identlist = IDENT . (XX), FOLLOW [XX] -> REDUCE generic_identlist #1 CALL generic_header_ident
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header . "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE interfacedefinition #5 CALL interfacedef
[XX]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist ., FOLLOW [XX] -> REDUCE ininterf_definitionlist #2
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	operatordecl = "(" . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	operatordecl = "[" . "]", FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	operatordecl = "&" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="&",symbol="bitand"}
[XX]
	operatordecl = "->" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="->",symbol="arrow"}
[XX]
	operatordecl = "=" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="=",symbol="assign"}
[XX]
	operatordecl = "+" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="+",symbol="plus"}
[XX]
	operatordecl = "-" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="-",symbol="minus"}
[XX]
	operatordecl = "*" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="*",symbol="mul"}
[XX]
	operatordecl = "/" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="/",symbol="div"}
[XX]
	operatordecl = "%" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="%",symbol="mod"}
[XX]
	operatordecl = "&&" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="&&",symbol="and"}
[XX]
	operatordecl = "||" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="||",symbol="or"}
[XX]
	operatordecl = "|" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="|",symbol="bitor"}
[XX]
	operatordecl = "<<" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="<<",symbol="lsh"}
[XX]
	operatordecl = ">>" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name=">>",symbol="rsh"}
[XX]
	operatordecl = "~" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="~",symbol="lneg"}
[XX]
	operatordecl = "!" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="!",symbol="not"}
[XX]
	operatordecl = "==" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="==",symbol="eq"}
[XX]
	operatordecl = "!=" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="!=",symbol="ne"}
[XX]
	operatordecl = ">=" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name=">=",symbol="ge"}
[XX]
	operatordecl = "<=" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="<=",symbol="le"}
[XX]
	operatordecl = ">" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name=">",symbol="gt"}
[XX]
	operatordecl = "<" . (XX), FOLLOW [XX] -> REDUCE operatordecl #1 CALL operatordecl {name="<",symbol="lt"}
[XX]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE namespacedefinition #5 CALL namespacedef
[XX]
	namespace_definitionlist = namespace_definition namespace_definitionlist ., FOLLOW [XX] -> REDUCE namespace_definitionlist #2
[XX]
	namespace_definition = typedefinition ";" . (XX), FOLLOW [XX] -> REDUCE namespace_definition #2 CALL definition 1
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";", FOLLOW [XX] -> GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";", FOLLOW [XX] -> SHIFT "..." GOTO XX
[XX]
	catchblock = "catch" IDENT . codeblock, FOLLOW [XX] -> GOTO XX
	catchblock = "catch" IDENT . "," IDENT codeblock, FOLLOW [XX] -> SHIFT ',' GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	iexpression/L14 = expression indirection IDENT . (XX), FOLLOW [XX] -> REDUCE iexpression #3 CALL rep_operator "->"
[XX]
	expression/L13 = expression "(" expressionlist . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	expression/L13 = expression "(" ")" . (step:151), FOLLOW [XX] -> REDUCE expression #3 CALL operator "()"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L7 = expression "^" expression . (step:129), FOLLOW [XX] -> REDUCE expression #3 CALL binop "^"
[XX]
	expression/L13 = expression "[" expressionlist . "]", FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L7 = expression "&" expression . (step:130), FOLLOW [XX] -> REDUCE expression #3 CALL binop "&"
[XX]
	indirection/L14 = "->" indirection . (XX), FOLLOW [XX] -> REDUCE indirection #2 CALL count
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "=" expression . (step:113), FOLLOW [XX] -> REDUCE expression #3 CALL binop "="
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = expression "+" expression . (step:137), FOLLOW [XX] -> REDUCE expression #3 CALL binop "+"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L9 = expression "-" expression . (step:138), FOLLOW [XX] -> REDUCE expression #3 CALL binop "-"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L10 = expression "*" expression . (step:144), FOLLOW [XX] -> REDUCE expression #3 CALL binop "*"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L10 = expression "/" expression . (step:145), FOLLOW [XX] -> REDUCE expression #3 CALL binop "/"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L10 = expression "%" expression . (step:146), FOLLOW [XX] -> REDUCE expression #3 CALL binop "%"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L5 = expression "&&" expression . (step:127), FOLLOW [XX] -> REDUCE expression #3 CALL binop "&&"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L4 = expression "||" expression . (step:126), FOLLOW [XX] -> REDUCE expression #3 CALL binop "||"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L6 = expression "|" expression . (step:128), FOLLOW [XX] -> REDUCE expression #3 CALL binop "|"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L11 = expression "<<" expression . (step:147), FOLLOW [XX] -> REDUCE expression #3 CALL binop "<<"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L11 = expression ">>" expression . (step:148), FOLLOW [XX] -> REDUCE expression #3 CALL binop ">>"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression "==" expression . (step:131), FOLLOW [XX] -> REDUCE expression #3 CALL binop "=="
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression "!=" expression . (step:132), FOLLOW [XX] -> REDUCE expression #3 CALL binop "!="
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression ">=" expression . (step:135), FOLLOW [XX] -> REDUCE expression #3 CALL binop ">="
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression "<=" expression . (step:133), FOLLOW [XX] -> REDUCE expression #3 CALL binop "<="
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression ">" expression . (step:136), FOLLOW [XX] -> REDUCE expression #3 CALL binop ">"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L8 = expression "<" expression . (step:134), FOLLOW [XX] -> REDUCE expression #3 CALL binop "<"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "+=" expression . (step:114), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "+"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "-=" expression . (step:115), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "-"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "*=" expression . (step:116), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "*"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "/=" expression . (step:117), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "/"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "^=" expression . (step:118), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "^"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "%=" expression . (step:119), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "%"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "&&=" expression . (step:120), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "&&"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "||=" expression . (step:121), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "||"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "&=" expression . (step:122), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "&"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "|=" expression . (step:123), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "|"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression "<<=" expression . (step:124), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator "<<"
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L3 = expression ">>=" expression . (step:125), FOLLOW [XX] -> REDUCE expression #3 CALL assign_operator ">>"
[XX]
	expression/L12 = expression "." IDENT . (XX), FOLLOW [XX] -> REDUCE expression #3 CALL member
[XX]
	expression/L2 = "(" expression ")" ., FOLLOW [XX] -> REDUCE expression #3
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression "," expressionlist, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = . expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expressionlist/L0 = expression "," . expressionlist, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L1 = "{" expressionlist "}" . (step:103), FOLLOW [XX] -> REDUCE expression #3 CALL structure
[XX]
	statement/L1 = "var" variabledefinition ";" . (step:16), FOLLOW [XX] -> REDUCE statement #3 CALL definition 1
[XX]
	statement/L1 = "return" expression ";" . (step:94), FOLLOW [XX] -> REDUCE statement #3 CALL return_value
[XX]
	statement/L1 = "throw" expression ";" . (XX), FOLLOW [XX] -> REDUCE statement #3 CALL throw_exception
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = "throw" expression "," . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	statement/L1 = "delete" expression ";" . (XX), FOLLOW [XX] -> REDUCE statement #3 CALL delete
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "if" "(" expression . ")" codeblock elseblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	statement/L1 = "if" "(" expression . ")" codeblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "while" "(" expression . ")" codeblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "with" "(" expression . ")" codeblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	statement/L1 = "with" "(" expression . ")" ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L1 = "new" typespec ":" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	expression/L1 = "cast" typespec ":" . expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	lambda_parameters = IDENT "," . lambda_parameters, FOLLOW [XX] -> GOTO XX
	lambda_parameters = . IDENT "," lambda_parameters, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	lambda_parameters = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	impl_paramdecl = typespec IDENT . (XX), FOLLOW [XX] -> REDUCE impl_paramdecl #2 CALL paramdef
[XX]
	callablebody = "(" impl_paramlist ")" . funcattribute "{" statementlist "}", FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	impl_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	impl_parameters = impl_paramdecl "," . impl_parameters, FOLLOW [XX] -> GOTO XX
	impl_parameters = . impl_paramdecl "," impl_parameters, FOLLOW [XX] -> GOTO XX
	impl_parameters = . impl_paramdecl, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	operatordefinition = linkage "operator" operatordecl . typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = linkage "operator" operatordecl . callablebody, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	constructordefinition = linkage "constructor" callablebody . (XX), FOLLOW [XX] -> REDUCE constructordefinition #3 CALL constructordef
[XX]
	inheritlist = typegen "," inheritlist . (XX), FOLLOW [XX] -> REDUCE inheritlist #3 CALL inheritdef 1
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")", FOLLOW [XX] -> SHIFT ')' GOTO XX
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")" "nothrow", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_parameters = extern_paramdecl "," . extern_parameters, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" . "nothrow", FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" . (XX), FOLLOW [XX] -> REDUCE typedefinition #6 CALL typedef_proctype {throws=true}
[XX]
	extern_paramdecl = typespec IDENT . (XX), FOLLOW [XX] -> REDUCE extern_paramdecl #2 CALL extern_paramdef
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header . "]" typespec callablebody, FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header . "]" callablebody, FOLLOW [XX] -> SHIFT ']' GOTO XX
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	classdefinition = "generic" "class" IDENT "[" generic_header "]" . ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT ':' GOTO XX
[XX]
	generic_identlist = IDENT "," . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_identlist = IDENT "," . generic_identlist, FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_identlist = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	generic_defaultlist = IDENT "=" . typegen "," generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_defaultlist = IDENT "=" . typegen, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" . "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	operatordecl = "(" ")" . (XX), FOLLOW [XX] -> REDUCE operatordecl #2 CALL operatordecl {name="()",symbol="call"}
[XX]
	operatordecl = "[" "]" . (XX), FOLLOW [XX] -> REDUCE operatordecl #2 CALL operatordecl {name="[]",symbol="get"}
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";", FOLLOW [XX] -> SHIFT "..." GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	catchblock = "catch" IDENT codeblock . (step:91), FOLLOW [XX] -> REDUCE catchblock #3 CALL catchblock
[XX]
	catchblock = "catch" IDENT "," . IDENT codeblock, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	expression/L13 = expression "(" expressionlist ")" . (step:151), FOLLOW [XX] -> REDUCE expression #4 CALL operator "()"
[XX]
	expression/L13 = expression "[" expressionlist "]" . (step:152), FOLLOW [XX] -> REDUCE expression #4 CALL operator_array "[]"
[XX]
	expressionlist/L0 = expression "," expressionlist ., FOLLOW [XX] -> REDUCE expressionlist #3
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	statement/L1 = "throw" expression "," expression . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	statement/L1 = "if" "(" expression ")" . codeblock elseblock, FOLLOW [XX] -> GOTO XX
	statement/L1 = "if" "(" expression ")" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	statement/L1 = "while" "(" expression ")" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	statement/L1 = "with" "(" expression ")" . codeblock, FOLLOW [XX] -> GOTO XX
	statement/L1 = "with" "(" expression ")" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L1 = "new" typespec ":" expression . (step:104), FOLLOW [XX] -> REDUCE expression #4 CALL allocate
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
	expression/L1 = "cast" typespec ":" expression . (step:105), FOLLOW [XX] -> REDUCE expression #4 CALL typecast
[XX]
	lamda_expression = "lambda" "(" lambda_paramlist ")" codeblock . (XX), FOLLOW [XX] -> REDUCE lamda_expression #5 CALL lambda_expression
[XX]
	lambda_parameters = IDENT "," lambda_parameters ., FOLLOW [XX] -> REDUCE lambda_parameters #3
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	funcattribute = "const" . funcattribute, FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	funcattribute = "nothrow" . funcattribute, FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	impl_parameters = impl_paramdecl "," impl_parameters ., FOLLOW [XX] -> REDUCE impl_parameters #3
[XX]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	operatordefinition = linkage "operator" operatordecl callablebody . (XX), FOLLOW [XX] -> REDUCE operatordefinition #4 CALL operator_procdef
[XX]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE classdefinition #7 CALL classdef
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" . "nothrow", FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" . (XX), FOLLOW [XX] -> REDUCE typedefinition #7 CALL typedef_functype {throws=true}
[XX]
	extern_parameters = extern_paramdecl "," extern_parameters . (XX), FOLLOW [XX] -> REDUCE extern_parameters #3 CALL extern_paramdef_collect
[XX]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow" . (XX), FOLLOW [XX] -> REDUCE typedefinition #7 CALL typedef_proctype {throws=false}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" . typespec callablebody, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" . inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	inclass_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	inclass_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	inclass_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . constructordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . operatordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	constructordefinition = . "destructor" codeblock, FOLLOW [XX] -> SHIFT "destructor" GOTO XX
	inclass_definitionlist = ., FOLLOW [XX] -> REDUCE inclass_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen "," inheritlist, FOLLOW [XX] -> GOTO XX
	inheritlist = . typegen, FOLLOW [XX] -> GOTO XX
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" . inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
[XX]
	generic_identlist = IDENT "," generic_defaultlist . (XX), FOLLOW [XX] -> REDUCE generic_identlist #3 CALL generic_header_ident
[XX]
	generic_identlist = IDENT "," generic_identlist . (XX), FOLLOW [XX] -> REDUCE generic_identlist #3 CALL generic_header_ident
[XX]
	generic_defaultlist = IDENT "=" typegen . "," generic_defaultlist, FOLLOW [XX] -> SHIFT ',' GOTO XX
	typegen/L1 = typegen . "const" "^", FOLLOW [XX] -> SHIFT "const" GOTO XX
	typegen/L1 = typegen . "^", FOLLOW [XX] -> SHIFT '^' GOTO XX
	typegen/L1 = typegen . "[" generic_instance "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	generic_defaultlist = IDENT "=" typegen . (XX), FOLLOW [XX] -> REDUCE generic_defaultlist #3 CALL generic_header_ident_type
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" . instruct_definitionlist "}", FOLLOW [XX] -> GOTO XX
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	instruct_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	instruct_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	instruct_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	instruct_definitionlist = ., FOLLOW [XX] -> REDUCE instruct_definitionlist #0
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" funcattribute ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	extern_parameters = . extern_paramdecl "," extern_parameters, FOLLOW [XX] -> GOTO XX
	extern_parameters = . extern_paramdecl, FOLLOW [XX] -> GOTO XX
	extern_paramlist = . extern_parameters, FOLLOW [XX] -> GOTO XX
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" funcattribute ";", FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	extern_paramdecl = . typespec, FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	extern_paramlist = . (XX), FOLLOW [XX] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" funcattribute ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" . (XX), FOLLOW [XX] -> REDUCE extern_definition #8 CALL extern_procdef
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	catchblock = "catch" IDENT "," IDENT . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	statement/L1 = "throw" expression "," expression ";" . (XX), FOLLOW [XX] -> REDUCE statement #5 CALL throw_exception
[XX]
	statement/L1 = "if" "(" expression ")" codeblock . elseblock, FOLLOW [XX] -> GOTO XX
	elseblock/L1 = . "elseif" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "elseif" GOTO XX
	elseblock/L1 = . "elseif" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "elseif" GOTO XX
	elseblock/L1 = . "else" codeblock, FOLLOW [XX] -> SHIFT "else" GOTO XX
	statement/L1 = "if" "(" expression ")" codeblock . (XX), FOLLOW [XX] -> REDUCE statement #5 CALL conditional_if
[XX]
	statement/L1 = "while" "(" expression ")" codeblock . (XX), FOLLOW [XX] -> REDUCE statement #5 CALL conditional_while
[XX]
	statement/L1 = "with" "(" expression ")" codeblock . (XX), FOLLOW [XX] -> REDUCE statement #5 CALL with_do
[XX]
	statement/L1 = "with" "(" expression ")" ";" . (XX), FOLLOW [XX] -> REDUCE statement #5 CALL with_do
[XX]
	statement/L1 = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	statement/L1 = . structdefinition, FOLLOW [XX] -> GOTO XX
	statement/L1 = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	statement/L1 = . functiondefinition, FOLLOW [XX] -> GOTO XX
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	statement/L1 = . codeblock, FOLLOW [XX] -> GOTO XX
	callablebody = "(" impl_paramlist ")" funcattribute "{" . statementlist "}", FOLLOW [XX] -> GOTO XX
	statement/L1 = . tryblock catchblock, FOLLOW [XX] -> GOTO XX
	statementlist/L1 = . statement statementlist, FOLLOW [XX] -> GOTO XX
	statement/L1 = . expression ";", FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	tryblock = . "try" codeblock, FOLLOW [XX] -> SHIFT "try" GOTO XX
	statement/L1 = . "var" variabledefinition ";", FOLLOW [XX] -> SHIFT "var" GOTO XX
	statement/L1 = . "return" expression ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "return" ";", FOLLOW [XX] -> SHIFT "return" GOTO XX
	statement/L1 = . "throw" expression "," expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "throw" expression ";", FOLLOW [XX] -> SHIFT "throw" GOTO XX
	statement/L1 = . "delete" expression ";", FOLLOW [XX] -> SHIFT "delete" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "if" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "if" GOTO XX
	statement/L1 = . "while" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "while" GOTO XX
	statement/L1 = . "with" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "with" GOTO XX
	statement/L1 = . "with" "(" expression ")" ";", FOLLOW [XX] -> SHIFT "with" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
	statementlist/L1 = ., FOLLOW [XX] -> REDUCE statementlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	funcattribute = "const" funcattribute . (XX), FOLLOW [XX] -> REDUCE funcattribute #2 CALL funcattribute {const=true}
[XX]
	funcattribute = "nothrow" funcattribute . (XX), FOLLOW [XX] -> REDUCE funcattribute #2 CALL funcattribute {throws=false}
[XX]
	operatordefinition = linkage "operator" operatordecl typespec callablebody . (XX), FOLLOW [XX] -> REDUCE operatordefinition #5 CALL operator_funcdef
[XX]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow" . (XX), FOLLOW [XX] -> REDUCE typedefinition #8 CALL typedef_functype {throws=false}
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec . callablebody, FOLLOW [XX] -> GOTO XX
	callablebody = . "(" impl_paramlist ")" funcattribute "{" statementlist "}", FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	functiondefinition = "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody . (XX), FOLLOW [XX] -> REDUCE functiondefinition #8 CALL generic_procdef
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist . "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	generic_defaultlist = IDENT "=" typegen "," . generic_defaultlist, FOLLOW [XX] -> GOTO XX
	generic_defaultlist = . IDENT "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	generic_defaultlist = . IDENT "=" typegen, FOLLOW [XX] -> SHIFT IDENT GOTO XX
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" funcattribute ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . funcattribute ";", FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" funcattribute ";", FOLLOW [XX] -> SHIFT ')' GOTO XX
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . funcattribute ";", FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" . (XX), FOLLOW [XX] -> REDUCE extern_definition #9 CALL extern_funcdef
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" . (XX), FOLLOW [XX] -> REDUCE extern_definition #9 CALL extern_procdef_vararg
[XX]
	catchblock = "catch" IDENT "," IDENT codeblock . (step:91), FOLLOW [XX] -> REDUCE catchblock #5 CALL catchblock
[XX]
	statement/L1 = "if" "(" expression ")" codeblock elseblock . (XX), FOLLOW [XX] -> REDUCE statement #6 CALL conditional_if
[XX]
	elseblock/L1 = "elseif" . "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
	elseblock/L1 = "elseif" . "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT '(' GOTO XX
[XX]
	elseblock/L1 = "else" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	functiondefinition = "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody . (XX), FOLLOW [XX] -> REDUCE functiondefinition #9 CALL generic_funcdef
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE classdefinition #9 CALL generic_classdef
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" . inclass_definitionlist "}", FOLLOW [XX] -> GOTO XX
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [XX] -> GOTO XX
	typehdr/L1 = . typename, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typehdr, FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "[" generic_instance "]", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "^", FOLLOW [XX] -> GOTO XX
	typegen/L1 = . typegen "const" "^", FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen, FOLLOW [XX] -> GOTO XX
	typespec/L1 = . typegen "&", FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT, FOLLOW [XX] -> GOTO XX
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [XX] -> GOTO XX
	inclass_definition = . typedefinition ";", FOLLOW [XX] -> GOTO XX
	inclass_definition = . structdefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . interfacedefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . classdefinition, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [XX] -> GOTO XX
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [XX] -> GOTO XX
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [XX] -> GOTO XX
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [XX] -> GOTO XX
	inclass_definition = . functiondefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . constructordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . operatordefinition, FOLLOW [XX] -> GOTO XX
	inclass_definition = . variabledefinition ";", FOLLOW [XX] -> GOTO XX
	typename/L1 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typename/L1 = . IDENT "::" typename, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	typehdr/L1 = . "const" typename, FOLLOW [XX] -> SHIFT "const" GOTO XX
	typehdr/L1 = . "any" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "class" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	typehdr/L1 = . "any" "const" "struct" "^", FOLLOW [XX] -> SHIFT "any" GOTO XX
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "class" GOTO XX
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "struct" GOTO XX
	typedefinition = . "typedef" typegen IDENT, FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")" "nothrow", FOLLOW [XX] -> SHIFT "typedef" GOTO XX
	structdefinition = . "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	classdefinition = . "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "function" IDENT "[" generic_header "]" typespec callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	functiondefinition = . "generic" linkage "procedure" IDENT "[" generic_header "]" callablebody, FOLLOW [XX] -> SHIFT "generic" GOTO XX
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [XX] -> SHIFT "interface" GOTO XX
	linkage = . "private", FOLLOW [XX] -> SHIFT "private" GOTO XX
	linkage = . "public", FOLLOW [XX] -> SHIFT "public" GOTO XX
	constructordefinition = . "destructor" codeblock, FOLLOW [XX] -> SHIFT "destructor" GOTO XX
	inclass_definitionlist = ., FOLLOW [XX] -> REDUCE inclass_definitionlist #0
	linkage = . (XX), FOLLOW [XX] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external",explicit=false}
[XX]
	generic_defaultlist = IDENT "=" typegen "," generic_defaultlist . (XX), FOLLOW [XX] -> REDUCE generic_defaultlist #5 CALL generic_header_ident_type
[XX]
	generic_defaultlist = IDENT . "=" typegen "," generic_defaultlist, FOLLOW [XX] -> SHIFT '=' GOTO XX
	generic_defaultlist = IDENT . "=" typegen, FOLLOW [XX] -> SHIFT '=' GOTO XX
[XX]
	structdefinition = "generic" "struct" IDENT "[" generic_header "]" "{" instruct_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE structdefinition #9 CALL generic_structdef
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . funcattribute ";", FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . funcattribute ";", FOLLOW [XX] -> GOTO XX
	funcattribute = . "const" funcattribute, FOLLOW [XX] -> SHIFT "const" GOTO XX
	funcattribute = . "nothrow" funcattribute, FOLLOW [XX] -> SHIFT "nothrow" GOTO XX
	funcattribute = . (XX), FOLLOW [XX] -> REDUCE funcattribute #0 CALL funcattribute {const=false,throws=true}
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" . (XX), FOLLOW [XX] -> REDUCE extern_definition #10 CALL extern_funcdef_vararg
[XX]
	expression/L2 = . lamda_expression, FOLLOW [XX] -> GOTO XX
	elseblock/L1 = "elseif" "(" . expression ")" codeblock elseblock, FOLLOW [XX] -> GOTO XX
	elseblock/L1 = "elseif" "(" . expression ")" codeblock, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "+=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "-=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "*=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "/=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "^=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "%=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "||=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "&=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "|=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression "<<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L3 = . expression ">>=" expression, FOLLOW [XX] -> GOTO XX
	expression/L4 = . expression "||" expression, FOLLOW [XX] -> GOTO XX
	expression/L5 = . expression "&&" expression, FOLLOW [XX] -> GOTO XX
	expression/L6 = . expression "|" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "^" expression, FOLLOW [XX] -> GOTO XX
	expression/L7 = . expression "&" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "==" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "!=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression "<" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">=" expression, FOLLOW [XX] -> GOTO XX
	expression/L8 = . expression ">" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "+" expression, FOLLOW [XX] -> GOTO XX
	expression/L9 = . expression "-" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "*" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "/" expression, FOLLOW [XX] -> GOTO XX
	expression/L10 = . expression "%" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression "<<" expression, FOLLOW [XX] -> GOTO XX
	expression/L11 = . expression ">>" expression, FOLLOW [XX] -> GOTO XX
	expression/L12 = . expression "." IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "(" ")", FOLLOW [XX] -> GOTO XX
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [XX] -> GOTO XX
	iexpression/L14 = . expression indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L12 = . iexpression, FOLLOW [XX] -> GOTO XX
	expression/L2 = . BOOLEAN, FOLLOW [XX] -> SHIFT BOOLEAN GOTO XX
	expression/L2 = . IDENT, FOLLOW [XX] -> SHIFT IDENT GOTO XX
	expression/L2 = . DQSTRING, FOLLOW [XX] -> SHIFT DQSTRING GOTO XX
	expression/L2 = . SQSTRING, FOLLOW [XX] -> SHIFT SQSTRING GOTO XX
	expression/L2 = . UINTEGER, FOLLOW [XX] -> SHIFT UINTEGER GOTO XX
	expression/L2 = . FLOAT, FOLLOW [XX] -> SHIFT FLOAT GOTO XX
	expression/L2 = . "(" expression ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L9 = . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	expression/L1 = . "{" expressionlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L1 = . "{" "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
	expression/L9 = . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L12 = . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L9 = . "~" expression, FOLLOW [XX] -> SHIFT '~' GOTO XX
	expression/L9 = . "!" expression, FOLLOW [XX] -> SHIFT '!' GOTO XX
	lamda_expression = . "lambda" "(" lambda_paramlist ")" codeblock, FOLLOW [XX] -> SHIFT "lambda" GOTO XX
	expression/L1 = . "new" typespec ":" expression, FOLLOW [XX] -> SHIFT "new" GOTO XX
	expression/L1 = . "cast" typespec ":" expression, FOLLOW [XX] -> SHIFT "cast" GOTO XX
	expression/L2 = . "null", FOLLOW [XX] -> SHIFT "null" GOTO XX
[XX]
	elseblock/L1 = "else" codeblock . (XX), FOLLOW [XX] -> REDUCE elseblock #2 CALL conditional_else
[XX]
	callablebody = "(" impl_paramlist ")" funcattribute "{" statementlist "}" . (scope:84), FOLLOW [XX] -> REDUCE callablebody #7 CALL callablebody
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist . "}", FOLLOW [XX] -> SHIFT '}' GOTO XX
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" funcattribute ";" . (XX), FOLLOW [XX] -> REDUCE ininterf_definition #7 CALL interface_procdef
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute . ";", FOLLOW [XX] -> SHIFT ';' GOTO XX
[XX]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" funcattribute ";" . (XX), FOLLOW [XX] -> REDUCE ininterf_definition #7 CALL interface_operator_procdef
[XX]
	iexpression/L14 = expression . indirection IDENT, FOLLOW [XX] -> GOTO XX
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	expression/L13 = expression . "(" ")", FOLLOW [XX] -> SHIFT '(' GOTO XX
	elseblock/L1 = "elseif" "(" expression . ")" codeblock elseblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	elseblock/L1 = "elseif" "(" expression . ")" codeblock, FOLLOW [XX] -> SHIFT ')' GOTO XX
	expression/L7 = expression . "^" expression, FOLLOW [XX] -> SHIFT '^' GOTO XX
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [XX] -> SHIFT '[' GOTO XX
	expression/L7 = expression . "&" expression, FOLLOW [XX] -> SHIFT '&' GOTO XX
	indirection/L14 = . "->" indirection, FOLLOW [XX] -> SHIFT "->" GOTO XX
	indirection/L14 = . "->", FOLLOW [XX] -> SHIFT "->" GOTO XX
	expression/L3 = expression . "=" expression, FOLLOW [XX] -> SHIFT '=' GOTO XX
	expression/L9 = expression . "+" expression, FOLLOW [XX] -> SHIFT '+' GOTO XX
	expression/L9 = expression . "-" expression, FOLLOW [XX] -> SHIFT '-' GOTO XX
	expression/L10 = expression . "*" expression, FOLLOW [XX] -> SHIFT '*' GOTO XX
	expression/L10 = expression . "/" expression, FOLLOW [XX] -> SHIFT '/' GOTO XX
	expression/L10 = expression . "%" expression, FOLLOW [XX] -> SHIFT '%' GOTO XX
	expression/L5 = expression . "&&" expression, FOLLOW [XX] -> SHIFT "&&" GOTO XX
	expression/L4 = expression . "||" expression, FOLLOW [XX] -> SHIFT "||" GOTO XX
	expression/L6 = expression . "|" expression, FOLLOW [XX] -> SHIFT '|' GOTO XX
	expression/L11 = expression . "<<" expression, FOLLOW [XX] -> SHIFT "<<" GOTO XX
	expression/L11 = expression . ">>" expression, FOLLOW [XX] -> SHIFT ">>" GOTO XX
	expression/L8 = expression . "==" expression, FOLLOW [XX] -> SHIFT "==" GOTO XX
	expression/L8 = expression . "!=" expression, FOLLOW [XX] -> SHIFT "!=" GOTO XX
	expression/L8 = expression . ">=" expression, FOLLOW [XX] -> SHIFT ">=" GOTO XX
	expression/L8 = expression . "<=" expression, FOLLOW [XX] -> SHIFT "<=" GOTO XX
	expression/L8 = expression . ">" expression, FOLLOW [XX] -> SHIFT '>' GOTO XX
	expression/L8 = expression . "<" expression, FOLLOW [XX] -> SHIFT '<' GOTO XX
	expression/L3 = expression . "+=" expression, FOLLOW [XX] -> SHIFT "+=" GOTO XX
	expression/L3 = expression . "-=" expression, FOLLOW [XX] -> SHIFT "-=" GOTO XX
	expression/L3 = expression . "*=" expression, FOLLOW [XX] -> SHIFT "*=" GOTO XX
	expression/L3 = expression . "/=" expression, FOLLOW [XX] -> SHIFT "/=" GOTO XX
	expression/L3 = expression . "^=" expression, FOLLOW [XX] -> SHIFT "^=" GOTO XX
	expression/L3 = expression . "%=" expression, FOLLOW [XX] -> SHIFT "%=" GOTO XX
	expression/L3 = expression . "&&=" expression, FOLLOW [XX] -> SHIFT "&&=" GOTO XX
	expression/L3 = expression . "||=" expression, FOLLOW [XX] -> SHIFT "||=" GOTO XX
	expression/L3 = expression . "&=" expression, FOLLOW [XX] -> SHIFT "&=" GOTO XX
	expression/L3 = expression . "|=" expression, FOLLOW [XX] -> SHIFT "|=" GOTO XX
	expression/L3 = expression . "<<=" expression, FOLLOW [XX] -> SHIFT "<<=" GOTO XX
	expression/L3 = expression . ">>=" expression, FOLLOW [XX] -> SHIFT ">>=" GOTO XX
	expression/L12 = expression . "." IDENT, FOLLOW [XX] -> SHIFT '.' GOTO XX
[XX]
	classdefinition = "generic" "class" IDENT "[" generic_header "]" ":" inheritlist "{" inclass_definitionlist "}" . (XX), FOLLOW [XX] -> REDUCE classdefinition #11 CALL generic_classdef
[XX]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" funcattribute ";" . (XX), FOLLOW [XX] -> REDUCE ininterf_definition #8 CALL interface_funcdef
[XX]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" funcattribute ";" . (XX), FOLLOW [XX] -> REDUCE ininterf_definition #8 CALL interface_operator_funcdef
[XX]
	elseblock/L1 = "elseif" "(" expression ")" . codeblock elseblock, FOLLOW [XX] -> GOTO XX
	elseblock/L1 = "elseif" "(" expression ")" . codeblock, FOLLOW [XX] -> GOTO XX
	codeblock/L1 = . "{" statementlist "}", FOLLOW [XX] -> SHIFT '{' GOTO XX
[XX]
	elseblock/L1 = "elseif" "(" expression ")" codeblock . elseblock, FOLLOW [XX] -> GOTO XX
	elseblock/L1 = . "elseif" "(" expression ")" codeblock elseblock, FOLLOW [XX] -> SHIFT "elseif" GOTO XX
	elseblock/L1 = . "elseif" "(" expression ")" codeblock, FOLLOW [XX] -> SHIFT "elseif" GOTO XX
	elseblock/L1 = . "else" codeblock, FOLLOW [XX] -> SHIFT "else" GOTO XX
	elseblock/L1 = "elseif" "(" expression ")" codeblock . (XX), FOLLOW [XX] -> REDUCE elseblock #5 CALL conditional_elseif
[XX]
	elseblock/L1 = "elseif" "(" expression ")" codeblock elseblock . (XX), FOLLOW [XX] -> REDUCE elseblock #6 CALL conditional_elseif

-- Function calls:
(XX) program
(XX) extern_funcdef
(XX) extern_procdef
(XX) extern_funcdef_vararg
(XX) extern_procdef_vararg
(XX) extern_paramdef
(XX) extern_paramdef_collect
(XX) extern_paramdeflist
(XX) interface_funcdef
(XX) interface_procdef
(XX) interface_operator_funcdef
(XX) interface_operator_procdef
(XX) funcattribute, {const=true}
(XX) funcattribute, {throws=false}
(XX) funcattribute, {const=false,throws=true}
(XX) definition, 1
(XX) definition, 2
(XX) definition_2pass, 4
(XX) typehdr, {const=false}
(XX) typehdr, {const=true}
(XX) typehdr_any, "any class^"
(XX) typehdr_any, "any const class^"
(XX) typehdr_any, "any struct^"
(XX) typehdr_any, "any const struct^"
(XX) typegen_generic
(XX) typegen_pointer, {const=false}
(XX) typegen_pointer, {const=true}
(XX) typespec
(XX) typespec_ref
(XX) typedef
(XX) typedef_functype, {throws=true}
(XX) typedef_proctype, {throws=true}
(XX) typedef_functype, {throws=false}
(XX) typedef_proctype, {throws=false}
(XX) structdef
(XX) generic_structdef
(XX) interfacedef
(XX) inheritdef, 1
(XX) namespacedef
(XX) classdef
(XX) generic_classdef
(XX) linkage, {private=true,linkage="internal",explicit=true}
(XX) linkage, {private=false,linkage="external",explicit=true}
(XX) linkage, {private=false,linkage="external",explicit=false}
(XX) funcdef
(XX) procdef
(XX) generic_funcdef
(XX) generic_procdef
(XX) constructordef
(XX) destructordef, {linkage="external"}
(XX) operator_funcdef
(XX) operator_procdef
(XX) operatordecl, {name="->",symbol="arrow"}
(XX) operatordecl, {name="=",symbol="assign"}
(XX) operatordecl, {name="+",symbol="plus"}
(XX) operatordecl, {name="-",symbol="minus"}
(XX) operatordecl, {name="*",symbol="mul"}
(XX) operatordecl, {name="/",symbol="div"}
(XX) operatordecl, {name="%",symbol="mod"}
(XX) operatordecl, {name="&&",symbol="and"}
(XX) operatordecl, {name="||",symbol="or"}
(XX) operatordecl, {name="&",symbol="bitand"}
(XX) operatordecl, {name="|",symbol="bitor"}
(XX) operatordecl, {name="<<",symbol="lsh"}
(XX) operatordecl, {name=">>",symbol="rsh"}
(XX) operatordecl, {name="~",symbol="lneg"}
(XX) operatordecl, {name="!",symbol="not"}
(XX) operatordecl, {name="()",symbol="call"}
(XX) operatordecl, {name="[]",symbol="get"}
(XX) operatordecl, {name="==",symbol="eq"}
(XX) operatordecl, {name="!=",symbol="ne"}
(XX) operatordecl, {name=">=",symbol="ge"}
(XX) operatordecl, {name="<=",symbol="le"}
(XX) operatordecl, {name=">",symbol="gt"}
(XX) operatordecl, {name="<",symbol="lt"}
(XX) lambda_paramdeflist
(XX) lambda_expression
(XX) generic_instance_dimension
(XX) generic_instance_deflist
(XX) generic_instance
(XX) generic_header_ident_type
(XX) generic_header_ident
(XX) generic_header
(XX) callablebody
(XX) main_procdef
(XX) paramdeflist
(XX) paramdef
(XX) codeblock
(XX) conditional_elseif
(XX) conditional_else
(XX) catchblock
(XX) tryblock
(XX) free_expression
(XX) return_value
(XX) return_void
(XX) throw_exception
(XX) trycatch
(XX) delete
(XX) conditional_if
(XX) conditional_while
(XX) with_do
(XX) vardef
(XX) structure
(XX) allocate
(XX) typecast
(XX) variable
(XX) constant, "constexpr bool"
(XX) constant, "constexpr uint"
(XX) constant, "constexpr float"
(XX) null
(XX) string_constant
(XX) char_constant
(XX) binop, "="
(XX) assign_operator, "+"
(XX) assign_operator, "-"
(XX) assign_operator, "*"
(XX) assign_operator, "/"
(XX) assign_operator, "^"
(XX) assign_operator, "%"
(XX) assign_operator, "&&"
(XX) assign_operator, "||"
(XX) assign_operator, "&"
(XX) assign_operator, "|"
(XX) assign_operator, "<<"
(XX) assign_operator, ">>"
(XX) binop, "||"
(XX) binop, "&&"
(XX) binop, "|"
(XX) binop, "^"
(XX) binop, "&"
(XX) binop, "=="
(XX) binop, "!="
(XX) binop, "<="
(XX) binop, "<"
(XX) binop, ">="
(XX) binop, ">"
(XX) binop, "+"
(XX) binop, "-"
(XX) operator_address, "&"
(XX) unop, "-"
(XX) unop, "+"
(XX) unop, "~"
(XX) unop, "!"
(XX) binop, "*"
(XX) binop, "/"
(XX) binop, "%"
(XX) binop, "<<"
(XX) binop, ">>"
(XX) member
(XX) unop, "->"
(XX) operator, "()"
(XX) operator_array, "[]"
(XX) rep_operator, "->"
(XX) count

-- Action table:
[XX]
	$ => Reduce #0 extern_definitionlist
	IDENT => Reduce #0 extern_definitionlist
	"extern" => Shift goto XX
	"function" => Reduce #0 extern_definitionlist
	"procedure" => Reduce #0 extern_definitionlist
	"const" => Reduce #0 extern_definitionlist
	"any" => Reduce #0 extern_definitionlist
	"class" => Reduce #0 extern_definitionlist
	"struct" => Reduce #0 extern_definitionlist
	"typedef" => Reduce #0 extern_definitionlist
	"generic" => Reduce #0 extern_definitionlist
	"interface" => Reduce #0 extern_definitionlist
	"namespace" => Reduce #0 extern_definitionlist
	"private" => Reduce #0 extern_definitionlist
	"public" => Reduce #0 extern_definitionlist
	"main" => Reduce #0 extern_definitionlist
[XX]
	$ => Reduce #0 free_definitionlist
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"namespace" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"main" => Reduce #0 free_definitionlist
[XX]
	$ => Reduce #0 extern_definitionlist
	IDENT => Reduce #0 extern_definitionlist
	"extern" => Shift goto XX
	"function" => Reduce #0 extern_definitionlist
	"procedure" => Reduce #0 extern_definitionlist
	"const" => Reduce #0 extern_definitionlist
	"any" => Reduce #0 extern_definitionlist
	"class" => Reduce #0 extern_definitionlist
	"struct" => Reduce #0 extern_definitionlist
	"typedef" => Reduce #0 extern_definitionlist
	"generic" => Reduce #0 extern_definitionlist
	"interface" => Reduce #0 extern_definitionlist
	"namespace" => Reduce #0 extern_definitionlist
	"private" => Reduce #0 extern_definitionlist
	"public" => Reduce #0 extern_definitionlist
	"main" => Reduce #0 extern_definitionlist
[XX]
	DQSTRING => Shift goto XX
[XX]
	$ => Reduce #0 main_procedure
	"main" => Shift goto XX
[XX]
	$ => Reduce #0 free_definitionlist
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"namespace" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"main" => Reduce #0 free_definitionlist
[XX]
	IDENT => Reduce #1 typehdr call typehdr {const=false}
	'(' => Reduce #1 typehdr call typehdr {const=false}
	')' => Reduce #1 typehdr call typehdr {const=false}
	"..." => Reduce #1 typehdr call typehdr {const=false}
	',' => Reduce #1 typehdr call typehdr {const=false}
	"const" => Reduce #1 typehdr call typehdr {const=false}
	'^' => Reduce #1 typehdr call typehdr {const=false}
	'[' => Reduce #1 typehdr call typehdr {const=false}
	']' => Reduce #1 typehdr call typehdr {const=false}
	'&' => Reduce #1 typehdr call typehdr {const=false}
	'{' => Reduce #1 typehdr call typehdr {const=false}
	':' => Reduce #1 typehdr call typehdr {const=false}
[XX]
	IDENT => Reduce #1 typegen
	'(' => Reduce #1 typegen
	')' => Reduce #1 typegen
	"..." => Reduce #1 typegen
	',' => Reduce #1 typegen
	"const" => Reduce #1 typegen
	'^' => Reduce #1 typegen
	'[' => Reduce #1 typegen
	']' => Reduce #1 typegen
	'&' => Reduce #1 typegen
	'{' => Reduce #1 typegen
	':' => Reduce #1 typegen
[XX]
	IDENT => Reduce #1 typespec call typespec
	'(' => Reduce #1 typespec call typespec
	')' => Reduce #1 typespec call typespec
	"..." => Reduce #1 typespec call typespec
	',' => Reduce #1 typespec call typespec
	"const" => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	':' => Reduce #1 typespec call typespec
[XX]
	IDENT => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[XX]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[XX]
	$ => Reduce #1 free_definition
	IDENT => Reduce #1 free_definition
	"function" => Reduce #1 free_definition
	"procedure" => Reduce #1 free_definition
	"const" => Reduce #1 free_definition
	"any" => Reduce #1 free_definition
	"class" => Reduce #1 free_definition
	"struct" => Reduce #1 free_definition
	"typedef" => Reduce #1 free_definition
	"generic" => Reduce #1 free_definition
	"interface" => Reduce #1 free_definition
	"namespace" => Reduce #1 free_definition
	"private" => Reduce #1 free_definition
	"public" => Reduce #1 free_definition
	"main" => Reduce #1 free_definition
[XX]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
[XX]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[XX]
	';' => Shift goto XX
[XX]
	IDENT => Reduce #1 typename
	'(' => Reduce #1 typename
	')' => Reduce #1 typename
	"..." => Reduce #1 typename
	',' => Reduce #1 typename
	"const" => Reduce #1 typename
	"::" => Shift goto XX
	'^' => Reduce #1 typename
	'[' => Reduce #1 typename
	']' => Reduce #1 typename
	'&' => Reduce #1 typename
	'{' => Reduce #1 typename
	':' => Reduce #1 typename
[XX]
	IDENT => Shift goto XX
[XX]
	"const" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"function" => Shift goto XX
	"procedure" => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	"function" => Reduce #1 linkage call linkage {private=true,linkage="internal",explicit=true}
	"procedure" => Reduce #1 linkage call linkage {private=true,linkage="internal",explicit=true}
	"operator" => Reduce #1 linkage call linkage {private=true,linkage="internal",explicit=true}
	"constructor" => Reduce #1 linkage call linkage {private=true,linkage="internal",explicit=true}
[XX]
	"function" => Reduce #1 linkage call linkage {private=false,linkage="external",explicit=true}
	"procedure" => Reduce #1 linkage call linkage {private=false,linkage="external",explicit=true}
	"operator" => Reduce #1 linkage call linkage {private=false,linkage="external",explicit=true}
	"constructor" => Reduce #1 linkage call linkage {private=false,linkage="external",explicit=true}
[XX]
	$ => Reduce #2 extern_definitionlist
	IDENT => Reduce #2 extern_definitionlist
	"function" => Reduce #2 extern_definitionlist
	"procedure" => Reduce #2 extern_definitionlist
	"const" => Reduce #2 extern_definitionlist
	"any" => Reduce #2 extern_definitionlist
	"class" => Reduce #2 extern_definitionlist
	"struct" => Reduce #2 extern_definitionlist
	"typedef" => Reduce #2 extern_definitionlist
	"generic" => Reduce #2 extern_definitionlist
	"interface" => Reduce #2 extern_definitionlist
	"namespace" => Reduce #2 extern_definitionlist
	"private" => Reduce #2 extern_definitionlist
	"public" => Reduce #2 extern_definitionlist
	"main" => Reduce #2 extern_definitionlist
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
[XX]
	$ => Accept
[XX]
	'{' => Shift goto XX
[XX]
	$ => Reduce #2 free_definitionlist
	"main" => Reduce #2 free_definitionlist
[XX]
	'^' => Shift goto XX
[XX]
	IDENT => Reduce #2 typegen call typegen_pointer {const=false}
	'(' => Reduce #2 typegen call typegen_pointer {const=false}
	')' => Reduce #2 typegen call typegen_pointer {const=false}
	"..." => Reduce #2 typegen call typegen_pointer {const=false}
	',' => Reduce #2 typegen call typegen_pointer {const=false}
	"const" => Reduce #2 typegen call typegen_pointer {const=false}
	'^' => Reduce #2 typegen call typegen_pointer {const=false}
	'[' => Reduce #2 typegen call typegen_pointer {const=false}
	']' => Reduce #2 typegen call typegen_pointer {const=false}
	'&' => Reduce #2 typegen call typegen_pointer {const=false}
	'{' => Reduce #2 typegen call typegen_pointer {const=false}
	':' => Reduce #2 typegen call typegen_pointer {const=false}
[XX]
	IDENT => Shift goto XX
	UINTEGER => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
	"lambda" => Shift goto XX
[XX]
	IDENT => Reduce #2 typespec call typespec_ref
	'(' => Reduce #2 typespec call typespec_ref
	')' => Reduce #2 typespec call typespec_ref
	"..." => Reduce #2 typespec call typespec_ref
	',' => Reduce #2 typespec call typespec_ref
	':' => Reduce #2 typespec call typespec_ref
[XX]
	';' => Reduce #2 variabledefinition call vardef
	'=' => Shift goto XX
[XX]
	$ => Reduce #2 free_definition call definition 1
	IDENT => Reduce #2 free_definition call definition 1
	"function" => Reduce #2 free_definition call definition 1
	"procedure" => Reduce #2 free_definition call definition 1
	"const" => Reduce #2 free_definition call definition 1
	"any" => Reduce #2 free_definition call definition 1
	"class" => Reduce #2 free_definition call definition 1
	"struct" => Reduce #2 free_definition call definition 1
	"typedef" => Reduce #2 free_definition call definition 1
	"generic" => Reduce #2 free_definition call definition 1
	"interface" => Reduce #2 free_definition call definition 1
	"namespace" => Reduce #2 free_definition call definition 1
	"private" => Reduce #2 free_definition call definition 1
	"public" => Reduce #2 free_definition call definition 1
	"main" => Reduce #2 free_definition call definition 1
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	$ => Reduce #2 free_definition call definition 1
	IDENT => Reduce #2 free_definition call definition 1
	"function" => Reduce #2 free_definition call definition 1
	"procedure" => Reduce #2 free_definition call definition 1
	"const" => Reduce #2 free_definition call definition 1
	"any" => Reduce #2 free_definition call definition 1
	"class" => Reduce #2 free_definition call definition 1
	"struct" => Reduce #2 free_definition call definition 1
	"typedef" => Reduce #2 free_definition call definition 1
	"generic" => Reduce #2 free_definition call definition 1
	"interface" => Reduce #2 free_definition call definition 1
	"namespace" => Reduce #2 free_definition call definition 1
	"private" => Reduce #2 free_definition call definition 1
	"public" => Reduce #2 free_definition call definition 1
	"main" => Reduce #2 free_definition call definition 1
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Reduce #2 typehdr call typehdr {const=true}
	'(' => Reduce #2 typehdr call typehdr {const=true}
	')' => Reduce #2 typehdr call typehdr {const=true}
	"..." => Reduce #2 typehdr call typehdr {const=true}
	',' => Reduce #2 typehdr call typehdr {const=true}
	"const" => Reduce #2 typehdr call typehdr {const=true}
	'^' => Reduce #2 typehdr call typehdr {const=true}
	'[' => Reduce #2 typehdr call typehdr {const=true}
	']' => Reduce #2 typehdr call typehdr {const=true}
	'&' => Reduce #2 typehdr call typehdr {const=true}
	'{' => Reduce #2 typehdr call typehdr {const=true}
	':' => Reduce #2 typehdr call typehdr {const=true}
[XX]
	"class" => Shift goto XX
	"struct" => Shift goto XX
[XX]
	'^' => Shift goto XX
[XX]
	'^' => Shift goto XX
[XX]
	'{' => Shift goto XX
	':' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	$ => Reduce #2 main_procedure call main_procdef
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	'(' => Shift goto XX
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	'&' => Shift goto XX
	"typedef" => Shift goto XX
	'{' => Shift goto XX
	'}' => Reduce #0 statementlist
	"generic" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"try" => Shift goto XX
	"var" => Shift goto XX
	"return" => Shift goto XX
	"throw" => Shift goto XX
	"delete" => Shift goto XX
	"if" => Shift goto XX
	"while" => Shift goto XX
	"with" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	IDENT => Reduce #3 typegen call typegen_pointer {const=true}
	'(' => Reduce #3 typegen call typegen_pointer {const=true}
	')' => Reduce #3 typegen call typegen_pointer {const=true}
	"..." => Reduce #3 typegen call typegen_pointer {const=true}
	',' => Reduce #3 typegen call typegen_pointer {const=true}
	"const" => Reduce #3 typegen call typegen_pointer {const=true}
	'^' => Reduce #3 typegen call typegen_pointer {const=true}
	'[' => Reduce #3 typegen call typegen_pointer {const=true}
	']' => Reduce #3 typegen call typegen_pointer {const=true}
	'&' => Reduce #3 typegen call typegen_pointer {const=true}
	'{' => Reduce #3 typegen call typegen_pointer {const=true}
	':' => Reduce #3 typegen call typegen_pointer {const=true}
[XX]
	',' => Reduce #1 generic_instance_defelem
	"const" => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #1 generic_instance_defelem
[XX]
	',' => Reduce #1 generic_instance_defelem
	']' => Reduce #1 generic_instance_defelem
[XX]
	',' => Shift goto XX
	']' => Reduce #1 generic_instance_deflist call generic_instance_deflist
[XX]
	']' => Reduce #1 generic_instance call generic_instance
[XX]
	']' => Shift goto XX
[XX]
	',' => Reduce #1 generic_instance_defelem call generic_instance_dimension
	']' => Reduce #1 generic_instance_defelem call generic_instance_dimension
[XX]
	'(' => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Reduce #3 typename
	'(' => Reduce #3 typename
	')' => Reduce #3 typename
	"..." => Reduce #3 typename
	',' => Reduce #3 typename
	"const" => Reduce #3 typename
	'^' => Reduce #3 typename
	'[' => Reduce #3 typename
	']' => Reduce #3 typename
	'&' => Reduce #3 typename
	'{' => Reduce #3 typename
	':' => Reduce #3 typename
[XX]
	'^' => Shift goto XX
[XX]
	'^' => Shift goto XX
[XX]
	IDENT => Reduce #3 typehdr call typehdr_any "any class^"
	'(' => Reduce #3 typehdr call typehdr_any "any class^"
	')' => Reduce #3 typehdr call typehdr_any "any class^"
	"..." => Reduce #3 typehdr call typehdr_any "any class^"
	',' => Reduce #3 typehdr call typehdr_any "any class^"
	"const" => Reduce #3 typehdr call typehdr_any "any class^"
	'^' => Reduce #3 typehdr call typehdr_any "any class^"
	'[' => Reduce #3 typehdr call typehdr_any "any class^"
	']' => Reduce #3 typehdr call typehdr_any "any class^"
	'&' => Reduce #3 typehdr call typehdr_any "any class^"
	'{' => Reduce #3 typehdr call typehdr_any "any class^"
	':' => Reduce #3 typehdr call typehdr_any "any class^"
[XX]
	IDENT => Reduce #3 typehdr call typehdr_any "any struct^"
	'(' => Reduce #3 typehdr call typehdr_any "any struct^"
	')' => Reduce #3 typehdr call typehdr_any "any struct^"
	"..." => Reduce #3 typehdr call typehdr_any "any struct^"
	',' => Reduce #3 typehdr call typehdr_any "any struct^"
	"const" => Reduce #3 typehdr call typehdr_any "any struct^"
	'^' => Reduce #3 typehdr call typehdr_any "any struct^"
	'[' => Reduce #3 typehdr call typehdr_any "any struct^"
	']' => Reduce #3 typehdr call typehdr_any "any struct^"
	'&' => Reduce #3 typehdr call typehdr_any "any struct^"
	'{' => Reduce #3 typehdr call typehdr_any "any struct^"
	':' => Reduce #3 typehdr call typehdr_any "any struct^"
[XX]
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"destructor" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto XX
[XX]
	';' => Reduce #3 typedefinition call typedef
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'[' => Shift goto XX
[XX]
	'[' => Shift goto XX
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
	"operator" => Shift goto XX
	'}' => Reduce #0 ininterf_definitionlist
[XX]
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 namespace_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"namespace" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #1 statement call definition 1
	BOOLEAN => Reduce #1 statement call definition 1
	IDENT => Reduce #1 statement call definition 1
	DQSTRING => Reduce #1 statement call definition 1
	SQSTRING => Reduce #1 statement call definition 1
	UINTEGER => Reduce #1 statement call definition 1
	FLOAT => Reduce #1 statement call definition 1
	"function" => Reduce #1 statement call definition 1
	'(' => Reduce #1 statement call definition 1
	"procedure" => Reduce #1 statement call definition 1
	"class" => Reduce #1 statement call definition 1
	"struct" => Reduce #1 statement call definition 1
	'&' => Reduce #1 statement call definition 1
	"typedef" => Reduce #1 statement call definition 1
	'{' => Reduce #1 statement call definition 1
	'}' => Reduce #1 statement call definition 1
	"generic" => Reduce #1 statement call definition 1
	"private" => Reduce #1 statement call definition 1
	"public" => Reduce #1 statement call definition 1
	'+' => Reduce #1 statement call definition 1
	'-' => Reduce #1 statement call definition 1
	'*' => Reduce #1 statement call definition 1
	'~' => Reduce #1 statement call definition 1
	'!' => Reduce #1 statement call definition 1
	"lambda" => Reduce #1 statement call definition 1
	"try" => Reduce #1 statement call definition 1
	"var" => Reduce #1 statement call definition 1
	"return" => Reduce #1 statement call definition 1
	"throw" => Reduce #1 statement call definition 1
	"delete" => Reduce #1 statement call definition 1
	"if" => Reduce #1 statement call definition 1
	"while" => Reduce #1 statement call definition 1
	"with" => Reduce #1 statement call definition 1
	"new" => Reduce #1 statement call definition 1
	"cast" => Reduce #1 statement call definition 1
	"null" => Reduce #1 statement call definition 1
[XX]
	$ => Reduce #1 statement call definition 1
	BOOLEAN => Reduce #1 statement call definition 1
	IDENT => Reduce #1 statement call definition 1
	DQSTRING => Reduce #1 statement call definition 1
	SQSTRING => Reduce #1 statement call definition 1
	UINTEGER => Reduce #1 statement call definition 1
	FLOAT => Reduce #1 statement call definition 1
	"function" => Reduce #1 statement call definition 1
	'(' => Reduce #1 statement call definition 1
	"procedure" => Reduce #1 statement call definition 1
	"class" => Reduce #1 statement call definition 1
	"struct" => Reduce #1 statement call definition 1
	'&' => Reduce #1 statement call definition 1
	"typedef" => Reduce #1 statement call definition 1
	'{' => Reduce #1 statement call definition 1
	'}' => Reduce #1 statement call definition 1
	"generic" => Reduce #1 statement call definition 1
	"private" => Reduce #1 statement call definition 1
	"public" => Reduce #1 statement call definition 1
	'+' => Reduce #1 statement call definition 1
	'-' => Reduce #1 statement call definition 1
	'*' => Reduce #1 statement call definition 1
	'~' => Reduce #1 statement call definition 1
	'!' => Reduce #1 statement call definition 1
	"lambda" => Reduce #1 statement call definition 1
	"try" => Reduce #1 statement call definition 1
	"var" => Reduce #1 statement call definition 1
	"return" => Reduce #1 statement call definition 1
	"throw" => Reduce #1 statement call definition 1
	"delete" => Reduce #1 statement call definition 1
	"if" => Reduce #1 statement call definition 1
	"while" => Reduce #1 statement call definition 1
	"with" => Reduce #1 statement call definition 1
	"new" => Reduce #1 statement call definition 1
	"cast" => Reduce #1 statement call definition 1
	"null" => Reduce #1 statement call definition 1
[XX]
	$ => Reduce #1 statement call definition 1
	BOOLEAN => Reduce #1 statement call definition 1
	IDENT => Reduce #1 statement call definition 1
	DQSTRING => Reduce #1 statement call definition 1
	SQSTRING => Reduce #1 statement call definition 1
	UINTEGER => Reduce #1 statement call definition 1
	FLOAT => Reduce #1 statement call definition 1
	"function" => Reduce #1 statement call definition 1
	'(' => Reduce #1 statement call definition 1
	"procedure" => Reduce #1 statement call definition 1
	"class" => Reduce #1 statement call definition 1
	"struct" => Reduce #1 statement call definition 1
	'&' => Reduce #1 statement call definition 1
	"typedef" => Reduce #1 statement call definition 1
	'{' => Reduce #1 statement call definition 1
	'}' => Reduce #1 statement call definition 1
	"generic" => Reduce #1 statement call definition 1
	"private" => Reduce #1 statement call definition 1
	"public" => Reduce #1 statement call definition 1
	'+' => Reduce #1 statement call definition 1
	'-' => Reduce #1 statement call definition 1
	'*' => Reduce #1 statement call definition 1
	'~' => Reduce #1 statement call definition 1
	'!' => Reduce #1 statement call definition 1
	"lambda" => Reduce #1 statement call definition 1
	"try" => Reduce #1 statement call definition 1
	"var" => Reduce #1 statement call definition 1
	"return" => Reduce #1 statement call definition 1
	"throw" => Reduce #1 statement call definition 1
	"delete" => Reduce #1 statement call definition 1
	"if" => Reduce #1 statement call definition 1
	"while" => Reduce #1 statement call definition 1
	"with" => Reduce #1 statement call definition 1
	"new" => Reduce #1 statement call definition 1
	"cast" => Reduce #1 statement call definition 1
	"null" => Reduce #1 statement call definition 1
[XX]
	'(' => Reduce #1 expression
	')' => Reduce #1 expression
	';' => Reduce #1 expression
	',' => Reduce #1 expression
	'^' => Reduce #1 expression
	'[' => Reduce #1 expression
	']' => Reduce #1 expression
	'&' => Reduce #1 expression
	'}' => Reduce #1 expression
	"->" => Reduce #1 expression
	'=' => Reduce #1 expression
	'+' => Reduce #1 expression
	'-' => Reduce #1 expression
	'*' => Reduce #1 expression
	'/' => Reduce #1 expression
	'%' => Reduce #1 expression
	"&&" => Reduce #1 expression
	"||" => Reduce #1 expression
	'|' => Reduce #1 expression
	"<<" => Reduce #1 expression
	">>" => Reduce #1 expression
	"==" => Reduce #1 expression
	"!=" => Reduce #1 expression
	">=" => Reduce #1 expression
	"<=" => Reduce #1 expression
	'>' => Reduce #1 expression
	'<' => Reduce #1 expression
	"+=" => Reduce #1 expression
	"-=" => Reduce #1 expression
	"*=" => Reduce #1 expression
	"/=" => Reduce #1 expression
	"^=" => Reduce #1 expression
	"%=" => Reduce #1 expression
	"&&=" => Reduce #1 expression
	"||=" => Reduce #1 expression
	"&=" => Reduce #1 expression
	"|=" => Reduce #1 expression
	"<<=" => Reduce #1 expression
	">>=" => Reduce #1 expression
	'.' => Reduce #1 expression
[XX]
	$ => Reduce #1 statement
	BOOLEAN => Reduce #1 statement
	IDENT => Reduce #1 statement
	DQSTRING => Reduce #1 statement
	SQSTRING => Reduce #1 statement
	UINTEGER => Reduce #1 statement
	FLOAT => Reduce #1 statement
	"function" => Reduce #1 statement
	'(' => Reduce #1 statement
	"procedure" => Reduce #1 statement
	"class" => Reduce #1 statement
	"struct" => Reduce #1 statement
	'&' => Reduce #1 statement
	"typedef" => Reduce #1 statement
	'{' => Reduce #1 statement
	'}' => Reduce #1 statement
	"generic" => Reduce #1 statement
	"private" => Reduce #1 statement
	"public" => Reduce #1 statement
	'+' => Reduce #1 statement
	'-' => Reduce #1 statement
	'*' => Reduce #1 statement
	'~' => Reduce #1 statement
	'!' => Reduce #1 statement
	"lambda" => Reduce #1 statement
	"try" => Reduce #1 statement
	"var" => Reduce #1 statement
	"return" => Reduce #1 statement
	"throw" => Reduce #1 statement
	"delete" => Reduce #1 statement
	"if" => Reduce #1 statement
	"while" => Reduce #1 statement
	"with" => Reduce #1 statement
	"new" => Reduce #1 statement
	"cast" => Reduce #1 statement
	"null" => Reduce #1 statement
[XX]
	'}' => Shift goto XX
[XX]
	"catch" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	'(' => Shift goto XX
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	'&' => Shift goto XX
	"typedef" => Shift goto XX
	'{' => Shift goto XX
	'}' => Reduce #0 statementlist
	"generic" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"try" => Shift goto XX
	"var" => Shift goto XX
	"return" => Shift goto XX
	"throw" => Shift goto XX
	"delete" => Shift goto XX
	"if" => Shift goto XX
	"while" => Shift goto XX
	"with" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Reduce #1 expression
	')' => Reduce #1 expression
	';' => Reduce #1 expression
	',' => Reduce #1 expression
	'^' => Reduce #1 expression
	'[' => Reduce #1 expression
	']' => Reduce #1 expression
	'&' => Reduce #1 expression
	'}' => Reduce #1 expression
	"->" => Reduce #1 expression
	'=' => Reduce #1 expression
	'+' => Reduce #1 expression
	'-' => Reduce #1 expression
	'*' => Reduce #1 expression
	'/' => Reduce #1 expression
	'%' => Reduce #1 expression
	"&&" => Reduce #1 expression
	"||" => Reduce #1 expression
	'|' => Reduce #1 expression
	"<<" => Reduce #1 expression
	">>" => Reduce #1 expression
	"==" => Reduce #1 expression
	"!=" => Reduce #1 expression
	">=" => Reduce #1 expression
	"<=" => Reduce #1 expression
	'>' => Reduce #1 expression
	'<' => Reduce #1 expression
	"+=" => Reduce #1 expression
	"-=" => Reduce #1 expression
	"*=" => Reduce #1 expression
	"/=" => Reduce #1 expression
	"^=" => Reduce #1 expression
	"%=" => Reduce #1 expression
	"&&=" => Reduce #1 expression
	"||=" => Reduce #1 expression
	"&=" => Reduce #1 expression
	"|=" => Reduce #1 expression
	"<<=" => Reduce #1 expression
	">>=" => Reduce #1 expression
	'.' => Reduce #1 expression
[XX]
	'(' => Reduce #1 expression call constant "constexpr bool"
	')' => Reduce #1 expression call constant "constexpr bool"
	';' => Reduce #1 expression call constant "constexpr bool"
	',' => Reduce #1 expression call constant "constexpr bool"
	'^' => Reduce #1 expression call constant "constexpr bool"
	'[' => Reduce #1 expression call constant "constexpr bool"
	']' => Reduce #1 expression call constant "constexpr bool"
	'&' => Reduce #1 expression call constant "constexpr bool"
	'}' => Reduce #1 expression call constant "constexpr bool"
	"->" => Reduce #1 expression call constant "constexpr bool"
	'=' => Reduce #1 expression call constant "constexpr bool"
	'+' => Reduce #1 expression call constant "constexpr bool"
	'-' => Reduce #1 expression call constant "constexpr bool"
	'*' => Reduce #1 expression call constant "constexpr bool"
	'/' => Reduce #1 expression call constant "constexpr bool"
	'%' => Reduce #1 expression call constant "constexpr bool"
	"&&" => Reduce #1 expression call constant "constexpr bool"
	"||" => Reduce #1 expression call constant "constexpr bool"
	'|' => Reduce #1 expression call constant "constexpr bool"
	"<<" => Reduce #1 expression call constant "constexpr bool"
	">>" => Reduce #1 expression call constant "constexpr bool"
	"==" => Reduce #1 expression call constant "constexpr bool"
	"!=" => Reduce #1 expression call constant "constexpr bool"
	">=" => Reduce #1 expression call constant "constexpr bool"
	"<=" => Reduce #1 expression call constant "constexpr bool"
	'>' => Reduce #1 expression call constant "constexpr bool"
	'<' => Reduce #1 expression call constant "constexpr bool"
	"+=" => Reduce #1 expression call constant "constexpr bool"
	"-=" => Reduce #1 expression call constant "constexpr bool"
	"*=" => Reduce #1 expression call constant "constexpr bool"
	"/=" => Reduce #1 expression call constant "constexpr bool"
	"^=" => Reduce #1 expression call constant "constexpr bool"
	"%=" => Reduce #1 expression call constant "constexpr bool"
	"&&=" => Reduce #1 expression call constant "constexpr bool"
	"||=" => Reduce #1 expression call constant "constexpr bool"
	"&=" => Reduce #1 expression call constant "constexpr bool"
	"|=" => Reduce #1 expression call constant "constexpr bool"
	"<<=" => Reduce #1 expression call constant "constexpr bool"
	">>=" => Reduce #1 expression call constant "constexpr bool"
	'.' => Reduce #1 expression call constant "constexpr bool"
[XX]
	'(' => Reduce #1 expression call variable
	')' => Reduce #1 expression call variable
	';' => Reduce #1 expression call variable
	',' => Reduce #1 expression call variable
	'^' => Reduce #1 expression call variable
	'[' => Reduce #1 expression call variable
	']' => Reduce #1 expression call variable
	'&' => Reduce #1 expression call variable
	'}' => Reduce #1 expression call variable
	"->" => Reduce #1 expression call variable
	'=' => Reduce #1 expression call variable
	'+' => Reduce #1 expression call variable
	'-' => Reduce #1 expression call variable
	'*' => Reduce #1 expression call variable
	'/' => Reduce #1 expression call variable
	'%' => Reduce #1 expression call variable
	"&&" => Reduce #1 expression call variable
	"||" => Reduce #1 expression call variable
	'|' => Reduce #1 expression call variable
	"<<" => Reduce #1 expression call variable
	">>" => Reduce #1 expression call variable
	"==" => Reduce #1 expression call variable
	"!=" => Reduce #1 expression call variable
	">=" => Reduce #1 expression call variable
	"<=" => Reduce #1 expression call variable
	'>' => Reduce #1 expression call variable
	'<' => Reduce #1 expression call variable
	"+=" => Reduce #1 expression call variable
	"-=" => Reduce #1 expression call variable
	"*=" => Reduce #1 expression call variable
	"/=" => Reduce #1 expression call variable
	"^=" => Reduce #1 expression call variable
	"%=" => Reduce #1 expression call variable
	"&&=" => Reduce #1 expression call variable
	"||=" => Reduce #1 expression call variable
	"&=" => Reduce #1 expression call variable
	"|=" => Reduce #1 expression call variable
	"<<=" => Reduce #1 expression call variable
	">>=" => Reduce #1 expression call variable
	'.' => Reduce #1 expression call variable
[XX]
	'(' => Reduce #1 expression call string_constant
	')' => Reduce #1 expression call string_constant
	';' => Reduce #1 expression call string_constant
	',' => Reduce #1 expression call string_constant
	'^' => Reduce #1 expression call string_constant
	'[' => Reduce #1 expression call string_constant
	']' => Reduce #1 expression call string_constant
	'&' => Reduce #1 expression call string_constant
	'}' => Reduce #1 expression call string_constant
	"->" => Reduce #1 expression call string_constant
	'=' => Reduce #1 expression call string_constant
	'+' => Reduce #1 expression call string_constant
	'-' => Reduce #1 expression call string_constant
	'*' => Reduce #1 expression call string_constant
	'/' => Reduce #1 expression call string_constant
	'%' => Reduce #1 expression call string_constant
	"&&" => Reduce #1 expression call string_constant
	"||" => Reduce #1 expression call string_constant
	'|' => Reduce #1 expression call string_constant
	"<<" => Reduce #1 expression call string_constant
	">>" => Reduce #1 expression call string_constant
	"==" => Reduce #1 expression call string_constant
	"!=" => Reduce #1 expression call string_constant
	">=" => Reduce #1 expression call string_constant
	"<=" => Reduce #1 expression call string_constant
	'>' => Reduce #1 expression call string_constant
	'<' => Reduce #1 expression call string_constant
	"+=" => Reduce #1 expression call string_constant
	"-=" => Reduce #1 expression call string_constant
	"*=" => Reduce #1 expression call string_constant
	"/=" => Reduce #1 expression call string_constant
	"^=" => Reduce #1 expression call string_constant
	"%=" => Reduce #1 expression call string_constant
	"&&=" => Reduce #1 expression call string_constant
	"||=" => Reduce #1 expression call string_constant
	"&=" => Reduce #1 expression call string_constant
	"|=" => Reduce #1 expression call string_constant
	"<<=" => Reduce #1 expression call string_constant
	">>=" => Reduce #1 expression call string_constant
	'.' => Reduce #1 expression call string_constant
[XX]
	'(' => Reduce #1 expression call char_constant
	')' => Reduce #1 expression call char_constant
	';' => Reduce #1 expression call char_constant
	',' => Reduce #1 expression call char_constant
	'^' => Reduce #1 expression call char_constant
	'[' => Reduce #1 expression call char_constant
	']' => Reduce #1 expression call char_constant
	'&' => Reduce #1 expression call char_constant
	'}' => Reduce #1 expression call char_constant
	"->" => Reduce #1 expression call char_constant
	'=' => Reduce #1 expression call char_constant
	'+' => Reduce #1 expression call char_constant
	'-' => Reduce #1 expression call char_constant
	'*' => Reduce #1 expression call char_constant
	'/' => Reduce #1 expression call char_constant
	'%' => Reduce #1 expression call char_constant
	"&&" => Reduce #1 expression call char_constant
	"||" => Reduce #1 expression call char_constant
	'|' => Reduce #1 expression call char_constant
	"<<" => Reduce #1 expression call char_constant
	">>" => Reduce #1 expression call char_constant
	"==" => Reduce #1 expression call char_constant
	"!=" => Reduce #1 expression call char_constant
	">=" => Reduce #1 expression call char_constant
	"<=" => Reduce #1 expression call char_constant
	'>' => Reduce #1 expression call char_constant
	'<' => Reduce #1 expression call char_constant
	"+=" => Reduce #1 expression call char_constant
	"-=" => Reduce #1 expression call char_constant
	"*=" => Reduce #1 expression call char_constant
	"/=" => Reduce #1 expression call char_constant
	"^=" => Reduce #1 expression call char_constant
	"%=" => Reduce #1 expression call char_constant
	"&&=" => Reduce #1 expression call char_constant
	"||=" => Reduce #1 expression call char_constant
	"&=" => Reduce #1 expression call char_constant
	"|=" => Reduce #1 expression call char_constant
	"<<=" => Reduce #1 expression call char_constant
	">>=" => Reduce #1 expression call char_constant
	'.' => Reduce #1 expression call char_constant
[XX]
	'(' => Reduce #1 expression call constant "constexpr uint"
	')' => Reduce #1 expression call constant "constexpr uint"
	';' => Reduce #1 expression call constant "constexpr uint"
	',' => Reduce #1 expression call constant "constexpr uint"
	'^' => Reduce #1 expression call constant "constexpr uint"
	'[' => Reduce #1 expression call constant "constexpr uint"
	']' => Reduce #1 expression call constant "constexpr uint"
	'&' => Reduce #1 expression call constant "constexpr uint"
	'}' => Reduce #1 expression call constant "constexpr uint"
	"->" => Reduce #1 expression call constant "constexpr uint"
	'=' => Reduce #1 expression call constant "constexpr uint"
	'+' => Reduce #1 expression call constant "constexpr uint"
	'-' => Reduce #1 expression call constant "constexpr uint"
	'*' => Reduce #1 expression call constant "constexpr uint"
	'/' => Reduce #1 expression call constant "constexpr uint"
	'%' => Reduce #1 expression call constant "constexpr uint"
	"&&" => Reduce #1 expression call constant "constexpr uint"
	"||" => Reduce #1 expression call constant "constexpr uint"
	'|' => Reduce #1 expression call constant "constexpr uint"
	"<<" => Reduce #1 expression call constant "constexpr uint"
	">>" => Reduce #1 expression call constant "constexpr uint"
	"==" => Reduce #1 expression call constant "constexpr uint"
	"!=" => Reduce #1 expression call constant "constexpr uint"
	">=" => Reduce #1 expression call constant "constexpr uint"
	"<=" => Reduce #1 expression call constant "constexpr uint"
	'>' => Reduce #1 expression call constant "constexpr uint"
	'<' => Reduce #1 expression call constant "constexpr uint"
	"+=" => Reduce #1 expression call constant "constexpr uint"
	"-=" => Reduce #1 expression call constant "constexpr uint"
	"*=" => Reduce #1 expression call constant "constexpr uint"
	"/=" => Reduce #1 expression call constant "constexpr uint"
	"^=" => Reduce #1 expression call constant "constexpr uint"
	"%=" => Reduce #1 expression call constant "constexpr uint"
	"&&=" => Reduce #1 expression call constant "constexpr uint"
	"||=" => Reduce #1 expression call constant "constexpr uint"
	"&=" => Reduce #1 expression call constant "constexpr uint"
	"|=" => Reduce #1 expression call constant "constexpr uint"
	"<<=" => Reduce #1 expression call constant "constexpr uint"
	">>=" => Reduce #1 expression call constant "constexpr uint"
	'.' => Reduce #1 expression call constant "constexpr uint"
[XX]
	'(' => Reduce #1 expression call constant "constexpr float"
	')' => Reduce #1 expression call constant "constexpr float"
	';' => Reduce #1 expression call constant "constexpr float"
	',' => Reduce #1 expression call constant "constexpr float"
	'^' => Reduce #1 expression call constant "constexpr float"
	'[' => Reduce #1 expression call constant "constexpr float"
	']' => Reduce #1 expression call constant "constexpr float"
	'&' => Reduce #1 expression call constant "constexpr float"
	'}' => Reduce #1 expression call constant "constexpr float"
	"->" => Reduce #1 expression call constant "constexpr float"
	'=' => Reduce #1 expression call constant "constexpr float"
	'+' => Reduce #1 expression call constant "constexpr float"
	'-' => Reduce #1 expression call constant "constexpr float"
	'*' => Reduce #1 expression call constant "constexpr float"
	'/' => Reduce #1 expression call constant "constexpr float"
	'%' => Reduce #1 expression call constant "constexpr float"
	"&&" => Reduce #1 expression call constant "constexpr float"
	"||" => Reduce #1 expression call constant "constexpr float"
	'|' => Reduce #1 expression call constant "constexpr float"
	"<<" => Reduce #1 expression call constant "constexpr float"
	">>" => Reduce #1 expression call constant "constexpr float"
	"==" => Reduce #1 expression call constant "constexpr float"
	"!=" => Reduce #1 expression call constant "constexpr float"
	">=" => Reduce #1 expression call constant "constexpr float"
	"<=" => Reduce #1 expression call constant "constexpr float"
	'>' => Reduce #1 expression call constant "constexpr float"
	'<' => Reduce #1 expression call constant "constexpr float"
	"+=" => Reduce #1 expression call constant "constexpr float"
	"-=" => Reduce #1 expression call constant "constexpr float"
	"*=" => Reduce #1 expression call constant "constexpr float"
	"/=" => Reduce #1 expression call constant "constexpr float"
	"^=" => Reduce #1 expression call constant "constexpr float"
	"%=" => Reduce #1 expression call constant "constexpr float"
	"&&=" => Reduce #1 expression call constant "constexpr float"
	"||=" => Reduce #1 expression call constant "constexpr float"
	"&=" => Reduce #1 expression call constant "constexpr float"
	"|=" => Reduce #1 expression call constant "constexpr float"
	"<<=" => Reduce #1 expression call constant "constexpr float"
	">>=" => Reduce #1 expression call constant "constexpr float"
	'.' => Reduce #1 expression call constant "constexpr float"
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	'(' => Shift goto XX
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	'&' => Shift goto XX
	"typedef" => Shift goto XX
	'{' => Shift goto XX
	'}' => Reduce #0 statementlist
	"generic" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"try" => Shift goto XX
	"var" => Shift goto XX
	"return" => Shift goto XX
	"throw" => Shift goto XX
	"delete" => Shift goto XX
	"if" => Shift goto XX
	"while" => Shift goto XX
	"with" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	';' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Reduce #1 expression call null
	')' => Reduce #1 expression call null
	';' => Reduce #1 expression call null
	',' => Reduce #1 expression call null
	'^' => Reduce #1 expression call null
	'[' => Reduce #1 expression call null
	']' => Reduce #1 expression call null
	'&' => Reduce #1 expression call null
	'}' => Reduce #1 expression call null
	"->" => Reduce #1 expression call null
	'=' => Reduce #1 expression call null
	'+' => Reduce #1 expression call null
	'-' => Reduce #1 expression call null
	'*' => Reduce #1 expression call null
	'/' => Reduce #1 expression call null
	'%' => Reduce #1 expression call null
	"&&" => Reduce #1 expression call null
	"||" => Reduce #1 expression call null
	'|' => Reduce #1 expression call null
	"<<" => Reduce #1 expression call null
	">>" => Reduce #1 expression call null
	"==" => Reduce #1 expression call null
	"!=" => Reduce #1 expression call null
	">=" => Reduce #1 expression call null
	"<=" => Reduce #1 expression call null
	'>' => Reduce #1 expression call null
	'<' => Reduce #1 expression call null
	"+=" => Reduce #1 expression call null
	"-=" => Reduce #1 expression call null
	"*=" => Reduce #1 expression call null
	"/=" => Reduce #1 expression call null
	"^=" => Reduce #1 expression call null
	"%=" => Reduce #1 expression call null
	"&&=" => Reduce #1 expression call null
	"||=" => Reduce #1 expression call null
	"&=" => Reduce #1 expression call null
	"|=" => Reduce #1 expression call null
	"<<=" => Reduce #1 expression call null
	">>=" => Reduce #1 expression call null
	'.' => Reduce #1 expression call null
[XX]
	IDENT => Shift goto XX
	UINTEGER => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
	"lambda" => Shift goto XX
[XX]
	IDENT => Reduce #4 typegen call typegen_generic
	'(' => Reduce #4 typegen call typegen_generic
	')' => Reduce #4 typegen call typegen_generic
	"..." => Reduce #4 typegen call typegen_generic
	',' => Reduce #4 typegen call typegen_generic
	"const" => Reduce #4 typegen call typegen_generic
	'^' => Reduce #4 typegen call typegen_generic
	'[' => Reduce #4 typegen call typegen_generic
	']' => Reduce #4 typegen call typegen_generic
	'&' => Reduce #4 typegen call typegen_generic
	'{' => Reduce #4 typegen call typegen_generic
	':' => Reduce #4 typegen call typegen_generic
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 lambda_paramlist call lambda_paramdeflist
[XX]
	'(' => Shift goto XX
	';' => Reduce #4 variabledefinition call vardef
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'}' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	$ => Reduce #4 functiondefinition call procdef
	BOOLEAN => Reduce #4 functiondefinition call procdef
	IDENT => Reduce #4 functiondefinition call procdef
	DQSTRING => Reduce #4 functiondefinition call procdef
	SQSTRING => Reduce #4 functiondefinition call procdef
	UINTEGER => Reduce #4 functiondefinition call procdef
	FLOAT => Reduce #4 functiondefinition call procdef
	"function" => Reduce #4 functiondefinition call procdef
	'(' => Reduce #4 functiondefinition call procdef
	"procedure" => Reduce #4 functiondefinition call procdef
	"operator" => Reduce #4 functiondefinition call procdef
	"const" => Reduce #4 functiondefinition call procdef
	"any" => Reduce #4 functiondefinition call procdef
	"class" => Reduce #4 functiondefinition call procdef
	"struct" => Reduce #4 functiondefinition call procdef
	'&' => Reduce #4 functiondefinition call procdef
	"typedef" => Reduce #4 functiondefinition call procdef
	'{' => Reduce #4 functiondefinition call procdef
	'}' => Reduce #4 functiondefinition call procdef
	"generic" => Reduce #4 functiondefinition call procdef
	"interface" => Reduce #4 functiondefinition call procdef
	"namespace" => Reduce #4 functiondefinition call procdef
	"private" => Reduce #4 functiondefinition call procdef
	"public" => Reduce #4 functiondefinition call procdef
	"constructor" => Reduce #4 functiondefinition call procdef
	"destructor" => Reduce #4 functiondefinition call procdef
	'+' => Reduce #4 functiondefinition call procdef
	'-' => Reduce #4 functiondefinition call procdef
	'*' => Reduce #4 functiondefinition call procdef
	'~' => Reduce #4 functiondefinition call procdef
	'!' => Reduce #4 functiondefinition call procdef
	"lambda" => Reduce #4 functiondefinition call procdef
	"main" => Reduce #4 functiondefinition call procdef
	"try" => Reduce #4 functiondefinition call procdef
	"var" => Reduce #4 functiondefinition call procdef
	"return" => Reduce #4 functiondefinition call procdef
	"throw" => Reduce #4 functiondefinition call procdef
	"delete" => Reduce #4 functiondefinition call procdef
	"if" => Reduce #4 functiondefinition call procdef
	"while" => Reduce #4 functiondefinition call procdef
	"with" => Reduce #4 functiondefinition call procdef
	"new" => Reduce #4 functiondefinition call procdef
	"cast" => Reduce #4 functiondefinition call procdef
	"null" => Reduce #4 functiondefinition call procdef
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 impl_paramlist call paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Reduce #4 typehdr call typehdr_any "any const class^"
	'(' => Reduce #4 typehdr call typehdr_any "any const class^"
	')' => Reduce #4 typehdr call typehdr_any "any const class^"
	"..." => Reduce #4 typehdr call typehdr_any "any const class^"
	',' => Reduce #4 typehdr call typehdr_any "any const class^"
	"const" => Reduce #4 typehdr call typehdr_any "any const class^"
	'^' => Reduce #4 typehdr call typehdr_any "any const class^"
	'[' => Reduce #4 typehdr call typehdr_any "any const class^"
	']' => Reduce #4 typehdr call typehdr_any "any const class^"
	'&' => Reduce #4 typehdr call typehdr_any "any const class^"
	'{' => Reduce #4 typehdr call typehdr_any "any const class^"
	':' => Reduce #4 typehdr call typehdr_any "any const class^"
[XX]
	IDENT => Reduce #4 typehdr call typehdr_any "any const struct^"
	'(' => Reduce #4 typehdr call typehdr_any "any const struct^"
	')' => Reduce #4 typehdr call typehdr_any "any const struct^"
	"..." => Reduce #4 typehdr call typehdr_any "any const struct^"
	',' => Reduce #4 typehdr call typehdr_any "any const struct^"
	"const" => Reduce #4 typehdr call typehdr_any "any const struct^"
	'^' => Reduce #4 typehdr call typehdr_any "any const struct^"
	'[' => Reduce #4 typehdr call typehdr_any "any const struct^"
	']' => Reduce #4 typehdr call typehdr_any "any const struct^"
	'&' => Reduce #4 typehdr call typehdr_any "any const struct^"
	'{' => Reduce #4 typehdr call typehdr_any "any const struct^"
	':' => Reduce #4 typehdr call typehdr_any "any const struct^"
[XX]
	'}' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"destructor" => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[XX]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[XX]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
	"operator" => Shift goto XX
	"constructor" => Shift goto XX
[XX]
	$ => Reduce #1 inclass_definition call definition_2pass 4
	IDENT => Reduce #1 inclass_definition call definition_2pass 4
	"function" => Reduce #1 inclass_definition call definition_2pass 4
	"procedure" => Reduce #1 inclass_definition call definition_2pass 4
	"operator" => Reduce #1 inclass_definition call definition_2pass 4
	"const" => Reduce #1 inclass_definition call definition_2pass 4
	"any" => Reduce #1 inclass_definition call definition_2pass 4
	"class" => Reduce #1 inclass_definition call definition_2pass 4
	"struct" => Reduce #1 inclass_definition call definition_2pass 4
	"typedef" => Reduce #1 inclass_definition call definition_2pass 4
	'}' => Reduce #1 inclass_definition call definition_2pass 4
	"generic" => Reduce #1 inclass_definition call definition_2pass 4
	"interface" => Reduce #1 inclass_definition call definition_2pass 4
	"private" => Reduce #1 inclass_definition call definition_2pass 4
	"public" => Reduce #1 inclass_definition call definition_2pass 4
	"constructor" => Reduce #1 inclass_definition call definition_2pass 4
	"destructor" => Reduce #1 inclass_definition call definition_2pass 4
[XX]
	$ => Reduce #1 inclass_definition call definition_2pass 4
	IDENT => Reduce #1 inclass_definition call definition_2pass 4
	"function" => Reduce #1 inclass_definition call definition_2pass 4
	"procedure" => Reduce #1 inclass_definition call definition_2pass 4
	"operator" => Reduce #1 inclass_definition call definition_2pass 4
	"const" => Reduce #1 inclass_definition call definition_2pass 4
	"any" => Reduce #1 inclass_definition call definition_2pass 4
	"class" => Reduce #1 inclass_definition call definition_2pass 4
	"struct" => Reduce #1 inclass_definition call definition_2pass 4
	"typedef" => Reduce #1 inclass_definition call definition_2pass 4
	'}' => Reduce #1 inclass_definition call definition_2pass 4
	"generic" => Reduce #1 inclass_definition call definition_2pass 4
	"interface" => Reduce #1 inclass_definition call definition_2pass 4
	"private" => Reduce #1 inclass_definition call definition_2pass 4
	"public" => Reduce #1 inclass_definition call definition_2pass 4
	"constructor" => Reduce #1 inclass_definition call definition_2pass 4
	"destructor" => Reduce #1 inclass_definition call definition_2pass 4
[XX]
	$ => Reduce #1 inclass_definition call definition_2pass 4
	IDENT => Reduce #1 inclass_definition call definition_2pass 4
	"function" => Reduce #1 inclass_definition call definition_2pass 4
	"procedure" => Reduce #1 inclass_definition call definition_2pass 4
	"operator" => Reduce #1 inclass_definition call definition_2pass 4
	"const" => Reduce #1 inclass_definition call definition_2pass 4
	"any" => Reduce #1 inclass_definition call definition_2pass 4
	"class" => Reduce #1 inclass_definition call definition_2pass 4
	"struct" => Reduce #1 inclass_definition call definition_2pass 4
	"typedef" => Reduce #1 inclass_definition call definition_2pass 4
	'}' => Reduce #1 inclass_definition call definition_2pass 4
	"generic" => Reduce #1 inclass_definition call definition_2pass 4
	"interface" => Reduce #1 inclass_definition call definition_2pass 4
	"private" => Reduce #1 inclass_definition call definition_2pass 4
	"public" => Reduce #1 inclass_definition call definition_2pass 4
	"constructor" => Reduce #1 inclass_definition call definition_2pass 4
	"destructor" => Reduce #1 inclass_definition call definition_2pass 4
[XX]
	';' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	',' => Shift goto XX
	"const" => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'{' => Reduce #1 inheritlist call inheritdef 1
[XX]
	'{' => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #1 instruct_definition call definition 1
	IDENT => Reduce #1 instruct_definition call definition 1
	"const" => Reduce #1 instruct_definition call definition 1
	"any" => Reduce #1 instruct_definition call definition 1
	"struct" => Reduce #1 instruct_definition call definition 1
	"typedef" => Reduce #1 instruct_definition call definition 1
	'}' => Reduce #1 instruct_definition call definition 1
	"generic" => Reduce #1 instruct_definition call definition 1
[XX]
	';' => Shift goto XX
[XX]
	"struct" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'[' => Shift goto XX
[XX]
	'[' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	"function" => Shift goto XX
	"procedure" => Shift goto XX
	"operator" => Shift goto XX
	'}' => Reduce #0 ininterf_definitionlist
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'(' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 namespace_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"namespace" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[XX]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[XX]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[XX]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[XX]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"..." => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	$ => Reduce #2 statement call definition 1
	BOOLEAN => Reduce #2 statement call definition 1
	IDENT => Reduce #2 statement call definition 1
	DQSTRING => Reduce #2 statement call definition 1
	SQSTRING => Reduce #2 statement call definition 1
	UINTEGER => Reduce #2 statement call definition 1
	FLOAT => Reduce #2 statement call definition 1
	"function" => Reduce #2 statement call definition 1
	'(' => Reduce #2 statement call definition 1
	"procedure" => Reduce #2 statement call definition 1
	"class" => Reduce #2 statement call definition 1
	"struct" => Reduce #2 statement call definition 1
	'&' => Reduce #2 statement call definition 1
	"typedef" => Reduce #2 statement call definition 1
	'{' => Reduce #2 statement call definition 1
	'}' => Reduce #2 statement call definition 1
	"generic" => Reduce #2 statement call definition 1
	"private" => Reduce #2 statement call definition 1
	"public" => Reduce #2 statement call definition 1
	'+' => Reduce #2 statement call definition 1
	'-' => Reduce #2 statement call definition 1
	'*' => Reduce #2 statement call definition 1
	'~' => Reduce #2 statement call definition 1
	'!' => Reduce #2 statement call definition 1
	"lambda" => Reduce #2 statement call definition 1
	"try" => Reduce #2 statement call definition 1
	"var" => Reduce #2 statement call definition 1
	"return" => Reduce #2 statement call definition 1
	"throw" => Reduce #2 statement call definition 1
	"delete" => Reduce #2 statement call definition 1
	"if" => Reduce #2 statement call definition 1
	"while" => Reduce #2 statement call definition 1
	"with" => Reduce #2 statement call definition 1
	"new" => Reduce #2 statement call definition 1
	"cast" => Reduce #2 statement call definition 1
	"null" => Reduce #2 statement call definition 1
[XX]
	$ => Reduce #3 codeblock call codeblock
	BOOLEAN => Reduce #3 codeblock call codeblock
	IDENT => Reduce #3 codeblock call codeblock
	DQSTRING => Reduce #3 codeblock call codeblock
	SQSTRING => Reduce #3 codeblock call codeblock
	UINTEGER => Reduce #3 codeblock call codeblock
	FLOAT => Reduce #3 codeblock call codeblock
	"function" => Reduce #3 codeblock call codeblock
	'(' => Reduce #3 codeblock call codeblock
	')' => Reduce #3 codeblock call codeblock
	';' => Reduce #3 codeblock call codeblock
	"procedure" => Reduce #3 codeblock call codeblock
	',' => Reduce #3 codeblock call codeblock
	"operator" => Reduce #3 codeblock call codeblock
	"const" => Reduce #3 codeblock call codeblock
	"any" => Reduce #3 codeblock call codeblock
	"class" => Reduce #3 codeblock call codeblock
	'^' => Reduce #3 codeblock call codeblock
	"struct" => Reduce #3 codeblock call codeblock
	'[' => Reduce #3 codeblock call codeblock
	']' => Reduce #3 codeblock call codeblock
	'&' => Reduce #3 codeblock call codeblock
	"typedef" => Reduce #3 codeblock call codeblock
	'{' => Reduce #3 codeblock call codeblock
	'}' => Reduce #3 codeblock call codeblock
	"generic" => Reduce #3 codeblock call codeblock
	"interface" => Reduce #3 codeblock call codeblock
	"private" => Reduce #3 codeblock call codeblock
	"public" => Reduce #3 codeblock call codeblock
	"constructor" => Reduce #3 codeblock call codeblock
	"destructor" => Reduce #3 codeblock call codeblock
	"->" => Reduce #3 codeblock call codeblock
	'=' => Reduce #3 codeblock call codeblock
	'+' => Reduce #3 codeblock call codeblock
	'-' => Reduce #3 codeblock call codeblock
	'*' => Reduce #3 codeblock call codeblock
	'/' => Reduce #3 codeblock call codeblock
	'%' => Reduce #3 codeblock call codeblock
	"&&" => Reduce #3 codeblock call codeblock
	"||" => Reduce #3 codeblock call codeblock
	'|' => Reduce #3 codeblock call codeblock
	"<<" => Reduce #3 codeblock call codeblock
	">>" => Reduce #3 codeblock call codeblock
	'~' => Reduce #3 codeblock call codeblock
	'!' => Reduce #3 codeblock call codeblock
	"==" => Reduce #3 codeblock call codeblock
	"!=" => Reduce #3 codeblock call codeblock
	">=" => Reduce #3 codeblock call codeblock
	"<=" => Reduce #3 codeblock call codeblock
	'>' => Reduce #3 codeblock call codeblock
	'<' => Reduce #3 codeblock call codeblock
	"lambda" => Reduce #3 codeblock call codeblock
	"elseif" => Reduce #3 codeblock call codeblock
	"else" => Reduce #3 codeblock call codeblock
	"catch" => Reduce #3 codeblock call codeblock
	"try" => Reduce #3 codeblock call codeblock
	"var" => Reduce #3 codeblock call codeblock
	"return" => Reduce #3 codeblock call codeblock
	"throw" => Reduce #3 codeblock call codeblock
	"delete" => Reduce #3 codeblock call codeblock
	"if" => Reduce #3 codeblock call codeblock
	"while" => Reduce #3 codeblock call codeblock
	"with" => Reduce #3 codeblock call codeblock
	"new" => Reduce #3 codeblock call codeblock
	"cast" => Reduce #3 codeblock call codeblock
	"null" => Reduce #3 codeblock call codeblock
	"+=" => Reduce #3 codeblock call codeblock
	"-=" => Reduce #3 codeblock call codeblock
	"*=" => Reduce #3 codeblock call codeblock
	"/=" => Reduce #3 codeblock call codeblock
	"^=" => Reduce #3 codeblock call codeblock
	"%=" => Reduce #3 codeblock call codeblock
	"&&=" => Reduce #3 codeblock call codeblock
	"||=" => Reduce #3 codeblock call codeblock
	"&=" => Reduce #3 codeblock call codeblock
	"|=" => Reduce #3 codeblock call codeblock
	"<<=" => Reduce #3 codeblock call codeblock
	">>=" => Reduce #3 codeblock call codeblock
	'.' => Reduce #3 codeblock call codeblock
[XX]
	$ => Reduce #2 statement call trycatch
	BOOLEAN => Reduce #2 statement call trycatch
	IDENT => Reduce #2 statement call trycatch
	DQSTRING => Reduce #2 statement call trycatch
	SQSTRING => Reduce #2 statement call trycatch
	UINTEGER => Reduce #2 statement call trycatch
	FLOAT => Reduce #2 statement call trycatch
	"function" => Reduce #2 statement call trycatch
	'(' => Reduce #2 statement call trycatch
	"procedure" => Reduce #2 statement call trycatch
	"class" => Reduce #2 statement call trycatch
	"struct" => Reduce #2 statement call trycatch
	'&' => Reduce #2 statement call trycatch
	"typedef" => Reduce #2 statement call trycatch
	'{' => Reduce #2 statement call trycatch
	'}' => Reduce #2 statement call trycatch
	"generic" => Reduce #2 statement call trycatch
	"private" => Reduce #2 statement call trycatch
	"public" => Reduce #2 statement call trycatch
	'+' => Reduce #2 statement call trycatch
	'-' => Reduce #2 statement call trycatch
	'*' => Reduce #2 statement call trycatch
	'~' => Reduce #2 statement call trycatch
	'!' => Reduce #2 statement call trycatch
	"lambda" => Reduce #2 statement call trycatch
	"try" => Reduce #2 statement call trycatch
	"var" => Reduce #2 statement call trycatch
	"return" => Reduce #2 statement call trycatch
	"throw" => Reduce #2 statement call trycatch
	"delete" => Reduce #2 statement call trycatch
	"if" => Reduce #2 statement call trycatch
	"while" => Reduce #2 statement call trycatch
	"with" => Reduce #2 statement call trycatch
	"new" => Reduce #2 statement call trycatch
	"cast" => Reduce #2 statement call trycatch
	"null" => Reduce #2 statement call trycatch
[XX]
	IDENT => Shift goto XX
[XX]
	'}' => Reduce #2 statementlist
[XX]
	IDENT => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	')' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	$ => Reduce #2 statement call free_expression
	BOOLEAN => Reduce #2 statement call free_expression
	IDENT => Reduce #2 statement call free_expression
	DQSTRING => Reduce #2 statement call free_expression
	SQSTRING => Reduce #2 statement call free_expression
	UINTEGER => Reduce #2 statement call free_expression
	FLOAT => Reduce #2 statement call free_expression
	"function" => Reduce #2 statement call free_expression
	'(' => Reduce #2 statement call free_expression
	"procedure" => Reduce #2 statement call free_expression
	"class" => Reduce #2 statement call free_expression
	"struct" => Reduce #2 statement call free_expression
	'&' => Reduce #2 statement call free_expression
	"typedef" => Reduce #2 statement call free_expression
	'{' => Reduce #2 statement call free_expression
	'}' => Reduce #2 statement call free_expression
	"generic" => Reduce #2 statement call free_expression
	"private" => Reduce #2 statement call free_expression
	"public" => Reduce #2 statement call free_expression
	'+' => Reduce #2 statement call free_expression
	'-' => Reduce #2 statement call free_expression
	'*' => Reduce #2 statement call free_expression
	'~' => Reduce #2 statement call free_expression
	'!' => Reduce #2 statement call free_expression
	"lambda" => Reduce #2 statement call free_expression
	"try" => Reduce #2 statement call free_expression
	"var" => Reduce #2 statement call free_expression
	"return" => Reduce #2 statement call free_expression
	"throw" => Reduce #2 statement call free_expression
	"delete" => Reduce #2 statement call free_expression
	"if" => Reduce #2 statement call free_expression
	"while" => Reduce #2 statement call free_expression
	"with" => Reduce #2 statement call free_expression
	"new" => Reduce #2 statement call free_expression
	"cast" => Reduce #2 statement call free_expression
	"null" => Reduce #2 statement call free_expression
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	IDENT => Reduce #1 indirection call count
	"->" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call operator_address "&"
	';' => Reduce #2 expression call operator_address "&"
	',' => Reduce #2 expression call operator_address "&"
	'^' => Reduce #2 expression call operator_address "&"
	'[' => Shift goto XX
	']' => Reduce #2 expression call operator_address "&"
	'&' => Reduce #2 expression call operator_address "&"
	'}' => Reduce #2 expression call operator_address "&"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call operator_address "&"
	'+' => Reduce #2 expression call operator_address "&"
	'-' => Reduce #2 expression call operator_address "&"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #2 expression call operator_address "&"
	"||" => Reduce #2 expression call operator_address "&"
	'|' => Reduce #2 expression call operator_address "&"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #2 expression call operator_address "&"
	"!=" => Reduce #2 expression call operator_address "&"
	">=" => Reduce #2 expression call operator_address "&"
	"<=" => Reduce #2 expression call operator_address "&"
	'>' => Reduce #2 expression call operator_address "&"
	'<' => Reduce #2 expression call operator_address "&"
	"+=" => Reduce #2 expression call operator_address "&"
	"-=" => Reduce #2 expression call operator_address "&"
	"*=" => Reduce #2 expression call operator_address "&"
	"/=" => Reduce #2 expression call operator_address "&"
	"^=" => Reduce #2 expression call operator_address "&"
	"%=" => Reduce #2 expression call operator_address "&"
	"&&=" => Reduce #2 expression call operator_address "&"
	"||=" => Reduce #2 expression call operator_address "&"
	"&=" => Reduce #2 expression call operator_address "&"
	"|=" => Reduce #2 expression call operator_address "&"
	"<<=" => Reduce #2 expression call operator_address "&"
	">>=" => Reduce #2 expression call operator_address "&"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	',' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	'}' => Reduce #1 expressionlist
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	'(' => Reduce #2 expression call structure
	')' => Reduce #2 expression call structure
	';' => Reduce #2 expression call structure
	',' => Reduce #2 expression call structure
	'^' => Reduce #2 expression call structure
	'[' => Reduce #2 expression call structure
	']' => Reduce #2 expression call structure
	'&' => Reduce #2 expression call structure
	'}' => Reduce #2 expression call structure
	"->" => Reduce #2 expression call structure
	'=' => Reduce #2 expression call structure
	'+' => Reduce #2 expression call structure
	'-' => Reduce #2 expression call structure
	'*' => Reduce #2 expression call structure
	'/' => Reduce #2 expression call structure
	'%' => Reduce #2 expression call structure
	"&&" => Reduce #2 expression call structure
	"||" => Reduce #2 expression call structure
	'|' => Reduce #2 expression call structure
	"<<" => Reduce #2 expression call structure
	">>" => Reduce #2 expression call structure
	"==" => Reduce #2 expression call structure
	"!=" => Reduce #2 expression call structure
	">=" => Reduce #2 expression call structure
	"<=" => Reduce #2 expression call structure
	'>' => Reduce #2 expression call structure
	'<' => Reduce #2 expression call structure
	"+=" => Reduce #2 expression call structure
	"-=" => Reduce #2 expression call structure
	"*=" => Reduce #2 expression call structure
	"/=" => Reduce #2 expression call structure
	"^=" => Reduce #2 expression call structure
	"%=" => Reduce #2 expression call structure
	"&&=" => Reduce #2 expression call structure
	"||=" => Reduce #2 expression call structure
	"&=" => Reduce #2 expression call structure
	"|=" => Reduce #2 expression call structure
	"<<=" => Reduce #2 expression call structure
	">>=" => Reduce #2 expression call structure
	'.' => Reduce #2 expression call structure
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call unop "+"
	';' => Reduce #2 expression call unop "+"
	',' => Reduce #2 expression call unop "+"
	'^' => Reduce #2 expression call unop "+"
	'[' => Shift goto XX
	']' => Reduce #2 expression call unop "+"
	'&' => Reduce #2 expression call unop "+"
	'}' => Reduce #2 expression call unop "+"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call unop "+"
	'+' => Reduce #2 expression call unop "+"
	'-' => Reduce #2 expression call unop "+"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #2 expression call unop "+"
	"||" => Reduce #2 expression call unop "+"
	'|' => Reduce #2 expression call unop "+"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #2 expression call unop "+"
	"!=" => Reduce #2 expression call unop "+"
	">=" => Reduce #2 expression call unop "+"
	"<=" => Reduce #2 expression call unop "+"
	'>' => Reduce #2 expression call unop "+"
	'<' => Reduce #2 expression call unop "+"
	"+=" => Reduce #2 expression call unop "+"
	"-=" => Reduce #2 expression call unop "+"
	"*=" => Reduce #2 expression call unop "+"
	"/=" => Reduce #2 expression call unop "+"
	"^=" => Reduce #2 expression call unop "+"
	"%=" => Reduce #2 expression call unop "+"
	"&&=" => Reduce #2 expression call unop "+"
	"||=" => Reduce #2 expression call unop "+"
	"&=" => Reduce #2 expression call unop "+"
	"|=" => Reduce #2 expression call unop "+"
	"<<=" => Reduce #2 expression call unop "+"
	">>=" => Reduce #2 expression call unop "+"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call unop "-"
	';' => Reduce #2 expression call unop "-"
	',' => Reduce #2 expression call unop "-"
	'^' => Reduce #2 expression call unop "-"
	'[' => Shift goto XX
	']' => Reduce #2 expression call unop "-"
	'&' => Reduce #2 expression call unop "-"
	'}' => Reduce #2 expression call unop "-"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call unop "-"
	'+' => Reduce #2 expression call unop "-"
	'-' => Reduce #2 expression call unop "-"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #2 expression call unop "-"
	"||" => Reduce #2 expression call unop "-"
	'|' => Reduce #2 expression call unop "-"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #2 expression call unop "-"
	"!=" => Reduce #2 expression call unop "-"
	">=" => Reduce #2 expression call unop "-"
	"<=" => Reduce #2 expression call unop "-"
	'>' => Reduce #2 expression call unop "-"
	'<' => Reduce #2 expression call unop "-"
	"+=" => Reduce #2 expression call unop "-"
	"-=" => Reduce #2 expression call unop "-"
	"*=" => Reduce #2 expression call unop "-"
	"/=" => Reduce #2 expression call unop "-"
	"^=" => Reduce #2 expression call unop "-"
	"%=" => Reduce #2 expression call unop "-"
	"&&=" => Reduce #2 expression call unop "-"
	"||=" => Reduce #2 expression call unop "-"
	"&=" => Reduce #2 expression call unop "-"
	"|=" => Reduce #2 expression call unop "-"
	"<<=" => Reduce #2 expression call unop "-"
	">>=" => Reduce #2 expression call unop "-"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call unop "->"
	';' => Reduce #2 expression call unop "->"
	',' => Reduce #2 expression call unop "->"
	'^' => Reduce #2 expression call unop "->"
	'[' => Shift goto XX
	']' => Reduce #2 expression call unop "->"
	'&' => Reduce #2 expression call unop "->"
	'}' => Reduce #2 expression call unop "->"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call unop "->"
	'+' => Reduce #2 expression call unop "->"
	'-' => Reduce #2 expression call unop "->"
	'*' => Reduce #2 expression call unop "->"
	'/' => Reduce #2 expression call unop "->"
	'%' => Reduce #2 expression call unop "->"
	"&&" => Reduce #2 expression call unop "->"
	"||" => Reduce #2 expression call unop "->"
	'|' => Reduce #2 expression call unop "->"
	"<<" => Reduce #2 expression call unop "->"
	">>" => Reduce #2 expression call unop "->"
	"==" => Reduce #2 expression call unop "->"
	"!=" => Reduce #2 expression call unop "->"
	">=" => Reduce #2 expression call unop "->"
	"<=" => Reduce #2 expression call unop "->"
	'>' => Reduce #2 expression call unop "->"
	'<' => Reduce #2 expression call unop "->"
	"+=" => Reduce #2 expression call unop "->"
	"-=" => Reduce #2 expression call unop "->"
	"*=" => Reduce #2 expression call unop "->"
	"/=" => Reduce #2 expression call unop "->"
	"^=" => Reduce #2 expression call unop "->"
	"%=" => Reduce #2 expression call unop "->"
	"&&=" => Reduce #2 expression call unop "->"
	"||=" => Reduce #2 expression call unop "->"
	"&=" => Reduce #2 expression call unop "->"
	"|=" => Reduce #2 expression call unop "->"
	"<<=" => Reduce #2 expression call unop "->"
	">>=" => Reduce #2 expression call unop "->"
	'.' => Reduce #2 expression call unop "->"
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call unop "~"
	';' => Reduce #2 expression call unop "~"
	',' => Reduce #2 expression call unop "~"
	'^' => Reduce #2 expression call unop "~"
	'[' => Shift goto XX
	']' => Reduce #2 expression call unop "~"
	'&' => Reduce #2 expression call unop "~"
	'}' => Reduce #2 expression call unop "~"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call unop "~"
	'+' => Reduce #2 expression call unop "~"
	'-' => Reduce #2 expression call unop "~"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #2 expression call unop "~"
	"||" => Reduce #2 expression call unop "~"
	'|' => Reduce #2 expression call unop "~"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #2 expression call unop "~"
	"!=" => Reduce #2 expression call unop "~"
	">=" => Reduce #2 expression call unop "~"
	"<=" => Reduce #2 expression call unop "~"
	'>' => Reduce #2 expression call unop "~"
	'<' => Reduce #2 expression call unop "~"
	"+=" => Reduce #2 expression call unop "~"
	"-=" => Reduce #2 expression call unop "~"
	"*=" => Reduce #2 expression call unop "~"
	"/=" => Reduce #2 expression call unop "~"
	"^=" => Reduce #2 expression call unop "~"
	"%=" => Reduce #2 expression call unop "~"
	"&&=" => Reduce #2 expression call unop "~"
	"||=" => Reduce #2 expression call unop "~"
	"&=" => Reduce #2 expression call unop "~"
	"|=" => Reduce #2 expression call unop "~"
	"<<=" => Reduce #2 expression call unop "~"
	">>=" => Reduce #2 expression call unop "~"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #2 expression call unop "!"
	';' => Reduce #2 expression call unop "!"
	',' => Reduce #2 expression call unop "!"
	'^' => Reduce #2 expression call unop "!"
	'[' => Shift goto XX
	']' => Reduce #2 expression call unop "!"
	'&' => Reduce #2 expression call unop "!"
	'}' => Reduce #2 expression call unop "!"
	"->" => Shift goto XX
	'=' => Reduce #2 expression call unop "!"
	'+' => Reduce #2 expression call unop "!"
	'-' => Reduce #2 expression call unop "!"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #2 expression call unop "!"
	"||" => Reduce #2 expression call unop "!"
	'|' => Reduce #2 expression call unop "!"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #2 expression call unop "!"
	"!=" => Reduce #2 expression call unop "!"
	">=" => Reduce #2 expression call unop "!"
	"<=" => Reduce #2 expression call unop "!"
	'>' => Reduce #2 expression call unop "!"
	'<' => Reduce #2 expression call unop "!"
	"+=" => Reduce #2 expression call unop "!"
	"-=" => Reduce #2 expression call unop "!"
	"*=" => Reduce #2 expression call unop "!"
	"/=" => Reduce #2 expression call unop "!"
	"^=" => Reduce #2 expression call unop "!"
	"%=" => Reduce #2 expression call unop "!"
	"&&=" => Reduce #2 expression call unop "!"
	"||=" => Reduce #2 expression call unop "!"
	"&=" => Reduce #2 expression call unop "!"
	"|=" => Reduce #2 expression call unop "!"
	"<<=" => Reduce #2 expression call unop "!"
	">>=" => Reduce #2 expression call unop "!"
	'.' => Shift goto XX
[XX]
	"catch" => Reduce #2 tryblock call tryblock
[XX]
	';' => Shift goto XX
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	$ => Reduce #2 statement call return_void
	BOOLEAN => Reduce #2 statement call return_void
	IDENT => Reduce #2 statement call return_void
	DQSTRING => Reduce #2 statement call return_void
	SQSTRING => Reduce #2 statement call return_void
	UINTEGER => Reduce #2 statement call return_void
	FLOAT => Reduce #2 statement call return_void
	"function" => Reduce #2 statement call return_void
	'(' => Reduce #2 statement call return_void
	"procedure" => Reduce #2 statement call return_void
	"class" => Reduce #2 statement call return_void
	"struct" => Reduce #2 statement call return_void
	'&' => Reduce #2 statement call return_void
	"typedef" => Reduce #2 statement call return_void
	'{' => Reduce #2 statement call return_void
	'}' => Reduce #2 statement call return_void
	"generic" => Reduce #2 statement call return_void
	"private" => Reduce #2 statement call return_void
	"public" => Reduce #2 statement call return_void
	'+' => Reduce #2 statement call return_void
	'-' => Reduce #2 statement call return_void
	'*' => Reduce #2 statement call return_void
	'~' => Reduce #2 statement call return_void
	'!' => Reduce #2 statement call return_void
	"lambda" => Reduce #2 statement call return_void
	"try" => Reduce #2 statement call return_void
	"var" => Reduce #2 statement call return_void
	"return" => Reduce #2 statement call return_void
	"throw" => Reduce #2 statement call return_void
	"delete" => Reduce #2 statement call return_void
	"if" => Reduce #2 statement call return_void
	"while" => Reduce #2 statement call return_void
	"with" => Reduce #2 statement call return_void
	"new" => Reduce #2 statement call return_void
	"cast" => Reduce #2 statement call return_void
	"null" => Reduce #2 statement call return_void
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	',' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	':' => Shift goto XX
[XX]
	':' => Shift goto XX
[XX]
	']' => Reduce #3 generic_instance_deflist call generic_instance_deflist
[XX]
	')' => Shift goto XX
[XX]
	')' => Reduce #1 lambda_paramlist call lambda_paramdeflist
[XX]
	')' => Reduce #1 lambda_parameters
	',' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #1 expressionlist
	',' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #1 expressionlist
	'&' => Shift goto XX
	'}' => Reduce #1 expressionlist
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	$ => Reduce #5 functiondefinition call funcdef
	BOOLEAN => Reduce #5 functiondefinition call funcdef
	IDENT => Reduce #5 functiondefinition call funcdef
	DQSTRING => Reduce #5 functiondefinition call funcdef
	SQSTRING => Reduce #5 functiondefinition call funcdef
	UINTEGER => Reduce #5 functiondefinition call funcdef
	FLOAT => Reduce #5 functiondefinition call funcdef
	"function" => Reduce #5 functiondefinition call funcdef
	'(' => Reduce #5 functiondefinition call funcdef
	"procedure" => Reduce #5 functiondefinition call funcdef
	"operator" => Reduce #5 functiondefinition call funcdef
	"const" => Reduce #5 functiondefinition call funcdef
	"any" => Reduce #5 functiondefinition call funcdef
	"class" => Reduce #5 functiondefinition call funcdef
	"struct" => Reduce #5 functiondefinition call funcdef
	'&' => Reduce #5 functiondefinition call funcdef
	"typedef" => Reduce #5 functiondefinition call funcdef
	'{' => Reduce #5 functiondefinition call funcdef
	'}' => Reduce #5 functiondefinition call funcdef
	"generic" => Reduce #5 functiondefinition call funcdef
	"interface" => Reduce #5 functiondefinition call funcdef
	"namespace" => Reduce #5 functiondefinition call funcdef
	"private" => Reduce #5 functiondefinition call funcdef
	"public" => Reduce #5 functiondefinition call funcdef
	"constructor" => Reduce #5 functiondefinition call funcdef
	"destructor" => Reduce #5 functiondefinition call funcdef
	'+' => Reduce #5 functiondefinition call funcdef
	'-' => Reduce #5 functiondefinition call funcdef
	'*' => Reduce #5 functiondefinition call funcdef
	'~' => Reduce #5 functiondefinition call funcdef
	'!' => Reduce #5 functiondefinition call funcdef
	"lambda" => Reduce #5 functiondefinition call funcdef
	"main" => Reduce #5 functiondefinition call funcdef
	"try" => Reduce #5 functiondefinition call funcdef
	"var" => Reduce #5 functiondefinition call funcdef
	"return" => Reduce #5 functiondefinition call funcdef
	"throw" => Reduce #5 functiondefinition call funcdef
	"delete" => Reduce #5 functiondefinition call funcdef
	"if" => Reduce #5 functiondefinition call funcdef
	"while" => Reduce #5 functiondefinition call funcdef
	"with" => Reduce #5 functiondefinition call funcdef
	"new" => Reduce #5 functiondefinition call funcdef
	"cast" => Reduce #5 functiondefinition call funcdef
	"null" => Reduce #5 functiondefinition call funcdef
[XX]
	IDENT => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	')' => Reduce #1 impl_paramlist call paramdeflist
[XX]
	')' => Reduce #1 impl_parameters
	',' => Shift goto XX
[XX]
	$ => Reduce #5 classdefinition call classdef
	BOOLEAN => Reduce #5 classdefinition call classdef
	IDENT => Reduce #5 classdefinition call classdef
	DQSTRING => Reduce #5 classdefinition call classdef
	SQSTRING => Reduce #5 classdefinition call classdef
	UINTEGER => Reduce #5 classdefinition call classdef
	FLOAT => Reduce #5 classdefinition call classdef
	"function" => Reduce #5 classdefinition call classdef
	'(' => Reduce #5 classdefinition call classdef
	"procedure" => Reduce #5 classdefinition call classdef
	"operator" => Reduce #5 classdefinition call classdef
	"const" => Reduce #5 classdefinition call classdef
	"any" => Reduce #5 classdefinition call classdef
	"class" => Reduce #5 classdefinition call classdef
	"struct" => Reduce #5 classdefinition call classdef
	'&' => Reduce #5 classdefinition call classdef
	"typedef" => Reduce #5 classdefinition call classdef
	'{' => Reduce #5 classdefinition call classdef
	'}' => Reduce #5 classdefinition call classdef
	"generic" => Reduce #5 classdefinition call classdef
	"interface" => Reduce #5 classdefinition call classdef
	"namespace" => Reduce #5 classdefinition call classdef
	"private" => Reduce #5 classdefinition call classdef
	"public" => Reduce #5 classdefinition call classdef
	"constructor" => Reduce #5 classdefinition call classdef
	"destructor" => Reduce #5 classdefinition call classdef
	'+' => Reduce #5 classdefinition call classdef
	'-' => Reduce #5 classdefinition call classdef
	'*' => Reduce #5 classdefinition call classdef
	'~' => Reduce #5 classdefinition call classdef
	'!' => Reduce #5 classdefinition call classdef
	"lambda" => Reduce #5 classdefinition call classdef
	"main" => Reduce #5 classdefinition call classdef
	"try" => Reduce #5 classdefinition call classdef
	"var" => Reduce #5 classdefinition call classdef
	"return" => Reduce #5 classdefinition call classdef
	"throw" => Reduce #5 classdefinition call classdef
	"delete" => Reduce #5 classdefinition call classdef
	"if" => Reduce #5 classdefinition call classdef
	"while" => Reduce #5 classdefinition call classdef
	"with" => Reduce #5 classdefinition call classdef
	"new" => Reduce #5 classdefinition call classdef
	"cast" => Reduce #5 classdefinition call classdef
	"null" => Reduce #5 classdefinition call classdef
[XX]
	'}' => Reduce #2 inclass_definitionlist
[XX]
	$ => Reduce #2 inclass_definition call definition 1
	IDENT => Reduce #2 inclass_definition call definition 1
	"function" => Reduce #2 inclass_definition call definition 1
	"procedure" => Reduce #2 inclass_definition call definition 1
	"operator" => Reduce #2 inclass_definition call definition 1
	"const" => Reduce #2 inclass_definition call definition 1
	"any" => Reduce #2 inclass_definition call definition 1
	"class" => Reduce #2 inclass_definition call definition 1
	"struct" => Reduce #2 inclass_definition call definition 1
	"typedef" => Reduce #2 inclass_definition call definition 1
	'}' => Reduce #2 inclass_definition call definition 1
	"generic" => Reduce #2 inclass_definition call definition 1
	"interface" => Reduce #2 inclass_definition call definition 1
	"private" => Reduce #2 inclass_definition call definition 1
	"public" => Reduce #2 inclass_definition call definition 1
	"constructor" => Reduce #2 inclass_definition call definition 1
	"destructor" => Reduce #2 inclass_definition call definition 1
[XX]
	'(' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	$ => Reduce #2 inclass_definition call definition 2
	IDENT => Reduce #2 inclass_definition call definition 2
	"function" => Reduce #2 inclass_definition call definition 2
	"procedure" => Reduce #2 inclass_definition call definition 2
	"operator" => Reduce #2 inclass_definition call definition 2
	"const" => Reduce #2 inclass_definition call definition 2
	"any" => Reduce #2 inclass_definition call definition 2
	"class" => Reduce #2 inclass_definition call definition 2
	"struct" => Reduce #2 inclass_definition call definition 2
	"typedef" => Reduce #2 inclass_definition call definition 2
	'}' => Reduce #2 inclass_definition call definition 2
	"generic" => Reduce #2 inclass_definition call definition 2
	"interface" => Reduce #2 inclass_definition call definition 2
	"private" => Reduce #2 inclass_definition call definition 2
	"public" => Reduce #2 inclass_definition call definition 2
	"constructor" => Reduce #2 inclass_definition call definition 2
	"destructor" => Reduce #2 inclass_definition call definition 2
[XX]
	$ => Reduce #2 constructordefinition call destructordef {linkage="external"}
	IDENT => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"function" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"procedure" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"operator" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"const" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"any" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"class" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"struct" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"typedef" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	'}' => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"generic" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"interface" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"private" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"public" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"constructor" => Reduce #2 constructordefinition call destructordef {linkage="external"}
	"destructor" => Reduce #2 constructordefinition call destructordef {linkage="external"}
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"destructor" => Shift goto XX
[XX]
	$ => Reduce #5 structdefinition call structdef
	BOOLEAN => Reduce #5 structdefinition call structdef
	IDENT => Reduce #5 structdefinition call structdef
	DQSTRING => Reduce #5 structdefinition call structdef
	SQSTRING => Reduce #5 structdefinition call structdef
	UINTEGER => Reduce #5 structdefinition call structdef
	FLOAT => Reduce #5 structdefinition call structdef
	"function" => Reduce #5 structdefinition call structdef
	'(' => Reduce #5 structdefinition call structdef
	"procedure" => Reduce #5 structdefinition call structdef
	"operator" => Reduce #5 structdefinition call structdef
	"const" => Reduce #5 structdefinition call structdef
	"any" => Reduce #5 structdefinition call structdef
	"class" => Reduce #5 structdefinition call structdef
	"struct" => Reduce #5 structdefinition call structdef
	'&' => Reduce #5 structdefinition call structdef
	"typedef" => Reduce #5 structdefinition call structdef
	'{' => Reduce #5 structdefinition call structdef
	'}' => Reduce #5 structdefinition call structdef
	"generic" => Reduce #5 structdefinition call structdef
	"interface" => Reduce #5 structdefinition call structdef
	"namespace" => Reduce #5 structdefinition call structdef
	"private" => Reduce #5 structdefinition call structdef
	"public" => Reduce #5 structdefinition call structdef
	"constructor" => Reduce #5 structdefinition call structdef
	"destructor" => Reduce #5 structdefinition call structdef
	'+' => Reduce #5 structdefinition call structdef
	'-' => Reduce #5 structdefinition call structdef
	'*' => Reduce #5 structdefinition call structdef
	'~' => Reduce #5 structdefinition call structdef
	'!' => Reduce #5 structdefinition call structdef
	"lambda" => Reduce #5 structdefinition call structdef
	"main" => Reduce #5 structdefinition call structdef
	"try" => Reduce #5 structdefinition call structdef
	"var" => Reduce #5 structdefinition call structdef
	"return" => Reduce #5 structdefinition call structdef
	"throw" => Reduce #5 structdefinition call structdef
	"delete" => Reduce #5 structdefinition call structdef
	"if" => Reduce #5 structdefinition call structdef
	"while" => Reduce #5 structdefinition call structdef
	"with" => Reduce #5 structdefinition call structdef
	"new" => Reduce #5 structdefinition call structdef
	"cast" => Reduce #5 structdefinition call structdef
	"null" => Reduce #5 structdefinition call structdef
[XX]
	'}' => Reduce #2 instruct_definitionlist
[XX]
	$ => Reduce #2 instruct_definition call definition 1
	IDENT => Reduce #2 instruct_definition call definition 1
	"const" => Reduce #2 instruct_definition call definition 1
	"any" => Reduce #2 instruct_definition call definition 1
	"struct" => Reduce #2 instruct_definition call definition 1
	"typedef" => Reduce #2 instruct_definition call definition 1
	'}' => Reduce #2 instruct_definition call definition 1
	"generic" => Reduce #2 instruct_definition call definition 1
[XX]
	$ => Reduce #2 instruct_definition call definition 2
	IDENT => Reduce #2 instruct_definition call definition 2
	"const" => Reduce #2 instruct_definition call definition 2
	"any" => Reduce #2 instruct_definition call definition 2
	"struct" => Reduce #2 instruct_definition call definition 2
	"typedef" => Reduce #2 instruct_definition call definition 2
	'}' => Reduce #2 instruct_definition call definition 2
	"generic" => Reduce #2 instruct_definition call definition 2
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	')' => Reduce #1 extern_parameters call extern_paramdef_collect
	"..." => Reduce #1 extern_parameters call extern_paramdef_collect
	',' => Shift goto XX
[XX]
	')' => Reduce #1 extern_paramlist call extern_paramdeflist
	"..." => Reduce #1 extern_paramlist call extern_paramdeflist
[XX]
	')' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #1 extern_paramdecl call extern_paramdef
	"..." => Reduce #1 extern_paramdecl call extern_paramdef
	',' => Reduce #1 extern_paramdecl call extern_paramdef
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	']' => Reduce #1 generic_header call generic_header
[XX]
	']' => Reduce #1 generic_header call generic_header
[XX]
	']' => Shift goto XX
[XX]
	',' => Shift goto XX
	']' => Reduce #1 generic_identlist call generic_header_ident
	'=' => Shift goto XX
[XX]
	']' => Shift goto XX
[XX]
	$ => Reduce #5 interfacedefinition call interfacedef
	IDENT => Reduce #5 interfacedefinition call interfacedef
	"function" => Reduce #5 interfacedefinition call interfacedef
	"procedure" => Reduce #5 interfacedefinition call interfacedef
	"operator" => Reduce #5 interfacedefinition call interfacedef
	"const" => Reduce #5 interfacedefinition call interfacedef
	"any" => Reduce #5 interfacedefinition call interfacedef
	"class" => Reduce #5 interfacedefinition call interfacedef
	"struct" => Reduce #5 interfacedefinition call interfacedef
	"typedef" => Reduce #5 interfacedefinition call interfacedef
	'}' => Reduce #5 interfacedefinition call interfacedef
	"generic" => Reduce #5 interfacedefinition call interfacedef
	"interface" => Reduce #5 interfacedefinition call interfacedef
	"namespace" => Reduce #5 interfacedefinition call interfacedef
	"private" => Reduce #5 interfacedefinition call interfacedef
	"public" => Reduce #5 interfacedefinition call interfacedef
	"constructor" => Reduce #5 interfacedefinition call interfacedef
	"destructor" => Reduce #5 interfacedefinition call interfacedef
	"main" => Reduce #5 interfacedefinition call interfacedef
[XX]
	'}' => Reduce #2 ininterf_definitionlist
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	'(' => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	']' => Shift goto XX
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	'(' => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	"const" => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	"any" => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	'(' => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	"const" => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	"any" => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	'(' => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	"const" => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	"any" => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	'(' => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	"const" => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	"any" => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	'(' => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	"const" => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	"any" => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	'(' => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	"const" => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	"any" => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	'(' => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	"const" => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	"any" => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	'(' => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	"const" => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	"any" => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	'(' => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	"const" => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	"any" => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	'(' => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	"const" => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	"any" => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	'(' => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	"const" => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	"any" => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	'(' => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	"const" => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	"any" => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	'(' => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	"const" => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	"any" => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	'(' => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	"const" => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	"any" => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	'(' => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	"const" => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	"any" => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
[XX]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
[XX]
	$ => Reduce #5 namespacedefinition call namespacedef
	IDENT => Reduce #5 namespacedefinition call namespacedef
	"function" => Reduce #5 namespacedefinition call namespacedef
	"procedure" => Reduce #5 namespacedefinition call namespacedef
	"const" => Reduce #5 namespacedefinition call namespacedef
	"any" => Reduce #5 namespacedefinition call namespacedef
	"class" => Reduce #5 namespacedefinition call namespacedef
	"struct" => Reduce #5 namespacedefinition call namespacedef
	"typedef" => Reduce #5 namespacedefinition call namespacedef
	'}' => Reduce #5 namespacedefinition call namespacedef
	"generic" => Reduce #5 namespacedefinition call namespacedef
	"interface" => Reduce #5 namespacedefinition call namespacedef
	"namespace" => Reduce #5 namespacedefinition call namespacedef
	"private" => Reduce #5 namespacedefinition call namespacedef
	"public" => Reduce #5 namespacedefinition call namespacedef
	"main" => Reduce #5 namespacedefinition call namespacedef
[XX]
	'}' => Reduce #2 namespace_definitionlist
[XX]
	$ => Reduce #2 namespace_definition call definition 1
	"function" => Reduce #2 namespace_definition call definition 1
	"procedure" => Reduce #2 namespace_definition call definition 1
	"class" => Reduce #2 namespace_definition call definition 1
	"struct" => Reduce #2 namespace_definition call definition 1
	"typedef" => Reduce #2 namespace_definition call definition 1
	'}' => Reduce #2 namespace_definition call definition 1
	"generic" => Reduce #2 namespace_definition call definition 1
	"interface" => Reduce #2 namespace_definition call definition 1
	"namespace" => Reduce #2 namespace_definition call definition 1
	"private" => Reduce #2 namespace_definition call definition 1
	"public" => Reduce #2 namespace_definition call definition 1
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"..." => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	')' => Shift goto XX
	"..." => Shift goto XX
[XX]
	',' => Shift goto XX
	'{' => Shift goto XX
[XX]
	'(' => Reduce #3 iexpression call rep_operator "->"
	')' => Reduce #3 iexpression call rep_operator "->"
	';' => Reduce #3 iexpression call rep_operator "->"
	',' => Reduce #3 iexpression call rep_operator "->"
	'^' => Reduce #3 iexpression call rep_operator "->"
	'[' => Reduce #3 iexpression call rep_operator "->"
	']' => Reduce #3 iexpression call rep_operator "->"
	'&' => Reduce #3 iexpression call rep_operator "->"
	'}' => Reduce #3 iexpression call rep_operator "->"
	"->" => Reduce #3 iexpression call rep_operator "->"
	'=' => Reduce #3 iexpression call rep_operator "->"
	'+' => Reduce #3 iexpression call rep_operator "->"
	'-' => Reduce #3 iexpression call rep_operator "->"
	'*' => Reduce #3 iexpression call rep_operator "->"
	'/' => Reduce #3 iexpression call rep_operator "->"
	'%' => Reduce #3 iexpression call rep_operator "->"
	"&&" => Reduce #3 iexpression call rep_operator "->"
	"||" => Reduce #3 iexpression call rep_operator "->"
	'|' => Reduce #3 iexpression call rep_operator "->"
	"<<" => Reduce #3 iexpression call rep_operator "->"
	">>" => Reduce #3 iexpression call rep_operator "->"
	"==" => Reduce #3 iexpression call rep_operator "->"
	"!=" => Reduce #3 iexpression call rep_operator "->"
	">=" => Reduce #3 iexpression call rep_operator "->"
	"<=" => Reduce #3 iexpression call rep_operator "->"
	'>' => Reduce #3 iexpression call rep_operator "->"
	'<' => Reduce #3 iexpression call rep_operator "->"
	"+=" => Reduce #3 iexpression call rep_operator "->"
	"-=" => Reduce #3 iexpression call rep_operator "->"
	"*=" => Reduce #3 iexpression call rep_operator "->"
	"/=" => Reduce #3 iexpression call rep_operator "->"
	"^=" => Reduce #3 iexpression call rep_operator "->"
	"%=" => Reduce #3 iexpression call rep_operator "->"
	"&&=" => Reduce #3 iexpression call rep_operator "->"
	"||=" => Reduce #3 iexpression call rep_operator "->"
	"&=" => Reduce #3 iexpression call rep_operator "->"
	"|=" => Reduce #3 iexpression call rep_operator "->"
	"<<=" => Reduce #3 iexpression call rep_operator "->"
	">>=" => Reduce #3 iexpression call rep_operator "->"
	'.' => Reduce #3 iexpression call rep_operator "->"
[XX]
	')' => Shift goto XX
[XX]
	'(' => Reduce #3 expression call operator "()"
	')' => Reduce #3 expression call operator "()"
	';' => Reduce #3 expression call operator "()"
	',' => Reduce #3 expression call operator "()"
	'^' => Reduce #3 expression call operator "()"
	'[' => Reduce #3 expression call operator "()"
	']' => Reduce #3 expression call operator "()"
	'&' => Reduce #3 expression call operator "()"
	'}' => Reduce #3 expression call operator "()"
	"->" => Reduce #3 expression call operator "()"
	'=' => Reduce #3 expression call operator "()"
	'+' => Reduce #3 expression call operator "()"
	'-' => Reduce #3 expression call operator "()"
	'*' => Reduce #3 expression call operator "()"
	'/' => Reduce #3 expression call operator "()"
	'%' => Reduce #3 expression call operator "()"
	"&&" => Reduce #3 expression call operator "()"
	"||" => Reduce #3 expression call operator "()"
	'|' => Reduce #3 expression call operator "()"
	"<<" => Reduce #3 expression call operator "()"
	">>" => Reduce #3 expression call operator "()"
	"==" => Reduce #3 expression call operator "()"
	"!=" => Reduce #3 expression call operator "()"
	">=" => Reduce #3 expression call operator "()"
	"<=" => Reduce #3 expression call operator "()"
	'>' => Reduce #3 expression call operator "()"
	'<' => Reduce #3 expression call operator "()"
	"+=" => Reduce #3 expression call operator "()"
	"-=" => Reduce #3 expression call operator "()"
	"*=" => Reduce #3 expression call operator "()"
	"/=" => Reduce #3 expression call operator "()"
	"^=" => Reduce #3 expression call operator "()"
	"%=" => Reduce #3 expression call operator "()"
	"&&=" => Reduce #3 expression call operator "()"
	"||=" => Reduce #3 expression call operator "()"
	"&=" => Reduce #3 expression call operator "()"
	"|=" => Reduce #3 expression call operator "()"
	"<<=" => Reduce #3 expression call operator "()"
	">>=" => Reduce #3 expression call operator "()"
	'.' => Reduce #3 expression call operator "()"
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "^"
	';' => Reduce #3 expression call binop "^"
	',' => Reduce #3 expression call binop "^"
	'^' => Reduce #3 expression call binop "^"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "^"
	'&' => Reduce #3 expression call binop "^"
	'}' => Reduce #3 expression call binop "^"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "^"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "^"
	"||" => Reduce #3 expression call binop "^"
	'|' => Reduce #3 expression call binop "^"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "^"
	"-=" => Reduce #3 expression call binop "^"
	"*=" => Reduce #3 expression call binop "^"
	"/=" => Reduce #3 expression call binop "^"
	"^=" => Reduce #3 expression call binop "^"
	"%=" => Reduce #3 expression call binop "^"
	"&&=" => Reduce #3 expression call binop "^"
	"||=" => Reduce #3 expression call binop "^"
	"&=" => Reduce #3 expression call binop "^"
	"|=" => Reduce #3 expression call binop "^"
	"<<=" => Reduce #3 expression call binop "^"
	">>=" => Reduce #3 expression call binop "^"
	'.' => Shift goto XX
[XX]
	']' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "&"
	';' => Reduce #3 expression call binop "&"
	',' => Reduce #3 expression call binop "&"
	'^' => Reduce #3 expression call binop "&"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "&"
	'&' => Reduce #3 expression call binop "&"
	'}' => Reduce #3 expression call binop "&"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "&"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "&"
	"||" => Reduce #3 expression call binop "&"
	'|' => Reduce #3 expression call binop "&"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "&"
	"-=" => Reduce #3 expression call binop "&"
	"*=" => Reduce #3 expression call binop "&"
	"/=" => Reduce #3 expression call binop "&"
	"^=" => Reduce #3 expression call binop "&"
	"%=" => Reduce #3 expression call binop "&"
	"&&=" => Reduce #3 expression call binop "&"
	"||=" => Reduce #3 expression call binop "&"
	"&=" => Reduce #3 expression call binop "&"
	"|=" => Reduce #3 expression call binop "&"
	"<<=" => Reduce #3 expression call binop "&"
	">>=" => Reduce #3 expression call binop "&"
	'.' => Shift goto XX
[XX]
	IDENT => Reduce #2 indirection call count
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "="
	';' => Reduce #3 expression call binop "="
	',' => Reduce #3 expression call binop "="
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "="
	'&' => Shift goto XX
	'}' => Reduce #3 expression call binop "="
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "="
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "="
	"-=" => Reduce #3 expression call binop "="
	"*=" => Reduce #3 expression call binop "="
	"/=" => Reduce #3 expression call binop "="
	"^=" => Reduce #3 expression call binop "="
	"%=" => Reduce #3 expression call binop "="
	"&&=" => Reduce #3 expression call binop "="
	"||=" => Reduce #3 expression call binop "="
	"&=" => Reduce #3 expression call binop "="
	"|=" => Reduce #3 expression call binop "="
	"<<=" => Reduce #3 expression call binop "="
	">>=" => Reduce #3 expression call binop "="
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "+"
	';' => Reduce #3 expression call binop "+"
	',' => Reduce #3 expression call binop "+"
	'^' => Reduce #3 expression call binop "+"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "+"
	'&' => Reduce #3 expression call binop "+"
	'}' => Reduce #3 expression call binop "+"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "+"
	'+' => Reduce #3 expression call binop "+"
	'-' => Reduce #3 expression call binop "+"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "+"
	"||" => Reduce #3 expression call binop "+"
	'|' => Reduce #3 expression call binop "+"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "+"
	"!=" => Reduce #3 expression call binop "+"
	">=" => Reduce #3 expression call binop "+"
	"<=" => Reduce #3 expression call binop "+"
	'>' => Reduce #3 expression call binop "+"
	'<' => Reduce #3 expression call binop "+"
	"+=" => Reduce #3 expression call binop "+"
	"-=" => Reduce #3 expression call binop "+"
	"*=" => Reduce #3 expression call binop "+"
	"/=" => Reduce #3 expression call binop "+"
	"^=" => Reduce #3 expression call binop "+"
	"%=" => Reduce #3 expression call binop "+"
	"&&=" => Reduce #3 expression call binop "+"
	"||=" => Reduce #3 expression call binop "+"
	"&=" => Reduce #3 expression call binop "+"
	"|=" => Reduce #3 expression call binop "+"
	"<<=" => Reduce #3 expression call binop "+"
	">>=" => Reduce #3 expression call binop "+"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "-"
	';' => Reduce #3 expression call binop "-"
	',' => Reduce #3 expression call binop "-"
	'^' => Reduce #3 expression call binop "-"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "-"
	'&' => Reduce #3 expression call binop "-"
	'}' => Reduce #3 expression call binop "-"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "-"
	'+' => Reduce #3 expression call binop "-"
	'-' => Reduce #3 expression call binop "-"
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "-"
	"||" => Reduce #3 expression call binop "-"
	'|' => Reduce #3 expression call binop "-"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "-"
	"!=" => Reduce #3 expression call binop "-"
	">=" => Reduce #3 expression call binop "-"
	"<=" => Reduce #3 expression call binop "-"
	'>' => Reduce #3 expression call binop "-"
	'<' => Reduce #3 expression call binop "-"
	"+=" => Reduce #3 expression call binop "-"
	"-=" => Reduce #3 expression call binop "-"
	"*=" => Reduce #3 expression call binop "-"
	"/=" => Reduce #3 expression call binop "-"
	"^=" => Reduce #3 expression call binop "-"
	"%=" => Reduce #3 expression call binop "-"
	"&&=" => Reduce #3 expression call binop "-"
	"||=" => Reduce #3 expression call binop "-"
	"&=" => Reduce #3 expression call binop "-"
	"|=" => Reduce #3 expression call binop "-"
	"<<=" => Reduce #3 expression call binop "-"
	">>=" => Reduce #3 expression call binop "-"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "*"
	';' => Reduce #3 expression call binop "*"
	',' => Reduce #3 expression call binop "*"
	'^' => Reduce #3 expression call binop "*"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "*"
	'&' => Reduce #3 expression call binop "*"
	'}' => Reduce #3 expression call binop "*"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "*"
	'+' => Reduce #3 expression call binop "*"
	'-' => Reduce #3 expression call binop "*"
	'*' => Reduce #3 expression call binop "*"
	'/' => Reduce #3 expression call binop "*"
	'%' => Reduce #3 expression call binop "*"
	"&&" => Reduce #3 expression call binop "*"
	"||" => Reduce #3 expression call binop "*"
	'|' => Reduce #3 expression call binop "*"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "*"
	"!=" => Reduce #3 expression call binop "*"
	">=" => Reduce #3 expression call binop "*"
	"<=" => Reduce #3 expression call binop "*"
	'>' => Reduce #3 expression call binop "*"
	'<' => Reduce #3 expression call binop "*"
	"+=" => Reduce #3 expression call binop "*"
	"-=" => Reduce #3 expression call binop "*"
	"*=" => Reduce #3 expression call binop "*"
	"/=" => Reduce #3 expression call binop "*"
	"^=" => Reduce #3 expression call binop "*"
	"%=" => Reduce #3 expression call binop "*"
	"&&=" => Reduce #3 expression call binop "*"
	"||=" => Reduce #3 expression call binop "*"
	"&=" => Reduce #3 expression call binop "*"
	"|=" => Reduce #3 expression call binop "*"
	"<<=" => Reduce #3 expression call binop "*"
	">>=" => Reduce #3 expression call binop "*"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "/"
	';' => Reduce #3 expression call binop "/"
	',' => Reduce #3 expression call binop "/"
	'^' => Reduce #3 expression call binop "/"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "/"
	'&' => Reduce #3 expression call binop "/"
	'}' => Reduce #3 expression call binop "/"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "/"
	'+' => Reduce #3 expression call binop "/"
	'-' => Reduce #3 expression call binop "/"
	'*' => Reduce #3 expression call binop "/"
	'/' => Reduce #3 expression call binop "/"
	'%' => Reduce #3 expression call binop "/"
	"&&" => Reduce #3 expression call binop "/"
	"||" => Reduce #3 expression call binop "/"
	'|' => Reduce #3 expression call binop "/"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "/"
	"!=" => Reduce #3 expression call binop "/"
	">=" => Reduce #3 expression call binop "/"
	"<=" => Reduce #3 expression call binop "/"
	'>' => Reduce #3 expression call binop "/"
	'<' => Reduce #3 expression call binop "/"
	"+=" => Reduce #3 expression call binop "/"
	"-=" => Reduce #3 expression call binop "/"
	"*=" => Reduce #3 expression call binop "/"
	"/=" => Reduce #3 expression call binop "/"
	"^=" => Reduce #3 expression call binop "/"
	"%=" => Reduce #3 expression call binop "/"
	"&&=" => Reduce #3 expression call binop "/"
	"||=" => Reduce #3 expression call binop "/"
	"&=" => Reduce #3 expression call binop "/"
	"|=" => Reduce #3 expression call binop "/"
	"<<=" => Reduce #3 expression call binop "/"
	">>=" => Reduce #3 expression call binop "/"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "%"
	';' => Reduce #3 expression call binop "%"
	',' => Reduce #3 expression call binop "%"
	'^' => Reduce #3 expression call binop "%"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "%"
	'&' => Reduce #3 expression call binop "%"
	'}' => Reduce #3 expression call binop "%"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "%"
	'+' => Reduce #3 expression call binop "%"
	'-' => Reduce #3 expression call binop "%"
	'*' => Reduce #3 expression call binop "%"
	'/' => Reduce #3 expression call binop "%"
	'%' => Reduce #3 expression call binop "%"
	"&&" => Reduce #3 expression call binop "%"
	"||" => Reduce #3 expression call binop "%"
	'|' => Reduce #3 expression call binop "%"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "%"
	"!=" => Reduce #3 expression call binop "%"
	">=" => Reduce #3 expression call binop "%"
	"<=" => Reduce #3 expression call binop "%"
	'>' => Reduce #3 expression call binop "%"
	'<' => Reduce #3 expression call binop "%"
	"+=" => Reduce #3 expression call binop "%"
	"-=" => Reduce #3 expression call binop "%"
	"*=" => Reduce #3 expression call binop "%"
	"/=" => Reduce #3 expression call binop "%"
	"^=" => Reduce #3 expression call binop "%"
	"%=" => Reduce #3 expression call binop "%"
	"&&=" => Reduce #3 expression call binop "%"
	"||=" => Reduce #3 expression call binop "%"
	"&=" => Reduce #3 expression call binop "%"
	"|=" => Reduce #3 expression call binop "%"
	"<<=" => Reduce #3 expression call binop "%"
	">>=" => Reduce #3 expression call binop "%"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "&&"
	';' => Reduce #3 expression call binop "&&"
	',' => Reduce #3 expression call binop "&&"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "&&"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call binop "&&"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "&&"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "&&"
	"||" => Reduce #3 expression call binop "&&"
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "&&"
	"-=" => Reduce #3 expression call binop "&&"
	"*=" => Reduce #3 expression call binop "&&"
	"/=" => Reduce #3 expression call binop "&&"
	"^=" => Reduce #3 expression call binop "&&"
	"%=" => Reduce #3 expression call binop "&&"
	"&&=" => Reduce #3 expression call binop "&&"
	"||=" => Reduce #3 expression call binop "&&"
	"&=" => Reduce #3 expression call binop "&&"
	"|=" => Reduce #3 expression call binop "&&"
	"<<=" => Reduce #3 expression call binop "&&"
	">>=" => Reduce #3 expression call binop "&&"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "||"
	';' => Reduce #3 expression call binop "||"
	',' => Reduce #3 expression call binop "||"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "||"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call binop "||"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "||"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Reduce #3 expression call binop "||"
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "||"
	"-=" => Reduce #3 expression call binop "||"
	"*=" => Reduce #3 expression call binop "||"
	"/=" => Reduce #3 expression call binop "||"
	"^=" => Reduce #3 expression call binop "||"
	"%=" => Reduce #3 expression call binop "||"
	"&&=" => Reduce #3 expression call binop "||"
	"||=" => Reduce #3 expression call binop "||"
	"&=" => Reduce #3 expression call binop "||"
	"|=" => Reduce #3 expression call binop "||"
	"<<=" => Reduce #3 expression call binop "||"
	">>=" => Reduce #3 expression call binop "||"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "|"
	';' => Reduce #3 expression call binop "|"
	',' => Reduce #3 expression call binop "|"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "|"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call binop "|"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "|"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "|"
	"||" => Reduce #3 expression call binop "|"
	'|' => Reduce #3 expression call binop "|"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call binop "|"
	"-=" => Reduce #3 expression call binop "|"
	"*=" => Reduce #3 expression call binop "|"
	"/=" => Reduce #3 expression call binop "|"
	"^=" => Reduce #3 expression call binop "|"
	"%=" => Reduce #3 expression call binop "|"
	"&&=" => Reduce #3 expression call binop "|"
	"||=" => Reduce #3 expression call binop "|"
	"&=" => Reduce #3 expression call binop "|"
	"|=" => Reduce #3 expression call binop "|"
	"<<=" => Reduce #3 expression call binop "|"
	">>=" => Reduce #3 expression call binop "|"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "<<"
	';' => Reduce #3 expression call binop "<<"
	',' => Reduce #3 expression call binop "<<"
	'^' => Reduce #3 expression call binop "<<"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "<<"
	'&' => Reduce #3 expression call binop "<<"
	'}' => Reduce #3 expression call binop "<<"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "<<"
	'+' => Reduce #3 expression call binop "<<"
	'-' => Reduce #3 expression call binop "<<"
	'*' => Reduce #3 expression call binop "<<"
	'/' => Reduce #3 expression call binop "<<"
	'%' => Reduce #3 expression call binop "<<"
	"&&" => Reduce #3 expression call binop "<<"
	"||" => Reduce #3 expression call binop "<<"
	'|' => Reduce #3 expression call binop "<<"
	"<<" => Reduce #3 expression call binop "<<"
	">>" => Reduce #3 expression call binop "<<"
	"==" => Reduce #3 expression call binop "<<"
	"!=" => Reduce #3 expression call binop "<<"
	">=" => Reduce #3 expression call binop "<<"
	"<=" => Reduce #3 expression call binop "<<"
	'>' => Reduce #3 expression call binop "<<"
	'<' => Reduce #3 expression call binop "<<"
	"+=" => Reduce #3 expression call binop "<<"
	"-=" => Reduce #3 expression call binop "<<"
	"*=" => Reduce #3 expression call binop "<<"
	"/=" => Reduce #3 expression call binop "<<"
	"^=" => Reduce #3 expression call binop "<<"
	"%=" => Reduce #3 expression call binop "<<"
	"&&=" => Reduce #3 expression call binop "<<"
	"||=" => Reduce #3 expression call binop "<<"
	"&=" => Reduce #3 expression call binop "<<"
	"|=" => Reduce #3 expression call binop "<<"
	"<<=" => Reduce #3 expression call binop "<<"
	">>=" => Reduce #3 expression call binop "<<"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop ">>"
	';' => Reduce #3 expression call binop ">>"
	',' => Reduce #3 expression call binop ">>"
	'^' => Reduce #3 expression call binop ">>"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop ">>"
	'&' => Reduce #3 expression call binop ">>"
	'}' => Reduce #3 expression call binop ">>"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop ">>"
	'+' => Reduce #3 expression call binop ">>"
	'-' => Reduce #3 expression call binop ">>"
	'*' => Reduce #3 expression call binop ">>"
	'/' => Reduce #3 expression call binop ">>"
	'%' => Reduce #3 expression call binop ">>"
	"&&" => Reduce #3 expression call binop ">>"
	"||" => Reduce #3 expression call binop ">>"
	'|' => Reduce #3 expression call binop ">>"
	"<<" => Reduce #3 expression call binop ">>"
	">>" => Reduce #3 expression call binop ">>"
	"==" => Reduce #3 expression call binop ">>"
	"!=" => Reduce #3 expression call binop ">>"
	">=" => Reduce #3 expression call binop ">>"
	"<=" => Reduce #3 expression call binop ">>"
	'>' => Reduce #3 expression call binop ">>"
	'<' => Reduce #3 expression call binop ">>"
	"+=" => Reduce #3 expression call binop ">>"
	"-=" => Reduce #3 expression call binop ">>"
	"*=" => Reduce #3 expression call binop ">>"
	"/=" => Reduce #3 expression call binop ">>"
	"^=" => Reduce #3 expression call binop ">>"
	"%=" => Reduce #3 expression call binop ">>"
	"&&=" => Reduce #3 expression call binop ">>"
	"||=" => Reduce #3 expression call binop ">>"
	"&=" => Reduce #3 expression call binop ">>"
	"|=" => Reduce #3 expression call binop ">>"
	"<<=" => Reduce #3 expression call binop ">>"
	">>=" => Reduce #3 expression call binop ">>"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "=="
	';' => Reduce #3 expression call binop "=="
	',' => Reduce #3 expression call binop "=="
	'^' => Reduce #3 expression call binop "=="
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "=="
	'&' => Reduce #3 expression call binop "=="
	'}' => Reduce #3 expression call binop "=="
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "=="
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "=="
	"||" => Reduce #3 expression call binop "=="
	'|' => Reduce #3 expression call binop "=="
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "=="
	"!=" => Reduce #3 expression call binop "=="
	">=" => Reduce #3 expression call binop "=="
	"<=" => Reduce #3 expression call binop "=="
	'>' => Reduce #3 expression call binop "=="
	'<' => Reduce #3 expression call binop "=="
	"+=" => Reduce #3 expression call binop "=="
	"-=" => Reduce #3 expression call binop "=="
	"*=" => Reduce #3 expression call binop "=="
	"/=" => Reduce #3 expression call binop "=="
	"^=" => Reduce #3 expression call binop "=="
	"%=" => Reduce #3 expression call binop "=="
	"&&=" => Reduce #3 expression call binop "=="
	"||=" => Reduce #3 expression call binop "=="
	"&=" => Reduce #3 expression call binop "=="
	"|=" => Reduce #3 expression call binop "=="
	"<<=" => Reduce #3 expression call binop "=="
	">>=" => Reduce #3 expression call binop "=="
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "!="
	';' => Reduce #3 expression call binop "!="
	',' => Reduce #3 expression call binop "!="
	'^' => Reduce #3 expression call binop "!="
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "!="
	'&' => Reduce #3 expression call binop "!="
	'}' => Reduce #3 expression call binop "!="
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "!="
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "!="
	"||" => Reduce #3 expression call binop "!="
	'|' => Reduce #3 expression call binop "!="
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "!="
	"!=" => Reduce #3 expression call binop "!="
	">=" => Reduce #3 expression call binop "!="
	"<=" => Reduce #3 expression call binop "!="
	'>' => Reduce #3 expression call binop "!="
	'<' => Reduce #3 expression call binop "!="
	"+=" => Reduce #3 expression call binop "!="
	"-=" => Reduce #3 expression call binop "!="
	"*=" => Reduce #3 expression call binop "!="
	"/=" => Reduce #3 expression call binop "!="
	"^=" => Reduce #3 expression call binop "!="
	"%=" => Reduce #3 expression call binop "!="
	"&&=" => Reduce #3 expression call binop "!="
	"||=" => Reduce #3 expression call binop "!="
	"&=" => Reduce #3 expression call binop "!="
	"|=" => Reduce #3 expression call binop "!="
	"<<=" => Reduce #3 expression call binop "!="
	">>=" => Reduce #3 expression call binop "!="
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop ">="
	';' => Reduce #3 expression call binop ">="
	',' => Reduce #3 expression call binop ">="
	'^' => Reduce #3 expression call binop ">="
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop ">="
	'&' => Reduce #3 expression call binop ">="
	'}' => Reduce #3 expression call binop ">="
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop ">="
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop ">="
	"||" => Reduce #3 expression call binop ">="
	'|' => Reduce #3 expression call binop ">="
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop ">="
	"!=" => Reduce #3 expression call binop ">="
	">=" => Reduce #3 expression call binop ">="
	"<=" => Reduce #3 expression call binop ">="
	'>' => Reduce #3 expression call binop ">="
	'<' => Reduce #3 expression call binop ">="
	"+=" => Reduce #3 expression call binop ">="
	"-=" => Reduce #3 expression call binop ">="
	"*=" => Reduce #3 expression call binop ">="
	"/=" => Reduce #3 expression call binop ">="
	"^=" => Reduce #3 expression call binop ">="
	"%=" => Reduce #3 expression call binop ">="
	"&&=" => Reduce #3 expression call binop ">="
	"||=" => Reduce #3 expression call binop ">="
	"&=" => Reduce #3 expression call binop ">="
	"|=" => Reduce #3 expression call binop ">="
	"<<=" => Reduce #3 expression call binop ">="
	">>=" => Reduce #3 expression call binop ">="
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "<="
	';' => Reduce #3 expression call binop "<="
	',' => Reduce #3 expression call binop "<="
	'^' => Reduce #3 expression call binop "<="
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "<="
	'&' => Reduce #3 expression call binop "<="
	'}' => Reduce #3 expression call binop "<="
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "<="
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "<="
	"||" => Reduce #3 expression call binop "<="
	'|' => Reduce #3 expression call binop "<="
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "<="
	"!=" => Reduce #3 expression call binop "<="
	">=" => Reduce #3 expression call binop "<="
	"<=" => Reduce #3 expression call binop "<="
	'>' => Reduce #3 expression call binop "<="
	'<' => Reduce #3 expression call binop "<="
	"+=" => Reduce #3 expression call binop "<="
	"-=" => Reduce #3 expression call binop "<="
	"*=" => Reduce #3 expression call binop "<="
	"/=" => Reduce #3 expression call binop "<="
	"^=" => Reduce #3 expression call binop "<="
	"%=" => Reduce #3 expression call binop "<="
	"&&=" => Reduce #3 expression call binop "<="
	"||=" => Reduce #3 expression call binop "<="
	"&=" => Reduce #3 expression call binop "<="
	"|=" => Reduce #3 expression call binop "<="
	"<<=" => Reduce #3 expression call binop "<="
	">>=" => Reduce #3 expression call binop "<="
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop ">"
	';' => Reduce #3 expression call binop ">"
	',' => Reduce #3 expression call binop ">"
	'^' => Reduce #3 expression call binop ">"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop ">"
	'&' => Reduce #3 expression call binop ">"
	'}' => Reduce #3 expression call binop ">"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop ">"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop ">"
	"||" => Reduce #3 expression call binop ">"
	'|' => Reduce #3 expression call binop ">"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop ">"
	"!=" => Reduce #3 expression call binop ">"
	">=" => Reduce #3 expression call binop ">"
	"<=" => Reduce #3 expression call binop ">"
	'>' => Reduce #3 expression call binop ">"
	'<' => Reduce #3 expression call binop ">"
	"+=" => Reduce #3 expression call binop ">"
	"-=" => Reduce #3 expression call binop ">"
	"*=" => Reduce #3 expression call binop ">"
	"/=" => Reduce #3 expression call binop ">"
	"^=" => Reduce #3 expression call binop ">"
	"%=" => Reduce #3 expression call binop ">"
	"&&=" => Reduce #3 expression call binop ">"
	"||=" => Reduce #3 expression call binop ">"
	"&=" => Reduce #3 expression call binop ">"
	"|=" => Reduce #3 expression call binop ">"
	"<<=" => Reduce #3 expression call binop ">"
	">>=" => Reduce #3 expression call binop ">"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call binop "<"
	';' => Reduce #3 expression call binop "<"
	',' => Reduce #3 expression call binop "<"
	'^' => Reduce #3 expression call binop "<"
	'[' => Shift goto XX
	']' => Reduce #3 expression call binop "<"
	'&' => Reduce #3 expression call binop "<"
	'}' => Reduce #3 expression call binop "<"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call binop "<"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Reduce #3 expression call binop "<"
	"||" => Reduce #3 expression call binop "<"
	'|' => Reduce #3 expression call binop "<"
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Reduce #3 expression call binop "<"
	"!=" => Reduce #3 expression call binop "<"
	">=" => Reduce #3 expression call binop "<"
	"<=" => Reduce #3 expression call binop "<"
	'>' => Reduce #3 expression call binop "<"
	'<' => Reduce #3 expression call binop "<"
	"+=" => Reduce #3 expression call binop "<"
	"-=" => Reduce #3 expression call binop "<"
	"*=" => Reduce #3 expression call binop "<"
	"/=" => Reduce #3 expression call binop "<"
	"^=" => Reduce #3 expression call binop "<"
	"%=" => Reduce #3 expression call binop "<"
	"&&=" => Reduce #3 expression call binop "<"
	"||=" => Reduce #3 expression call binop "<"
	"&=" => Reduce #3 expression call binop "<"
	"|=" => Reduce #3 expression call binop "<"
	"<<=" => Reduce #3 expression call binop "<"
	">>=" => Reduce #3 expression call binop "<"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "+"
	';' => Reduce #3 expression call assign_operator "+"
	',' => Reduce #3 expression call assign_operator "+"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "+"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "+"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "+"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "+"
	"-=" => Reduce #3 expression call assign_operator "+"
	"*=" => Reduce #3 expression call assign_operator "+"
	"/=" => Reduce #3 expression call assign_operator "+"
	"^=" => Reduce #3 expression call assign_operator "+"
	"%=" => Reduce #3 expression call assign_operator "+"
	"&&=" => Reduce #3 expression call assign_operator "+"
	"||=" => Reduce #3 expression call assign_operator "+"
	"&=" => Reduce #3 expression call assign_operator "+"
	"|=" => Reduce #3 expression call assign_operator "+"
	"<<=" => Reduce #3 expression call assign_operator "+"
	">>=" => Reduce #3 expression call assign_operator "+"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "-"
	';' => Reduce #3 expression call assign_operator "-"
	',' => Reduce #3 expression call assign_operator "-"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "-"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "-"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "-"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "-"
	"-=" => Reduce #3 expression call assign_operator "-"
	"*=" => Reduce #3 expression call assign_operator "-"
	"/=" => Reduce #3 expression call assign_operator "-"
	"^=" => Reduce #3 expression call assign_operator "-"
	"%=" => Reduce #3 expression call assign_operator "-"
	"&&=" => Reduce #3 expression call assign_operator "-"
	"||=" => Reduce #3 expression call assign_operator "-"
	"&=" => Reduce #3 expression call assign_operator "-"
	"|=" => Reduce #3 expression call assign_operator "-"
	"<<=" => Reduce #3 expression call assign_operator "-"
	">>=" => Reduce #3 expression call assign_operator "-"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "*"
	';' => Reduce #3 expression call assign_operator "*"
	',' => Reduce #3 expression call assign_operator "*"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "*"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "*"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "*"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "*"
	"-=" => Reduce #3 expression call assign_operator "*"
	"*=" => Reduce #3 expression call assign_operator "*"
	"/=" => Reduce #3 expression call assign_operator "*"
	"^=" => Reduce #3 expression call assign_operator "*"
	"%=" => Reduce #3 expression call assign_operator "*"
	"&&=" => Reduce #3 expression call assign_operator "*"
	"||=" => Reduce #3 expression call assign_operator "*"
	"&=" => Reduce #3 expression call assign_operator "*"
	"|=" => Reduce #3 expression call assign_operator "*"
	"<<=" => Reduce #3 expression call assign_operator "*"
	">>=" => Reduce #3 expression call assign_operator "*"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "/"
	';' => Reduce #3 expression call assign_operator "/"
	',' => Reduce #3 expression call assign_operator "/"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "/"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "/"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "/"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "/"
	"-=" => Reduce #3 expression call assign_operator "/"
	"*=" => Reduce #3 expression call assign_operator "/"
	"/=" => Reduce #3 expression call assign_operator "/"
	"^=" => Reduce #3 expression call assign_operator "/"
	"%=" => Reduce #3 expression call assign_operator "/"
	"&&=" => Reduce #3 expression call assign_operator "/"
	"||=" => Reduce #3 expression call assign_operator "/"
	"&=" => Reduce #3 expression call assign_operator "/"
	"|=" => Reduce #3 expression call assign_operator "/"
	"<<=" => Reduce #3 expression call assign_operator "/"
	">>=" => Reduce #3 expression call assign_operator "/"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "^"
	';' => Reduce #3 expression call assign_operator "^"
	',' => Reduce #3 expression call assign_operator "^"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "^"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "^"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "^"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "^"
	"-=" => Reduce #3 expression call assign_operator "^"
	"*=" => Reduce #3 expression call assign_operator "^"
	"/=" => Reduce #3 expression call assign_operator "^"
	"^=" => Reduce #3 expression call assign_operator "^"
	"%=" => Reduce #3 expression call assign_operator "^"
	"&&=" => Reduce #3 expression call assign_operator "^"
	"||=" => Reduce #3 expression call assign_operator "^"
	"&=" => Reduce #3 expression call assign_operator "^"
	"|=" => Reduce #3 expression call assign_operator "^"
	"<<=" => Reduce #3 expression call assign_operator "^"
	">>=" => Reduce #3 expression call assign_operator "^"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "%"
	';' => Reduce #3 expression call assign_operator "%"
	',' => Reduce #3 expression call assign_operator "%"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "%"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "%"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "%"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "%"
	"-=" => Reduce #3 expression call assign_operator "%"
	"*=" => Reduce #3 expression call assign_operator "%"
	"/=" => Reduce #3 expression call assign_operator "%"
	"^=" => Reduce #3 expression call assign_operator "%"
	"%=" => Reduce #3 expression call assign_operator "%"
	"&&=" => Reduce #3 expression call assign_operator "%"
	"||=" => Reduce #3 expression call assign_operator "%"
	"&=" => Reduce #3 expression call assign_operator "%"
	"|=" => Reduce #3 expression call assign_operator "%"
	"<<=" => Reduce #3 expression call assign_operator "%"
	">>=" => Reduce #3 expression call assign_operator "%"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "&&"
	';' => Reduce #3 expression call assign_operator "&&"
	',' => Reduce #3 expression call assign_operator "&&"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "&&"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "&&"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "&&"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "&&"
	"-=" => Reduce #3 expression call assign_operator "&&"
	"*=" => Reduce #3 expression call assign_operator "&&"
	"/=" => Reduce #3 expression call assign_operator "&&"
	"^=" => Reduce #3 expression call assign_operator "&&"
	"%=" => Reduce #3 expression call assign_operator "&&"
	"&&=" => Reduce #3 expression call assign_operator "&&"
	"||=" => Reduce #3 expression call assign_operator "&&"
	"&=" => Reduce #3 expression call assign_operator "&&"
	"|=" => Reduce #3 expression call assign_operator "&&"
	"<<=" => Reduce #3 expression call assign_operator "&&"
	">>=" => Reduce #3 expression call assign_operator "&&"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "||"
	';' => Reduce #3 expression call assign_operator "||"
	',' => Reduce #3 expression call assign_operator "||"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "||"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "||"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "||"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "||"
	"-=" => Reduce #3 expression call assign_operator "||"
	"*=" => Reduce #3 expression call assign_operator "||"
	"/=" => Reduce #3 expression call assign_operator "||"
	"^=" => Reduce #3 expression call assign_operator "||"
	"%=" => Reduce #3 expression call assign_operator "||"
	"&&=" => Reduce #3 expression call assign_operator "||"
	"||=" => Reduce #3 expression call assign_operator "||"
	"&=" => Reduce #3 expression call assign_operator "||"
	"|=" => Reduce #3 expression call assign_operator "||"
	"<<=" => Reduce #3 expression call assign_operator "||"
	">>=" => Reduce #3 expression call assign_operator "||"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "&"
	';' => Reduce #3 expression call assign_operator "&"
	',' => Reduce #3 expression call assign_operator "&"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "&"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "&"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "&"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "&"
	"-=" => Reduce #3 expression call assign_operator "&"
	"*=" => Reduce #3 expression call assign_operator "&"
	"/=" => Reduce #3 expression call assign_operator "&"
	"^=" => Reduce #3 expression call assign_operator "&"
	"%=" => Reduce #3 expression call assign_operator "&"
	"&&=" => Reduce #3 expression call assign_operator "&"
	"||=" => Reduce #3 expression call assign_operator "&"
	"&=" => Reduce #3 expression call assign_operator "&"
	"|=" => Reduce #3 expression call assign_operator "&"
	"<<=" => Reduce #3 expression call assign_operator "&"
	">>=" => Reduce #3 expression call assign_operator "&"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "|"
	';' => Reduce #3 expression call assign_operator "|"
	',' => Reduce #3 expression call assign_operator "|"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "|"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "|"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "|"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "|"
	"-=" => Reduce #3 expression call assign_operator "|"
	"*=" => Reduce #3 expression call assign_operator "|"
	"/=" => Reduce #3 expression call assign_operator "|"
	"^=" => Reduce #3 expression call assign_operator "|"
	"%=" => Reduce #3 expression call assign_operator "|"
	"&&=" => Reduce #3 expression call assign_operator "|"
	"||=" => Reduce #3 expression call assign_operator "|"
	"&=" => Reduce #3 expression call assign_operator "|"
	"|=" => Reduce #3 expression call assign_operator "|"
	"<<=" => Reduce #3 expression call assign_operator "|"
	">>=" => Reduce #3 expression call assign_operator "|"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator "<<"
	';' => Reduce #3 expression call assign_operator "<<"
	',' => Reduce #3 expression call assign_operator "<<"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator "<<"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator "<<"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator "<<"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator "<<"
	"-=" => Reduce #3 expression call assign_operator "<<"
	"*=" => Reduce #3 expression call assign_operator "<<"
	"/=" => Reduce #3 expression call assign_operator "<<"
	"^=" => Reduce #3 expression call assign_operator "<<"
	"%=" => Reduce #3 expression call assign_operator "<<"
	"&&=" => Reduce #3 expression call assign_operator "<<"
	"||=" => Reduce #3 expression call assign_operator "<<"
	"&=" => Reduce #3 expression call assign_operator "<<"
	"|=" => Reduce #3 expression call assign_operator "<<"
	"<<=" => Reduce #3 expression call assign_operator "<<"
	">>=" => Reduce #3 expression call assign_operator "<<"
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #3 expression call assign_operator ">>"
	';' => Reduce #3 expression call assign_operator ">>"
	',' => Reduce #3 expression call assign_operator ">>"
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 expression call assign_operator ">>"
	'&' => Shift goto XX
	'}' => Reduce #3 expression call assign_operator ">>"
	"->" => Shift goto XX
	'=' => Reduce #3 expression call assign_operator ">>"
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Reduce #3 expression call assign_operator ">>"
	"-=" => Reduce #3 expression call assign_operator ">>"
	"*=" => Reduce #3 expression call assign_operator ">>"
	"/=" => Reduce #3 expression call assign_operator ">>"
	"^=" => Reduce #3 expression call assign_operator ">>"
	"%=" => Reduce #3 expression call assign_operator ">>"
	"&&=" => Reduce #3 expression call assign_operator ">>"
	"||=" => Reduce #3 expression call assign_operator ">>"
	"&=" => Reduce #3 expression call assign_operator ">>"
	"|=" => Reduce #3 expression call assign_operator ">>"
	"<<=" => Reduce #3 expression call assign_operator ">>"
	">>=" => Reduce #3 expression call assign_operator ">>"
	'.' => Shift goto XX
[XX]
	'(' => Reduce #3 expression call member
	')' => Reduce #3 expression call member
	';' => Reduce #3 expression call member
	',' => Reduce #3 expression call member
	'^' => Reduce #3 expression call member
	'[' => Reduce #3 expression call member
	']' => Reduce #3 expression call member
	'&' => Reduce #3 expression call member
	'}' => Reduce #3 expression call member
	"->" => Reduce #3 expression call member
	'=' => Reduce #3 expression call member
	'+' => Reduce #3 expression call member
	'-' => Reduce #3 expression call member
	'*' => Reduce #3 expression call member
	'/' => Reduce #3 expression call member
	'%' => Reduce #3 expression call member
	"&&" => Reduce #3 expression call member
	"||" => Reduce #3 expression call member
	'|' => Reduce #3 expression call member
	"<<" => Reduce #3 expression call member
	">>" => Reduce #3 expression call member
	"==" => Reduce #3 expression call member
	"!=" => Reduce #3 expression call member
	">=" => Reduce #3 expression call member
	"<=" => Reduce #3 expression call member
	'>' => Reduce #3 expression call member
	'<' => Reduce #3 expression call member
	"+=" => Reduce #3 expression call member
	"-=" => Reduce #3 expression call member
	"*=" => Reduce #3 expression call member
	"/=" => Reduce #3 expression call member
	"^=" => Reduce #3 expression call member
	"%=" => Reduce #3 expression call member
	"&&=" => Reduce #3 expression call member
	"||=" => Reduce #3 expression call member
	"&=" => Reduce #3 expression call member
	"|=" => Reduce #3 expression call member
	"<<=" => Reduce #3 expression call member
	">>=" => Reduce #3 expression call member
	'.' => Reduce #3 expression call member
[XX]
	'(' => Reduce #3 expression
	')' => Reduce #3 expression
	';' => Reduce #3 expression
	',' => Reduce #3 expression
	'^' => Reduce #3 expression
	'[' => Reduce #3 expression
	']' => Reduce #3 expression
	'&' => Reduce #3 expression
	'}' => Reduce #3 expression
	"->" => Reduce #3 expression
	'=' => Reduce #3 expression
	'+' => Reduce #3 expression
	'-' => Reduce #3 expression
	'*' => Reduce #3 expression
	'/' => Reduce #3 expression
	'%' => Reduce #3 expression
	"&&" => Reduce #3 expression
	"||" => Reduce #3 expression
	'|' => Reduce #3 expression
	"<<" => Reduce #3 expression
	">>" => Reduce #3 expression
	"==" => Reduce #3 expression
	"!=" => Reduce #3 expression
	">=" => Reduce #3 expression
	"<=" => Reduce #3 expression
	'>' => Reduce #3 expression
	'<' => Reduce #3 expression
	"+=" => Reduce #3 expression
	"-=" => Reduce #3 expression
	"*=" => Reduce #3 expression
	"/=" => Reduce #3 expression
	"^=" => Reduce #3 expression
	"%=" => Reduce #3 expression
	"&&=" => Reduce #3 expression
	"||=" => Reduce #3 expression
	"&=" => Reduce #3 expression
	"|=" => Reduce #3 expression
	"<<=" => Reduce #3 expression
	">>=" => Reduce #3 expression
	'.' => Reduce #3 expression
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'(' => Reduce #3 expression call structure
	')' => Reduce #3 expression call structure
	';' => Reduce #3 expression call structure
	',' => Reduce #3 expression call structure
	'^' => Reduce #3 expression call structure
	'[' => Reduce #3 expression call structure
	']' => Reduce #3 expression call structure
	'&' => Reduce #3 expression call structure
	'}' => Reduce #3 expression call structure
	"->" => Reduce #3 expression call structure
	'=' => Reduce #3 expression call structure
	'+' => Reduce #3 expression call structure
	'-' => Reduce #3 expression call structure
	'*' => Reduce #3 expression call structure
	'/' => Reduce #3 expression call structure
	'%' => Reduce #3 expression call structure
	"&&" => Reduce #3 expression call structure
	"||" => Reduce #3 expression call structure
	'|' => Reduce #3 expression call structure
	"<<" => Reduce #3 expression call structure
	">>" => Reduce #3 expression call structure
	"==" => Reduce #3 expression call structure
	"!=" => Reduce #3 expression call structure
	">=" => Reduce #3 expression call structure
	"<=" => Reduce #3 expression call structure
	'>' => Reduce #3 expression call structure
	'<' => Reduce #3 expression call structure
	"+=" => Reduce #3 expression call structure
	"-=" => Reduce #3 expression call structure
	"*=" => Reduce #3 expression call structure
	"/=" => Reduce #3 expression call structure
	"^=" => Reduce #3 expression call structure
	"%=" => Reduce #3 expression call structure
	"&&=" => Reduce #3 expression call structure
	"||=" => Reduce #3 expression call structure
	"&=" => Reduce #3 expression call structure
	"|=" => Reduce #3 expression call structure
	"<<=" => Reduce #3 expression call structure
	">>=" => Reduce #3 expression call structure
	'.' => Reduce #3 expression call structure
[XX]
	$ => Reduce #3 statement call definition 1
	BOOLEAN => Reduce #3 statement call definition 1
	IDENT => Reduce #3 statement call definition 1
	DQSTRING => Reduce #3 statement call definition 1
	SQSTRING => Reduce #3 statement call definition 1
	UINTEGER => Reduce #3 statement call definition 1
	FLOAT => Reduce #3 statement call definition 1
	"function" => Reduce #3 statement call definition 1
	'(' => Reduce #3 statement call definition 1
	"procedure" => Reduce #3 statement call definition 1
	"class" => Reduce #3 statement call definition 1
	"struct" => Reduce #3 statement call definition 1
	'&' => Reduce #3 statement call definition 1
	"typedef" => Reduce #3 statement call definition 1
	'{' => Reduce #3 statement call definition 1
	'}' => Reduce #3 statement call definition 1
	"generic" => Reduce #3 statement call definition 1
	"private" => Reduce #3 statement call definition 1
	"public" => Reduce #3 statement call definition 1
	'+' => Reduce #3 statement call definition 1
	'-' => Reduce #3 statement call definition 1
	'*' => Reduce #3 statement call definition 1
	'~' => Reduce #3 statement call definition 1
	'!' => Reduce #3 statement call definition 1
	"lambda" => Reduce #3 statement call definition 1
	"try" => Reduce #3 statement call definition 1
	"var" => Reduce #3 statement call definition 1
	"return" => Reduce #3 statement call definition 1
	"throw" => Reduce #3 statement call definition 1
	"delete" => Reduce #3 statement call definition 1
	"if" => Reduce #3 statement call definition 1
	"while" => Reduce #3 statement call definition 1
	"with" => Reduce #3 statement call definition 1
	"new" => Reduce #3 statement call definition 1
	"cast" => Reduce #3 statement call definition 1
	"null" => Reduce #3 statement call definition 1
[XX]
	$ => Reduce #3 statement call return_value
	BOOLEAN => Reduce #3 statement call return_value
	IDENT => Reduce #3 statement call return_value
	DQSTRING => Reduce #3 statement call return_value
	SQSTRING => Reduce #3 statement call return_value
	UINTEGER => Reduce #3 statement call return_value
	FLOAT => Reduce #3 statement call return_value
	"function" => Reduce #3 statement call return_value
	'(' => Reduce #3 statement call return_value
	"procedure" => Reduce #3 statement call return_value
	"class" => Reduce #3 statement call return_value
	"struct" => Reduce #3 statement call return_value
	'&' => Reduce #3 statement call return_value
	"typedef" => Reduce #3 statement call return_value
	'{' => Reduce #3 statement call return_value
	'}' => Reduce #3 statement call return_value
	"generic" => Reduce #3 statement call return_value
	"private" => Reduce #3 statement call return_value
	"public" => Reduce #3 statement call return_value
	'+' => Reduce #3 statement call return_value
	'-' => Reduce #3 statement call return_value
	'*' => Reduce #3 statement call return_value
	'~' => Reduce #3 statement call return_value
	'!' => Reduce #3 statement call return_value
	"lambda" => Reduce #3 statement call return_value
	"try" => Reduce #3 statement call return_value
	"var" => Reduce #3 statement call return_value
	"return" => Reduce #3 statement call return_value
	"throw" => Reduce #3 statement call return_value
	"delete" => Reduce #3 statement call return_value
	"if" => Reduce #3 statement call return_value
	"while" => Reduce #3 statement call return_value
	"with" => Reduce #3 statement call return_value
	"new" => Reduce #3 statement call return_value
	"cast" => Reduce #3 statement call return_value
	"null" => Reduce #3 statement call return_value
[XX]
	$ => Reduce #3 statement call throw_exception
	BOOLEAN => Reduce #3 statement call throw_exception
	IDENT => Reduce #3 statement call throw_exception
	DQSTRING => Reduce #3 statement call throw_exception
	SQSTRING => Reduce #3 statement call throw_exception
	UINTEGER => Reduce #3 statement call throw_exception
	FLOAT => Reduce #3 statement call throw_exception
	"function" => Reduce #3 statement call throw_exception
	'(' => Reduce #3 statement call throw_exception
	"procedure" => Reduce #3 statement call throw_exception
	"class" => Reduce #3 statement call throw_exception
	"struct" => Reduce #3 statement call throw_exception
	'&' => Reduce #3 statement call throw_exception
	"typedef" => Reduce #3 statement call throw_exception
	'{' => Reduce #3 statement call throw_exception
	'}' => Reduce #3 statement call throw_exception
	"generic" => Reduce #3 statement call throw_exception
	"private" => Reduce #3 statement call throw_exception
	"public" => Reduce #3 statement call throw_exception
	'+' => Reduce #3 statement call throw_exception
	'-' => Reduce #3 statement call throw_exception
	'*' => Reduce #3 statement call throw_exception
	'~' => Reduce #3 statement call throw_exception
	'!' => Reduce #3 statement call throw_exception
	"lambda" => Reduce #3 statement call throw_exception
	"try" => Reduce #3 statement call throw_exception
	"var" => Reduce #3 statement call throw_exception
	"return" => Reduce #3 statement call throw_exception
	"throw" => Reduce #3 statement call throw_exception
	"delete" => Reduce #3 statement call throw_exception
	"if" => Reduce #3 statement call throw_exception
	"while" => Reduce #3 statement call throw_exception
	"with" => Reduce #3 statement call throw_exception
	"new" => Reduce #3 statement call throw_exception
	"cast" => Reduce #3 statement call throw_exception
	"null" => Reduce #3 statement call throw_exception
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	$ => Reduce #3 statement call delete
	BOOLEAN => Reduce #3 statement call delete
	IDENT => Reduce #3 statement call delete
	DQSTRING => Reduce #3 statement call delete
	SQSTRING => Reduce #3 statement call delete
	UINTEGER => Reduce #3 statement call delete
	FLOAT => Reduce #3 statement call delete
	"function" => Reduce #3 statement call delete
	'(' => Reduce #3 statement call delete
	"procedure" => Reduce #3 statement call delete
	"class" => Reduce #3 statement call delete
	"struct" => Reduce #3 statement call delete
	'&' => Reduce #3 statement call delete
	"typedef" => Reduce #3 statement call delete
	'{' => Reduce #3 statement call delete
	'}' => Reduce #3 statement call delete
	"generic" => Reduce #3 statement call delete
	"private" => Reduce #3 statement call delete
	"public" => Reduce #3 statement call delete
	'+' => Reduce #3 statement call delete
	'-' => Reduce #3 statement call delete
	'*' => Reduce #3 statement call delete
	'~' => Reduce #3 statement call delete
	'!' => Reduce #3 statement call delete
	"lambda" => Reduce #3 statement call delete
	"try" => Reduce #3 statement call delete
	"var" => Reduce #3 statement call delete
	"return" => Reduce #3 statement call delete
	"throw" => Reduce #3 statement call delete
	"delete" => Reduce #3 statement call delete
	"if" => Reduce #3 statement call delete
	"while" => Reduce #3 statement call delete
	"with" => Reduce #3 statement call delete
	"new" => Reduce #3 statement call delete
	"cast" => Reduce #3 statement call delete
	"null" => Reduce #3 statement call delete
[XX]
	'(' => Shift goto XX
	')' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	')' => Reduce #2 impl_paramdecl call paramdef
	',' => Reduce #2 impl_paramdecl call paramdef
[XX]
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
	'{' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	'(' => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	$ => Reduce #3 constructordefinition call constructordef
	IDENT => Reduce #3 constructordefinition call constructordef
	"function" => Reduce #3 constructordefinition call constructordef
	"procedure" => Reduce #3 constructordefinition call constructordef
	"operator" => Reduce #3 constructordefinition call constructordef
	"const" => Reduce #3 constructordefinition call constructordef
	"any" => Reduce #3 constructordefinition call constructordef
	"class" => Reduce #3 constructordefinition call constructordef
	"struct" => Reduce #3 constructordefinition call constructordef
	"typedef" => Reduce #3 constructordefinition call constructordef
	'}' => Reduce #3 constructordefinition call constructordef
	"generic" => Reduce #3 constructordefinition call constructordef
	"interface" => Reduce #3 constructordefinition call constructordef
	"private" => Reduce #3 constructordefinition call constructordef
	"public" => Reduce #3 constructordefinition call constructordef
	"constructor" => Reduce #3 constructordefinition call constructordef
	"destructor" => Reduce #3 constructordefinition call constructordef
[XX]
	'{' => Reduce #3 inheritlist call inheritdef 1
[XX]
	'}' => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	';' => Reduce #6 typedefinition call typedef_proctype {throws=true}
	"nothrow" => Shift goto XX
[XX]
	')' => Reduce #2 extern_paramdecl call extern_paramdef
	"..." => Reduce #2 extern_paramdecl call extern_paramdef
	',' => Reduce #2 extern_paramdecl call extern_paramdef
[XX]
	']' => Shift goto XX
[XX]
	']' => Shift goto XX
[XX]
	'{' => Shift goto XX
	':' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	IDENT => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	'(' => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	"const" => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	"any" => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
[XX]
	IDENT => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	'(' => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	"const" => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	"any" => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
[XX]
	')' => Shift goto XX
	"..." => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	$ => Reduce #3 catchblock call catchblock
	BOOLEAN => Reduce #3 catchblock call catchblock
	IDENT => Reduce #3 catchblock call catchblock
	DQSTRING => Reduce #3 catchblock call catchblock
	SQSTRING => Reduce #3 catchblock call catchblock
	UINTEGER => Reduce #3 catchblock call catchblock
	FLOAT => Reduce #3 catchblock call catchblock
	"function" => Reduce #3 catchblock call catchblock
	'(' => Reduce #3 catchblock call catchblock
	"procedure" => Reduce #3 catchblock call catchblock
	"class" => Reduce #3 catchblock call catchblock
	"struct" => Reduce #3 catchblock call catchblock
	'&' => Reduce #3 catchblock call catchblock
	"typedef" => Reduce #3 catchblock call catchblock
	'{' => Reduce #3 catchblock call catchblock
	'}' => Reduce #3 catchblock call catchblock
	"generic" => Reduce #3 catchblock call catchblock
	"private" => Reduce #3 catchblock call catchblock
	"public" => Reduce #3 catchblock call catchblock
	'+' => Reduce #3 catchblock call catchblock
	'-' => Reduce #3 catchblock call catchblock
	'*' => Reduce #3 catchblock call catchblock
	'~' => Reduce #3 catchblock call catchblock
	'!' => Reduce #3 catchblock call catchblock
	"lambda" => Reduce #3 catchblock call catchblock
	"try" => Reduce #3 catchblock call catchblock
	"var" => Reduce #3 catchblock call catchblock
	"return" => Reduce #3 catchblock call catchblock
	"throw" => Reduce #3 catchblock call catchblock
	"delete" => Reduce #3 catchblock call catchblock
	"if" => Reduce #3 catchblock call catchblock
	"while" => Reduce #3 catchblock call catchblock
	"with" => Reduce #3 catchblock call catchblock
	"new" => Reduce #3 catchblock call catchblock
	"cast" => Reduce #3 catchblock call catchblock
	"null" => Reduce #3 catchblock call catchblock
[XX]
	IDENT => Shift goto XX
[XX]
	'(' => Reduce #4 expression call operator "()"
	')' => Reduce #4 expression call operator "()"
	';' => Reduce #4 expression call operator "()"
	',' => Reduce #4 expression call operator "()"
	'^' => Reduce #4 expression call operator "()"
	'[' => Reduce #4 expression call operator "()"
	']' => Reduce #4 expression call operator "()"
	'&' => Reduce #4 expression call operator "()"
	'}' => Reduce #4 expression call operator "()"
	"->" => Reduce #4 expression call operator "()"
	'=' => Reduce #4 expression call operator "()"
	'+' => Reduce #4 expression call operator "()"
	'-' => Reduce #4 expression call operator "()"
	'*' => Reduce #4 expression call operator "()"
	'/' => Reduce #4 expression call operator "()"
	'%' => Reduce #4 expression call operator "()"
	"&&" => Reduce #4 expression call operator "()"
	"||" => Reduce #4 expression call operator "()"
	'|' => Reduce #4 expression call operator "()"
	"<<" => Reduce #4 expression call operator "()"
	">>" => Reduce #4 expression call operator "()"
	"==" => Reduce #4 expression call operator "()"
	"!=" => Reduce #4 expression call operator "()"
	">=" => Reduce #4 expression call operator "()"
	"<=" => Reduce #4 expression call operator "()"
	'>' => Reduce #4 expression call operator "()"
	'<' => Reduce #4 expression call operator "()"
	"+=" => Reduce #4 expression call operator "()"
	"-=" => Reduce #4 expression call operator "()"
	"*=" => Reduce #4 expression call operator "()"
	"/=" => Reduce #4 expression call operator "()"
	"^=" => Reduce #4 expression call operator "()"
	"%=" => Reduce #4 expression call operator "()"
	"&&=" => Reduce #4 expression call operator "()"
	"||=" => Reduce #4 expression call operator "()"
	"&=" => Reduce #4 expression call operator "()"
	"|=" => Reduce #4 expression call operator "()"
	"<<=" => Reduce #4 expression call operator "()"
	">>=" => Reduce #4 expression call operator "()"
	'.' => Reduce #4 expression call operator "()"
[XX]
	'(' => Reduce #4 expression call operator_array "[]"
	')' => Reduce #4 expression call operator_array "[]"
	';' => Reduce #4 expression call operator_array "[]"
	',' => Reduce #4 expression call operator_array "[]"
	'^' => Reduce #4 expression call operator_array "[]"
	'[' => Reduce #4 expression call operator_array "[]"
	']' => Reduce #4 expression call operator_array "[]"
	'&' => Reduce #4 expression call operator_array "[]"
	'}' => Reduce #4 expression call operator_array "[]"
	"->" => Reduce #4 expression call operator_array "[]"
	'=' => Reduce #4 expression call operator_array "[]"
	'+' => Reduce #4 expression call operator_array "[]"
	'-' => Reduce #4 expression call operator_array "[]"
	'*' => Reduce #4 expression call operator_array "[]"
	'/' => Reduce #4 expression call operator_array "[]"
	'%' => Reduce #4 expression call operator_array "[]"
	"&&" => Reduce #4 expression call operator_array "[]"
	"||" => Reduce #4 expression call operator_array "[]"
	'|' => Reduce #4 expression call operator_array "[]"
	"<<" => Reduce #4 expression call operator_array "[]"
	">>" => Reduce #4 expression call operator_array "[]"
	"==" => Reduce #4 expression call operator_array "[]"
	"!=" => Reduce #4 expression call operator_array "[]"
	">=" => Reduce #4 expression call operator_array "[]"
	"<=" => Reduce #4 expression call operator_array "[]"
	'>' => Reduce #4 expression call operator_array "[]"
	'<' => Reduce #4 expression call operator_array "[]"
	"+=" => Reduce #4 expression call operator_array "[]"
	"-=" => Reduce #4 expression call operator_array "[]"
	"*=" => Reduce #4 expression call operator_array "[]"
	"/=" => Reduce #4 expression call operator_array "[]"
	"^=" => Reduce #4 expression call operator_array "[]"
	"%=" => Reduce #4 expression call operator_array "[]"
	"&&=" => Reduce #4 expression call operator_array "[]"
	"||=" => Reduce #4 expression call operator_array "[]"
	"&=" => Reduce #4 expression call operator_array "[]"
	"|=" => Reduce #4 expression call operator_array "[]"
	"<<=" => Reduce #4 expression call operator_array "[]"
	">>=" => Reduce #4 expression call operator_array "[]"
	'.' => Reduce #4 expression call operator_array "[]"
[XX]
	')' => Reduce #3 expressionlist
	']' => Reduce #3 expressionlist
	'}' => Reduce #3 expressionlist
[XX]
	'(' => Shift goto XX
	';' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	';' => Shift goto XX
	'{' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #4 expression call allocate
	';' => Reduce #4 expression call allocate
	',' => Reduce #4 expression call allocate
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #4 expression call allocate
	'&' => Shift goto XX
	'}' => Reduce #4 expression call allocate
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Shift goto XX
	')' => Reduce #4 expression call typecast
	';' => Reduce #4 expression call typecast
	',' => Reduce #4 expression call typecast
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #4 expression call typecast
	'&' => Shift goto XX
	'}' => Reduce #4 expression call typecast
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	'(' => Reduce #5 lamda_expression call lambda_expression
	')' => Reduce #5 lamda_expression call lambda_expression
	';' => Reduce #5 lamda_expression call lambda_expression
	',' => Reduce #5 lamda_expression call lambda_expression
	'^' => Reduce #5 lamda_expression call lambda_expression
	'[' => Reduce #5 lamda_expression call lambda_expression
	']' => Reduce #5 lamda_expression call lambda_expression
	'&' => Reduce #5 lamda_expression call lambda_expression
	'}' => Reduce #5 lamda_expression call lambda_expression
	"->" => Reduce #5 lamda_expression call lambda_expression
	'=' => Reduce #5 lamda_expression call lambda_expression
	'+' => Reduce #5 lamda_expression call lambda_expression
	'-' => Reduce #5 lamda_expression call lambda_expression
	'*' => Reduce #5 lamda_expression call lambda_expression
	'/' => Reduce #5 lamda_expression call lambda_expression
	'%' => Reduce #5 lamda_expression call lambda_expression
	"&&" => Reduce #5 lamda_expression call lambda_expression
	"||" => Reduce #5 lamda_expression call lambda_expression
	'|' => Reduce #5 lamda_expression call lambda_expression
	"<<" => Reduce #5 lamda_expression call lambda_expression
	">>" => Reduce #5 lamda_expression call lambda_expression
	"==" => Reduce #5 lamda_expression call lambda_expression
	"!=" => Reduce #5 lamda_expression call lambda_expression
	">=" => Reduce #5 lamda_expression call lambda_expression
	"<=" => Reduce #5 lamda_expression call lambda_expression
	'>' => Reduce #5 lamda_expression call lambda_expression
	'<' => Reduce #5 lamda_expression call lambda_expression
	"+=" => Reduce #5 lamda_expression call lambda_expression
	"-=" => Reduce #5 lamda_expression call lambda_expression
	"*=" => Reduce #5 lamda_expression call lambda_expression
	"/=" => Reduce #5 lamda_expression call lambda_expression
	"^=" => Reduce #5 lamda_expression call lambda_expression
	"%=" => Reduce #5 lamda_expression call lambda_expression
	"&&=" => Reduce #5 lamda_expression call lambda_expression
	"||=" => Reduce #5 lamda_expression call lambda_expression
	"&=" => Reduce #5 lamda_expression call lambda_expression
	"|=" => Reduce #5 lamda_expression call lambda_expression
	"<<=" => Reduce #5 lamda_expression call lambda_expression
	">>=" => Reduce #5 lamda_expression call lambda_expression
	'.' => Reduce #5 lamda_expression call lambda_expression
[XX]
	')' => Reduce #3 lambda_parameters
[XX]
	'{' => Shift goto XX
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
	'{' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
	'{' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
[XX]
	')' => Reduce #3 impl_parameters
[XX]
	'(' => Shift goto XX
[XX]
	$ => Reduce #4 operatordefinition call operator_procdef
	IDENT => Reduce #4 operatordefinition call operator_procdef
	"function" => Reduce #4 operatordefinition call operator_procdef
	"procedure" => Reduce #4 operatordefinition call operator_procdef
	"operator" => Reduce #4 operatordefinition call operator_procdef
	"const" => Reduce #4 operatordefinition call operator_procdef
	"any" => Reduce #4 operatordefinition call operator_procdef
	"class" => Reduce #4 operatordefinition call operator_procdef
	"struct" => Reduce #4 operatordefinition call operator_procdef
	"typedef" => Reduce #4 operatordefinition call operator_procdef
	'}' => Reduce #4 operatordefinition call operator_procdef
	"generic" => Reduce #4 operatordefinition call operator_procdef
	"interface" => Reduce #4 operatordefinition call operator_procdef
	"private" => Reduce #4 operatordefinition call operator_procdef
	"public" => Reduce #4 operatordefinition call operator_procdef
	"constructor" => Reduce #4 operatordefinition call operator_procdef
	"destructor" => Reduce #4 operatordefinition call operator_procdef
[XX]
	$ => Reduce #7 classdefinition call classdef
	BOOLEAN => Reduce #7 classdefinition call classdef
	IDENT => Reduce #7 classdefinition call classdef
	DQSTRING => Reduce #7 classdefinition call classdef
	SQSTRING => Reduce #7 classdefinition call classdef
	UINTEGER => Reduce #7 classdefinition call classdef
	FLOAT => Reduce #7 classdefinition call classdef
	"function" => Reduce #7 classdefinition call classdef
	'(' => Reduce #7 classdefinition call classdef
	"procedure" => Reduce #7 classdefinition call classdef
	"operator" => Reduce #7 classdefinition call classdef
	"const" => Reduce #7 classdefinition call classdef
	"any" => Reduce #7 classdefinition call classdef
	"class" => Reduce #7 classdefinition call classdef
	"struct" => Reduce #7 classdefinition call classdef
	'&' => Reduce #7 classdefinition call classdef
	"typedef" => Reduce #7 classdefinition call classdef
	'{' => Reduce #7 classdefinition call classdef
	'}' => Reduce #7 classdefinition call classdef
	"generic" => Reduce #7 classdefinition call classdef
	"interface" => Reduce #7 classdefinition call classdef
	"namespace" => Reduce #7 classdefinition call classdef
	"private" => Reduce #7 classdefinition call classdef
	"public" => Reduce #7 classdefinition call classdef
	"constructor" => Reduce #7 classdefinition call classdef
	"destructor" => Reduce #7 classdefinition call classdef
	'+' => Reduce #7 classdefinition call classdef
	'-' => Reduce #7 classdefinition call classdef
	'*' => Reduce #7 classdefinition call classdef
	'~' => Reduce #7 classdefinition call classdef
	'!' => Reduce #7 classdefinition call classdef
	"lambda" => Reduce #7 classdefinition call classdef
	"main" => Reduce #7 classdefinition call classdef
	"try" => Reduce #7 classdefinition call classdef
	"var" => Reduce #7 classdefinition call classdef
	"return" => Reduce #7 classdefinition call classdef
	"throw" => Reduce #7 classdefinition call classdef
	"delete" => Reduce #7 classdefinition call classdef
	"if" => Reduce #7 classdefinition call classdef
	"while" => Reduce #7 classdefinition call classdef
	"with" => Reduce #7 classdefinition call classdef
	"new" => Reduce #7 classdefinition call classdef
	"cast" => Reduce #7 classdefinition call classdef
	"null" => Reduce #7 classdefinition call classdef
[XX]
	';' => Reduce #7 typedefinition call typedef_functype {throws=true}
	"nothrow" => Shift goto XX
[XX]
	')' => Reduce #3 extern_parameters call extern_paramdef_collect
	"..." => Reduce #3 extern_parameters call extern_paramdef_collect
[XX]
	';' => Reduce #7 typedefinition call typedef_proctype {throws=false}
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	'(' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"destructor" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	']' => Reduce #3 generic_identlist call generic_header_ident
[XX]
	']' => Reduce #3 generic_identlist call generic_header_ident
[XX]
	',' => Shift goto XX
	"const" => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	']' => Reduce #3 generic_defaultlist call generic_header_ident_type
[XX]
	IDENT => Shift goto XX
	"const" => Shift goto XX
	"any" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	IDENT => Shift goto XX
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto XX
	"any" => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	$ => Reduce #8 extern_definition call extern_procdef
	IDENT => Reduce #8 extern_definition call extern_procdef
	"extern" => Reduce #8 extern_definition call extern_procdef
	"function" => Reduce #8 extern_definition call extern_procdef
	"procedure" => Reduce #8 extern_definition call extern_procdef
	"const" => Reduce #8 extern_definition call extern_procdef
	"any" => Reduce #8 extern_definition call extern_procdef
	"class" => Reduce #8 extern_definition call extern_procdef
	"struct" => Reduce #8 extern_definition call extern_procdef
	"typedef" => Reduce #8 extern_definition call extern_procdef
	"generic" => Reduce #8 extern_definition call extern_procdef
	"interface" => Reduce #8 extern_definition call extern_procdef
	"namespace" => Reduce #8 extern_definition call extern_procdef
	"private" => Reduce #8 extern_definition call extern_procdef
	"public" => Reduce #8 extern_definition call extern_procdef
	"main" => Reduce #8 extern_definition call extern_procdef
[XX]
	';' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	$ => Reduce #5 statement call throw_exception
	BOOLEAN => Reduce #5 statement call throw_exception
	IDENT => Reduce #5 statement call throw_exception
	DQSTRING => Reduce #5 statement call throw_exception
	SQSTRING => Reduce #5 statement call throw_exception
	UINTEGER => Reduce #5 statement call throw_exception
	FLOAT => Reduce #5 statement call throw_exception
	"function" => Reduce #5 statement call throw_exception
	'(' => Reduce #5 statement call throw_exception
	"procedure" => Reduce #5 statement call throw_exception
	"class" => Reduce #5 statement call throw_exception
	"struct" => Reduce #5 statement call throw_exception
	'&' => Reduce #5 statement call throw_exception
	"typedef" => Reduce #5 statement call throw_exception
	'{' => Reduce #5 statement call throw_exception
	'}' => Reduce #5 statement call throw_exception
	"generic" => Reduce #5 statement call throw_exception
	"private" => Reduce #5 statement call throw_exception
	"public" => Reduce #5 statement call throw_exception
	'+' => Reduce #5 statement call throw_exception
	'-' => Reduce #5 statement call throw_exception
	'*' => Reduce #5 statement call throw_exception
	'~' => Reduce #5 statement call throw_exception
	'!' => Reduce #5 statement call throw_exception
	"lambda" => Reduce #5 statement call throw_exception
	"try" => Reduce #5 statement call throw_exception
	"var" => Reduce #5 statement call throw_exception
	"return" => Reduce #5 statement call throw_exception
	"throw" => Reduce #5 statement call throw_exception
	"delete" => Reduce #5 statement call throw_exception
	"if" => Reduce #5 statement call throw_exception
	"while" => Reduce #5 statement call throw_exception
	"with" => Reduce #5 statement call throw_exception
	"new" => Reduce #5 statement call throw_exception
	"cast" => Reduce #5 statement call throw_exception
	"null" => Reduce #5 statement call throw_exception
[XX]
	$ => Reduce #5 statement call conditional_if
	BOOLEAN => Reduce #5 statement call conditional_if
	IDENT => Reduce #5 statement call conditional_if
	DQSTRING => Reduce #5 statement call conditional_if
	SQSTRING => Reduce #5 statement call conditional_if
	UINTEGER => Reduce #5 statement call conditional_if
	FLOAT => Reduce #5 statement call conditional_if
	"function" => Reduce #5 statement call conditional_if
	'(' => Reduce #5 statement call conditional_if
	"procedure" => Reduce #5 statement call conditional_if
	"class" => Reduce #5 statement call conditional_if
	"struct" => Reduce #5 statement call conditional_if
	'&' => Reduce #5 statement call conditional_if
	"typedef" => Reduce #5 statement call conditional_if
	'{' => Reduce #5 statement call conditional_if
	'}' => Reduce #5 statement call conditional_if
	"generic" => Reduce #5 statement call conditional_if
	"private" => Reduce #5 statement call conditional_if
	"public" => Reduce #5 statement call conditional_if
	'+' => Reduce #5 statement call conditional_if
	'-' => Reduce #5 statement call conditional_if
	'*' => Reduce #5 statement call conditional_if
	'~' => Reduce #5 statement call conditional_if
	'!' => Reduce #5 statement call conditional_if
	"lambda" => Reduce #5 statement call conditional_if
	"elseif" => Shift goto XX
	"else" => Shift goto XX
	"try" => Reduce #5 statement call conditional_if
	"var" => Reduce #5 statement call conditional_if
	"return" => Reduce #5 statement call conditional_if
	"throw" => Reduce #5 statement call conditional_if
	"delete" => Reduce #5 statement call conditional_if
	"if" => Reduce #5 statement call conditional_if
	"while" => Reduce #5 statement call conditional_if
	"with" => Reduce #5 statement call conditional_if
	"new" => Reduce #5 statement call conditional_if
	"cast" => Reduce #5 statement call conditional_if
	"null" => Reduce #5 statement call conditional_if
[XX]
	$ => Reduce #5 statement call conditional_while
	BOOLEAN => Reduce #5 statement call conditional_while
	IDENT => Reduce #5 statement call conditional_while
	DQSTRING => Reduce #5 statement call conditional_while
	SQSTRING => Reduce #5 statement call conditional_while
	UINTEGER => Reduce #5 statement call conditional_while
	FLOAT => Reduce #5 statement call conditional_while
	"function" => Reduce #5 statement call conditional_while
	'(' => Reduce #5 statement call conditional_while
	"procedure" => Reduce #5 statement call conditional_while
	"class" => Reduce #5 statement call conditional_while
	"struct" => Reduce #5 statement call conditional_while
	'&' => Reduce #5 statement call conditional_while
	"typedef" => Reduce #5 statement call conditional_while
	'{' => Reduce #5 statement call conditional_while
	'}' => Reduce #5 statement call conditional_while
	"generic" => Reduce #5 statement call conditional_while
	"private" => Reduce #5 statement call conditional_while
	"public" => Reduce #5 statement call conditional_while
	'+' => Reduce #5 statement call conditional_while
	'-' => Reduce #5 statement call conditional_while
	'*' => Reduce #5 statement call conditional_while
	'~' => Reduce #5 statement call conditional_while
	'!' => Reduce #5 statement call conditional_while
	"lambda" => Reduce #5 statement call conditional_while
	"try" => Reduce #5 statement call conditional_while
	"var" => Reduce #5 statement call conditional_while
	"return" => Reduce #5 statement call conditional_while
	"throw" => Reduce #5 statement call conditional_while
	"delete" => Reduce #5 statement call conditional_while
	"if" => Reduce #5 statement call conditional_while
	"while" => Reduce #5 statement call conditional_while
	"with" => Reduce #5 statement call conditional_while
	"new" => Reduce #5 statement call conditional_while
	"cast" => Reduce #5 statement call conditional_while
	"null" => Reduce #5 statement call conditional_while
[XX]
	$ => Reduce #5 statement call with_do
	BOOLEAN => Reduce #5 statement call with_do
	IDENT => Reduce #5 statement call with_do
	DQSTRING => Reduce #5 statement call with_do
	SQSTRING => Reduce #5 statement call with_do
	UINTEGER => Reduce #5 statement call with_do
	FLOAT => Reduce #5 statement call with_do
	"function" => Reduce #5 statement call with_do
	'(' => Reduce #5 statement call with_do
	"procedure" => Reduce #5 statement call with_do
	"class" => Reduce #5 statement call with_do
	"struct" => Reduce #5 statement call with_do
	'&' => Reduce #5 statement call with_do
	"typedef" => Reduce #5 statement call with_do
	'{' => Reduce #5 statement call with_do
	'}' => Reduce #5 statement call with_do
	"generic" => Reduce #5 statement call with_do
	"private" => Reduce #5 statement call with_do
	"public" => Reduce #5 statement call with_do
	'+' => Reduce #5 statement call with_do
	'-' => Reduce #5 statement call with_do
	'*' => Reduce #5 statement call with_do
	'~' => Reduce #5 statement call with_do
	'!' => Reduce #5 statement call with_do
	"lambda" => Reduce #5 statement call with_do
	"try" => Reduce #5 statement call with_do
	"var" => Reduce #5 statement call with_do
	"return" => Reduce #5 statement call with_do
	"throw" => Reduce #5 statement call with_do
	"delete" => Reduce #5 statement call with_do
	"if" => Reduce #5 statement call with_do
	"while" => Reduce #5 statement call with_do
	"with" => Reduce #5 statement call with_do
	"new" => Reduce #5 statement call with_do
	"cast" => Reduce #5 statement call with_do
	"null" => Reduce #5 statement call with_do
[XX]
	$ => Reduce #5 statement call with_do
	BOOLEAN => Reduce #5 statement call with_do
	IDENT => Reduce #5 statement call with_do
	DQSTRING => Reduce #5 statement call with_do
	SQSTRING => Reduce #5 statement call with_do
	UINTEGER => Reduce #5 statement call with_do
	FLOAT => Reduce #5 statement call with_do
	"function" => Reduce #5 statement call with_do
	'(' => Reduce #5 statement call with_do
	"procedure" => Reduce #5 statement call with_do
	"class" => Reduce #5 statement call with_do
	"struct" => Reduce #5 statement call with_do
	'&' => Reduce #5 statement call with_do
	"typedef" => Reduce #5 statement call with_do
	'{' => Reduce #5 statement call with_do
	'}' => Reduce #5 statement call with_do
	"generic" => Reduce #5 statement call with_do
	"private" => Reduce #5 statement call with_do
	"public" => Reduce #5 statement call with_do
	'+' => Reduce #5 statement call with_do
	'-' => Reduce #5 statement call with_do
	'*' => Reduce #5 statement call with_do
	'~' => Reduce #5 statement call with_do
	'!' => Reduce #5 statement call with_do
	"lambda" => Reduce #5 statement call with_do
	"try" => Reduce #5 statement call with_do
	"var" => Reduce #5 statement call with_do
	"return" => Reduce #5 statement call with_do
	"throw" => Reduce #5 statement call with_do
	"delete" => Reduce #5 statement call with_do
	"if" => Reduce #5 statement call with_do
	"while" => Reduce #5 statement call with_do
	"with" => Reduce #5 statement call with_do
	"new" => Reduce #5 statement call with_do
	"cast" => Reduce #5 statement call with_do
	"null" => Reduce #5 statement call with_do
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	'(' => Shift goto XX
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"class" => Shift goto XX
	"struct" => Shift goto XX
	'&' => Shift goto XX
	"typedef" => Shift goto XX
	'{' => Shift goto XX
	'}' => Reduce #0 statementlist
	"generic" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"try" => Shift goto XX
	"var" => Shift goto XX
	"return" => Shift goto XX
	"throw" => Shift goto XX
	"delete" => Shift goto XX
	"if" => Shift goto XX
	"while" => Shift goto XX
	"with" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	';' => Reduce #2 funcattribute call funcattribute {const=true}
	'{' => Reduce #2 funcattribute call funcattribute {const=true}
[XX]
	';' => Reduce #2 funcattribute call funcattribute {throws=false}
	'{' => Reduce #2 funcattribute call funcattribute {throws=false}
[XX]
	$ => Reduce #5 operatordefinition call operator_funcdef
	IDENT => Reduce #5 operatordefinition call operator_funcdef
	"function" => Reduce #5 operatordefinition call operator_funcdef
	"procedure" => Reduce #5 operatordefinition call operator_funcdef
	"operator" => Reduce #5 operatordefinition call operator_funcdef
	"const" => Reduce #5 operatordefinition call operator_funcdef
	"any" => Reduce #5 operatordefinition call operator_funcdef
	"class" => Reduce #5 operatordefinition call operator_funcdef
	"struct" => Reduce #5 operatordefinition call operator_funcdef
	"typedef" => Reduce #5 operatordefinition call operator_funcdef
	'}' => Reduce #5 operatordefinition call operator_funcdef
	"generic" => Reduce #5 operatordefinition call operator_funcdef
	"interface" => Reduce #5 operatordefinition call operator_funcdef
	"private" => Reduce #5 operatordefinition call operator_funcdef
	"public" => Reduce #5 operatordefinition call operator_funcdef
	"constructor" => Reduce #5 operatordefinition call operator_funcdef
	"destructor" => Reduce #5 operatordefinition call operator_funcdef
[XX]
	';' => Reduce #8 typedefinition call typedef_functype {throws=false}
[XX]
	'(' => Shift goto XX
[XX]
	$ => Reduce #8 functiondefinition call generic_procdef
	BOOLEAN => Reduce #8 functiondefinition call generic_procdef
	IDENT => Reduce #8 functiondefinition call generic_procdef
	DQSTRING => Reduce #8 functiondefinition call generic_procdef
	SQSTRING => Reduce #8 functiondefinition call generic_procdef
	UINTEGER => Reduce #8 functiondefinition call generic_procdef
	FLOAT => Reduce #8 functiondefinition call generic_procdef
	"function" => Reduce #8 functiondefinition call generic_procdef
	'(' => Reduce #8 functiondefinition call generic_procdef
	"procedure" => Reduce #8 functiondefinition call generic_procdef
	"operator" => Reduce #8 functiondefinition call generic_procdef
	"const" => Reduce #8 functiondefinition call generic_procdef
	"any" => Reduce #8 functiondefinition call generic_procdef
	"class" => Reduce #8 functiondefinition call generic_procdef
	"struct" => Reduce #8 functiondefinition call generic_procdef
	'&' => Reduce #8 functiondefinition call generic_procdef
	"typedef" => Reduce #8 functiondefinition call generic_procdef
	'{' => Reduce #8 functiondefinition call generic_procdef
	'}' => Reduce #8 functiondefinition call generic_procdef
	"generic" => Reduce #8 functiondefinition call generic_procdef
	"interface" => Reduce #8 functiondefinition call generic_procdef
	"namespace" => Reduce #8 functiondefinition call generic_procdef
	"private" => Reduce #8 functiondefinition call generic_procdef
	"public" => Reduce #8 functiondefinition call generic_procdef
	"constructor" => Reduce #8 functiondefinition call generic_procdef
	"destructor" => Reduce #8 functiondefinition call generic_procdef
	'+' => Reduce #8 functiondefinition call generic_procdef
	'-' => Reduce #8 functiondefinition call generic_procdef
	'*' => Reduce #8 functiondefinition call generic_procdef
	'~' => Reduce #8 functiondefinition call generic_procdef
	'!' => Reduce #8 functiondefinition call generic_procdef
	"lambda" => Reduce #8 functiondefinition call generic_procdef
	"main" => Reduce #8 functiondefinition call generic_procdef
	"try" => Reduce #8 functiondefinition call generic_procdef
	"var" => Reduce #8 functiondefinition call generic_procdef
	"return" => Reduce #8 functiondefinition call generic_procdef
	"throw" => Reduce #8 functiondefinition call generic_procdef
	"delete" => Reduce #8 functiondefinition call generic_procdef
	"if" => Reduce #8 functiondefinition call generic_procdef
	"while" => Reduce #8 functiondefinition call generic_procdef
	"with" => Reduce #8 functiondefinition call generic_procdef
	"new" => Reduce #8 functiondefinition call generic_procdef
	"cast" => Reduce #8 functiondefinition call generic_procdef
	"null" => Reduce #8 functiondefinition call generic_procdef
[XX]
	'}' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	IDENT => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
[XX]
	')' => Shift goto XX
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
[XX]
	$ => Reduce #9 extern_definition call extern_funcdef
	IDENT => Reduce #9 extern_definition call extern_funcdef
	"extern" => Reduce #9 extern_definition call extern_funcdef
	"function" => Reduce #9 extern_definition call extern_funcdef
	"procedure" => Reduce #9 extern_definition call extern_funcdef
	"const" => Reduce #9 extern_definition call extern_funcdef
	"any" => Reduce #9 extern_definition call extern_funcdef
	"class" => Reduce #9 extern_definition call extern_funcdef
	"struct" => Reduce #9 extern_definition call extern_funcdef
	"typedef" => Reduce #9 extern_definition call extern_funcdef
	"generic" => Reduce #9 extern_definition call extern_funcdef
	"interface" => Reduce #9 extern_definition call extern_funcdef
	"namespace" => Reduce #9 extern_definition call extern_funcdef
	"private" => Reduce #9 extern_definition call extern_funcdef
	"public" => Reduce #9 extern_definition call extern_funcdef
	"main" => Reduce #9 extern_definition call extern_funcdef
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #9 extern_definition call extern_procdef_vararg
	IDENT => Reduce #9 extern_definition call extern_procdef_vararg
	"extern" => Reduce #9 extern_definition call extern_procdef_vararg
	"function" => Reduce #9 extern_definition call extern_procdef_vararg
	"procedure" => Reduce #9 extern_definition call extern_procdef_vararg
	"const" => Reduce #9 extern_definition call extern_procdef_vararg
	"any" => Reduce #9 extern_definition call extern_procdef_vararg
	"class" => Reduce #9 extern_definition call extern_procdef_vararg
	"struct" => Reduce #9 extern_definition call extern_procdef_vararg
	"typedef" => Reduce #9 extern_definition call extern_procdef_vararg
	"generic" => Reduce #9 extern_definition call extern_procdef_vararg
	"interface" => Reduce #9 extern_definition call extern_procdef_vararg
	"namespace" => Reduce #9 extern_definition call extern_procdef_vararg
	"private" => Reduce #9 extern_definition call extern_procdef_vararg
	"public" => Reduce #9 extern_definition call extern_procdef_vararg
	"main" => Reduce #9 extern_definition call extern_procdef_vararg
[XX]
	$ => Reduce #5 catchblock call catchblock
	BOOLEAN => Reduce #5 catchblock call catchblock
	IDENT => Reduce #5 catchblock call catchblock
	DQSTRING => Reduce #5 catchblock call catchblock
	SQSTRING => Reduce #5 catchblock call catchblock
	UINTEGER => Reduce #5 catchblock call catchblock
	FLOAT => Reduce #5 catchblock call catchblock
	"function" => Reduce #5 catchblock call catchblock
	'(' => Reduce #5 catchblock call catchblock
	"procedure" => Reduce #5 catchblock call catchblock
	"class" => Reduce #5 catchblock call catchblock
	"struct" => Reduce #5 catchblock call catchblock
	'&' => Reduce #5 catchblock call catchblock
	"typedef" => Reduce #5 catchblock call catchblock
	'{' => Reduce #5 catchblock call catchblock
	'}' => Reduce #5 catchblock call catchblock
	"generic" => Reduce #5 catchblock call catchblock
	"private" => Reduce #5 catchblock call catchblock
	"public" => Reduce #5 catchblock call catchblock
	'+' => Reduce #5 catchblock call catchblock
	'-' => Reduce #5 catchblock call catchblock
	'*' => Reduce #5 catchblock call catchblock
	'~' => Reduce #5 catchblock call catchblock
	'!' => Reduce #5 catchblock call catchblock
	"lambda" => Reduce #5 catchblock call catchblock
	"try" => Reduce #5 catchblock call catchblock
	"var" => Reduce #5 catchblock call catchblock
	"return" => Reduce #5 catchblock call catchblock
	"throw" => Reduce #5 catchblock call catchblock
	"delete" => Reduce #5 catchblock call catchblock
	"if" => Reduce #5 catchblock call catchblock
	"while" => Reduce #5 catchblock call catchblock
	"with" => Reduce #5 catchblock call catchblock
	"new" => Reduce #5 catchblock call catchblock
	"cast" => Reduce #5 catchblock call catchblock
	"null" => Reduce #5 catchblock call catchblock
[XX]
	$ => Reduce #6 statement call conditional_if
	BOOLEAN => Reduce #6 statement call conditional_if
	IDENT => Reduce #6 statement call conditional_if
	DQSTRING => Reduce #6 statement call conditional_if
	SQSTRING => Reduce #6 statement call conditional_if
	UINTEGER => Reduce #6 statement call conditional_if
	FLOAT => Reduce #6 statement call conditional_if
	"function" => Reduce #6 statement call conditional_if
	'(' => Reduce #6 statement call conditional_if
	"procedure" => Reduce #6 statement call conditional_if
	"class" => Reduce #6 statement call conditional_if
	"struct" => Reduce #6 statement call conditional_if
	'&' => Reduce #6 statement call conditional_if
	"typedef" => Reduce #6 statement call conditional_if
	'{' => Reduce #6 statement call conditional_if
	'}' => Reduce #6 statement call conditional_if
	"generic" => Reduce #6 statement call conditional_if
	"private" => Reduce #6 statement call conditional_if
	"public" => Reduce #6 statement call conditional_if
	'+' => Reduce #6 statement call conditional_if
	'-' => Reduce #6 statement call conditional_if
	'*' => Reduce #6 statement call conditional_if
	'~' => Reduce #6 statement call conditional_if
	'!' => Reduce #6 statement call conditional_if
	"lambda" => Reduce #6 statement call conditional_if
	"try" => Reduce #6 statement call conditional_if
	"var" => Reduce #6 statement call conditional_if
	"return" => Reduce #6 statement call conditional_if
	"throw" => Reduce #6 statement call conditional_if
	"delete" => Reduce #6 statement call conditional_if
	"if" => Reduce #6 statement call conditional_if
	"while" => Reduce #6 statement call conditional_if
	"with" => Reduce #6 statement call conditional_if
	"new" => Reduce #6 statement call conditional_if
	"cast" => Reduce #6 statement call conditional_if
	"null" => Reduce #6 statement call conditional_if
[XX]
	'(' => Shift goto XX
[XX]
	'{' => Shift goto XX
[XX]
	'}' => Shift goto XX
[XX]
	$ => Reduce #9 functiondefinition call generic_funcdef
	BOOLEAN => Reduce #9 functiondefinition call generic_funcdef
	IDENT => Reduce #9 functiondefinition call generic_funcdef
	DQSTRING => Reduce #9 functiondefinition call generic_funcdef
	SQSTRING => Reduce #9 functiondefinition call generic_funcdef
	UINTEGER => Reduce #9 functiondefinition call generic_funcdef
	FLOAT => Reduce #9 functiondefinition call generic_funcdef
	"function" => Reduce #9 functiondefinition call generic_funcdef
	'(' => Reduce #9 functiondefinition call generic_funcdef
	"procedure" => Reduce #9 functiondefinition call generic_funcdef
	"operator" => Reduce #9 functiondefinition call generic_funcdef
	"const" => Reduce #9 functiondefinition call generic_funcdef
	"any" => Reduce #9 functiondefinition call generic_funcdef
	"class" => Reduce #9 functiondefinition call generic_funcdef
	"struct" => Reduce #9 functiondefinition call generic_funcdef
	'&' => Reduce #9 functiondefinition call generic_funcdef
	"typedef" => Reduce #9 functiondefinition call generic_funcdef
	'{' => Reduce #9 functiondefinition call generic_funcdef
	'}' => Reduce #9 functiondefinition call generic_funcdef
	"generic" => Reduce #9 functiondefinition call generic_funcdef
	"interface" => Reduce #9 functiondefinition call generic_funcdef
	"namespace" => Reduce #9 functiondefinition call generic_funcdef
	"private" => Reduce #9 functiondefinition call generic_funcdef
	"public" => Reduce #9 functiondefinition call generic_funcdef
	"constructor" => Reduce #9 functiondefinition call generic_funcdef
	"destructor" => Reduce #9 functiondefinition call generic_funcdef
	'+' => Reduce #9 functiondefinition call generic_funcdef
	'-' => Reduce #9 functiondefinition call generic_funcdef
	'*' => Reduce #9 functiondefinition call generic_funcdef
	'~' => Reduce #9 functiondefinition call generic_funcdef
	'!' => Reduce #9 functiondefinition call generic_funcdef
	"lambda" => Reduce #9 functiondefinition call generic_funcdef
	"main" => Reduce #9 functiondefinition call generic_funcdef
	"try" => Reduce #9 functiondefinition call generic_funcdef
	"var" => Reduce #9 functiondefinition call generic_funcdef
	"return" => Reduce #9 functiondefinition call generic_funcdef
	"throw" => Reduce #9 functiondefinition call generic_funcdef
	"delete" => Reduce #9 functiondefinition call generic_funcdef
	"if" => Reduce #9 functiondefinition call generic_funcdef
	"while" => Reduce #9 functiondefinition call generic_funcdef
	"with" => Reduce #9 functiondefinition call generic_funcdef
	"new" => Reduce #9 functiondefinition call generic_funcdef
	"cast" => Reduce #9 functiondefinition call generic_funcdef
	"null" => Reduce #9 functiondefinition call generic_funcdef
[XX]
	$ => Reduce #9 classdefinition call generic_classdef
	BOOLEAN => Reduce #9 classdefinition call generic_classdef
	IDENT => Reduce #9 classdefinition call generic_classdef
	DQSTRING => Reduce #9 classdefinition call generic_classdef
	SQSTRING => Reduce #9 classdefinition call generic_classdef
	UINTEGER => Reduce #9 classdefinition call generic_classdef
	FLOAT => Reduce #9 classdefinition call generic_classdef
	"function" => Reduce #9 classdefinition call generic_classdef
	'(' => Reduce #9 classdefinition call generic_classdef
	"procedure" => Reduce #9 classdefinition call generic_classdef
	"operator" => Reduce #9 classdefinition call generic_classdef
	"const" => Reduce #9 classdefinition call generic_classdef
	"any" => Reduce #9 classdefinition call generic_classdef
	"class" => Reduce #9 classdefinition call generic_classdef
	"struct" => Reduce #9 classdefinition call generic_classdef
	'&' => Reduce #9 classdefinition call generic_classdef
	"typedef" => Reduce #9 classdefinition call generic_classdef
	'{' => Reduce #9 classdefinition call generic_classdef
	'}' => Reduce #9 classdefinition call generic_classdef
	"generic" => Reduce #9 classdefinition call generic_classdef
	"interface" => Reduce #9 classdefinition call generic_classdef
	"namespace" => Reduce #9 classdefinition call generic_classdef
	"private" => Reduce #9 classdefinition call generic_classdef
	"public" => Reduce #9 classdefinition call generic_classdef
	"constructor" => Reduce #9 classdefinition call generic_classdef
	"destructor" => Reduce #9 classdefinition call generic_classdef
	'+' => Reduce #9 classdefinition call generic_classdef
	'-' => Reduce #9 classdefinition call generic_classdef
	'*' => Reduce #9 classdefinition call generic_classdef
	'~' => Reduce #9 classdefinition call generic_classdef
	'!' => Reduce #9 classdefinition call generic_classdef
	"lambda" => Reduce #9 classdefinition call generic_classdef
	"main" => Reduce #9 classdefinition call generic_classdef
	"try" => Reduce #9 classdefinition call generic_classdef
	"var" => Reduce #9 classdefinition call generic_classdef
	"return" => Reduce #9 classdefinition call generic_classdef
	"throw" => Reduce #9 classdefinition call generic_classdef
	"delete" => Reduce #9 classdefinition call generic_classdef
	"if" => Reduce #9 classdefinition call generic_classdef
	"while" => Reduce #9 classdefinition call generic_classdef
	"with" => Reduce #9 classdefinition call generic_classdef
	"new" => Reduce #9 classdefinition call generic_classdef
	"cast" => Reduce #9 classdefinition call generic_classdef
	"null" => Reduce #9 classdefinition call generic_classdef
[XX]
	IDENT => Shift goto XX
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"const" => Shift goto XX
	"any" => Shift goto XX
	"class" => Shift goto XX
	"struct" => Shift goto XX
	"typedef" => Shift goto XX
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto XX
	"interface" => Shift goto XX
	"private" => Shift goto XX
	"public" => Shift goto XX
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external",explicit=false}
	"destructor" => Shift goto XX
[XX]
	']' => Reduce #5 generic_defaultlist call generic_header_ident_type
[XX]
	'=' => Shift goto XX
[XX]
	$ => Reduce #9 structdefinition call generic_structdef
	BOOLEAN => Reduce #9 structdefinition call generic_structdef
	IDENT => Reduce #9 structdefinition call generic_structdef
	DQSTRING => Reduce #9 structdefinition call generic_structdef
	SQSTRING => Reduce #9 structdefinition call generic_structdef
	UINTEGER => Reduce #9 structdefinition call generic_structdef
	FLOAT => Reduce #9 structdefinition call generic_structdef
	"function" => Reduce #9 structdefinition call generic_structdef
	'(' => Reduce #9 structdefinition call generic_structdef
	"procedure" => Reduce #9 structdefinition call generic_structdef
	"operator" => Reduce #9 structdefinition call generic_structdef
	"const" => Reduce #9 structdefinition call generic_structdef
	"any" => Reduce #9 structdefinition call generic_structdef
	"class" => Reduce #9 structdefinition call generic_structdef
	"struct" => Reduce #9 structdefinition call generic_structdef
	'&' => Reduce #9 structdefinition call generic_structdef
	"typedef" => Reduce #9 structdefinition call generic_structdef
	'{' => Reduce #9 structdefinition call generic_structdef
	'}' => Reduce #9 structdefinition call generic_structdef
	"generic" => Reduce #9 structdefinition call generic_structdef
	"interface" => Reduce #9 structdefinition call generic_structdef
	"namespace" => Reduce #9 structdefinition call generic_structdef
	"private" => Reduce #9 structdefinition call generic_structdef
	"public" => Reduce #9 structdefinition call generic_structdef
	"constructor" => Reduce #9 structdefinition call generic_structdef
	"destructor" => Reduce #9 structdefinition call generic_structdef
	'+' => Reduce #9 structdefinition call generic_structdef
	'-' => Reduce #9 structdefinition call generic_structdef
	'*' => Reduce #9 structdefinition call generic_structdef
	'~' => Reduce #9 structdefinition call generic_structdef
	'!' => Reduce #9 structdefinition call generic_structdef
	"lambda" => Reduce #9 structdefinition call generic_structdef
	"main" => Reduce #9 structdefinition call generic_structdef
	"try" => Reduce #9 structdefinition call generic_structdef
	"var" => Reduce #9 structdefinition call generic_structdef
	"return" => Reduce #9 structdefinition call generic_structdef
	"throw" => Reduce #9 structdefinition call generic_structdef
	"delete" => Reduce #9 structdefinition call generic_structdef
	"if" => Reduce #9 structdefinition call generic_structdef
	"while" => Reduce #9 structdefinition call generic_structdef
	"with" => Reduce #9 structdefinition call generic_structdef
	"new" => Reduce #9 structdefinition call generic_structdef
	"cast" => Reduce #9 structdefinition call generic_structdef
	"null" => Reduce #9 structdefinition call generic_structdef
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	';' => Reduce #0 funcattribute call funcattribute {const=false,throws=true}
	"const" => Shift goto XX
	"nothrow" => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #10 extern_definition call extern_funcdef_vararg
	IDENT => Reduce #10 extern_definition call extern_funcdef_vararg
	"extern" => Reduce #10 extern_definition call extern_funcdef_vararg
	"function" => Reduce #10 extern_definition call extern_funcdef_vararg
	"procedure" => Reduce #10 extern_definition call extern_funcdef_vararg
	"const" => Reduce #10 extern_definition call extern_funcdef_vararg
	"any" => Reduce #10 extern_definition call extern_funcdef_vararg
	"class" => Reduce #10 extern_definition call extern_funcdef_vararg
	"struct" => Reduce #10 extern_definition call extern_funcdef_vararg
	"typedef" => Reduce #10 extern_definition call extern_funcdef_vararg
	"generic" => Reduce #10 extern_definition call extern_funcdef_vararg
	"interface" => Reduce #10 extern_definition call extern_funcdef_vararg
	"namespace" => Reduce #10 extern_definition call extern_funcdef_vararg
	"private" => Reduce #10 extern_definition call extern_funcdef_vararg
	"public" => Reduce #10 extern_definition call extern_funcdef_vararg
	"main" => Reduce #10 extern_definition call extern_funcdef_vararg
[XX]
	BOOLEAN => Shift goto XX
	IDENT => Shift goto XX
	DQSTRING => Shift goto XX
	SQSTRING => Shift goto XX
	UINTEGER => Shift goto XX
	FLOAT => Shift goto XX
	'(' => Shift goto XX
	'&' => Shift goto XX
	'{' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'~' => Shift goto XX
	'!' => Shift goto XX
	"lambda" => Shift goto XX
	"new" => Shift goto XX
	"cast" => Shift goto XX
	"null" => Shift goto XX
[XX]
	$ => Reduce #2 elseblock call conditional_else
	BOOLEAN => Reduce #2 elseblock call conditional_else
	IDENT => Reduce #2 elseblock call conditional_else
	DQSTRING => Reduce #2 elseblock call conditional_else
	SQSTRING => Reduce #2 elseblock call conditional_else
	UINTEGER => Reduce #2 elseblock call conditional_else
	FLOAT => Reduce #2 elseblock call conditional_else
	"function" => Reduce #2 elseblock call conditional_else
	'(' => Reduce #2 elseblock call conditional_else
	"procedure" => Reduce #2 elseblock call conditional_else
	"class" => Reduce #2 elseblock call conditional_else
	"struct" => Reduce #2 elseblock call conditional_else
	'&' => Reduce #2 elseblock call conditional_else
	"typedef" => Reduce #2 elseblock call conditional_else
	'{' => Reduce #2 elseblock call conditional_else
	'}' => Reduce #2 elseblock call conditional_else
	"generic" => Reduce #2 elseblock call conditional_else
	"private" => Reduce #2 elseblock call conditional_else
	"public" => Reduce #2 elseblock call conditional_else
	'+' => Reduce #2 elseblock call conditional_else
	'-' => Reduce #2 elseblock call conditional_else
	'*' => Reduce #2 elseblock call conditional_else
	'~' => Reduce #2 elseblock call conditional_else
	'!' => Reduce #2 elseblock call conditional_else
	"lambda" => Reduce #2 elseblock call conditional_else
	"try" => Reduce #2 elseblock call conditional_else
	"var" => Reduce #2 elseblock call conditional_else
	"return" => Reduce #2 elseblock call conditional_else
	"throw" => Reduce #2 elseblock call conditional_else
	"delete" => Reduce #2 elseblock call conditional_else
	"if" => Reduce #2 elseblock call conditional_else
	"while" => Reduce #2 elseblock call conditional_else
	"with" => Reduce #2 elseblock call conditional_else
	"new" => Reduce #2 elseblock call conditional_else
	"cast" => Reduce #2 elseblock call conditional_else
	"null" => Reduce #2 elseblock call conditional_else
[XX]
	$ => Reduce #7 callablebody call callablebody
	BOOLEAN => Reduce #7 callablebody call callablebody
	IDENT => Reduce #7 callablebody call callablebody
	DQSTRING => Reduce #7 callablebody call callablebody
	SQSTRING => Reduce #7 callablebody call callablebody
	UINTEGER => Reduce #7 callablebody call callablebody
	FLOAT => Reduce #7 callablebody call callablebody
	"function" => Reduce #7 callablebody call callablebody
	'(' => Reduce #7 callablebody call callablebody
	"procedure" => Reduce #7 callablebody call callablebody
	"operator" => Reduce #7 callablebody call callablebody
	"const" => Reduce #7 callablebody call callablebody
	"any" => Reduce #7 callablebody call callablebody
	"class" => Reduce #7 callablebody call callablebody
	"struct" => Reduce #7 callablebody call callablebody
	'&' => Reduce #7 callablebody call callablebody
	"typedef" => Reduce #7 callablebody call callablebody
	'{' => Reduce #7 callablebody call callablebody
	'}' => Reduce #7 callablebody call callablebody
	"generic" => Reduce #7 callablebody call callablebody
	"interface" => Reduce #7 callablebody call callablebody
	"namespace" => Reduce #7 callablebody call callablebody
	"private" => Reduce #7 callablebody call callablebody
	"public" => Reduce #7 callablebody call callablebody
	"constructor" => Reduce #7 callablebody call callablebody
	"destructor" => Reduce #7 callablebody call callablebody
	'+' => Reduce #7 callablebody call callablebody
	'-' => Reduce #7 callablebody call callablebody
	'*' => Reduce #7 callablebody call callablebody
	'~' => Reduce #7 callablebody call callablebody
	'!' => Reduce #7 callablebody call callablebody
	"lambda" => Reduce #7 callablebody call callablebody
	"main" => Reduce #7 callablebody call callablebody
	"try" => Reduce #7 callablebody call callablebody
	"var" => Reduce #7 callablebody call callablebody
	"return" => Reduce #7 callablebody call callablebody
	"throw" => Reduce #7 callablebody call callablebody
	"delete" => Reduce #7 callablebody call callablebody
	"if" => Reduce #7 callablebody call callablebody
	"while" => Reduce #7 callablebody call callablebody
	"with" => Reduce #7 callablebody call callablebody
	"new" => Reduce #7 callablebody call callablebody
	"cast" => Reduce #7 callablebody call callablebody
	"null" => Reduce #7 callablebody call callablebody
[XX]
	'}' => Shift goto XX
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #7 ininterf_definition call interface_procdef
	"function" => Reduce #7 ininterf_definition call interface_procdef
	"procedure" => Reduce #7 ininterf_definition call interface_procdef
	"operator" => Reduce #7 ininterf_definition call interface_procdef
	'}' => Reduce #7 ininterf_definition call interface_procdef
[XX]
	';' => Shift goto XX
[XX]
	$ => Reduce #7 ininterf_definition call interface_operator_procdef
	"function" => Reduce #7 ininterf_definition call interface_operator_procdef
	"procedure" => Reduce #7 ininterf_definition call interface_operator_procdef
	"operator" => Reduce #7 ininterf_definition call interface_operator_procdef
	'}' => Reduce #7 ininterf_definition call interface_operator_procdef
[XX]
	'(' => Shift goto XX
	')' => Shift goto XX
	'^' => Shift goto XX
	'[' => Shift goto XX
	'&' => Shift goto XX
	"->" => Shift goto XX
	'=' => Shift goto XX
	'+' => Shift goto XX
	'-' => Shift goto XX
	'*' => Shift goto XX
	'/' => Shift goto XX
	'%' => Shift goto XX
	"&&" => Shift goto XX
	"||" => Shift goto XX
	'|' => Shift goto XX
	"<<" => Shift goto XX
	">>" => Shift goto XX
	"==" => Shift goto XX
	"!=" => Shift goto XX
	">=" => Shift goto XX
	"<=" => Shift goto XX
	'>' => Shift goto XX
	'<' => Shift goto XX
	"+=" => Shift goto XX
	"-=" => Shift goto XX
	"*=" => Shift goto XX
	"/=" => Shift goto XX
	"^=" => Shift goto XX
	"%=" => Shift goto XX
	"&&=" => Shift goto XX
	"||=" => Shift goto XX
	"&=" => Shift goto XX
	"|=" => Shift goto XX
	"<<=" => Shift goto XX
	">>=" => Shift goto XX
	'.' => Shift goto XX
[XX]
	$ => Reduce #11 classdefinition call generic_classdef
	BOOLEAN => Reduce #11 classdefinition call generic_classdef
	IDENT => Reduce #11 classdefinition call generic_classdef
	DQSTRING => Reduce #11 classdefinition call generic_classdef
	SQSTRING => Reduce #11 classdefinition call generic_classdef
	UINTEGER => Reduce #11 classdefinition call generic_classdef
	FLOAT => Reduce #11 classdefinition call generic_classdef
	"function" => Reduce #11 classdefinition call generic_classdef
	'(' => Reduce #11 classdefinition call generic_classdef
	"procedure" => Reduce #11 classdefinition call generic_classdef
	"operator" => Reduce #11 classdefinition call generic_classdef
	"const" => Reduce #11 classdefinition call generic_classdef
	"any" => Reduce #11 classdefinition call generic_classdef
	"class" => Reduce #11 classdefinition call generic_classdef
	"struct" => Reduce #11 classdefinition call generic_classdef
	'&' => Reduce #11 classdefinition call generic_classdef
	"typedef" => Reduce #11 classdefinition call generic_classdef
	'{' => Reduce #11 classdefinition call generic_classdef
	'}' => Reduce #11 classdefinition call generic_classdef
	"generic" => Reduce #11 classdefinition call generic_classdef
	"interface" => Reduce #11 classdefinition call generic_classdef
	"namespace" => Reduce #11 classdefinition call generic_classdef
	"private" => Reduce #11 classdefinition call generic_classdef
	"public" => Reduce #11 classdefinition call generic_classdef
	"constructor" => Reduce #11 classdefinition call generic_classdef
	"destructor" => Reduce #11 classdefinition call generic_classdef
	'+' => Reduce #11 classdefinition call generic_classdef
	'-' => Reduce #11 classdefinition call generic_classdef
	'*' => Reduce #11 classdefinition call generic_classdef
	'~' => Reduce #11 classdefinition call generic_classdef
	'!' => Reduce #11 classdefinition call generic_classdef
	"lambda" => Reduce #11 classdefinition call generic_classdef
	"main" => Reduce #11 classdefinition call generic_classdef
	"try" => Reduce #11 classdefinition call generic_classdef
	"var" => Reduce #11 classdefinition call generic_classdef
	"return" => Reduce #11 classdefinition call generic_classdef
	"throw" => Reduce #11 classdefinition call generic_classdef
	"delete" => Reduce #11 classdefinition call generic_classdef
	"if" => Reduce #11 classdefinition call generic_classdef
	"while" => Reduce #11 classdefinition call generic_classdef
	"with" => Reduce #11 classdefinition call generic_classdef
	"new" => Reduce #11 classdefinition call generic_classdef
	"cast" => Reduce #11 classdefinition call generic_classdef
	"null" => Reduce #11 classdefinition call generic_classdef
[XX]
	$ => Reduce #8 ininterf_definition call interface_funcdef
	"function" => Reduce #8 ininterf_definition call interface_funcdef
	"procedure" => Reduce #8 ininterf_definition call interface_funcdef
	"operator" => Reduce #8 ininterf_definition call interface_funcdef
	'}' => Reduce #8 ininterf_definition call interface_funcdef
[XX]
	$ => Reduce #8 ininterf_definition call interface_operator_funcdef
	"function" => Reduce #8 ininterf_definition call interface_operator_funcdef
	"procedure" => Reduce #8 ininterf_definition call interface_operator_funcdef
	"operator" => Reduce #8 ininterf_definition call interface_operator_funcdef
	'}' => Reduce #8 ininterf_definition call interface_operator_funcdef
[XX]
	'{' => Shift goto XX
[XX]
	$ => Reduce #5 elseblock call conditional_elseif
	BOOLEAN => Reduce #5 elseblock call conditional_elseif
	IDENT => Reduce #5 elseblock call conditional_elseif
	DQSTRING => Reduce #5 elseblock call conditional_elseif
	SQSTRING => Reduce #5 elseblock call conditional_elseif
	UINTEGER => Reduce #5 elseblock call conditional_elseif
	FLOAT => Reduce #5 elseblock call conditional_elseif
	"function" => Reduce #5 elseblock call conditional_elseif
	'(' => Reduce #5 elseblock call conditional_elseif
	"procedure" => Reduce #5 elseblock call conditional_elseif
	"class" => Reduce #5 elseblock call conditional_elseif
	"struct" => Reduce #5 elseblock call conditional_elseif
	'&' => Reduce #5 elseblock call conditional_elseif
	"typedef" => Reduce #5 elseblock call conditional_elseif
	'{' => Reduce #5 elseblock call conditional_elseif
	'}' => Reduce #5 elseblock call conditional_elseif
	"generic" => Reduce #5 elseblock call conditional_elseif
	"private" => Reduce #5 elseblock call conditional_elseif
	"public" => Reduce #5 elseblock call conditional_elseif
	'+' => Reduce #5 elseblock call conditional_elseif
	'-' => Reduce #5 elseblock call conditional_elseif
	'*' => Reduce #5 elseblock call conditional_elseif
	'~' => Reduce #5 elseblock call conditional_elseif
	'!' => Reduce #5 elseblock call conditional_elseif
	"lambda" => Reduce #5 elseblock call conditional_elseif
	"elseif" => Shift goto XX
	"else" => Shift goto XX
	"try" => Reduce #5 elseblock call conditional_elseif
	"var" => Reduce #5 elseblock call conditional_elseif
	"return" => Reduce #5 elseblock call conditional_elseif
	"throw" => Reduce #5 elseblock call conditional_elseif
	"delete" => Reduce #5 elseblock call conditional_elseif
	"if" => Reduce #5 elseblock call conditional_elseif
	"while" => Reduce #5 elseblock call conditional_elseif
	"with" => Reduce #5 elseblock call conditional_elseif
	"new" => Reduce #5 elseblock call conditional_elseif
	"cast" => Reduce #5 elseblock call conditional_elseif
	"null" => Reduce #5 elseblock call conditional_elseif
[XX]
	$ => Reduce #6 elseblock call conditional_elseif
	BOOLEAN => Reduce #6 elseblock call conditional_elseif
	IDENT => Reduce #6 elseblock call conditional_elseif
	DQSTRING => Reduce #6 elseblock call conditional_elseif
	SQSTRING => Reduce #6 elseblock call conditional_elseif
	UINTEGER => Reduce #6 elseblock call conditional_elseif
	FLOAT => Reduce #6 elseblock call conditional_elseif
	"function" => Reduce #6 elseblock call conditional_elseif
	'(' => Reduce #6 elseblock call conditional_elseif
	"procedure" => Reduce #6 elseblock call conditional_elseif
	"class" => Reduce #6 elseblock call conditional_elseif
	"struct" => Reduce #6 elseblock call conditional_elseif
	'&' => Reduce #6 elseblock call conditional_elseif
	"typedef" => Reduce #6 elseblock call conditional_elseif
	'{' => Reduce #6 elseblock call conditional_elseif
	'}' => Reduce #6 elseblock call conditional_elseif
	"generic" => Reduce #6 elseblock call conditional_elseif
	"private" => Reduce #6 elseblock call conditional_elseif
	"public" => Reduce #6 elseblock call conditional_elseif
	'+' => Reduce #6 elseblock call conditional_elseif
	'-' => Reduce #6 elseblock call conditional_elseif
	'*' => Reduce #6 elseblock call conditional_elseif
	'~' => Reduce #6 elseblock call conditional_elseif
	'!' => Reduce #6 elseblock call conditional_elseif
	"lambda" => Reduce #6 elseblock call conditional_elseif
	"try" => Reduce #6 elseblock call conditional_elseif
	"var" => Reduce #6 elseblock call conditional_elseif
	"return" => Reduce #6 elseblock call conditional_elseif
	"throw" => Reduce #6 elseblock call conditional_elseif
	"delete" => Reduce #6 elseblock call conditional_elseif
	"if" => Reduce #6 elseblock call conditional_elseif
	"while" => Reduce #6 elseblock call conditional_elseif
	"with" => Reduce #6 elseblock call conditional_elseif
	"new" => Reduce #6 elseblock call conditional_elseif
	"cast" => Reduce #6 elseblock call conditional_elseif
	"null" => Reduce #6 elseblock call conditional_elseif

-- Goto table:
[XX]
	extern_definitionlist => XX
	extern_definition => XX
[XX]
	free_definitionlist => XX
	free_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	namespacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	variabledefinition => XX
[XX]
	extern_definitionlist => XX
	extern_definition => XX
[XX]
	main_procedure => XX
[XX]
	free_definitionlist => XX
	free_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	namespacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	variabledefinition => XX
[XX]
	typename => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
[XX]
	linkage => XX
[XX]
	codeblock => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	lamda_expression => XX
	generic_instance_defelem => XX
	generic_instance_deflist => XX
	generic_instance => XX
[XX]
	typename => XX
[XX]
	typedefinition => XX
	structdefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	lamda_expression => XX
	codeblock => XX
	statementlist => XX
	tryblock => XX
	statement => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	callablebody => XX
[XX]
	inclass_definitionlist => XX
	inclass_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	constructordefinition => XX
	operatordefinition => XX
	variabledefinition => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	inheritlist => XX
[XX]
	instruct_definitionlist => XX
	instruct_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	variabledefinition => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	ininterf_definitionlist => XX
	ininterf_definition => XX
[XX]
	namespace_definitionlist => XX
	namespace_definition => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	namespacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	catchblock => XX
[XX]
	typedefinition => XX
	structdefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	lamda_expression => XX
	codeblock => XX
	statementlist => XX
	tryblock => XX
	statement => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	typedefinition => XX
	structdefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	lamda_expression => XX
	codeblock => XX
	statementlist => XX
	tryblock => XX
	statement => XX
	expression => XX
	iexpression => XX
	expressionlist => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	codeblock => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	variabledefinition => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	lamda_expression => XX
	generic_instance_defelem => XX
	generic_instance_deflist => XX
[XX]
	lambda_paramlist => XX
	lambda_parameters => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
	expressionlist => XX
[XX]
	callablebody => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	impl_paramlist => XX
	impl_parameters => XX
	impl_paramdecl => XX
[XX]
	inclass_definitionlist => XX
	inclass_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	constructordefinition => XX
	operatordefinition => XX
	variabledefinition => XX
[XX]
	codeblock => XX
[XX]
	instruct_definitionlist => XX
	instruct_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	variabledefinition => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	generic_defaultlist => XX
	generic_identlist => XX
	generic_header => XX
[XX]
	generic_defaultlist => XX
	generic_identlist => XX
	generic_header => XX
[XX]
	ininterf_definitionlist => XX
	ininterf_definition => XX
[XX]
	operatordecl => XX
[XX]
	namespace_definitionlist => XX
	namespace_definition => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	namespacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
	expressionlist => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
	expressionlist => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	operatordecl => XX
[XX]
	callablebody => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	inheritlist => XX
[XX]
	inclass_definitionlist => XX
	inclass_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	constructordefinition => XX
	operatordefinition => XX
	variabledefinition => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	generic_defaultlist => XX
	generic_identlist => XX
	generic_header => XX
[XX]
	generic_defaultlist => XX
	generic_identlist => XX
	generic_header => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	codeblock => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
	expressionlist => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	codeblock => XX
[XX]
	lambda_parameters => XX
[XX]
	funcattribute => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	impl_parameters => XX
	impl_paramdecl => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	callablebody => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	generic_defaultlist => XX
	generic_identlist => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	indirection => XX
[XX]
	codeblock => XX
[XX]
	codeblock => XX
[XX]
	codeblock => XX
[XX]
	indirection => XX
[XX]
	indirection => XX
[XX]
	funcattribute => XX
[XX]
	funcattribute => XX
[XX]
	callablebody => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	callablebody => XX
[XX]
	inclass_definitionlist => XX
	inclass_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	constructordefinition => XX
	operatordefinition => XX
	variabledefinition => XX
[XX]
	typename => XX
	typehdr => XX
	typegen => XX
	inheritlist => XX
[XX]
	instruct_definitionlist => XX
	instruct_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	variabledefinition => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	extern_paramdecl => XX
	extern_parameters => XX
	extern_paramlist => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
[XX]
	codeblock => XX
[XX]
	elseblock => XX
[XX]
	typedefinition => XX
	structdefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	lamda_expression => XX
	codeblock => XX
	statementlist => XX
	tryblock => XX
	statement => XX
	expression => XX
	iexpression => XX
[XX]
	callablebody => XX
[XX]
	generic_defaultlist => XX
[XX]
	funcattribute => XX
[XX]
	funcattribute => XX
[XX]
	codeblock => XX
[XX]
	inclass_definitionlist => XX
	inclass_definition => XX
	typename => XX
	typehdr => XX
	typegen => XX
	typespec => XX
	typedefinition => XX
	structdefinition => XX
	interfacedefinition => XX
	classdefinition => XX
	linkage => XX
	functiondefinition => XX
	constructordefinition => XX
	operatordefinition => XX
	variabledefinition => XX
[XX]
	funcattribute => XX
[XX]
	funcattribute => XX
[XX]
	lamda_expression => XX
	expression => XX
	iexpression => XX
[XX]
	indirection => XX
[XX]
	codeblock => XX
[XX]
	elseblock => XX

