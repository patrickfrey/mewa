== Language 'test', type system 'language1/typesystem' ==
-- Lexems:
TOKEN BOOLEAN ((true)|(false)) 0 [tf]  ~ 1
TOKEN IDENT [a-zA-Z_]+[a-zA-Z_0-9]* 0 [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]  ~ 2
TOKEN DQSTRING ["]((([^\\"\n]+)|([\\][^"\n]))*)["] 1 ["]  ~ 3
TOKEN SQSTRING [']((([^\\'\n]+)|([\\][^'\n]))*)['] 1 [']  ~ 4
TOKEN CARDINAL [0123456789]+ 0 [0123456789]  ~ 5
TOKEN INTEGER [-][0123456789]+ 0 [-]  ~ 6
TOKEN FLOAT [-]{0,1}[0123456789]+[.][0123456789]+ 0 [-0123456789]  ~ 7
TOKEN FLOAT [-]{0,1}[0123456789]+[.][0123456789]+[Ee][+-]{0,1}[0123456789]+ 0 [-0123456789]  ~ 7
KEYWORD extern [e] ~ 8
KEYWORD function [f] ~ 9
KEYWORD ( [(] ~ 10
KEYWORD ) [)] ~ 11
KEYWORD ; [;] ~ 12
KEYWORD procedure [p] ~ 13
KEYWORD ... [.] ~ 14
KEYWORD , [,] ~ 15
KEYWORD const [c] ~ 16
KEYWORD operator [o] ~ 17
KEYWORD :: [:] ~ 18
KEYWORD < [<] ~ 19
KEYWORD > [>] ~ 20
KEYWORD & [&] ~ 21
KEYWORD ^ [^] ~ 22
KEYWORD any [a] ~ 23
KEYWORD class [c] ~ 24
KEYWORD struct [s] ~ 25
KEYWORD typedef [t] ~ 26
KEYWORD { [{] ~ 27
KEYWORD } [}] ~ 28
KEYWORD generic [g] ~ 29
KEYWORD interface [i] ~ 30
KEYWORD namespace [n] ~ 31
KEYWORD : [:] ~ 32
KEYWORD private [p] ~ 33
KEYWORD public [p] ~ 34
KEYWORD constructor [c] ~ 35
KEYWORD destructor [d] ~ 36
KEYWORD -> [-] ~ 37
KEYWORD = [=] ~ 38
KEYWORD + [+] ~ 39
KEYWORD - [-] ~ 40
KEYWORD * [*] ~ 41
KEYWORD / [/] ~ 42
KEYWORD % [%] ~ 43
KEYWORD && [&] ~ 44
KEYWORD || [|] ~ 45
KEYWORD | [|] ~ 46
KEYWORD << [<] ~ 47
KEYWORD >> [>] ~ 48
KEYWORD ~ [~] ~ 49
KEYWORD ! [!] ~ 50
KEYWORD [ [[] ~ 51
KEYWORD ] []] ~ 52
KEYWORD == [=] ~ 53
KEYWORD != [!] ~ 54
KEYWORD >= [>] ~ 55
KEYWORD <= [<] ~ 56
KEYWORD main [m] ~ 57
KEYWORD var [v] ~ 58
KEYWORD return [r] ~ 59
KEYWORD delete [d] ~ 60
KEYWORD if [i] ~ 61
KEYWORD else [e] ~ 62
KEYWORD while [w] ~ 63
KEYWORD with [w] ~ 64
KEYWORD new [n] ~ 65
KEYWORD cast [c] ~ 66
KEYWORD null [n] ~ 67
KEYWORD += [+] ~ 68
KEYWORD -= [-] ~ 69
KEYWORD *= [*] ~ 70
KEYWORD /= [/] ~ 71
KEYWORD ^= [^] ~ 72
KEYWORD &= [&] ~ 73
KEYWORD %= [%] ~ 74
KEYWORD &&= [&] ~ 75
KEYWORD ||= [|] ~ 76
KEYWORD |= [|] ~ 77
KEYWORD <<= [<] ~ 78
KEYWORD >>= [>] ~ 79
KEYWORD . [.] ~ 80
COMMENT /* */ [/]
COMMENT // [/]

-- Nonterminals:
(1) program
(2) extern_definitionlist
(3) free_definitionlist
(4) namespace_definitionlist
(5) instruct_definitionlist
(6) inclass_definitionlist
(7) ininterf_definitionlist
(8) extern_definition
(9) extern_parameters
(10) extern_paramlist
(11) ininterf_definition
(12) instruct_definition
(13) inclass_definition
(14) free_definition
(15) namespace_definition
(16) typename
(17) generic_typename
(18) typespec
(19) typepath
(20) typedefinition
(21) structdefinition
(22) interfacedefinition
(23) inheritlist
(24) namespacedefinition
(25) classdefinition
(26) linkage
(27) functiondefinition
(28) constructordefinition
(29) operatordefinition
(30) operatordecl
(31) generic_instance
(32) generic_instancelist
(33) generic_defaultlist
(34) generic_identlist
(35) generic_header
(36) callablebody
(37) callablebody_const
(38) main_procedure
(39) parameterlist
(40) parameters
(41) paramdecl
(42) codeblock
(43) statementlist
(44) statement
(45) variabledefinition
(46) expression
(47) iexpression
(48) indirection
(49) expressionlist

-- Productions:
program = extern_definitionlist free_definitionlist main_procedure (1)
extern_definitionlist = extern_definition extern_definitionlist
extern_definitionlist = 
free_definitionlist = free_definition free_definitionlist
free_definitionlist = 
namespace_definitionlist = namespace_definition namespace_definitionlist
namespace_definitionlist = 
instruct_definitionlist = instruct_definition instruct_definitionlist
instruct_definitionlist = 
inclass_definitionlist = inclass_definition inclass_definitionlist
inclass_definitionlist = 
ininterf_definitionlist = ininterf_definition ininterf_definitionlist
ininterf_definitionlist = 
extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" (2)
extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" (3)
extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" (4)
extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" (5)
extern_parameters = typespec "," extern_parameters (6)
extern_parameters = typespec IDENT "," extern_parameters (6)
extern_parameters = typespec (6)
extern_parameters = typespec IDENT (6)
extern_paramlist = extern_parameters (7)
extern_paramlist =  (7)
ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" ";" (8)
ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" ";" (9)
ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" ";" (10)
ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" ";" (11)
ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" ";" (12)
ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";" (13)
ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" ";" (14)
ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" ";" (15)
instruct_definition = typedefinition ";" (16)
instruct_definition = variabledefinition ";" (16)
instruct_definition = structdefinition (16)
inclass_definition = typedefinition ";" (16)
inclass_definition = variabledefinition ";" (16)
inclass_definition = structdefinition (16)
inclass_definition = classdefinition (16)
inclass_definition = interfacedefinition (16)
inclass_definition = functiondefinition (17)
inclass_definition = operatordefinition (17)
inclass_definition = constructordefinition (17)
free_definition = namespacedefinition
free_definition = typedefinition ";" (16)
free_definition = variabledefinition ";" (16)
free_definition = structdefinition (16)
free_definition = classdefinition (16)
free_definition = interfacedefinition (16)
free_definition = functiondefinition (16)
namespace_definition = namespacedefinition (16)
namespace_definition = typedefinition ";" (16)
namespace_definition = structdefinition (16)
namespace_definition = classdefinition (16)
namespace_definition = interfacedefinition (16)
namespace_definition = functiondefinition (16)
typename/L1 = IDENT
typename/L1 = IDENT "::" typename
generic_typename/L1 = typename
generic_typename/L1 = typename "<" generic_instancelist ">"
typespec/L1 = generic_typename (18)
typespec/L1 = "const" generic_typename (19)
typespec/L1 = generic_typename "&" (20)
typespec/L1 = "const" generic_typename "&" (21)
typespec/L1 = generic_typename "^" (22)
typespec/L1 = "const" generic_typename "^" (23)
typespec/L1 = generic_typename "^" "&" (24)
typespec/L1 = "const" generic_typename "^" "&" (25)
typespec/L1 = "any" "class" "^" (26)
typespec/L1 = "any" "const" "class" "^" (27)
typespec/L1 = "any" "struct" "^" (26)
typespec/L1 = "any" "const" "struct" "^" (27)
typepath/L1 = generic_typename (18)
typedefinition = "typedef" typepath IDENT (step:28)
typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" (step:29)
typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" (step:30)
structdefinition = "struct" IDENT "{" instruct_definitionlist "}" (step:31)
structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}" (step:32)
interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" (step:33)
inheritlist = typepath "," inheritlist (step:34)
inheritlist = typepath (step:34)
namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" (step:35)
classdefinition = "class" IDENT "{" inclass_definitionlist "}" (step:36)
classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" (step:36)
classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}" (step:37)
classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}" (step:37)
linkage = "private" (38)
linkage = "public" (39)
linkage =  (39)
functiondefinition = linkage "function" IDENT typespec callablebody (40)
functiondefinition = linkage "function" IDENT typespec callablebody_const (41)
functiondefinition = linkage "procedure" IDENT callablebody (42)
functiondefinition = linkage "procedure" IDENT callablebody_const (43)
constructordefinition = linkage "constructor" callablebody (44)
constructordefinition = "destructor" "{" codeblock "}" (45)
operatordefinition = linkage "operator" operatordecl typespec callablebody (46)
operatordefinition = linkage "operator" operatordecl typespec callablebody_const (47)
operatordefinition = linkage "operator" operatordecl callablebody (48)
operatordefinition = linkage "operator" operatordecl callablebody_const (49)
operatordecl = "->" (50)
operatordecl = "=" (51)
operatordecl = "+" (52)
operatordecl = "-" (53)
operatordecl = "*" (54)
operatordecl = "/" (55)
operatordecl = "%" (56)
operatordecl = "&&" (57)
operatordecl = "||" (58)
operatordecl = "&" (59)
operatordecl = "|" (60)
operatordecl = "<<" (61)
operatordecl = ">>" (62)
operatordecl = "~" (63)
operatordecl = "!" (64)
operatordecl = "(" ")" (65)
operatordecl = "[" "]" (66)
operatordecl = "==" (67)
operatordecl = "!=" (68)
operatordecl = ">=" (69)
operatordecl = "<=" (70)
operatordecl = ">" (71)
operatordecl = "<" (72)
generic_instance = typepath
generic_instance = typepath "," generic_instance
generic_instancelist = generic_instance (73)
generic_defaultlist = IDENT "=" typepath "," generic_defaultlist (74)
generic_defaultlist = IDENT "=" typepath (74)
generic_identlist = IDENT "," generic_identlist (75)
generic_identlist = IDENT "," generic_defaultlist (75)
generic_identlist = IDENT (75)
generic_header = generic_identlist (76)
generic_header = generic_defaultlist (76)
callablebody = "(" parameterlist ")" "{" codeblock "}" (scope:77)
callablebody_const = "(" parameterlist ")" "const" "{" codeblock "}" (scope:77)
main_procedure = "main" "{" codeblock "}" (scope:78)
main_procedure = 
parameterlist = parameters (79)
parameterlist =  (79)
parameters = paramdecl "," parameters
parameters = paramdecl
paramdecl = typespec IDENT (80)
codeblock = statementlist (81)
statementlist = statement statementlist (step)
statementlist = 
statement/L1 = functiondefinition (82)
statement/L1 = typedefinition ";" (82)
statement/L1 = "var" variabledefinition ";" (82)
statement/L1 = expression ";" (83)
statement/L1 = "return" expression ";" (step:84)
statement/L1 = "delete" expression ";" (85)
statement/L1 = "if" "(" expression ")" "{" codeblock "}" (scope:86)
statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}" (scope:87)
statement/L1 = "while" "(" expression ")" "{" codeblock "}" (scope:88)
statement/L1 = "with" "(" expression ")" "{" codeblock "}" (step:89)
statement/L1 = "{" codeblock "}" (scope)
variabledefinition = typespec IDENT (step:90)
variabledefinition = typespec IDENT "=" expression (step:91)
variabledefinition = typespec IDENT "[" expression "]" "=" expression (step:92)
variabledefinition = typespec IDENT "[" expression "]" (step:93)
expression/L1 = "{" expressionlist "}" (94)
expression/L1 = "{" "}" (94)
expression/L1 = "new" typespec ":" expression (95)
expression/L1 = "cast" typespec ":" "{" expression "}" (96)
expression/L1 = "cast" typespec ":" "{" "}" (96)
expression/L2 = IDENT (97)
expression/L2 = BOOLEAN (98)
expression/L2 = CARDINAL (99)
expression/L2 = INTEGER (100)
expression/L2 = FLOAT (101)
expression/L2 = "null" (102)
expression/L2 = DQSTRING (103)
expression/L2 = SQSTRING (104)
expression/L2 = "(" expression ")"
expression/L3 = expression "=" expression (105)
expression/L3 = expression "+=" expression (106)
expression/L3 = expression "-=" expression (107)
expression/L3 = expression "*=" expression (108)
expression/L3 = expression "/=" expression (109)
expression/L3 = expression "^=" expression (110)
expression/L3 = expression "&=" expression (111)
expression/L3 = expression "%=" expression (112)
expression/L3 = expression "&&=" expression (113)
expression/L3 = expression "||=" expression (114)
expression/L3 = expression "&=" expression (111)
expression/L3 = expression "|=" expression (115)
expression/L3 = expression "<<=" expression (116)
expression/L3 = expression ">>=" expression (117)
expression/L4 = expression "||" expression (118)
expression/L5 = expression "&&" expression (119)
expression/L6 = expression "|" expression (120)
expression/L7 = expression "^" expression (121)
expression/L7 = expression "&" expression (122)
expression/L8 = expression "==" expression (123)
expression/L8 = expression "!=" expression (124)
expression/L8 = expression "<=" expression (125)
expression/L8 = expression "<" expression (126)
expression/L8 = expression ">=" expression (127)
expression/L8 = expression ">" expression (128)
expression/L9 = expression "+" expression (129)
expression/L9 = expression "-" expression (130)
expression/L9 = "&" expression (122)
expression/L9 = "-" expression (130)
expression/L9 = "+" expression (129)
expression/L9 = "~" expression (131)
expression/L9 = "!" expression (132)
expression/L10 = expression "*" expression (133)
expression/L10 = expression "/" expression (134)
expression/L10 = expression "%" expression (135)
expression/L11 = expression "<<" expression (136)
expression/L11 = expression ">>" expression (137)
expression/L12 = iexpression
expression/L12 = expression "." IDENT (138)
expression/L12 = "*" expression (139)
expression/L13 = expression "(" expressionlist ")" (140)
expression/L13 = expression "(" ")" (140)
expression/L13 = expression "[" expressionlist "]" (141)
iexpression = expression indirection IDENT (142)
indirection = "->" indirection (143)
indirection = "->" (143)
expressionlist = expression "," expressionlist
expressionlist = expression

-- LR(0) states:
[1]
	program = . extern_definitionlist free_definitionlist main_procedure
	extern_definitionlist = . extern_definition extern_definitionlist
	extern_definitionlist = .
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[2]
	program = extern_definitionlist . free_definitionlist main_procedure
	free_definitionlist = . free_definition free_definitionlist
	free_definitionlist = .
	free_definition = . namespacedefinition
	free_definition = . typedefinition ";"
	free_definition = . variabledefinition ";"
	free_definition = . structdefinition
	free_definition = . classdefinition
	free_definition = . interfacedefinition
	free_definition = . functiondefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[3]
	extern_definitionlist = . extern_definition extern_definitionlist
	extern_definitionlist = extern_definition . extern_definitionlist
	extern_definitionlist = .
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[4]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[5]
	program = extern_definitionlist free_definitionlist . main_procedure
	main_procedure = . "main" "{" codeblock "}"
	main_procedure = .
[6]
	free_definitionlist = . free_definition free_definitionlist
	free_definitionlist = free_definition . free_definitionlist
	free_definitionlist = .
	free_definition = . namespacedefinition
	free_definition = . typedefinition ";"
	free_definition = . variabledefinition ";"
	free_definition = . structdefinition
	free_definition = . classdefinition
	free_definition = . interfacedefinition
	free_definition = . functiondefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[7]
	generic_typename/L1 = typename .
	generic_typename/L1 = typename . "<" generic_instancelist ">"
[8]
	typespec/L1 = generic_typename .
	typespec/L1 = generic_typename . "&"
	typespec/L1 = generic_typename . "^"
	typespec/L1 = generic_typename . "^" "&"
[9]
	variabledefinition = typespec . IDENT
	variabledefinition = typespec . IDENT "=" expression
	variabledefinition = typespec . IDENT "[" expression "]" "=" expression
	variabledefinition = typespec . IDENT "[" expression "]"
[10]
	free_definition = typedefinition . ";"
[11]
	free_definition = structdefinition .
[12]
	free_definition = interfacedefinition .
[13]
	free_definition = namespacedefinition .
[14]
	free_definition = classdefinition .
[15]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "function" IDENT typespec callablebody_const
	functiondefinition = linkage . "procedure" IDENT callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody_const
[16]
	free_definition = functiondefinition .
[17]
	free_definition = variabledefinition . ";"
[18]
	typename/L1 = IDENT .
	typename/L1 = IDENT . "::" typename
[19]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = "const" . generic_typename
	typespec/L1 = "const" . generic_typename "&"
	typespec/L1 = "const" . generic_typename "^"
	typespec/L1 = "const" . generic_typename "^" "&"
[20]
	typespec/L1 = "any" . "class" "^"
	typespec/L1 = "any" . "const" "class" "^"
	typespec/L1 = "any" . "struct" "^"
	typespec/L1 = "any" . "const" "struct" "^"
[21]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}"
[22]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}"
[23]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	typedefinition = "typedef" . typepath IDENT
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")"
[24]
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[25]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}"
[26]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}"
[27]
	linkage = "private" .
[28]
	linkage = "public" .
[29]
	extern_definitionlist = extern_definition extern_definitionlist .
[30]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[31]
	program = extern_definitionlist free_definitionlist main_procedure .
[32]
	main_procedure = "main" . "{" codeblock "}"
[33]
	free_definitionlist = free_definition free_definitionlist .
[34]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	generic_typename/L1 = typename "<" . generic_instancelist ">"
	typepath/L1 = . generic_typename
	generic_instance = . typepath
	generic_instance = . typepath "," generic_instance
	generic_instancelist = . generic_instance
[35]
	typespec/L1 = generic_typename "&" .
[36]
	typespec/L1 = generic_typename "^" .
	typespec/L1 = generic_typename "^" . "&"
[37]
	variabledefinition = typespec IDENT .
	variabledefinition = typespec IDENT . "=" expression
	variabledefinition = typespec IDENT . "[" expression "]" "=" expression
	variabledefinition = typespec IDENT . "[" expression "]"
[38]
	free_definition = typedefinition ";" .
[39]
	functiondefinition = linkage "function" . IDENT typespec callablebody
	functiondefinition = linkage "function" . IDENT typespec callablebody_const
[40]
	functiondefinition = linkage "procedure" . IDENT callablebody
	functiondefinition = linkage "procedure" . IDENT callablebody_const
[41]
	free_definition = variabledefinition ";" .
[42]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	typename/L1 = IDENT "::" . typename
[43]
	typespec/L1 = "const" generic_typename .
	typespec/L1 = "const" generic_typename . "&"
	typespec/L1 = "const" generic_typename . "^"
	typespec/L1 = "const" generic_typename . "^" "&"
[44]
	typespec/L1 = "any" "const" . "class" "^"
	typespec/L1 = "any" "const" . "struct" "^"
[45]
	typespec/L1 = "any" "class" . "^"
[46]
	typespec/L1 = "any" "struct" . "^"
[47]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}"
[48]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}"
[49]
	typepath/L1 = generic_typename .
[50]
	typedefinition = "typedef" typepath . IDENT
[51]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")"
[52]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")"
[53]
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[54]
	structdefinition = "generic" "struct" . IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
[55]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}"
[56]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}"
[57]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";"
[58]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";"
[59]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	main_procedure = "main" "{" . codeblock "}"
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[60]
	generic_instance = typepath .
	generic_instance = typepath . "," generic_instance
[61]
	generic_instancelist = generic_instance .
[62]
	generic_typename/L1 = typename "<" generic_instancelist . ">"
[63]
	typespec/L1 = generic_typename "^" "&" .
[64]
	variabledefinition = typespec IDENT "=" . expression
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[65]
	variabledefinition = typespec IDENT "[" . expression "]" "=" expression
	variabledefinition = typespec IDENT "[" . expression "]"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[66]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	functiondefinition = linkage "function" IDENT . typespec callablebody
	functiondefinition = linkage "function" IDENT . typespec callablebody_const
[67]
	functiondefinition = linkage "procedure" IDENT . callablebody
	functiondefinition = linkage "procedure" IDENT . callablebody_const
	callablebody = . "(" parameterlist ")" "{" codeblock "}"
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}"
[68]
	typename/L1 = IDENT "::" typename .
[69]
	typespec/L1 = "const" generic_typename "&" .
[70]
	typespec/L1 = "const" generic_typename "^" .
	typespec/L1 = "const" generic_typename "^" . "&"
[71]
	typespec/L1 = "any" "const" "class" . "^"
[72]
	typespec/L1 = "any" "const" "struct" . "^"
[73]
	typespec/L1 = "any" "class" "^" .
[74]
	typespec/L1 = "any" "struct" "^" .
[75]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" "{" codeblock "}"
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const
	operatordefinition = . linkage "operator" operatordecl callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[76]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	inheritlist = . typepath "," inheritlist
	inheritlist = . typepath
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}"
[77]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[78]
	typedefinition = "typedef" typepath IDENT .
[79]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")"
[80]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")"
[81]
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[82]
	structdefinition = "generic" "struct" IDENT . "<" generic_header ">" "{" instruct_definitionlist "}"
[83]
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist
	ininterf_definitionlist = .
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" ";"
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" "const" ";"
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}"
[84]
	namespace_definitionlist = . namespace_definition namespace_definitionlist
	namespace_definitionlist = .
	namespace_definition = . namespacedefinition
	namespace_definition = . typedefinition ";"
	namespace_definition = . structdefinition
	namespace_definition = . classdefinition
	namespace_definition = . interfacedefinition
	namespace_definition = . functiondefinition
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
[85]
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[86]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";"
[87]
	statement/L1 = typedefinition . ";"
[88]
	statement/L1 = functiondefinition .
[89]
	main_procedure = "main" "{" codeblock . "}"
[90]
	codeblock = statementlist .
[91]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	statementlist = . statement statementlist
	statementlist = statement . statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[92]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[93]
	expression/L12 = iexpression .
[94]
	expression/L2 = BOOLEAN .
[95]
	expression/L2 = IDENT .
[96]
	expression/L2 = DQSTRING .
[97]
	expression/L2 = SQSTRING .
[98]
	expression/L2 = CARDINAL .
[99]
	expression/L2 = INTEGER .
[100]
	expression/L2 = FLOAT .
[101]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L2 = "(" . expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[102]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = "&" . expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[103]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	statement/L1 = "{" . codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = "{" . "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
	expressionlist = . expression "," expressionlist
	expressionlist = . expression
[104]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = "+" . expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[105]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = "-" . expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[106]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L12 = "*" . expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[107]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = "~" . expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[108]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L9 = "!" . expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[109]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	statement/L1 = "var" . variabledefinition ";"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[110]
	statement/L1 = "return" . expression ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[111]
	statement/L1 = "delete" . expression ";"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[112]
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}"
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
[113]
	statement/L1 = "while" . "(" expression ")" "{" codeblock "}"
[114]
	statement/L1 = "with" . "(" expression ")" "{" codeblock "}"
[115]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	expression/L1 = "new" . typespec ":" expression
[116]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	expression/L1 = "cast" . typespec ":" "{" expression "}"
	expression/L1 = "cast" . typespec ":" "{" "}"
[117]
	expression/L2 = "null" .
[118]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	generic_instance = . typepath
	generic_instance = . typepath "," generic_instance
	generic_instance = typepath "," . generic_instance
[119]
	generic_typename/L1 = typename "<" generic_instancelist ">" .
[120]
	variabledefinition = typespec IDENT "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[121]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = "{" . "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
	expressionlist = . expression "," expressionlist
	expressionlist = . expression
[122]
	variabledefinition = typespec IDENT "[" expression . "]" "=" expression
	variabledefinition = typespec IDENT "[" expression . "]"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[123]
	functiondefinition = linkage "function" IDENT typespec . callablebody
	functiondefinition = linkage "function" IDENT typespec . callablebody_const
	callablebody = . "(" parameterlist ")" "{" codeblock "}"
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}"
[124]
	functiondefinition = linkage "procedure" IDENT callablebody .
[125]
	functiondefinition = linkage "procedure" IDENT callablebody_const .
[126]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	callablebody = "(" . parameterlist ")" "{" codeblock "}"
	callablebody_const = "(" . parameterlist ")" "const" "{" codeblock "}"
	parameterlist = . parameters
	parameterlist = .
	parameters = . paramdecl "," parameters
	parameters = . paramdecl
	paramdecl = . typespec IDENT
[127]
	typespec/L1 = "const" generic_typename "^" "&" .
[128]
	typespec/L1 = "any" "const" "class" "^" .
[129]
	typespec/L1 = "any" "const" "struct" "^" .
[130]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}"
[131]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = inclass_definition . inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" "{" codeblock "}"
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const
	operatordefinition = . linkage "operator" operatordecl callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[132]
	inclass_definition = typedefinition . ";"
[133]
	inclass_definition = structdefinition .
[134]
	inclass_definition = interfacedefinition .
[135]
	inclass_definition = classdefinition .
[136]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "function" IDENT typespec callablebody_const
	functiondefinition = linkage . "procedure" IDENT callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody_const
	constructordefinition = linkage . "constructor" callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody_const
	operatordefinition = linkage . "operator" operatordecl callablebody
	operatordefinition = linkage . "operator" operatordecl callablebody_const
[137]
	inclass_definition = functiondefinition .
[138]
	inclass_definition = constructordefinition .
[139]
	inclass_definition = operatordefinition .
[140]
	inclass_definition = variabledefinition . ";"
[141]
	constructordefinition = "destructor" . "{" codeblock "}"
[142]
	inheritlist = typepath . "," inheritlist
	inheritlist = typepath .
[143]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}"
[144]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}"
[145]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = instruct_definition . instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[146]
	instruct_definition = typedefinition . ";"
[147]
	instruct_definition = structdefinition .
[148]
	instruct_definition = variabledefinition . ";"
[149]
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
[150]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")"
[151]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")"
[152]
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typepath
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[153]
	structdefinition = "generic" "struct" IDENT "<" . generic_header ">" "{" instruct_definitionlist "}"
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typepath
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = . IDENT
	generic_header = . generic_identlist
	generic_header = . generic_defaultlist
[154]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}"
[155]
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist
	ininterf_definitionlist = .
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" ";"
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" ";"
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" ";"
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" ";"
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" "const" ";"
[156]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" "const" ";"
[157]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" ";"
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" "const" ";"
[158]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" "const" ";"
	operatordecl = . "->"
	operatordecl = . "="
	operatordecl = . "+"
	operatordecl = . "-"
	operatordecl = . "*"
	operatordecl = . "/"
	operatordecl = . "%"
	operatordecl = . "&&"
	operatordecl = . "||"
	operatordecl = . "&"
	operatordecl = . "|"
	operatordecl = . "<<"
	operatordecl = . ">>"
	operatordecl = . "~"
	operatordecl = . "!"
	operatordecl = . "(" ")"
	operatordecl = . "[" "]"
	operatordecl = . "=="
	operatordecl = . "!="
	operatordecl = . ">="
	operatordecl = . "<="
	operatordecl = . ">"
	operatordecl = . "<"
[159]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}"
[160]
	namespace_definitionlist = . namespace_definition namespace_definitionlist
	namespace_definitionlist = namespace_definition . namespace_definitionlist
	namespace_definitionlist = .
	namespace_definition = . namespacedefinition
	namespace_definition = . typedefinition ";"
	namespace_definition = . structdefinition
	namespace_definition = . classdefinition
	namespace_definition = . interfacedefinition
	namespace_definition = . functiondefinition
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
[161]
	namespace_definition = typedefinition . ";"
[162]
	namespace_definition = structdefinition .
[163]
	namespace_definition = interfacedefinition .
[164]
	namespace_definition = namespacedefinition .
[165]
	namespace_definition = classdefinition .
[166]
	namespace_definition = functiondefinition .
[167]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";"
[168]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";"
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[169]
	statement/L1 = typedefinition ";" .
[170]
	main_procedure = "main" "{" codeblock "}" .
[171]
	statementlist = statement statementlist .
[172]
	iexpression = expression indirection . IDENT
[173]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = expression "(" . expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = expression "(" . ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
	expressionlist = . expression "," expressionlist
	expressionlist = . expression
[174]
	statement/L1 = expression ";" .
[175]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = expression "<" . expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[176]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L8 = expression ">" . expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[177]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L7 = expression "&" . expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[178]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = expression "^" . expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[179]
	indirection = . "->" indirection
	indirection = "->" . indirection
	indirection = . "->"
	indirection = "->" .
[180]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = expression "=" . expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[181]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = expression "+" . expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[182]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = expression "-" . expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[183]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = expression "*" . expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[184]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = expression "/" . expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[185]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L10 = expression "%" . expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[186]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L5 = expression "&&" . expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[187]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L4 = expression "||" . expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[188]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L6 = expression "|" . expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[189]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = expression "<<" . expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[190]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L11 = expression ">>" . expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[191]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	expression/L13 = expression "[" . expressionlist "]"
	iexpression = . expression indirection IDENT
	expressionlist = . expression "," expressionlist
	expressionlist = . expression
[192]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = expression "==" . expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[193]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = expression "!=" . expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[194]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = expression ">=" . expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[195]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = expression "<=" . expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[196]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = expression "+=" . expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[197]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = expression "-=" . expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[198]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = expression "*=" . expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[199]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = expression "/=" . expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[200]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = expression "^=" . expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[201]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = expression "&=" . expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = expression "&=" . expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[202]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = expression "%=" . expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[203]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = expression "&&=" . expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[204]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = expression "||=" . expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[205]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = expression "|=" . expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[206]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = expression "<<=" . expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[207]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L3 = expression ">>=" . expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[208]
	expression/L12 = expression "." . IDENT
[209]
	expression/L2 = "(" expression . ")"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[210]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "&" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[211]
	statement/L1 = "{" codeblock . "}"
[212]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
	expressionlist = expression . "," expressionlist
	expressionlist = expression .
[213]
	expression/L1 = "{" expressionlist . "}"
[214]
	expression/L1 = "{" "}" .
[215]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "+" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[216]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[217]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L12 = "*" expression .
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[218]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "~" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[219]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "!" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[220]
	statement/L1 = "var" variabledefinition . ";"
[221]
	statement/L1 = "return" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[222]
	statement/L1 = "delete" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[223]
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}"
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[224]
	statement/L1 = "while" "(" . expression ")" "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[225]
	statement/L1 = "with" "(" . expression ")" "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[226]
	expression/L1 = "new" typespec . ":" expression
[227]
	expression/L1 = "cast" typespec . ":" "{" expression "}"
	expression/L1 = "cast" typespec . ":" "{" "}"
[228]
	generic_instance = typepath "," generic_instance .
[229]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
	expressionlist = expression . "," expressionlist
	expressionlist = expression .
[230]
	variabledefinition = typespec IDENT "[" expression "]" . "=" expression
	variabledefinition = typespec IDENT "[" expression "]" .
[231]
	functiondefinition = linkage "function" IDENT typespec callablebody .
[232]
	functiondefinition = linkage "function" IDENT typespec callablebody_const .
[233]
	paramdecl = typespec . IDENT
[234]
	callablebody = "(" parameterlist . ")" "{" codeblock "}"
	callablebody_const = "(" parameterlist . ")" "const" "{" codeblock "}"
[235]
	parameterlist = parameters .
[236]
	parameters = paramdecl . "," parameters
	parameters = paramdecl .
[237]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" .
[238]
	inclass_definitionlist = inclass_definition inclass_definitionlist .
[239]
	inclass_definition = typedefinition ";" .
[240]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody
	operatordefinition = linkage "operator" . operatordecl typespec callablebody_const
	operatordefinition = linkage "operator" . operatordecl callablebody
	operatordefinition = linkage "operator" . operatordecl callablebody_const
	operatordecl = . "->"
	operatordecl = . "="
	operatordecl = . "+"
	operatordecl = . "-"
	operatordecl = . "*"
	operatordecl = . "/"
	operatordecl = . "%"
	operatordecl = . "&&"
	operatordecl = . "||"
	operatordecl = . "&"
	operatordecl = . "|"
	operatordecl = . "<<"
	operatordecl = . ">>"
	operatordecl = . "~"
	operatordecl = . "!"
	operatordecl = . "(" ")"
	operatordecl = . "[" "]"
	operatordecl = . "=="
	operatordecl = . "!="
	operatordecl = . ">="
	operatordecl = . "<="
	operatordecl = . ">"
	operatordecl = . "<"
[241]
	constructordefinition = linkage "constructor" . callablebody
	callablebody = . "(" parameterlist ")" "{" codeblock "}"
[242]
	inclass_definition = variabledefinition ";" .
[243]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = "destructor" "{" . codeblock "}"
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[244]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	inheritlist = . typepath "," inheritlist
	inheritlist = typepath "," . inheritlist
	inheritlist = . typepath
[245]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" "{" codeblock "}"
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const
	operatordefinition = . linkage "operator" operatordecl callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[246]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" .
[247]
	instruct_definitionlist = instruct_definition instruct_definitionlist .
[248]
	instruct_definition = typedefinition ";" .
[249]
	instruct_definition = variabledefinition ";" .
[250]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")"
[251]
	extern_paramlist = extern_parameters .
[252]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")"
[253]
	extern_parameters = typespec . "," extern_parameters
	extern_parameters = typespec . IDENT "," extern_parameters
	extern_parameters = typespec .
	extern_parameters = typespec . IDENT
[254]
	generic_header = generic_defaultlist .
[255]
	generic_header = generic_identlist .
[256]
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" ":" inheritlist "{" inclass_definitionlist "}"
[257]
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typepath
	generic_identlist = IDENT . "," generic_identlist
	generic_identlist = IDENT . "," generic_defaultlist
	generic_identlist = IDENT .
[258]
	structdefinition = "generic" "struct" IDENT "<" generic_header . ">" "{" instruct_definitionlist "}"
[259]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" .
[260]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist .
[261]
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[262]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" ";"
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" "const" ";"
[263]
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[264]
	operatordecl = "(" . ")"
[265]
	operatordecl = "<" .
[266]
	operatordecl = ">" .
[267]
	operatordecl = "&" .
[268]
	operatordecl = "->" .
[269]
	operatordecl = "=" .
[270]
	operatordecl = "+" .
[271]
	operatordecl = "-" .
[272]
	operatordecl = "*" .
[273]
	operatordecl = "/" .
[274]
	operatordecl = "%" .
[275]
	operatordecl = "&&" .
[276]
	operatordecl = "||" .
[277]
	operatordecl = "|" .
[278]
	operatordecl = "<<" .
[279]
	operatordecl = ">>" .
[280]
	operatordecl = "~" .
[281]
	operatordecl = "!" .
[282]
	operatordecl = "[" . "]"
[283]
	operatordecl = "==" .
[284]
	operatordecl = "!=" .
[285]
	operatordecl = ">=" .
[286]
	operatordecl = "<=" .
[287]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" .
[288]
	namespace_definitionlist = namespace_definition namespace_definitionlist .
[289]
	namespace_definition = typedefinition ";" .
[290]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";"
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[291]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";"
[292]
	iexpression = expression indirection IDENT .
[293]
	expression/L13 = expression "(" expressionlist . ")"
[294]
	expression/L13 = expression "(" ")" .
[295]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression "<" expression .
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[296]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L8 = expression ">" expression .
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[297]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L7 = expression "&" expression .
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[298]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression "^" expression .
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[299]
	indirection = "->" indirection .
[300]
	expression/L3 = expression . "=" expression
	expression/L3 = expression "=" expression .
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[301]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression "+" expression .
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[302]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = expression "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[303]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression "*" expression .
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[304]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression "/" expression .
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[305]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L10 = expression "%" expression .
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[306]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L5 = expression "&&" expression .
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[307]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L4 = expression "||" expression .
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[308]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L6 = expression "|" expression .
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[309]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression "<<" expression .
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[310]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L11 = expression ">>" expression .
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[311]
	expression/L13 = expression "[" expressionlist . "]"
[312]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression "==" expression .
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[313]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression "!=" expression .
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[314]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression ">=" expression .
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[315]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression "<=" expression .
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[316]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression "+=" expression .
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[317]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression "-=" expression .
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[318]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression "*=" expression .
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[319]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression "/=" expression .
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[320]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression "^=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[321]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[322]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression "%=" expression .
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[323]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression "&&=" expression .
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[324]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression "||=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[325]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression "|=" expression .
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[326]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression "<<=" expression .
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[327]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L3 = expression ">>=" expression .
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[328]
	expression/L12 = expression "." IDENT .
[329]
	expression/L2 = "(" expression ")" .
[330]
	statement/L1 = "{" codeblock "}" .
[331]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
	expressionlist = . expression "," expressionlist
	expressionlist = expression "," . expressionlist
	expressionlist = . expression
[332]
	expression/L1 = "{" expressionlist "}" .
[333]
	statement/L1 = "var" variabledefinition ";" .
[334]
	statement/L1 = "return" expression ";" .
[335]
	statement/L1 = "delete" expression ";" .
[336]
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}"
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}" "else" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[337]
	statement/L1 = "while" "(" expression . ")" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[338]
	statement/L1 = "with" "(" expression . ")" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[339]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = "new" typespec ":" . expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[340]
	expression/L1 = "cast" typespec ":" . "{" expression "}"
	expression/L1 = "cast" typespec ":" . "{" "}"
[341]
	variabledefinition = typespec IDENT "[" expression "]" "=" . expression
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[342]
	paramdecl = typespec IDENT .
[343]
	callablebody = "(" parameterlist ")" . "{" codeblock "}"
	callablebody_const = "(" parameterlist ")" . "const" "{" codeblock "}"
[344]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	parameters = . paramdecl "," parameters
	parameters = paramdecl "," . parameters
	parameters = . paramdecl
	paramdecl = . typespec IDENT
[345]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	operatordefinition = linkage "operator" operatordecl . typespec callablebody
	operatordefinition = linkage "operator" operatordecl . typespec callablebody_const
	operatordefinition = linkage "operator" operatordecl . callablebody
	operatordefinition = linkage "operator" operatordecl . callablebody_const
	callablebody = . "(" parameterlist ")" "{" codeblock "}"
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}"
[346]
	constructordefinition = linkage "constructor" callablebody .
[347]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	callablebody = "(" . parameterlist ")" "{" codeblock "}"
	parameterlist = . parameters
	parameterlist = .
	parameters = . paramdecl "," parameters
	parameters = . paramdecl
	paramdecl = . typespec IDENT
[348]
	constructordefinition = "destructor" "{" codeblock . "}"
[349]
	inheritlist = typepath "," inheritlist .
[350]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}"
[351]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")"
[352]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" .
[353]
	extern_parameters = typespec IDENT . "," extern_parameters
	extern_parameters = typespec IDENT .
[354]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = typespec "," . extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[355]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . ":" inheritlist "{" inclass_definitionlist "}"
[356]
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist
	generic_defaultlist = . IDENT "=" typepath
	generic_identlist = . IDENT "," generic_identlist
	generic_identlist = IDENT "," . generic_identlist
	generic_identlist = . IDENT "," generic_defaultlist
	generic_identlist = IDENT "," . generic_defaultlist
	generic_identlist = . IDENT
[357]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	generic_defaultlist = IDENT "=" . typepath "," generic_defaultlist
	generic_defaultlist = IDENT "=" . typepath
[358]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" . "{" instruct_definitionlist "}"
[359]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" "const" ";"
[360]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" ";"
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[361]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" "const" ";"
[362]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[363]
	operatordecl = "(" ")" .
[364]
	operatordecl = "[" "]" .
[365]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";"
[366]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";"
[367]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";"
[368]
	expression/L13 = expression "(" expressionlist ")" .
[369]
	expression/L13 = expression "[" expressionlist "]" .
[370]
	expressionlist = expression "," expressionlist .
[371]
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}"
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}" "else" "{" codeblock "}"
[372]
	statement/L1 = "while" "(" expression ")" . "{" codeblock "}"
[373]
	statement/L1 = "with" "(" expression ")" . "{" codeblock "}"
[374]
	expression/L1 = "new" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[375]
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = "cast" typespec ":" "{" . expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L1 = "cast" typespec ":" "{" . "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[376]
	variabledefinition = typespec IDENT "[" expression "]" "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[377]
	callablebody_const = "(" parameterlist ")" "const" . "{" codeblock "}"
[378]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	callablebody = "(" parameterlist ")" "{" . codeblock "}"
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[379]
	parameters = paramdecl "," parameters .
[380]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody
	operatordefinition = linkage "operator" operatordecl typespec . callablebody_const
	callablebody = . "(" parameterlist ")" "{" codeblock "}"
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}"
[381]
	operatordefinition = linkage "operator" operatordecl callablebody .
[382]
	operatordefinition = linkage "operator" operatordecl callablebody_const .
[383]
	callablebody = "(" parameterlist . ")" "{" codeblock "}"
[384]
	constructordefinition = "destructor" "{" codeblock "}" .
[385]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" .
[386]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" .
[387]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = typespec IDENT "," . extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[388]
	extern_parameters = typespec "," extern_parameters .
[389]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" . inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" "{" codeblock "}"
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const
	operatordefinition = . linkage "operator" operatordecl callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[390]
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typepath/L1 = . generic_typename
	inheritlist = . typepath "," inheritlist
	inheritlist = . typepath
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" . inheritlist "{" inclass_definitionlist "}"
[391]
	generic_identlist = IDENT "," generic_defaultlist .
[392]
	generic_identlist = IDENT "," generic_identlist .
[393]
	generic_defaultlist = IDENT "=" typepath . "," generic_defaultlist
	generic_defaultlist = IDENT "=" typepath .
[394]
	instruct_definitionlist = . instruct_definition instruct_definitionlist
	instruct_definitionlist = .
	instruct_definition = . typedefinition ";"
	instruct_definition = . variabledefinition ";"
	instruct_definition = . structdefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" . instruct_definitionlist "}"
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[395]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[396]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" ";"
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" "const" ";"
[397]
	extern_parameters = . typespec "," extern_parameters
	extern_parameters = . typespec IDENT "," extern_parameters
	extern_parameters = . typespec
	extern_parameters = . typespec IDENT
	extern_paramlist = . extern_parameters
	extern_paramlist = .
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" "const" ";"
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
[398]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" ";"
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" "const" ";"
[399]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";"
[400]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";"
[401]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" .
[402]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";"
[403]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[404]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = "while" "(" expression ")" "{" . codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[405]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = "with" "(" expression ")" "{" . codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[406]
	expression/L1 = "cast" typespec ":" "{" expression . "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	indirection = . "->" indirection
	indirection = . "->"
[407]
	expression/L1 = "cast" typespec ":" "{" "}" .
[408]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	callablebody_const = "(" parameterlist ")" "const" "{" . codeblock "}"
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[409]
	callablebody = "(" parameterlist ")" "{" codeblock . "}"
[410]
	operatordefinition = linkage "operator" operatordecl typespec callablebody .
[411]
	operatordefinition = linkage "operator" operatordecl typespec callablebody_const .
[412]
	callablebody = "(" parameterlist ")" . "{" codeblock "}"
[413]
	extern_parameters = typespec IDENT "," extern_parameters .
[414]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist . "}"
[415]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist . "{" inclass_definitionlist "}"
[416]
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist
	generic_defaultlist = IDENT "=" typepath "," . generic_defaultlist
	generic_defaultlist = . IDENT "=" typepath
[417]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist . "}"
[418]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" ";"
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" "const" ";"
[419]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . ";"
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . "const" ";"
[420]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" ";"
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" "const" ";"
[421]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . ";"
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . "const" ";"
[422]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" .
[423]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";"
[424]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" .
[425]
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}"
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}" "else" "{" codeblock "}"
[426]
	statement/L1 = "while" "(" expression ")" "{" codeblock . "}"
[427]
	statement/L1 = "with" "(" expression ")" "{" codeblock . "}"
[428]
	expression/L1 = "cast" typespec ":" "{" expression "}" .
[429]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock . "}"
[430]
	callablebody = "(" parameterlist ")" "{" codeblock "}" .
[431]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}" .
[432]
	inclass_definitionlist = . inclass_definition inclass_definitionlist
	inclass_definitionlist = .
	inclass_definition = . typedefinition ";"
	inclass_definition = . variabledefinition ";"
	inclass_definition = . structdefinition
	inclass_definition = . classdefinition
	inclass_definition = . interfacedefinition
	inclass_definition = . functiondefinition
	inclass_definition = . operatordefinition
	inclass_definition = . constructordefinition
	typename/L1 = . IDENT
	typename/L1 = . IDENT "::" typename
	generic_typename/L1 = . typename
	generic_typename/L1 = . typename "<" generic_instancelist ">"
	typespec/L1 = . generic_typename
	typespec/L1 = . "const" generic_typename
	typespec/L1 = . generic_typename "&"
	typespec/L1 = . "const" generic_typename "&"
	typespec/L1 = . generic_typename "^"
	typespec/L1 = . "const" generic_typename "^"
	typespec/L1 = . generic_typename "^" "&"
	typespec/L1 = . "const" generic_typename "^" "&"
	typespec/L1 = . "any" "class" "^"
	typespec/L1 = . "any" "const" "class" "^"
	typespec/L1 = . "any" "struct" "^"
	typespec/L1 = . "any" "const" "struct" "^"
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}"
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}"
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}"
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" . inclass_definitionlist "}"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	constructordefinition = . linkage "constructor" callablebody
	constructordefinition = . "destructor" "{" codeblock "}"
	operatordefinition = . linkage "operator" operatordecl typespec callablebody
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const
	operatordefinition = . linkage "operator" operatordecl callablebody
	operatordefinition = . linkage "operator" operatordecl callablebody_const
	variabledefinition = . typespec IDENT
	variabledefinition = . typespec IDENT "=" expression
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression
	variabledefinition = . typespec IDENT "[" expression "]"
[433]
	generic_defaultlist = IDENT "=" typepath "," generic_defaultlist .
[434]
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typepath
[435]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}" .
[436]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . ";"
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . "const" ";"
[437]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" ";" .
[438]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" . ";"
[439]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . ";"
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . "const" ";"
[440]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" ";" .
[441]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" . ";"
[442]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" .
[443]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" .
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" . "else" "{" codeblock "}"
[444]
	statement/L1 = "while" "(" expression ")" "{" codeblock "}" .
[445]
	statement/L1 = "with" "(" expression ")" "{" codeblock "}" .
[446]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock "}" .
[447]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist . "}"
[448]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" ";" .
[449]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" . ";"
[450]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" ";" .
[451]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" ";" .
[452]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" . ";"
[453]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" ";" .
[454]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" . "{" codeblock "}"
[455]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}" .
[456]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" ";" .
[457]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";" .
[458]
	typedefinition = . "typedef" typepath IDENT
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")"
	linkage = . "private"
	linkage = . "public"
	linkage = .
	functiondefinition = . linkage "function" IDENT typespec callablebody
	functiondefinition = . linkage "function" IDENT typespec callablebody_const
	functiondefinition = . linkage "procedure" IDENT callablebody
	functiondefinition = . linkage "procedure" IDENT callablebody_const
	codeblock = . statementlist
	statementlist = . statement statementlist
	statementlist = .
	statement/L1 = . functiondefinition
	statement/L1 = . typedefinition ";"
	statement/L1 = . "var" variabledefinition ";"
	statement/L1 = . expression ";"
	statement/L1 = . "return" expression ";"
	statement/L1 = . "delete" expression ";"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" . codeblock "}"
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}"
	statement/L1 = . "{" codeblock "}"
	expression/L1 = . "{" expressionlist "}"
	expression/L1 = . "{" "}"
	expression/L1 = . "new" typespec ":" expression
	expression/L1 = . "cast" typespec ":" "{" expression "}"
	expression/L1 = . "cast" typespec ":" "{" "}"
	expression/L2 = . IDENT
	expression/L2 = . BOOLEAN
	expression/L2 = . CARDINAL
	expression/L2 = . INTEGER
	expression/L2 = . FLOAT
	expression/L2 = . "null"
	expression/L2 = . DQSTRING
	expression/L2 = . SQSTRING
	expression/L2 = . "(" expression ")"
	expression/L3 = . expression "=" expression
	expression/L3 = . expression "+=" expression
	expression/L3 = . expression "-=" expression
	expression/L3 = . expression "*=" expression
	expression/L3 = . expression "/=" expression
	expression/L3 = . expression "^=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "%=" expression
	expression/L3 = . expression "&&=" expression
	expression/L3 = . expression "||=" expression
	expression/L3 = . expression "&=" expression
	expression/L3 = . expression "|=" expression
	expression/L3 = . expression "<<=" expression
	expression/L3 = . expression ">>=" expression
	expression/L4 = . expression "||" expression
	expression/L5 = . expression "&&" expression
	expression/L6 = . expression "|" expression
	expression/L7 = . expression "^" expression
	expression/L7 = . expression "&" expression
	expression/L8 = . expression "==" expression
	expression/L8 = . expression "!=" expression
	expression/L8 = . expression "<=" expression
	expression/L8 = . expression "<" expression
	expression/L8 = . expression ">=" expression
	expression/L8 = . expression ">" expression
	expression/L9 = . expression "+" expression
	expression/L9 = . expression "-" expression
	expression/L9 = . "&" expression
	expression/L9 = . "-" expression
	expression/L9 = . "+" expression
	expression/L9 = . "~" expression
	expression/L9 = . "!" expression
	expression/L10 = . expression "*" expression
	expression/L10 = . expression "/" expression
	expression/L10 = . expression "%" expression
	expression/L11 = . expression "<<" expression
	expression/L11 = . expression ">>" expression
	expression/L12 = . iexpression
	expression/L12 = . expression "." IDENT
	expression/L12 = . "*" expression
	expression/L13 = . expression "(" expressionlist ")"
	expression/L13 = . expression "(" ")"
	expression/L13 = . expression "[" expressionlist "]"
	iexpression = . expression indirection IDENT
[459]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock . "}"
[460]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}" .

-- LR(0) state cores (for calculation of SHIFT follow state):
[2]
	program = extern_definitionlist . free_definitionlist main_procedure
[3]
	extern_definitionlist = extern_definition . extern_definitionlist
[4]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[5]
	program = extern_definitionlist free_definitionlist . main_procedure
[6]
	free_definitionlist = free_definition . free_definitionlist
[7]
	generic_typename/L1 = typename .
	generic_typename/L1 = typename . "<" generic_instancelist ">"
[8]
	typespec/L1 = generic_typename .
	typespec/L1 = generic_typename . "&"
	typespec/L1 = generic_typename . "^"
	typespec/L1 = generic_typename . "^" "&"
[9]
	variabledefinition = typespec . IDENT
	variabledefinition = typespec . IDENT "=" expression
	variabledefinition = typespec . IDENT "[" expression "]" "=" expression
	variabledefinition = typespec . IDENT "[" expression "]"
[10]
	free_definition = typedefinition . ";"
[11]
	free_definition = structdefinition .
[12]
	free_definition = interfacedefinition .
[13]
	free_definition = namespacedefinition .
[14]
	free_definition = classdefinition .
[15]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "function" IDENT typespec callablebody_const
	functiondefinition = linkage . "procedure" IDENT callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody_const
[16]
	free_definition = functiondefinition .
[17]
	free_definition = variabledefinition . ";"
[18]
	typename/L1 = IDENT .
	typename/L1 = IDENT . "::" typename
[19]
	typespec/L1 = "const" . generic_typename
	typespec/L1 = "const" . generic_typename "&"
	typespec/L1 = "const" . generic_typename "^"
	typespec/L1 = "const" . generic_typename "^" "&"
[20]
	typespec/L1 = "any" . "class" "^"
	typespec/L1 = "any" . "const" "class" "^"
	typespec/L1 = "any" . "struct" "^"
	typespec/L1 = "any" . "const" "struct" "^"
[21]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}"
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}"
[22]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}"
[23]
	typedefinition = "typedef" . typepath IDENT
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")"
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")"
[24]
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[25]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}"
[26]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}"
[27]
	linkage = "private" .
[28]
	linkage = "public" .
[29]
	extern_definitionlist = extern_definition extern_definitionlist .
[30]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";"
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";"
[31]
	program = extern_definitionlist free_definitionlist main_procedure .
[32]
	main_procedure = "main" . "{" codeblock "}"
[33]
	free_definitionlist = free_definition free_definitionlist .
[34]
	generic_typename/L1 = typename "<" . generic_instancelist ">"
[35]
	typespec/L1 = generic_typename "&" .
[36]
	typespec/L1 = generic_typename "^" .
	typespec/L1 = generic_typename "^" . "&"
[37]
	variabledefinition = typespec IDENT .
	variabledefinition = typespec IDENT . "=" expression
	variabledefinition = typespec IDENT . "[" expression "]" "=" expression
	variabledefinition = typespec IDENT . "[" expression "]"
[38]
	free_definition = typedefinition ";" .
[39]
	functiondefinition = linkage "function" . IDENT typespec callablebody
	functiondefinition = linkage "function" . IDENT typespec callablebody_const
[40]
	functiondefinition = linkage "procedure" . IDENT callablebody
	functiondefinition = linkage "procedure" . IDENT callablebody_const
[41]
	free_definition = variabledefinition ";" .
[42]
	typename/L1 = IDENT "::" . typename
[43]
	typespec/L1 = "const" generic_typename .
	typespec/L1 = "const" generic_typename . "&"
	typespec/L1 = "const" generic_typename . "^"
	typespec/L1 = "const" generic_typename . "^" "&"
[44]
	typespec/L1 = "any" "const" . "class" "^"
	typespec/L1 = "any" "const" . "struct" "^"
[45]
	typespec/L1 = "any" "class" . "^"
[46]
	typespec/L1 = "any" "struct" . "^"
[47]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}"
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}"
[48]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}"
[49]
	typepath/L1 = generic_typename .
[50]
	typedefinition = "typedef" typepath . IDENT
[51]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")"
[52]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")"
[53]
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[54]
	structdefinition = "generic" "struct" . IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
[55]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}"
[56]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}"
[57]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";"
[58]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";"
[59]
	main_procedure = "main" "{" . codeblock "}"
[60]
	generic_instance = typepath .
	generic_instance = typepath . "," generic_instance
[61]
	generic_instancelist = generic_instance .
[62]
	generic_typename/L1 = typename "<" generic_instancelist . ">"
[63]
	typespec/L1 = generic_typename "^" "&" .
[64]
	variabledefinition = typespec IDENT "=" . expression
[65]
	variabledefinition = typespec IDENT "[" . expression "]" "=" expression
	variabledefinition = typespec IDENT "[" . expression "]"
[66]
	functiondefinition = linkage "function" IDENT . typespec callablebody
	functiondefinition = linkage "function" IDENT . typespec callablebody_const
[67]
	functiondefinition = linkage "procedure" IDENT . callablebody
	functiondefinition = linkage "procedure" IDENT . callablebody_const
[68]
	typename/L1 = IDENT "::" typename .
[69]
	typespec/L1 = "const" generic_typename "&" .
[70]
	typespec/L1 = "const" generic_typename "^" .
	typespec/L1 = "const" generic_typename "^" . "&"
[71]
	typespec/L1 = "any" "const" "class" . "^"
[72]
	typespec/L1 = "any" "const" "struct" . "^"
[73]
	typespec/L1 = "any" "class" "^" .
[74]
	typespec/L1 = "any" "struct" "^" .
[75]
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}"
[76]
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}"
[77]
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}"
[78]
	typedefinition = "typedef" typepath IDENT .
[79]
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")"
[80]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")"
[81]
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[82]
	structdefinition = "generic" "struct" IDENT . "<" generic_header ">" "{" instruct_definitionlist "}"
[83]
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}"
[84]
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}"
[85]
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";"
[86]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";"
[87]
	statement/L1 = typedefinition . ";"
[88]
	statement/L1 = functiondefinition .
[89]
	main_procedure = "main" "{" codeblock . "}"
[90]
	codeblock = statementlist .
[91]
	statementlist = statement . statementlist
[92]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[93]
	expression/L12 = iexpression .
[94]
	expression/L2 = BOOLEAN .
[95]
	expression/L2 = IDENT .
[96]
	expression/L2 = DQSTRING .
[97]
	expression/L2 = SQSTRING .
[98]
	expression/L2 = CARDINAL .
[99]
	expression/L2 = INTEGER .
[100]
	expression/L2 = FLOAT .
[101]
	expression/L2 = "(" . expression ")"
[102]
	expression/L9 = "&" . expression
[103]
	statement/L1 = "{" . codeblock "}"
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = "{" . "}"
[104]
	expression/L9 = "+" . expression
[105]
	expression/L9 = "-" . expression
[106]
	expression/L12 = "*" . expression
[107]
	expression/L9 = "~" . expression
[108]
	expression/L9 = "!" . expression
[109]
	statement/L1 = "var" . variabledefinition ";"
[110]
	statement/L1 = "return" . expression ";"
[111]
	statement/L1 = "delete" . expression ";"
[112]
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}"
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}"
[113]
	statement/L1 = "while" . "(" expression ")" "{" codeblock "}"
[114]
	statement/L1 = "with" . "(" expression ")" "{" codeblock "}"
[115]
	expression/L1 = "new" . typespec ":" expression
[116]
	expression/L1 = "cast" . typespec ":" "{" expression "}"
	expression/L1 = "cast" . typespec ":" "{" "}"
[117]
	expression/L2 = "null" .
[118]
	generic_instance = typepath "," . generic_instance
[119]
	generic_typename/L1 = typename "<" generic_instancelist ">" .
[120]
	variabledefinition = typespec IDENT "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[121]
	expression/L1 = "{" . expressionlist "}"
	expression/L1 = "{" . "}"
[122]
	variabledefinition = typespec IDENT "[" expression . "]" "=" expression
	variabledefinition = typespec IDENT "[" expression . "]"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[123]
	functiondefinition = linkage "function" IDENT typespec . callablebody
	functiondefinition = linkage "function" IDENT typespec . callablebody_const
[124]
	functiondefinition = linkage "procedure" IDENT callablebody .
[125]
	functiondefinition = linkage "procedure" IDENT callablebody_const .
[126]
	callablebody = "(" . parameterlist ")" "{" codeblock "}"
	callablebody_const = "(" . parameterlist ")" "const" "{" codeblock "}"
[127]
	typespec/L1 = "const" generic_typename "^" "&" .
[128]
	typespec/L1 = "any" "const" "class" "^" .
[129]
	typespec/L1 = "any" "const" "struct" "^" .
[130]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}"
[131]
	inclass_definitionlist = inclass_definition . inclass_definitionlist
[132]
	inclass_definition = typedefinition . ";"
[133]
	inclass_definition = structdefinition .
[134]
	inclass_definition = interfacedefinition .
[135]
	inclass_definition = classdefinition .
[136]
	functiondefinition = linkage . "function" IDENT typespec callablebody
	functiondefinition = linkage . "function" IDENT typespec callablebody_const
	functiondefinition = linkage . "procedure" IDENT callablebody
	functiondefinition = linkage . "procedure" IDENT callablebody_const
	constructordefinition = linkage . "constructor" callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody
	operatordefinition = linkage . "operator" operatordecl typespec callablebody_const
	operatordefinition = linkage . "operator" operatordecl callablebody
	operatordefinition = linkage . "operator" operatordecl callablebody_const
[137]
	inclass_definition = functiondefinition .
[138]
	inclass_definition = constructordefinition .
[139]
	inclass_definition = operatordefinition .
[140]
	inclass_definition = variabledefinition . ";"
[141]
	constructordefinition = "destructor" . "{" codeblock "}"
[142]
	inheritlist = typepath . "," inheritlist
	inheritlist = typepath .
[143]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}"
[144]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}"
[145]
	instruct_definitionlist = instruct_definition . instruct_definitionlist
[146]
	instruct_definition = typedefinition . ";"
[147]
	instruct_definition = structdefinition .
[148]
	instruct_definition = variabledefinition . ";"
[149]
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}"
[150]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")"
[151]
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")"
[152]
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" ":" inheritlist "{" inclass_definitionlist "}"
[153]
	structdefinition = "generic" "struct" IDENT "<" . generic_header ">" "{" instruct_definitionlist "}"
[154]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}"
[155]
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist
[156]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" "const" ";"
[157]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" ";"
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" "const" ";"
[158]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" "const" ";"
[159]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}"
[160]
	namespace_definitionlist = namespace_definition . namespace_definitionlist
[161]
	namespace_definition = typedefinition . ";"
[162]
	namespace_definition = structdefinition .
[163]
	namespace_definition = interfacedefinition .
[164]
	namespace_definition = namespacedefinition .
[165]
	namespace_definition = classdefinition .
[166]
	namespace_definition = functiondefinition .
[167]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";"
[168]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";"
[169]
	statement/L1 = typedefinition ";" .
[170]
	main_procedure = "main" "{" codeblock "}" .
[171]
	statementlist = statement statementlist .
[172]
	iexpression = expression indirection . IDENT
[173]
	expression/L13 = expression "(" . expressionlist ")"
	expression/L13 = expression "(" . ")"
[174]
	statement/L1 = expression ";" .
[175]
	expression/L8 = expression "<" . expression
[176]
	expression/L8 = expression ">" . expression
[177]
	expression/L7 = expression "&" . expression
[178]
	expression/L7 = expression "^" . expression
[179]
	indirection = "->" . indirection
	indirection = "->" .
[180]
	expression/L3 = expression "=" . expression
[181]
	expression/L9 = expression "+" . expression
[182]
	expression/L9 = expression "-" . expression
[183]
	expression/L10 = expression "*" . expression
[184]
	expression/L10 = expression "/" . expression
[185]
	expression/L10 = expression "%" . expression
[186]
	expression/L5 = expression "&&" . expression
[187]
	expression/L4 = expression "||" . expression
[188]
	expression/L6 = expression "|" . expression
[189]
	expression/L11 = expression "<<" . expression
[190]
	expression/L11 = expression ">>" . expression
[191]
	expression/L13 = expression "[" . expressionlist "]"
[192]
	expression/L8 = expression "==" . expression
[193]
	expression/L8 = expression "!=" . expression
[194]
	expression/L8 = expression ">=" . expression
[195]
	expression/L8 = expression "<=" . expression
[196]
	expression/L3 = expression "+=" . expression
[197]
	expression/L3 = expression "-=" . expression
[198]
	expression/L3 = expression "*=" . expression
[199]
	expression/L3 = expression "/=" . expression
[200]
	expression/L3 = expression "^=" . expression
[201]
	expression/L3 = expression "&=" . expression
	expression/L3 = expression "&=" . expression
[202]
	expression/L3 = expression "%=" . expression
[203]
	expression/L3 = expression "&&=" . expression
[204]
	expression/L3 = expression "||=" . expression
[205]
	expression/L3 = expression "|=" . expression
[206]
	expression/L3 = expression "<<=" . expression
[207]
	expression/L3 = expression ">>=" . expression
[208]
	expression/L12 = expression "." . IDENT
[209]
	expression/L2 = "(" expression . ")"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[210]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "&" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[211]
	statement/L1 = "{" codeblock . "}"
[212]
	statement/L1 = expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	expressionlist = expression . "," expressionlist
	expressionlist = expression .
[213]
	expression/L1 = "{" expressionlist . "}"
[214]
	expression/L1 = "{" "}" .
[215]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "+" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[216]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[217]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L12 = "*" expression .
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[218]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "~" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[219]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = "!" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[220]
	statement/L1 = "var" variabledefinition . ";"
[221]
	statement/L1 = "return" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[222]
	statement/L1 = "delete" expression . ";"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[223]
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}"
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}" "else" "{" codeblock "}"
[224]
	statement/L1 = "while" "(" . expression ")" "{" codeblock "}"
[225]
	statement/L1 = "with" "(" . expression ")" "{" codeblock "}"
[226]
	expression/L1 = "new" typespec . ":" expression
[227]
	expression/L1 = "cast" typespec . ":" "{" expression "}"
	expression/L1 = "cast" typespec . ":" "{" "}"
[228]
	generic_instance = typepath "," generic_instance .
[229]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
	expressionlist = expression . "," expressionlist
	expressionlist = expression .
[230]
	variabledefinition = typespec IDENT "[" expression "]" . "=" expression
	variabledefinition = typespec IDENT "[" expression "]" .
[231]
	functiondefinition = linkage "function" IDENT typespec callablebody .
[232]
	functiondefinition = linkage "function" IDENT typespec callablebody_const .
[233]
	paramdecl = typespec . IDENT
[234]
	callablebody = "(" parameterlist . ")" "{" codeblock "}"
	callablebody_const = "(" parameterlist . ")" "const" "{" codeblock "}"
[235]
	parameterlist = parameters .
[236]
	parameters = paramdecl . "," parameters
	parameters = paramdecl .
[237]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" .
[238]
	inclass_definitionlist = inclass_definition inclass_definitionlist .
[239]
	inclass_definition = typedefinition ";" .
[240]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody
	operatordefinition = linkage "operator" . operatordecl typespec callablebody_const
	operatordefinition = linkage "operator" . operatordecl callablebody
	operatordefinition = linkage "operator" . operatordecl callablebody_const
[241]
	constructordefinition = linkage "constructor" . callablebody
[242]
	inclass_definition = variabledefinition ";" .
[243]
	constructordefinition = "destructor" "{" . codeblock "}"
[244]
	inheritlist = typepath "," . inheritlist
[245]
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}"
[246]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" .
[247]
	instruct_definitionlist = instruct_definition instruct_definitionlist .
[248]
	instruct_definition = typedefinition ";" .
[249]
	instruct_definition = variabledefinition ";" .
[250]
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")"
[251]
	extern_paramlist = extern_parameters .
[252]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")"
[253]
	extern_parameters = typespec . "," extern_parameters
	extern_parameters = typespec . IDENT "," extern_parameters
	extern_parameters = typespec .
	extern_parameters = typespec . IDENT
[254]
	generic_header = generic_defaultlist .
[255]
	generic_header = generic_identlist .
[256]
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" ":" inheritlist "{" inclass_definitionlist "}"
[257]
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typepath
	generic_identlist = IDENT . "," generic_identlist
	generic_identlist = IDENT . "," generic_defaultlist
	generic_identlist = IDENT .
[258]
	structdefinition = "generic" "struct" IDENT "<" generic_header . ">" "{" instruct_definitionlist "}"
[259]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" .
[260]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist .
[261]
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" "const" ";"
[262]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" ";"
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" "const" ";"
[263]
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" "const" ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" "const" ";"
[264]
	operatordecl = "(" . ")"
[265]
	operatordecl = "<" .
[266]
	operatordecl = ">" .
[267]
	operatordecl = "&" .
[268]
	operatordecl = "->" .
[269]
	operatordecl = "=" .
[270]
	operatordecl = "+" .
[271]
	operatordecl = "-" .
[272]
	operatordecl = "*" .
[273]
	operatordecl = "/" .
[274]
	operatordecl = "%" .
[275]
	operatordecl = "&&" .
[276]
	operatordecl = "||" .
[277]
	operatordecl = "|" .
[278]
	operatordecl = "<<" .
[279]
	operatordecl = ">>" .
[280]
	operatordecl = "~" .
[281]
	operatordecl = "!" .
[282]
	operatordecl = "[" . "]"
[283]
	operatordecl = "==" .
[284]
	operatordecl = "!=" .
[285]
	operatordecl = ">=" .
[286]
	operatordecl = "<=" .
[287]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" .
[288]
	namespace_definitionlist = namespace_definition namespace_definitionlist .
[289]
	namespace_definition = typedefinition ";" .
[290]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";"
[291]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";"
[292]
	iexpression = expression indirection IDENT .
[293]
	expression/L13 = expression "(" expressionlist . ")"
[294]
	expression/L13 = expression "(" ")" .
[295]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression "<" expression .
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[296]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L8 = expression ">" expression .
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[297]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L7 = expression "&" expression .
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[298]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression "^" expression .
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[299]
	indirection = "->" indirection .
[300]
	expression/L3 = expression . "=" expression
	expression/L3 = expression "=" expression .
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[301]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression "+" expression .
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[302]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L9 = expression "-" expression .
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[303]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression "*" expression .
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[304]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression "/" expression .
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[305]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L10 = expression "%" expression .
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[306]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L5 = expression "&&" expression .
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[307]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L4 = expression "||" expression .
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[308]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L6 = expression "|" expression .
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[309]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression "<<" expression .
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[310]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L11 = expression ">>" expression .
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[311]
	expression/L13 = expression "[" expressionlist . "]"
[312]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression "==" expression .
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[313]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression "!=" expression .
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[314]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression ">=" expression .
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[315]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression "<=" expression .
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[316]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression "+=" expression .
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[317]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression "-=" expression .
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[318]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression "*=" expression .
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[319]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression "/=" expression .
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[320]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression "^=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[321]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression "&=" expression .
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[322]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression "%=" expression .
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[323]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression "&&=" expression .
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[324]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression "||=" expression .
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[325]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression "|=" expression .
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[326]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression "<<=" expression .
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[327]
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L3 = expression ">>=" expression .
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[328]
	expression/L12 = expression "." IDENT .
[329]
	expression/L2 = "(" expression ")" .
[330]
	statement/L1 = "{" codeblock "}" .
[331]
	expressionlist = expression "," . expressionlist
[332]
	expression/L1 = "{" expressionlist "}" .
[333]
	statement/L1 = "var" variabledefinition ";" .
[334]
	statement/L1 = "return" expression ";" .
[335]
	statement/L1 = "delete" expression ";" .
[336]
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}"
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}" "else" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[337]
	statement/L1 = "while" "(" expression . ")" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[338]
	statement/L1 = "with" "(" expression . ")" "{" codeblock "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[339]
	expression/L1 = "new" typespec ":" . expression
[340]
	expression/L1 = "cast" typespec ":" . "{" expression "}"
	expression/L1 = "cast" typespec ":" . "{" "}"
[341]
	variabledefinition = typespec IDENT "[" expression "]" "=" . expression
[342]
	paramdecl = typespec IDENT .
[343]
	callablebody = "(" parameterlist ")" . "{" codeblock "}"
	callablebody_const = "(" parameterlist ")" . "const" "{" codeblock "}"
[344]
	parameters = paramdecl "," . parameters
[345]
	operatordefinition = linkage "operator" operatordecl . typespec callablebody
	operatordefinition = linkage "operator" operatordecl . typespec callablebody_const
	operatordefinition = linkage "operator" operatordecl . callablebody
	operatordefinition = linkage "operator" operatordecl . callablebody_const
[346]
	constructordefinition = linkage "constructor" callablebody .
[347]
	callablebody = "(" . parameterlist ")" "{" codeblock "}"
[348]
	constructordefinition = "destructor" "{" codeblock . "}"
[349]
	inheritlist = typepath "," inheritlist .
[350]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}"
[351]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")"
[352]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" .
[353]
	extern_parameters = typespec IDENT . "," extern_parameters
	extern_parameters = typespec IDENT .
[354]
	extern_parameters = typespec "," . extern_parameters
[355]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . "{" inclass_definitionlist "}"
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . ":" inheritlist "{" inclass_definitionlist "}"
[356]
	generic_identlist = IDENT "," . generic_identlist
	generic_identlist = IDENT "," . generic_defaultlist
[357]
	generic_defaultlist = IDENT "=" . typepath "," generic_defaultlist
	generic_defaultlist = IDENT "=" . typepath
[358]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" . "{" instruct_definitionlist "}"
[359]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" "const" ";"
[360]
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" ";"
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" "const" ";"
[361]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" "const" ";"
[362]
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" "const" ";"
[363]
	operatordecl = "(" ")" .
[364]
	operatordecl = "[" "]" .
[365]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";"
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";"
[366]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";"
[367]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";"
[368]
	expression/L13 = expression "(" expressionlist ")" .
[369]
	expression/L13 = expression "[" expressionlist "]" .
[370]
	expressionlist = expression "," expressionlist .
[371]
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}"
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}" "else" "{" codeblock "}"
[372]
	statement/L1 = "while" "(" expression ")" . "{" codeblock "}"
[373]
	statement/L1 = "with" "(" expression ")" . "{" codeblock "}"
[374]
	expression/L1 = "new" typespec ":" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[375]
	expression/L1 = "cast" typespec ":" "{" . expression "}"
	expression/L1 = "cast" typespec ":" "{" . "}"
[376]
	variabledefinition = typespec IDENT "[" expression "]" "=" expression .
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[377]
	callablebody_const = "(" parameterlist ")" "const" . "{" codeblock "}"
[378]
	callablebody = "(" parameterlist ")" "{" . codeblock "}"
[379]
	parameters = paramdecl "," parameters .
[380]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody
	operatordefinition = linkage "operator" operatordecl typespec . callablebody_const
[381]
	operatordefinition = linkage "operator" operatordecl callablebody .
[382]
	operatordefinition = linkage "operator" operatordecl callablebody_const .
[383]
	callablebody = "(" parameterlist . ")" "{" codeblock "}"
[384]
	constructordefinition = "destructor" "{" codeblock "}" .
[385]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" .
[386]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" .
[387]
	extern_parameters = typespec IDENT "," . extern_parameters
[388]
	extern_parameters = typespec "," extern_parameters .
[389]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" . inclass_definitionlist "}"
[390]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" . inheritlist "{" inclass_definitionlist "}"
[391]
	generic_identlist = IDENT "," generic_defaultlist .
[392]
	generic_identlist = IDENT "," generic_identlist .
[393]
	generic_defaultlist = IDENT "=" typepath . "," generic_defaultlist
	generic_defaultlist = IDENT "=" typepath .
[394]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" . instruct_definitionlist "}"
[395]
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" ";"
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" "const" ";"
[396]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" ";"
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" "const" ";"
[397]
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" ";"
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" "const" ";"
[398]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" ";"
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" "const" ";"
[399]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";"
[400]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";"
[401]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" .
[402]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";"
[403]
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}"
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}" "else" "{" codeblock "}"
[404]
	statement/L1 = "while" "(" expression ")" "{" . codeblock "}"
[405]
	statement/L1 = "with" "(" expression ")" "{" . codeblock "}"
[406]
	expression/L1 = "cast" typespec ":" "{" expression . "}"
	expression/L3 = expression . "=" expression
	expression/L3 = expression . "+=" expression
	expression/L3 = expression . "-=" expression
	expression/L3 = expression . "*=" expression
	expression/L3 = expression . "/=" expression
	expression/L3 = expression . "^=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "%=" expression
	expression/L3 = expression . "&&=" expression
	expression/L3 = expression . "||=" expression
	expression/L3 = expression . "&=" expression
	expression/L3 = expression . "|=" expression
	expression/L3 = expression . "<<=" expression
	expression/L3 = expression . ">>=" expression
	expression/L4 = expression . "||" expression
	expression/L5 = expression . "&&" expression
	expression/L6 = expression . "|" expression
	expression/L7 = expression . "^" expression
	expression/L7 = expression . "&" expression
	expression/L8 = expression . "==" expression
	expression/L8 = expression . "!=" expression
	expression/L8 = expression . "<=" expression
	expression/L8 = expression . "<" expression
	expression/L8 = expression . ">=" expression
	expression/L8 = expression . ">" expression
	expression/L9 = expression . "+" expression
	expression/L9 = expression . "-" expression
	expression/L10 = expression . "*" expression
	expression/L10 = expression . "/" expression
	expression/L10 = expression . "%" expression
	expression/L11 = expression . "<<" expression
	expression/L11 = expression . ">>" expression
	expression/L12 = expression . "." IDENT
	expression/L13 = expression . "(" expressionlist ")"
	expression/L13 = expression . "(" ")"
	expression/L13 = expression . "[" expressionlist "]"
	iexpression = expression . indirection IDENT
[407]
	expression/L1 = "cast" typespec ":" "{" "}" .
[408]
	callablebody_const = "(" parameterlist ")" "const" "{" . codeblock "}"
[409]
	callablebody = "(" parameterlist ")" "{" codeblock . "}"
[410]
	operatordefinition = linkage "operator" operatordecl typespec callablebody .
[411]
	operatordefinition = linkage "operator" operatordecl typespec callablebody_const .
[412]
	callablebody = "(" parameterlist ")" . "{" codeblock "}"
[413]
	extern_parameters = typespec IDENT "," extern_parameters .
[414]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist . "}"
[415]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist . "{" inclass_definitionlist "}"
[416]
	generic_defaultlist = IDENT "=" typepath "," . generic_defaultlist
[417]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist . "}"
[418]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" ";"
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" "const" ";"
[419]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . ";"
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . "const" ";"
[420]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" ";"
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" "const" ";"
[421]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . ";"
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . "const" ";"
[422]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" .
[423]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";"
[424]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" .
[425]
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}"
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}" "else" "{" codeblock "}"
[426]
	statement/L1 = "while" "(" expression ")" "{" codeblock . "}"
[427]
	statement/L1 = "with" "(" expression ")" "{" codeblock . "}"
[428]
	expression/L1 = "cast" typespec ":" "{" expression "}" .
[429]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock . "}"
[430]
	callablebody = "(" parameterlist ")" "{" codeblock "}" .
[431]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}" .
[432]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" . inclass_definitionlist "}"
[433]
	generic_defaultlist = IDENT "=" typepath "," generic_defaultlist .
[434]
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist
	generic_defaultlist = IDENT . "=" typepath
[435]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}" .
[436]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . ";"
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . "const" ";"
[437]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" ";" .
[438]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" . ";"
[439]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . ";"
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . "const" ";"
[440]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" ";" .
[441]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" . ";"
[442]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" .
[443]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" .
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" . "else" "{" codeblock "}"
[444]
	statement/L1 = "while" "(" expression ")" "{" codeblock "}" .
[445]
	statement/L1 = "with" "(" expression ")" "{" codeblock "}" .
[446]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock "}" .
[447]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist . "}"
[448]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" ";" .
[449]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" . ";"
[450]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" ";" .
[451]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" ";" .
[452]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" . ";"
[453]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" ";" .
[454]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" . "{" codeblock "}"
[455]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}" .
[456]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" ";" .
[457]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";" .
[458]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" . codeblock "}"
[459]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock . "}"
[460]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}" .

-- LR(1) used FOLLOW sets labeled:
[0]: {$}
[1]: {$ IDENT "function" "procedure" "const" "any" "class" "struct" "typedef" "generic" "interface" "namespace" "private" "public" "main"}
[2]: {$ "main"}
[10]: {'('}
[11]: {')'}
[14]: {IDENT}
[16]: {';'}
[18]: {'>'}
[21]: {'}'}
[22]: {'{'}
[28]: {']'}
[29]: {':'}
[60]: {$ IDENT "extern" "function" "procedure" "const" "any" "class" "struct" "typedef" "generic" "interface" "namespace" "private" "public" "main"}
[62]: {"function" "procedure"}
[64]: {IDENT '&' '^'}
[65]: {IDENT '<' '&' '^'}
[66]: {IDENT '<'}
[69]: {',' '>'}
[106]: {'(' ';' '<' '>' '&' '^' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[107]: {$ BOOLEAN IDENT DQSTRING SQSTRING CARDINAL INTEGER FLOAT "function" '(' "procedure" '&' "typedef" '{' '}' "private" "public" '+' '-' '*' '~' '!' "var" "return" "delete" "if" "while" "with" "new" "cast" "null"}
[176]: {'(' '<' '>' '&' '^' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' ']' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[177]: {'(' '&' '^'}
[178]: {'(' '<' '&' '^'}
[180]: {"function" "procedure" "operator" "constructor"}
[181]: {$ IDENT "function" "procedure" "const" "operator" "any" "class" "struct" "typedef" '}' "generic" "interface" "private" "public" "constructor" "destructor"}
[182]: {$ IDENT "function" "procedure" "const" "operator" "any" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public" "constructor" "destructor" "main"}
[183]: {',' '{'}
[185]: {',' '<' '{'}
[186]: {$ IDENT "const" "any" "struct" "typedef" '}' "generic"}
[187]: {$ IDENT "function" "procedure" "const" "any" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public" "main"}
[192]: {$ "function" "procedure" "operator" '}'}
[193]: {$ "function" "procedure" "class" "struct" "typedef" '}' "generic" "interface" "namespace" "private" "public"}
[196]: {'(' ';' ',' '<' '>' '&' '^' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[197]: {'&' '^' ':'}
[198]: {'<' '&' '^' ':'}
[199]: {',' '<' '>'}
[203]: {')' ','}
[204]: {IDENT ')' ','}
[205]: {IDENT ')' ',' '&' '^'}
[206]: {IDENT ')' ',' '<' '&' '^'}
[207]: {IDENT '(' "const" "any"}
[208]: {')' "..."}
[209]: {IDENT ')' "..." ','}
[210]: {IDENT ')' "..." ',' '&' '^'}
[211]: {IDENT ')' "..." ',' '<' '&' '^'}
[249]: {'(' ')' '<' '>' '&' '^' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[251]: {'(' ')' ',' '<' '>' '&' '^' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' ']' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[274]: {'(' ')' ';' ',' '<' '>' '&' '^' '}' "->" '=' '+' '-' '*' '/' '%' "&&" "||" '|' "<<" ">>" '[' ']' "==" "!=" ">=" "<=" "+=" "-=" "*=" "/=" "^=" "&=" "%=" "&&=" "||=" "|=" "<<=" ">>=" '.'}
[283]: {$ BOOLEAN IDENT DQSTRING SQSTRING CARDINAL INTEGER FLOAT "function" '(' "procedure" "const" "operator" '&' "any" "class" "struct" "typedef" '{' '}' "generic" "interface" "namespace" "private" "public" "constructor" "destructor" '+' '-' '*' '~' '!' "main" "var" "return" "delete" "if" "while" "with" "new" "cast" "null"}
[287]: {$ BOOLEAN IDENT DQSTRING SQSTRING CARDINAL INTEGER FLOAT "function" '(' "procedure" "const" '&' "any" "class" "struct" "typedef" '{' '}' "generic" "interface" "namespace" "private" "public" '+' '-' '*' '~' '!' "main" "var" "return" "delete" "if" "while" "with" "new" "cast" "null"}
[288]: {')' '}' ']'}
[306]: {IDENT '(' ')' "..." ',' ':'}
[308]: {IDENT ',' '>' '{'}
[314]: {IDENT '(' ')' "..." ',' '>' '&' '^' '{' ':'}
[320]: {IDENT '(' ')' "..." ',' '<' '>' '&' '^' '{' ':'}
[323]: {IDENT '(' ')' "..." ',' '<' '&' '^' ':'}
[324]: {IDENT '(' ')' "..." ',' '&' '^' ':'}

-- LALR(1) states (merged LR(1) elements assigned to LR(0) states):
[1]
	program = . extern_definitionlist free_definitionlist main_procedure, FOLLOW [0] -> GOTO 2
	extern_definitionlist = . extern_definition extern_definitionlist, FOLLOW [1] -> GOTO 3
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definitionlist = ., FOLLOW [1] -> REDUCE extern_definitionlist #0
[2]
	program = extern_definitionlist . free_definitionlist main_procedure, FOLLOW [0] -> GOTO 5
	free_definitionlist = . free_definition free_definitionlist, FOLLOW [2] -> GOTO 6
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	free_definition = . typedefinition ";", FOLLOW [1] -> GOTO 10
	free_definition = . structdefinition, FOLLOW [1] -> GOTO 11
	free_definition = . interfacedefinition, FOLLOW [1] -> GOTO 12
	free_definition = . namespacedefinition, FOLLOW [1] -> GOTO 13
	free_definition = . classdefinition, FOLLOW [1] -> GOTO 14
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [1] -> GOTO 15
	free_definition = . functiondefinition, FOLLOW [1] -> GOTO 16
	free_definition = . variabledefinition ";", FOLLOW [1] -> GOTO 17
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [1] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [1] -> SHIFT "interface" GOTO 25
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [1] -> SHIFT "namespace" GOTO 26
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	free_definitionlist = ., FOLLOW [2] -> REDUCE free_definitionlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[3]
	extern_definitionlist = extern_definition . extern_definitionlist, FOLLOW [1] -> GOTO 29
	extern_definitionlist = . extern_definition extern_definitionlist, FOLLOW [1] -> GOTO 3
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definition = . "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "extern" GOTO 4
	extern_definitionlist = ., FOLLOW [1] -> REDUCE extern_definitionlist #0
[4]
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT DQSTRING GOTO 30
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT DQSTRING GOTO 30
	extern_definition = "extern" . DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT DQSTRING GOTO 30
	extern_definition = "extern" . DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT DQSTRING GOTO 30
[5]
	program = extern_definitionlist free_definitionlist . main_procedure, FOLLOW [0] -> GOTO 31
	main_procedure = . "main" "{" codeblock "}", FOLLOW [0] -> SHIFT "main" GOTO 32
	main_procedure = ., FOLLOW [0] -> REDUCE main_procedure #0
[6]
	free_definitionlist = free_definition . free_definitionlist, FOLLOW [2] -> GOTO 33
	free_definitionlist = . free_definition free_definitionlist, FOLLOW [2] -> GOTO 6
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	free_definition = . typedefinition ";", FOLLOW [1] -> GOTO 10
	free_definition = . structdefinition, FOLLOW [1] -> GOTO 11
	free_definition = . interfacedefinition, FOLLOW [1] -> GOTO 12
	free_definition = . namespacedefinition, FOLLOW [1] -> GOTO 13
	free_definition = . classdefinition, FOLLOW [1] -> GOTO 14
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [1] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [1] -> GOTO 15
	free_definition = . functiondefinition, FOLLOW [1] -> GOTO 16
	free_definition = . variabledefinition ";", FOLLOW [1] -> GOTO 17
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [1] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [1] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [1] -> SHIFT "interface" GOTO 25
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [1] -> SHIFT "namespace" GOTO 26
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	free_definitionlist = ., FOLLOW [2] -> REDUCE free_definitionlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[7]
	generic_typename/L1 = typename . "<" generic_instancelist ">", FOLLOW [314] -> SHIFT '<' GOTO 34
	generic_typename/L1 = typename ., FOLLOW [314] -> REDUCE generic_typename #1
[8]
	typespec/L1 = generic_typename . "&", FOLLOW [306] -> SHIFT '&' GOTO 35
	typespec/L1 = generic_typename . "^", FOLLOW [306] -> SHIFT '^' GOTO 36
	typespec/L1 = generic_typename . "^" "&", FOLLOW [306] -> SHIFT '^' GOTO 36
	typespec/L1 = generic_typename . (18), FOLLOW [306] -> REDUCE typespec #1 CALL typespec ""
[9]
	variabledefinition = typespec . IDENT, FOLLOW [16] -> SHIFT IDENT GOTO 37
	variabledefinition = typespec . IDENT "=" expression, FOLLOW [16] -> SHIFT IDENT GOTO 37
	variabledefinition = typespec . IDENT "[" expression "]" "=" expression, FOLLOW [16] -> SHIFT IDENT GOTO 37
	variabledefinition = typespec . IDENT "[" expression "]", FOLLOW [16] -> SHIFT IDENT GOTO 37
[10]
	free_definition = typedefinition . ";", FOLLOW [1] -> SHIFT ';' GOTO 38
[11]
	free_definition = structdefinition . (16), FOLLOW [1] -> REDUCE free_definition #1 CALL definition 1
[12]
	free_definition = interfacedefinition . (16), FOLLOW [1] -> REDUCE free_definition #1 CALL definition 1
[13]
	free_definition = namespacedefinition ., FOLLOW [1] -> REDUCE free_definition #1
[14]
	free_definition = classdefinition . (16), FOLLOW [1] -> REDUCE free_definition #1 CALL definition 1
[15]
	functiondefinition = linkage . "function" IDENT typespec callablebody, FOLLOW [287] -> SHIFT "function" GOTO 39
	functiondefinition = linkage . "function" IDENT typespec callablebody_const, FOLLOW [287] -> SHIFT "function" GOTO 39
	functiondefinition = linkage . "procedure" IDENT callablebody, FOLLOW [287] -> SHIFT "procedure" GOTO 40
	functiondefinition = linkage . "procedure" IDENT callablebody_const, FOLLOW [287] -> SHIFT "procedure" GOTO 40
[16]
	free_definition = functiondefinition . (16), FOLLOW [1] -> REDUCE free_definition #1 CALL definition 1
[17]
	free_definition = variabledefinition . ";", FOLLOW [1] -> SHIFT ';' GOTO 41
[18]
	typename/L1 = IDENT . "::" typename, FOLLOW [320] -> SHIFT "::" GOTO 42
	typename/L1 = IDENT ., FOLLOW [320] -> REDUCE typename #1
[19]
	generic_typename/L1 = . typename, FOLLOW [324] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [324] -> GOTO 7
	typespec/L1 = "const" . generic_typename, FOLLOW [306] -> GOTO 43
	typespec/L1 = "const" . generic_typename "&", FOLLOW [306] -> GOTO 43
	typespec/L1 = "const" . generic_typename "^", FOLLOW [306] -> GOTO 43
	typespec/L1 = "const" . generic_typename "^" "&", FOLLOW [306] -> GOTO 43
	typename/L1 = . IDENT, FOLLOW [323] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [323] -> SHIFT IDENT GOTO 18
[20]
	typespec/L1 = "any" . "const" "class" "^", FOLLOW [306] -> SHIFT "const" GOTO 44
	typespec/L1 = "any" . "const" "struct" "^", FOLLOW [306] -> SHIFT "const" GOTO 44
	typespec/L1 = "any" . "class" "^", FOLLOW [306] -> SHIFT "class" GOTO 45
	typespec/L1 = "any" . "struct" "^", FOLLOW [306] -> SHIFT "struct" GOTO 46
[21]
	classdefinition = "class" . IDENT "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 47
	classdefinition = "class" . IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 47
[22]
	structdefinition = "struct" . IDENT "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 48
[23]
	generic_typename/L1 = . typename, FOLLOW [14] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [14] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [14] -> GOTO 49
	typedefinition = "typedef" . typepath IDENT, FOLLOW [16] -> GOTO 50
	typename/L1 = . IDENT, FOLLOW [66] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [66] -> SHIFT IDENT GOTO 18
	typedefinition = "typedef" . "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "function" GOTO 51
	typedefinition = "typedef" . "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "procedure" GOTO 52
[24]
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 53
	classdefinition = "generic" . "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 53
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "struct" GOTO 54
[25]
	interfacedefinition = "interface" . IDENT "{" ininterf_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 55
[26]
	namespacedefinition = "namespace" . IDENT "{" namespace_definitionlist "}", FOLLOW [187] -> SHIFT IDENT GOTO 56
[27]
	linkage = "private" . (38), FOLLOW [180] -> REDUCE linkage #1 CALL linkage {private=true,linkage="internal"}
[28]
	linkage = "public" . (39), FOLLOW [180] -> REDUCE linkage #1 CALL linkage {private=false,linkage="external"}
[29]
	extern_definitionlist = extern_definition extern_definitionlist ., FOLLOW [1] -> REDUCE extern_definitionlist #2
[30]
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "function" GOTO 57
	extern_definition = "extern" DQSTRING . "function" IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "function" GOTO 57
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT "procedure" GOTO 58
	extern_definition = "extern" DQSTRING . "procedure" IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT "procedure" GOTO 58
[31]
	program = extern_definitionlist free_definitionlist main_procedure . (1) -> ACCEPT
	program = extern_definitionlist free_definitionlist main_procedure . (1), FOLLOW [0] -> REDUCE program #3 CALL program
[32]
	main_procedure = "main" . "{" codeblock "}", FOLLOW [0] -> SHIFT '{' GOTO 59
[33]
	free_definitionlist = free_definition free_definitionlist ., FOLLOW [2] -> REDUCE free_definitionlist #2
[34]
	generic_typename/L1 = . typename, FOLLOW [314] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [314] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [69] -> GOTO 49
	generic_instance = . typepath, FOLLOW [18] -> GOTO 60
	generic_instance = . typepath "," generic_instance, FOLLOW [18] -> GOTO 60
	generic_instancelist = . generic_instance, FOLLOW [18] -> GOTO 61
	generic_typename/L1 = typename "<" . generic_instancelist ">", FOLLOW [314] -> GOTO 62
	typename/L1 = . IDENT, FOLLOW [320] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [320] -> SHIFT IDENT GOTO 18
[35]
	typespec/L1 = generic_typename "&" . (20), FOLLOW [306] -> REDUCE typespec #2 CALL typespec "&"
[36]
	typespec/L1 = generic_typename "^" . "&", FOLLOW [306] -> SHIFT '&' GOTO 63
	typespec/L1 = generic_typename "^" . (22), FOLLOW [306] -> REDUCE typespec #2 CALL typespec "^"
[37]
	variabledefinition = typespec IDENT . "=" expression, FOLLOW [16] -> SHIFT '=' GOTO 64
	variabledefinition = typespec IDENT . "[" expression "]" "=" expression, FOLLOW [16] -> SHIFT '[' GOTO 65
	variabledefinition = typespec IDENT . "[" expression "]", FOLLOW [16] -> SHIFT '[' GOTO 65
	variabledefinition = typespec IDENT . (step:90), FOLLOW [16] -> REDUCE variabledefinition #2 CALL vardef
[38]
	free_definition = typedefinition ";" . (16), FOLLOW [1] -> REDUCE free_definition #2 CALL definition 1
[39]
	functiondefinition = linkage "function" . IDENT typespec callablebody, FOLLOW [283] -> SHIFT IDENT GOTO 66
	functiondefinition = linkage "function" . IDENT typespec callablebody_const, FOLLOW [283] -> SHIFT IDENT GOTO 66
[40]
	functiondefinition = linkage "procedure" . IDENT callablebody, FOLLOW [283] -> SHIFT IDENT GOTO 67
	functiondefinition = linkage "procedure" . IDENT callablebody_const, FOLLOW [283] -> SHIFT IDENT GOTO 67
[41]
	free_definition = variabledefinition ";" . (16), FOLLOW [1] -> REDUCE free_definition #2 CALL definition 1
[42]
	typename/L1 = IDENT "::" . typename, FOLLOW [320] -> GOTO 68
	typename/L1 = . IDENT, FOLLOW [320] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [320] -> SHIFT IDENT GOTO 18
[43]
	typespec/L1 = "const" generic_typename . "&", FOLLOW [306] -> SHIFT '&' GOTO 69
	typespec/L1 = "const" generic_typename . "^", FOLLOW [306] -> SHIFT '^' GOTO 70
	typespec/L1 = "const" generic_typename . "^" "&", FOLLOW [306] -> SHIFT '^' GOTO 70
	typespec/L1 = "const" generic_typename . (19), FOLLOW [306] -> REDUCE typespec #2 CALL typespec "const "
[44]
	typespec/L1 = "any" "const" . "class" "^", FOLLOW [306] -> SHIFT "class" GOTO 71
	typespec/L1 = "any" "const" . "struct" "^", FOLLOW [306] -> SHIFT "struct" GOTO 72
[45]
	typespec/L1 = "any" "class" . "^", FOLLOW [306] -> SHIFT '^' GOTO 73
[46]
	typespec/L1 = "any" "struct" . "^", FOLLOW [306] -> SHIFT '^' GOTO 74
[47]
	classdefinition = "class" IDENT . "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 75
	classdefinition = "class" IDENT . ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT ':' GOTO 76
[48]
	structdefinition = "struct" IDENT . "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 77
[49]
	typepath/L1 = generic_typename . (18), FOLLOW [308] -> REDUCE typepath #1 CALL typespec ""
[50]
	typedefinition = "typedef" typepath . IDENT, FOLLOW [16] -> SHIFT IDENT GOTO 78
[51]
	typedefinition = "typedef" "function" . IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT IDENT GOTO 79
[52]
	typedefinition = "typedef" "procedure" . IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT IDENT GOTO 80
[53]
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 81
	classdefinition = "generic" "class" . IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 81
[54]
	structdefinition = "generic" "struct" . IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT IDENT GOTO 82
[55]
	interfacedefinition = "interface" IDENT . "{" ininterf_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 83
[56]
	namespacedefinition = "namespace" IDENT . "{" namespace_definitionlist "}", FOLLOW [187] -> SHIFT '{' GOTO 84
[57]
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT IDENT GOTO 85
	extern_definition = "extern" DQSTRING "function" . IDENT typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT IDENT GOTO 85
[58]
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT IDENT GOTO 86
	extern_definition = "extern" DQSTRING "procedure" . IDENT "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT IDENT GOTO 86
[59]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	main_procedure = "main" "{" . codeblock "}", FOLLOW [0] -> GOTO 89
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[60]
	generic_instance = typepath . "," generic_instance, FOLLOW [18] -> SHIFT ',' GOTO 118
	generic_instance = typepath ., FOLLOW [18] -> REDUCE generic_instance #1
[61]
	generic_instancelist = generic_instance . (73), FOLLOW [18] -> REDUCE generic_instancelist #1 CALL generic_instancelist
[62]
	generic_typename/L1 = typename "<" generic_instancelist . ">", FOLLOW [314] -> SHIFT '>' GOTO 119
[63]
	typespec/L1 = generic_typename "^" "&" . (24), FOLLOW [306] -> REDUCE typespec #3 CALL typespec "^&"
[64]
	variabledefinition = typespec IDENT "=" . expression, FOLLOW [16] -> GOTO 120
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 120
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 120
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 120
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 120
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 120
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 120
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 120
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 120
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 120
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 120
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 120
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 120
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 120
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 120
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 120
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 120
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 120
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 120
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 120
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 120
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
[65]
	variabledefinition = typespec IDENT "[" . expression "]" "=" expression, FOLLOW [16] -> GOTO 122
	variabledefinition = typespec IDENT "[" . expression "]", FOLLOW [16] -> GOTO 122
	expression/L3 = . expression "=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "+=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "-=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "*=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "/=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "^=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "&=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "%=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "&&=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "||=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "&=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "|=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression "<<=" expression, FOLLOW [176] -> GOTO 122
	expression/L3 = . expression ">>=" expression, FOLLOW [176] -> GOTO 122
	expression/L4 = . expression "||" expression, FOLLOW [176] -> GOTO 122
	expression/L5 = . expression "&&" expression, FOLLOW [176] -> GOTO 122
	expression/L6 = . expression "|" expression, FOLLOW [176] -> GOTO 122
	expression/L7 = . expression "^" expression, FOLLOW [176] -> GOTO 122
	expression/L7 = . expression "&" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression "==" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression "!=" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression "<=" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression "<" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression ">=" expression, FOLLOW [176] -> GOTO 122
	expression/L8 = . expression ">" expression, FOLLOW [176] -> GOTO 122
	expression/L9 = . expression "+" expression, FOLLOW [176] -> GOTO 122
	expression/L9 = . expression "-" expression, FOLLOW [176] -> GOTO 122
	expression/L10 = . expression "*" expression, FOLLOW [176] -> GOTO 122
	expression/L10 = . expression "/" expression, FOLLOW [176] -> GOTO 122
	expression/L10 = . expression "%" expression, FOLLOW [176] -> GOTO 122
	expression/L11 = . expression "<<" expression, FOLLOW [176] -> GOTO 122
	expression/L11 = . expression ">>" expression, FOLLOW [176] -> GOTO 122
	expression/L12 = . expression "." IDENT, FOLLOW [176] -> GOTO 122
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [176] -> GOTO 122
	expression/L13 = . expression "(" ")", FOLLOW [176] -> GOTO 122
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [176] -> GOTO 122
	iexpression = . expression indirection IDENT, FOLLOW [176] -> GOTO 122
	expression/L12 = . iexpression, FOLLOW [176] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [176] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [176] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [176] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [176] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [176] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [176] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [176] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [176] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [176] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [176] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [176] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [176] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [176] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [176] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [176] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [176] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [176] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [176] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [176] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [176] -> SHIFT "null" GOTO 117
[66]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	functiondefinition = linkage "function" IDENT . typespec callablebody, FOLLOW [283] -> GOTO 123
	functiondefinition = linkage "function" IDENT . typespec callablebody_const, FOLLOW [283] -> GOTO 123
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[67]
	functiondefinition = linkage "procedure" IDENT . callablebody, FOLLOW [283] -> GOTO 124
	functiondefinition = linkage "procedure" IDENT . callablebody_const, FOLLOW [283] -> GOTO 125
	callablebody = . "(" parameterlist ")" "{" codeblock "}", FOLLOW [283] -> SHIFT '(' GOTO 126
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}", FOLLOW [283] -> SHIFT '(' GOTO 126
[68]
	typename/L1 = IDENT "::" typename ., FOLLOW [320] -> REDUCE typename #3
[69]
	typespec/L1 = "const" generic_typename "&" . (21), FOLLOW [306] -> REDUCE typespec #3 CALL typespec "const&"
[70]
	typespec/L1 = "const" generic_typename "^" . "&", FOLLOW [306] -> SHIFT '&' GOTO 127
	typespec/L1 = "const" generic_typename "^" . (23), FOLLOW [306] -> REDUCE typespec #3 CALL typespec "const^"
[71]
	typespec/L1 = "any" "const" "class" . "^", FOLLOW [306] -> SHIFT '^' GOTO 128
[72]
	typespec/L1 = "any" "const" "struct" . "^", FOLLOW [306] -> SHIFT '^' GOTO 129
[73]
	typespec/L1 = "any" "class" "^" . (26), FOLLOW [306] -> REDUCE typespec #3 CALL typespec_key "class^"
[74]
	typespec/L1 = "any" "struct" "^" . (26), FOLLOW [306] -> REDUCE typespec #3 CALL typespec_key "class^"
[75]
	classdefinition = "class" IDENT "{" . inclass_definitionlist "}", FOLLOW [182] -> GOTO 130
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [21] -> GOTO 131
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	inclass_definition = . typedefinition ";", FOLLOW [181] -> GOTO 132
	inclass_definition = . structdefinition, FOLLOW [181] -> GOTO 133
	inclass_definition = . interfacedefinition, FOLLOW [181] -> GOTO 134
	inclass_definition = . classdefinition, FOLLOW [181] -> GOTO 135
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [181] -> GOTO 136
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody_const, FOLLOW [181] -> GOTO 136
	inclass_definition = . functiondefinition, FOLLOW [181] -> GOTO 137
	inclass_definition = . constructordefinition, FOLLOW [181] -> GOTO 138
	inclass_definition = . operatordefinition, FOLLOW [181] -> GOTO 139
	inclass_definition = . variabledefinition ";", FOLLOW [181] -> GOTO 140
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [181] -> SHIFT "interface" GOTO 25
	linkage = . "private", FOLLOW [180] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [180] -> SHIFT "public" GOTO 28
	constructordefinition = . "destructor" "{" codeblock "}", FOLLOW [181] -> SHIFT "destructor" GOTO 141
	inclass_definitionlist = ., FOLLOW [21] -> REDUCE inclass_definitionlist #0
	linkage = . (39), FOLLOW [180] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[76]
	generic_typename/L1 = . typename, FOLLOW [183] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [183] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [183] -> GOTO 49
	inheritlist = . typepath "," inheritlist, FOLLOW [22] -> GOTO 142
	inheritlist = . typepath, FOLLOW [22] -> GOTO 142
	classdefinition = "class" IDENT ":" . inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> GOTO 143
	typename/L1 = . IDENT, FOLLOW [185] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [185] -> SHIFT IDENT GOTO 18
[77]
	structdefinition = "struct" IDENT "{" . instruct_definitionlist "}", FOLLOW [182] -> GOTO 144
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [21] -> GOTO 145
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	instruct_definition = . typedefinition ";", FOLLOW [186] -> GOTO 146
	instruct_definition = . structdefinition, FOLLOW [186] -> GOTO 147
	instruct_definition = . variabledefinition ";", FOLLOW [186] -> GOTO 148
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 149
	instruct_definitionlist = ., FOLLOW [21] -> REDUCE instruct_definitionlist #0
[78]
	typedefinition = "typedef" typepath IDENT . (step:28), FOLLOW [16] -> REDUCE typedefinition #3 CALL typedef
[79]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	typedefinition = "typedef" "function" IDENT . typespec "(" extern_paramlist ")", FOLLOW [16] -> GOTO 150
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[80]
	typedefinition = "typedef" "procedure" IDENT . "(" extern_paramlist ")", FOLLOW [16] -> SHIFT '(' GOTO 151
[81]
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '<' GOTO 152
	classdefinition = "generic" "class" IDENT . "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '<' GOTO 152
[82]
	structdefinition = "generic" "struct" IDENT . "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT '<' GOTO 153
[83]
	interfacedefinition = "interface" IDENT "{" . ininterf_definitionlist "}", FOLLOW [182] -> GOTO 154
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist, FOLLOW [21] -> GOTO 155
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "function" GOTO 156
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "function" GOTO 156
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "procedure" GOTO 157
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "procedure" GOTO 157
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definitionlist = ., FOLLOW [21] -> REDUCE ininterf_definitionlist #0
[84]
	namespacedefinition = "namespace" IDENT "{" . namespace_definitionlist "}", FOLLOW [187] -> GOTO 159
	namespace_definitionlist = . namespace_definition namespace_definitionlist, FOLLOW [21] -> GOTO 160
	namespace_definition = . typedefinition ";", FOLLOW [193] -> GOTO 161
	namespace_definition = . structdefinition, FOLLOW [193] -> GOTO 162
	namespace_definition = . interfacedefinition, FOLLOW [193] -> GOTO 163
	namespace_definition = . namespacedefinition, FOLLOW [193] -> GOTO 164
	namespace_definition = . classdefinition, FOLLOW [193] -> GOTO 165
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [193] -> GOTO 15
	namespace_definition = . functiondefinition, FOLLOW [193] -> GOTO 166
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [193] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [193] -> SHIFT "interface" GOTO 25
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [187] -> SHIFT "namespace" GOTO 26
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	namespace_definitionlist = ., FOLLOW [21] -> REDUCE namespace_definitionlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[85]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist ")" ";", FOLLOW [60] -> GOTO 167
	extern_definition = "extern" DQSTRING "function" IDENT . typespec "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> GOTO 167
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[86]
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT '(' GOTO 168
	extern_definition = "extern" DQSTRING "procedure" IDENT . "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT '(' GOTO 168
[87]
	statement/L1 = typedefinition . ";", FOLLOW [107] -> SHIFT ';' GOTO 169
[88]
	statement/L1 = functiondefinition . (82), FOLLOW [107] -> REDUCE statement #1 CALL definition
[89]
	main_procedure = "main" "{" codeblock . "}", FOLLOW [0] -> SHIFT '}' GOTO 170
[90]
	codeblock = statementlist . (81), FOLLOW [21] -> REDUCE codeblock #1 CALL codeblock
[91]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statementlist = statement . statementlist, FOLLOW [21] -> GOTO 171
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[92]
	iexpression = expression . indirection IDENT, FOLLOW [106] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	statement/L1 = expression . ";", FOLLOW [107] -> SHIFT ';' GOTO 174
	expression/L8 = expression . "<" expression, FOLLOW [106] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [106] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [106] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [106] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [106] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [106] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [106] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [106] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [106] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [106] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [106] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [106] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [106] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [106] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [106] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [106] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [106] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [106] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [106] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [106] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [106] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [106] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [106] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [106] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [106] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [106] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [106] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [106] -> SHIFT '.' GOTO 208
[93]
	expression/L12 = iexpression ., FOLLOW [274] -> REDUCE expression #1
[94]
	expression/L2 = BOOLEAN . (98), FOLLOW [274] -> REDUCE expression #1 CALL constant "constexpr bool"
[95]
	expression/L2 = IDENT . (97), FOLLOW [274] -> REDUCE expression #1 CALL variable
[96]
	expression/L2 = DQSTRING . (103), FOLLOW [274] -> REDUCE expression #1 CALL string_constant "constexpr float"
[97]
	expression/L2 = SQSTRING . (104), FOLLOW [274] -> REDUCE expression #1 CALL char_constant "constexpr float"
[98]
	expression/L2 = CARDINAL . (99), FOLLOW [274] -> REDUCE expression #1 CALL constant "constexpr uint"
[99]
	expression/L2 = INTEGER . (100), FOLLOW [274] -> REDUCE expression #1 CALL constant "constexpr int"
[100]
	expression/L2 = FLOAT . (101), FOLLOW [274] -> REDUCE expression #1 CALL constant "constexpr float"
[101]
	expression/L2 = "(" . expression ")", FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 209
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 209
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 209
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 209
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 209
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 209
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 209
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 209
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 209
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 209
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 209
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 209
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 209
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 209
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 209
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 209
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 209
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 209
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 209
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 209
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[102]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 210
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 210
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 210
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 210
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 210
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 210
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 210
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 210
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 210
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 210
	expression/L9 = "&" . expression, FOLLOW [274] -> GOTO 210
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 210
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 210
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 210
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 210
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 210
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 210
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 210
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 210
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 210
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 210
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[103]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statement/L1 = "{" . codeblock "}", FOLLOW [107] -> GOTO 211
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 212
	expression/L3 = . expression "=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "+=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "-=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "*=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "/=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "^=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "&=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "%=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "&&=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "||=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "&=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "|=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression "<<=" expression, FOLLOW [196] -> GOTO 212
	expression/L3 = . expression ">>=" expression, FOLLOW [196] -> GOTO 212
	expression/L4 = . expression "||" expression, FOLLOW [196] -> GOTO 212
	expression/L5 = . expression "&&" expression, FOLLOW [196] -> GOTO 212
	expression/L6 = . expression "|" expression, FOLLOW [196] -> GOTO 212
	expression/L7 = . expression "^" expression, FOLLOW [196] -> GOTO 212
	expression/L7 = . expression "&" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression "==" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression "!=" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression "<=" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression "<" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression ">=" expression, FOLLOW [196] -> GOTO 212
	expression/L8 = . expression ">" expression, FOLLOW [196] -> GOTO 212
	expression/L9 = . expression "+" expression, FOLLOW [196] -> GOTO 212
	expression/L9 = . expression "-" expression, FOLLOW [196] -> GOTO 212
	expression/L10 = . expression "*" expression, FOLLOW [196] -> GOTO 212
	expression/L10 = . expression "/" expression, FOLLOW [196] -> GOTO 212
	expression/L10 = . expression "%" expression, FOLLOW [196] -> GOTO 212
	expression/L11 = . expression "<<" expression, FOLLOW [196] -> GOTO 212
	expression/L11 = . expression ">>" expression, FOLLOW [196] -> GOTO 212
	expression/L12 = . expression "." IDENT, FOLLOW [196] -> GOTO 212
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [196] -> GOTO 212
	expression/L13 = . expression "(" ")", FOLLOW [196] -> GOTO 212
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [196] -> GOTO 212
	iexpression = . expression indirection IDENT, FOLLOW [196] -> GOTO 212
	expressionlist = . expression "," expressionlist, FOLLOW [21] -> GOTO 212
	expressionlist = . expression, FOLLOW [21] -> GOTO 212
	expression/L12 = . iexpression, FOLLOW [196] -> GOTO 93
	expression/L1 = "{" . expressionlist "}", FOLLOW [196] -> GOTO 213
	expression/L2 = . BOOLEAN, FOLLOW [196] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [196] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [196] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [196] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [196] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [196] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [196] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [196] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [196] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [196] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [196] -> SHIFT '{' GOTO 103
	expression/L1 = "{" . "}", FOLLOW [196] -> SHIFT '}' GOTO 214
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [196] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [196] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [196] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [196] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [196] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [196] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [196] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [196] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [196] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[104]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 215
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 215
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 215
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 215
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 215
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 215
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 215
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 215
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 215
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 215
	expression/L9 = "+" . expression, FOLLOW [274] -> GOTO 215
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 215
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 215
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 215
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 215
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 215
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 215
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 215
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 215
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 215
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 215
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[105]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 216
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 216
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 216
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 216
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 216
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 216
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 216
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 216
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 216
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 216
	expression/L9 = "-" . expression, FOLLOW [274] -> GOTO 216
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 216
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 216
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 216
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 216
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 216
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 216
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 216
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 216
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 216
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 216
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[106]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 217
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 217
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 217
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 217
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 217
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 217
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 217
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 217
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 217
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 217
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 217
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 217
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 217
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 217
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 217
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 217
	expression/L12 = "*" . expression, FOLLOW [274] -> GOTO 217
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 217
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 217
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 217
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 217
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[107]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 218
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 218
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 218
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 218
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 218
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 218
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 218
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 218
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 218
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 218
	expression/L9 = "~" . expression, FOLLOW [274] -> GOTO 218
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 218
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 218
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 218
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 218
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 218
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 218
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 218
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 218
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 218
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 218
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[108]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 219
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 219
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 219
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 219
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 219
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 219
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 219
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 219
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 219
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 219
	expression/L9 = "!" . expression, FOLLOW [274] -> GOTO 219
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 219
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 219
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 219
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 219
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 219
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 219
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 219
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 219
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 219
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 219
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[109]
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	statement/L1 = "var" . variabledefinition ";", FOLLOW [107] -> GOTO 220
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
[110]
	statement/L1 = "return" . expression ";", FOLLOW [107] -> GOTO 221
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 221
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 221
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 221
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 221
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 221
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 221
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 221
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 221
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 221
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 221
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 221
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 221
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 221
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 221
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 221
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 221
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 221
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 221
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 221
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 221
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
[111]
	statement/L1 = "delete" . expression ";", FOLLOW [107] -> GOTO 222
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 222
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 222
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 222
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 222
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 222
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 222
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 222
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 222
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 222
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 222
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 222
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 222
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 222
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 222
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 222
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 222
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 222
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 222
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 222
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 222
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
[112]
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT '(' GOTO 223
	statement/L1 = "if" . "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT '(' GOTO 223
[113]
	statement/L1 = "while" . "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT '(' GOTO 224
[114]
	statement/L1 = "with" . "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT '(' GOTO 225
[115]
	generic_typename/L1 = . typename, FOLLOW [197] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [197] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [29] -> GOTO 8
	expression/L1 = "new" . typespec ":" expression, FOLLOW [274] -> GOTO 226
	typename/L1 = . IDENT, FOLLOW [198] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [198] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
[116]
	generic_typename/L1 = . typename, FOLLOW [197] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [197] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [29] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [29] -> GOTO 8
	expression/L1 = "cast" . typespec ":" "{" expression "}", FOLLOW [274] -> GOTO 227
	expression/L1 = "cast" . typespec ":" "{" "}", FOLLOW [274] -> GOTO 227
	typename/L1 = . IDENT, FOLLOW [198] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [198] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [29] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [29] -> SHIFT "any" GOTO 20
[117]
	expression/L2 = "null" . (102), FOLLOW [274] -> REDUCE expression #1 CALL null "constexpr float"
[118]
	generic_typename/L1 = . typename, FOLLOW [69] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [69] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [69] -> GOTO 49
	generic_instance = . typepath, FOLLOW [18] -> GOTO 60
	generic_instance = . typepath "," generic_instance, FOLLOW [18] -> GOTO 60
	generic_instance = typepath "," . generic_instance, FOLLOW [18] -> GOTO 228
	typename/L1 = . IDENT, FOLLOW [199] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [199] -> SHIFT IDENT GOTO 18
[119]
	generic_typename/L1 = typename "<" generic_instancelist ">" ., FOLLOW [314] -> REDUCE generic_typename #4
[120]
	iexpression = expression . indirection IDENT, FOLLOW [106] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [106] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [106] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [106] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [106] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [106] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [106] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [106] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [106] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [106] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [106] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [106] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [106] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [106] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [106] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [106] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [106] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [106] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [106] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [106] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [106] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [106] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [106] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [106] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [106] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [106] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [106] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [106] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [106] -> SHIFT '.' GOTO 208
	variabledefinition = typespec IDENT "=" expression . (step:91), FOLLOW [16] -> REDUCE variabledefinition #4 CALL vardef_assign
[121]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 229
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 229
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 229
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 229
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 229
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 229
	expressionlist = . expression "," expressionlist, FOLLOW [21] -> GOTO 229
	expressionlist = . expression, FOLLOW [21] -> GOTO 229
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L1 = "{" . expressionlist "}", FOLLOW [274] -> GOTO 213
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = "{" . "}", FOLLOW [274] -> SHIFT '}' GOTO 214
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[122]
	iexpression = expression . indirection IDENT, FOLLOW [176] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [176] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [176] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [176] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [176] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [176] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [176] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [176] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [176] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [176] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [176] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [176] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [176] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [176] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [176] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [176] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [176] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [176] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [176] -> SHIFT '[' GOTO 191
	variabledefinition = typespec IDENT "[" expression . "]" "=" expression, FOLLOW [16] -> SHIFT ']' GOTO 230
	variabledefinition = typespec IDENT "[" expression . "]", FOLLOW [16] -> SHIFT ']' GOTO 230
	expression/L8 = expression . "==" expression, FOLLOW [176] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [176] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [176] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [176] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [176] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [176] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [176] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [176] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [176] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [176] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [176] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [176] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [176] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [176] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [176] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [176] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [176] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [176] -> SHIFT '.' GOTO 208
[123]
	functiondefinition = linkage "function" IDENT typespec . callablebody, FOLLOW [283] -> GOTO 231
	functiondefinition = linkage "function" IDENT typespec . callablebody_const, FOLLOW [283] -> GOTO 232
	callablebody = . "(" parameterlist ")" "{" codeblock "}", FOLLOW [283] -> SHIFT '(' GOTO 126
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}", FOLLOW [283] -> SHIFT '(' GOTO 126
[124]
	functiondefinition = linkage "procedure" IDENT callablebody . (42), FOLLOW [283] -> REDUCE functiondefinition #4 CALL procdef {const=false}
[125]
	functiondefinition = linkage "procedure" IDENT callablebody_const . (43), FOLLOW [283] -> REDUCE functiondefinition #4 CALL procdef {const=true}
[126]
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	paramdecl = . typespec IDENT, FOLLOW [203] -> GOTO 233
	callablebody = "(" . parameterlist ")" "{" codeblock "}", FOLLOW [283] -> GOTO 234
	callablebody_const = "(" . parameterlist ")" "const" "{" codeblock "}", FOLLOW [283] -> GOTO 234
	parameterlist = . parameters, FOLLOW [11] -> GOTO 235
	parameters = . paramdecl "," parameters, FOLLOW [11] -> GOTO 236
	parameters = . paramdecl, FOLLOW [11] -> GOTO 236
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	parameterlist = . (79), FOLLOW [11] -> REDUCE parameterlist #0 CALL paramdeflist
[127]
	typespec/L1 = "const" generic_typename "^" "&" . (25), FOLLOW [306] -> REDUCE typespec #4 CALL typespec "const^&"
[128]
	typespec/L1 = "any" "const" "class" "^" . (27), FOLLOW [306] -> REDUCE typespec #4 CALL typespec_key "const struct^"
[129]
	typespec/L1 = "any" "const" "struct" "^" . (27), FOLLOW [306] -> REDUCE typespec #4 CALL typespec_key "const struct^"
[130]
	classdefinition = "class" IDENT "{" inclass_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 237
[131]
	inclass_definitionlist = inclass_definition . inclass_definitionlist, FOLLOW [21] -> GOTO 238
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [21] -> GOTO 131
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	inclass_definition = . typedefinition ";", FOLLOW [181] -> GOTO 132
	inclass_definition = . structdefinition, FOLLOW [181] -> GOTO 133
	inclass_definition = . interfacedefinition, FOLLOW [181] -> GOTO 134
	inclass_definition = . classdefinition, FOLLOW [181] -> GOTO 135
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [181] -> GOTO 136
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody_const, FOLLOW [181] -> GOTO 136
	inclass_definition = . functiondefinition, FOLLOW [181] -> GOTO 137
	inclass_definition = . constructordefinition, FOLLOW [181] -> GOTO 138
	inclass_definition = . operatordefinition, FOLLOW [181] -> GOTO 139
	inclass_definition = . variabledefinition ";", FOLLOW [181] -> GOTO 140
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [181] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [181] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [181] -> SHIFT "interface" GOTO 25
	linkage = . "private", FOLLOW [180] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [180] -> SHIFT "public" GOTO 28
	constructordefinition = . "destructor" "{" codeblock "}", FOLLOW [181] -> SHIFT "destructor" GOTO 141
	inclass_definitionlist = ., FOLLOW [21] -> REDUCE inclass_definitionlist #0
	linkage = . (39), FOLLOW [180] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[132]
	inclass_definition = typedefinition . ";", FOLLOW [181] -> SHIFT ';' GOTO 239
[133]
	inclass_definition = structdefinition . (16), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 1
[134]
	inclass_definition = interfacedefinition . (16), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 1
[135]
	inclass_definition = classdefinition . (16), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 1
[136]
	functiondefinition = linkage . "function" IDENT typespec callablebody, FOLLOW [181] -> SHIFT "function" GOTO 39
	functiondefinition = linkage . "function" IDENT typespec callablebody_const, FOLLOW [181] -> SHIFT "function" GOTO 39
	functiondefinition = linkage . "procedure" IDENT callablebody, FOLLOW [181] -> SHIFT "procedure" GOTO 40
	functiondefinition = linkage . "procedure" IDENT callablebody_const, FOLLOW [181] -> SHIFT "procedure" GOTO 40
	operatordefinition = linkage . "operator" operatordecl typespec callablebody, FOLLOW [181] -> SHIFT "operator" GOTO 240
	operatordefinition = linkage . "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> SHIFT "operator" GOTO 240
	operatordefinition = linkage . "operator" operatordecl callablebody, FOLLOW [181] -> SHIFT "operator" GOTO 240
	operatordefinition = linkage . "operator" operatordecl callablebody_const, FOLLOW [181] -> SHIFT "operator" GOTO 240
	constructordefinition = linkage . "constructor" callablebody, FOLLOW [181] -> SHIFT "constructor" GOTO 241
[137]
	inclass_definition = functiondefinition . (17), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 2
[138]
	inclass_definition = constructordefinition . (17), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 2
[139]
	inclass_definition = operatordefinition . (17), FOLLOW [181] -> REDUCE inclass_definition #1 CALL definition 2
[140]
	inclass_definition = variabledefinition . ";", FOLLOW [181] -> SHIFT ';' GOTO 242
[141]
	constructordefinition = "destructor" . "{" codeblock "}", FOLLOW [181] -> SHIFT '{' GOTO 243
[142]
	inheritlist = typepath . "," inheritlist, FOLLOW [22] -> SHIFT ',' GOTO 244
	inheritlist = typepath . (step:34), FOLLOW [22] -> REDUCE inheritlist #1 CALL inheritdef 1
[143]
	classdefinition = "class" IDENT ":" inheritlist . "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 245
[144]
	structdefinition = "struct" IDENT "{" instruct_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 246
[145]
	instruct_definitionlist = instruct_definition . instruct_definitionlist, FOLLOW [21] -> GOTO 247
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [21] -> GOTO 145
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	instruct_definition = . typedefinition ";", FOLLOW [186] -> GOTO 146
	instruct_definition = . structdefinition, FOLLOW [186] -> GOTO 147
	instruct_definition = . variabledefinition ";", FOLLOW [186] -> GOTO 148
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [186] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [186] -> SHIFT "generic" GOTO 149
	instruct_definitionlist = ., FOLLOW [21] -> REDUCE instruct_definitionlist #0
[146]
	instruct_definition = typedefinition . ";", FOLLOW [186] -> SHIFT ';' GOTO 248
[147]
	instruct_definition = structdefinition . (16), FOLLOW [186] -> REDUCE instruct_definition #1 CALL definition 1
[148]
	instruct_definition = variabledefinition . ";", FOLLOW [186] -> SHIFT ';' GOTO 249
[149]
	structdefinition = "generic" . "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "struct" GOTO 54
[150]
	typedefinition = "typedef" "function" IDENT typespec . "(" extern_paramlist ")", FOLLOW [16] -> SHIFT '(' GOTO 250
[151]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	typedefinition = "typedef" "procedure" IDENT "(" . extern_paramlist ")", FOLLOW [16] -> GOTO 252
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[152]
	generic_header = . generic_defaultlist, FOLLOW [18] -> GOTO 254
	generic_header = . generic_identlist, FOLLOW [18] -> GOTO 255
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> GOTO 256
	classdefinition = "generic" "class" IDENT "<" . generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> GOTO 256
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_defaultlist = . IDENT "=" typepath, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT, FOLLOW [18] -> SHIFT IDENT GOTO 257
[153]
	generic_header = . generic_defaultlist, FOLLOW [18] -> GOTO 254
	generic_header = . generic_identlist, FOLLOW [18] -> GOTO 255
	structdefinition = "generic" "struct" IDENT "<" . generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> GOTO 258
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_defaultlist = . IDENT "=" typepath, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT, FOLLOW [18] -> SHIFT IDENT GOTO 257
[154]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 259
[155]
	ininterf_definitionlist = ininterf_definition . ininterf_definitionlist, FOLLOW [21] -> GOTO 260
	ininterf_definitionlist = . ininterf_definition ininterf_definitionlist, FOLLOW [21] -> GOTO 155
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "function" GOTO 156
	ininterf_definition = . "function" IDENT typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "function" GOTO 156
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "procedure" GOTO 157
	ininterf_definition = . "procedure" IDENT "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "procedure" GOTO 157
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definition = . "operator" operatordecl "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT "operator" GOTO 158
	ininterf_definitionlist = ., FOLLOW [21] -> REDUCE ininterf_definitionlist #0
[156]
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT IDENT GOTO 261
	ininterf_definition = "function" . IDENT typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT IDENT GOTO 261
[157]
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT IDENT GOTO 262
	ininterf_definition = "procedure" . IDENT "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT IDENT GOTO 262
[158]
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> GOTO 263
	ininterf_definition = "operator" . operatordecl typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 263
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" ";", FOLLOW [192] -> GOTO 263
	ininterf_definition = "operator" . operatordecl "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 263
	operatordecl = . "(" ")", FOLLOW [207] -> SHIFT '(' GOTO 264
	operatordecl = . "<", FOLLOW [207] -> SHIFT '<' GOTO 265
	operatordecl = . ">", FOLLOW [207] -> SHIFT '>' GOTO 266
	operatordecl = . "&", FOLLOW [207] -> SHIFT '&' GOTO 267
	operatordecl = . "->", FOLLOW [207] -> SHIFT "->" GOTO 268
	operatordecl = . "=", FOLLOW [207] -> SHIFT '=' GOTO 269
	operatordecl = . "+", FOLLOW [207] -> SHIFT '+' GOTO 270
	operatordecl = . "-", FOLLOW [207] -> SHIFT '-' GOTO 271
	operatordecl = . "*", FOLLOW [207] -> SHIFT '*' GOTO 272
	operatordecl = . "/", FOLLOW [207] -> SHIFT '/' GOTO 273
	operatordecl = . "%", FOLLOW [207] -> SHIFT '%' GOTO 274
	operatordecl = . "&&", FOLLOW [207] -> SHIFT "&&" GOTO 275
	operatordecl = . "||", FOLLOW [207] -> SHIFT "||" GOTO 276
	operatordecl = . "|", FOLLOW [207] -> SHIFT '|' GOTO 277
	operatordecl = . "<<", FOLLOW [207] -> SHIFT "<<" GOTO 278
	operatordecl = . ">>", FOLLOW [207] -> SHIFT ">>" GOTO 279
	operatordecl = . "~", FOLLOW [207] -> SHIFT '~' GOTO 280
	operatordecl = . "!", FOLLOW [207] -> SHIFT '!' GOTO 281
	operatordecl = . "[" "]", FOLLOW [207] -> SHIFT '[' GOTO 282
	operatordecl = . "==", FOLLOW [207] -> SHIFT "==" GOTO 283
	operatordecl = . "!=", FOLLOW [207] -> SHIFT "!=" GOTO 284
	operatordecl = . ">=", FOLLOW [207] -> SHIFT ">=" GOTO 285
	operatordecl = . "<=", FOLLOW [207] -> SHIFT "<=" GOTO 286
[159]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist . "}", FOLLOW [187] -> SHIFT '}' GOTO 287
[160]
	namespace_definitionlist = namespace_definition . namespace_definitionlist, FOLLOW [21] -> GOTO 288
	namespace_definitionlist = . namespace_definition namespace_definitionlist, FOLLOW [21] -> GOTO 160
	namespace_definition = . typedefinition ";", FOLLOW [193] -> GOTO 161
	namespace_definition = . structdefinition, FOLLOW [193] -> GOTO 162
	namespace_definition = . interfacedefinition, FOLLOW [193] -> GOTO 163
	namespace_definition = . namespacedefinition, FOLLOW [193] -> GOTO 164
	namespace_definition = . classdefinition, FOLLOW [193] -> GOTO 165
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [193] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [193] -> GOTO 15
	namespace_definition = . functiondefinition, FOLLOW [193] -> GOTO 166
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [193] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [193] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [193] -> SHIFT "interface" GOTO 25
	namespacedefinition = . "namespace" IDENT "{" namespace_definitionlist "}", FOLLOW [193] -> SHIFT "namespace" GOTO 26
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	namespace_definitionlist = ., FOLLOW [21] -> REDUCE namespace_definitionlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[161]
	namespace_definition = typedefinition . ";", FOLLOW [193] -> SHIFT ';' GOTO 289
[162]
	namespace_definition = structdefinition . (16), FOLLOW [193] -> REDUCE namespace_definition #1 CALL definition 1
[163]
	namespace_definition = interfacedefinition . (16), FOLLOW [193] -> REDUCE namespace_definition #1 CALL definition 1
[164]
	namespace_definition = namespacedefinition . (16), FOLLOW [193] -> REDUCE namespace_definition #1 CALL definition 1
[165]
	namespace_definition = classdefinition . (16), FOLLOW [193] -> REDUCE namespace_definition #1 CALL definition 1
[166]
	namespace_definition = functiondefinition . (16), FOLLOW [193] -> REDUCE namespace_definition #1 CALL definition 1
[167]
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist ")" ";", FOLLOW [60] -> SHIFT '(' GOTO 290
	extern_definition = "extern" DQSTRING "function" IDENT typespec . "(" extern_paramlist "..." ")" ";", FOLLOW [60] -> SHIFT '(' GOTO 290
[168]
	extern_paramlist = . extern_parameters, FOLLOW [208] -> GOTO 251
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist ")" ";", FOLLOW [60] -> GOTO 291
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" . extern_paramlist "..." ")" ";", FOLLOW [60] -> GOTO 291
	generic_typename/L1 = . typename, FOLLOW [210] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [210] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [209] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [208] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [208] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[169]
	statement/L1 = typedefinition ";" . (82), FOLLOW [107] -> REDUCE statement #2 CALL definition
[170]
	main_procedure = "main" "{" codeblock "}" . (scope:78), FOLLOW [0] -> REDUCE main_procedure #4 CALL main_procdef
[171]
	statementlist = statement statementlist . (step), FOLLOW [21] -> REDUCE statementlist #2
[172]
	iexpression = expression indirection . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 292
[173]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 229
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 229
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 229
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 229
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 229
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 229
	expressionlist = . expression "," expressionlist, FOLLOW [11] -> GOTO 229
	expressionlist = . expression, FOLLOW [11] -> GOTO 229
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L13 = expression "(" . expressionlist ")", FOLLOW [274] -> GOTO 293
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L13 = expression "(" . ")", FOLLOW [274] -> SHIFT ')' GOTO 294
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[174]
	statement/L1 = expression ";" . (83), FOLLOW [107] -> REDUCE statement #2 CALL free_expression
[175]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 295
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 295
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 295
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 295
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 295
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 295
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = expression "<" . expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 295
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 295
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 295
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 295
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 295
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 295
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 295
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 295
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 295
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 295
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 295
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 295
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 295
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 295
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[176]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 296
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 296
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 296
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 296
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 296
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 296
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 296
	expression/L8 = expression ">" . expression, FOLLOW [274] -> GOTO 296
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 296
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 296
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 296
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 296
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 296
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 296
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 296
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 296
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 296
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 296
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 296
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 296
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[177]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 297
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 297
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 297
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 297
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 297
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 297
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 297
	expression/L7 = expression "&" . expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 297
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 297
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 297
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 297
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 297
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 297
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 297
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 297
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 297
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 297
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 297
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 297
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 297
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 297
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[178]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 298
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 298
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 298
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 298
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 298
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 298
	expression/L7 = expression "^" . expression, FOLLOW [274] -> GOTO 298
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 298
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 298
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 298
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 298
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 298
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 298
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 298
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 298
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 298
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 298
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 298
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 298
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 298
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 298
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[179]
	indirection = "->" . indirection, FOLLOW [14] -> GOTO 299
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = "->" . (143), FOLLOW [14] -> REDUCE indirection #1 CALL count
[180]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = expression "=" . expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 300
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 300
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 300
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 300
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 300
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 300
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 300
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 300
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 300
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 300
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 300
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 300
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 300
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 300
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 300
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 300
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 300
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 300
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 300
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 300
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[181]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 301
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 301
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 301
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 301
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 301
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 301
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 301
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 301
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 301
	expression/L9 = expression "+" . expression, FOLLOW [274] -> GOTO 301
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 301
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 301
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 301
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 301
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 301
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 301
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 301
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 301
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 301
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 301
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 301
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[182]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 302
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 302
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 302
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 302
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 302
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 302
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 302
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 302
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 302
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 302
	expression/L9 = expression "-" . expression, FOLLOW [274] -> GOTO 302
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 302
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 302
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 302
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 302
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 302
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 302
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 302
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 302
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 302
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 302
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[183]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 303
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 303
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 303
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 303
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 303
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 303
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 303
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 303
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 303
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 303
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 303
	expression/L10 = expression "*" . expression, FOLLOW [274] -> GOTO 303
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 303
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 303
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 303
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 303
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 303
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 303
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 303
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 303
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 303
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[184]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 304
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 304
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 304
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 304
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 304
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 304
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 304
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 304
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 304
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 304
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 304
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 304
	expression/L10 = expression "/" . expression, FOLLOW [274] -> GOTO 304
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 304
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 304
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 304
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 304
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 304
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 304
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 304
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 304
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[185]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 305
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 305
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 305
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 305
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 305
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 305
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 305
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 305
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 305
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 305
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 305
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 305
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 305
	expression/L10 = expression "%" . expression, FOLLOW [274] -> GOTO 305
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 305
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 305
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 305
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 305
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 305
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 305
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 305
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[186]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 306
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 306
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 306
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 306
	expression/L5 = expression "&&" . expression, FOLLOW [274] -> GOTO 306
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 306
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 306
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 306
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 306
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 306
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 306
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 306
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 306
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 306
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 306
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 306
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 306
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 306
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 306
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 306
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 306
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[187]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 307
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 307
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 307
	expression/L4 = expression "||" . expression, FOLLOW [274] -> GOTO 307
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 307
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 307
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 307
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 307
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 307
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 307
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 307
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 307
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 307
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 307
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 307
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 307
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 307
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 307
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 307
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 307
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 307
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[188]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 308
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 308
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 308
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 308
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 308
	expression/L6 = expression "|" . expression, FOLLOW [274] -> GOTO 308
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 308
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 308
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 308
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 308
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 308
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 308
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 308
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 308
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 308
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 308
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 308
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 308
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 308
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 308
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 308
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[189]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 309
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 309
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 309
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 309
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 309
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 309
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 309
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 309
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 309
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 309
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 309
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 309
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 309
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 309
	expression/L11 = expression "<<" . expression, FOLLOW [274] -> GOTO 309
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 309
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 309
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 309
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 309
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 309
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 309
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[190]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 310
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 310
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 310
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 310
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 310
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 310
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 310
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 310
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 310
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 310
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 310
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 310
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 310
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 310
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 310
	expression/L11 = expression ">>" . expression, FOLLOW [274] -> GOTO 310
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 310
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 310
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 310
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 310
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 310
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[191]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 229
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 229
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 229
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 229
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 229
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 229
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 229
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 229
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 229
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 229
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 229
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 229
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 229
	expressionlist = . expression "," expressionlist, FOLLOW [28] -> GOTO 229
	expressionlist = . expression, FOLLOW [28] -> GOTO 229
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L13 = expression "[" . expressionlist "]", FOLLOW [274] -> GOTO 311
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[192]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 312
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 312
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 312
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 312
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 312
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 312
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = expression "==" . expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 312
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 312
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 312
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 312
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 312
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 312
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 312
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 312
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 312
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 312
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 312
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 312
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 312
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 312
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[193]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 313
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 313
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 313
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 313
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 313
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 313
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = expression "!=" . expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 313
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 313
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 313
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 313
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 313
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 313
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 313
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 313
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 313
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 313
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 313
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 313
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 313
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 313
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[194]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 314
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 314
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 314
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 314
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 314
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 314
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 314
	expression/L8 = expression ">=" . expression, FOLLOW [274] -> GOTO 314
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 314
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 314
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 314
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 314
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 314
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 314
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 314
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 314
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 314
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 314
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 314
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 314
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 314
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[195]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 315
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 315
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 315
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 315
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 315
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 315
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = expression "<=" . expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 315
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 315
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 315
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 315
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 315
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 315
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 315
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 315
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 315
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 315
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 315
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 315
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 315
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 315
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[196]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = expression "+=" . expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 316
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 316
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 316
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 316
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 316
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 316
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 316
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 316
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 316
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 316
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 316
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 316
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 316
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 316
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 316
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 316
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 316
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 316
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 316
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 316
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[197]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = expression "-=" . expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 317
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 317
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 317
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 317
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 317
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 317
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 317
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 317
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 317
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 317
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 317
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 317
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 317
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 317
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 317
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 317
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 317
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 317
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 317
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 317
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[198]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = expression "*=" . expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 318
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 318
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 318
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 318
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 318
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 318
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 318
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 318
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 318
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 318
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 318
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 318
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 318
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 318
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 318
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 318
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 318
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 318
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 318
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 318
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[199]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = expression "/=" . expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 319
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 319
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 319
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 319
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 319
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 319
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 319
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 319
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 319
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 319
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 319
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 319
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 319
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 319
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 319
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 319
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 319
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 319
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 319
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 319
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[200]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = expression "^=" . expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 320
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 320
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 320
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 320
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 320
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 320
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 320
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 320
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 320
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 320
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 320
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 320
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 320
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 320
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 320
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 320
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 320
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 320
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 320
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 320
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[201]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = expression "&=" . expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = expression "&=" . expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 321
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 321
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 321
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 321
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 321
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 321
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 321
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 321
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 321
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 321
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 321
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 321
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 321
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 321
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 321
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 321
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 321
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 321
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 321
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 321
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[202]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = expression "%=" . expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 322
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 322
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 322
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 322
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 322
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 322
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 322
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 322
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 322
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 322
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 322
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 322
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 322
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 322
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 322
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 322
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 322
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 322
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 322
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 322
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[203]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = expression "&&=" . expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 323
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 323
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 323
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 323
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 323
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 323
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 323
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 323
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 323
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 323
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 323
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 323
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 323
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 323
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 323
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 323
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 323
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 323
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 323
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 323
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[204]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = expression "||=" . expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 324
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 324
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 324
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 324
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 324
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 324
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 324
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 324
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 324
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 324
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 324
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 324
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 324
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 324
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 324
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 324
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 324
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 324
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 324
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 324
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[205]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = expression "|=" . expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 325
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 325
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 325
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 325
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 325
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 325
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 325
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 325
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 325
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 325
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 325
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 325
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 325
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 325
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 325
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 325
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 325
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 325
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 325
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 325
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[206]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 326
	expression/L3 = expression "<<=" . expression, FOLLOW [274] -> GOTO 326
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 326
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 326
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 326
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 326
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 326
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 326
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 326
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 326
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 326
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 326
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 326
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 326
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 326
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 326
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 326
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 326
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 326
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 326
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 326
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[207]
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 327
	expression/L3 = expression ">>=" . expression, FOLLOW [274] -> GOTO 327
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 327
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 327
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 327
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 327
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 327
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 327
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 327
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 327
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 327
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 327
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 327
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 327
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 327
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 327
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 327
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 327
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 327
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 327
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[208]
	expression/L12 = expression "." . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 328
[209]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L2 = "(" expression . ")", FOLLOW [274] -> SHIFT ')' GOTO 329
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
[210]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = "&" expression . (122), FOLLOW [274] -> REDUCE expression #2 CALL operator "&"
[211]
	statement/L1 = "{" codeblock . "}", FOLLOW [107] -> SHIFT '}' GOTO 330
[212]
	iexpression = expression . indirection IDENT, FOLLOW [196] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [196] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [196] -> SHIFT '(' GOTO 173
	statement/L1 = expression . ";", FOLLOW [107] -> SHIFT ';' GOTO 174
	expressionlist = expression . "," expressionlist, FOLLOW [21] -> SHIFT ',' GOTO 331
	expression/L8 = expression . "<" expression, FOLLOW [196] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [196] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [196] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [196] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [196] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [196] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [196] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [196] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [196] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [196] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [196] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [196] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [196] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [196] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [196] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [196] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [196] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [196] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [196] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [196] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [196] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [196] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [196] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [196] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [196] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [196] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [196] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [196] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [196] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [196] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [196] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [196] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [196] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [196] -> SHIFT '.' GOTO 208
	expressionlist = expression ., FOLLOW [21] -> REDUCE expressionlist #1
[213]
	expression/L1 = "{" expressionlist . "}", FOLLOW [274] -> SHIFT '}' GOTO 332
[214]
	expression/L1 = "{" "}" . (94), FOLLOW [274] -> REDUCE expression #2 CALL structure
[215]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = "+" expression . (129), FOLLOW [274] -> REDUCE expression #2 CALL operator "+"
[216]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = "-" expression . (130), FOLLOW [274] -> REDUCE expression #2 CALL operator "-"
[217]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L12 = "*" expression . (139), FOLLOW [274] -> REDUCE expression #2 CALL operator "->"
[218]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = "~" expression . (131), FOLLOW [274] -> REDUCE expression #2 CALL operator "~"
[219]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = "!" expression . (132), FOLLOW [274] -> REDUCE expression #2 CALL operator "!"
[220]
	statement/L1 = "var" variabledefinition . ";", FOLLOW [107] -> SHIFT ';' GOTO 333
[221]
	iexpression = expression . indirection IDENT, FOLLOW [106] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	statement/L1 = "return" expression . ";", FOLLOW [107] -> SHIFT ';' GOTO 334
	expression/L8 = expression . "<" expression, FOLLOW [106] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [106] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [106] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [106] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [106] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [106] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [106] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [106] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [106] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [106] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [106] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [106] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [106] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [106] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [106] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [106] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [106] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [106] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [106] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [106] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [106] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [106] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [106] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [106] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [106] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [106] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [106] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [106] -> SHIFT '.' GOTO 208
[222]
	iexpression = expression . indirection IDENT, FOLLOW [106] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	statement/L1 = "delete" expression . ";", FOLLOW [107] -> SHIFT ';' GOTO 335
	expression/L8 = expression . "<" expression, FOLLOW [106] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [106] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [106] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [106] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [106] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [106] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [106] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [106] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [106] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [106] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [106] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [106] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [106] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [106] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [106] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [106] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [106] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [106] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [106] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [106] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [106] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [106] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [106] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [106] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [106] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [106] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [106] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [106] -> SHIFT '.' GOTO 208
[223]
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}", FOLLOW [107] -> GOTO 336
	statement/L1 = "if" "(" . expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> GOTO 336
	expression/L3 = . expression "=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "+=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "-=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "*=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "/=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "^=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "%=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "&&=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "||=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "|=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression "<<=" expression, FOLLOW [249] -> GOTO 336
	expression/L3 = . expression ">>=" expression, FOLLOW [249] -> GOTO 336
	expression/L4 = . expression "||" expression, FOLLOW [249] -> GOTO 336
	expression/L5 = . expression "&&" expression, FOLLOW [249] -> GOTO 336
	expression/L6 = . expression "|" expression, FOLLOW [249] -> GOTO 336
	expression/L7 = . expression "^" expression, FOLLOW [249] -> GOTO 336
	expression/L7 = . expression "&" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression "==" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression "!=" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression "<=" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression "<" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression ">=" expression, FOLLOW [249] -> GOTO 336
	expression/L8 = . expression ">" expression, FOLLOW [249] -> GOTO 336
	expression/L9 = . expression "+" expression, FOLLOW [249] -> GOTO 336
	expression/L9 = . expression "-" expression, FOLLOW [249] -> GOTO 336
	expression/L10 = . expression "*" expression, FOLLOW [249] -> GOTO 336
	expression/L10 = . expression "/" expression, FOLLOW [249] -> GOTO 336
	expression/L10 = . expression "%" expression, FOLLOW [249] -> GOTO 336
	expression/L11 = . expression "<<" expression, FOLLOW [249] -> GOTO 336
	expression/L11 = . expression ">>" expression, FOLLOW [249] -> GOTO 336
	expression/L12 = . expression "." IDENT, FOLLOW [249] -> GOTO 336
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [249] -> GOTO 336
	expression/L13 = . expression "(" ")", FOLLOW [249] -> GOTO 336
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [249] -> GOTO 336
	iexpression = . expression indirection IDENT, FOLLOW [249] -> GOTO 336
	expression/L12 = . iexpression, FOLLOW [249] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [249] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [249] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [249] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [249] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [249] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [249] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [249] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [249] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [249] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [249] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [249] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [249] -> SHIFT "null" GOTO 117
[224]
	statement/L1 = "while" "(" . expression ")" "{" codeblock "}", FOLLOW [107] -> GOTO 337
	expression/L3 = . expression "=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "+=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "-=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "*=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "/=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "^=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "%=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "&&=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "||=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "|=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression "<<=" expression, FOLLOW [249] -> GOTO 337
	expression/L3 = . expression ">>=" expression, FOLLOW [249] -> GOTO 337
	expression/L4 = . expression "||" expression, FOLLOW [249] -> GOTO 337
	expression/L5 = . expression "&&" expression, FOLLOW [249] -> GOTO 337
	expression/L6 = . expression "|" expression, FOLLOW [249] -> GOTO 337
	expression/L7 = . expression "^" expression, FOLLOW [249] -> GOTO 337
	expression/L7 = . expression "&" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression "==" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression "!=" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression "<=" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression "<" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression ">=" expression, FOLLOW [249] -> GOTO 337
	expression/L8 = . expression ">" expression, FOLLOW [249] -> GOTO 337
	expression/L9 = . expression "+" expression, FOLLOW [249] -> GOTO 337
	expression/L9 = . expression "-" expression, FOLLOW [249] -> GOTO 337
	expression/L10 = . expression "*" expression, FOLLOW [249] -> GOTO 337
	expression/L10 = . expression "/" expression, FOLLOW [249] -> GOTO 337
	expression/L10 = . expression "%" expression, FOLLOW [249] -> GOTO 337
	expression/L11 = . expression "<<" expression, FOLLOW [249] -> GOTO 337
	expression/L11 = . expression ">>" expression, FOLLOW [249] -> GOTO 337
	expression/L12 = . expression "." IDENT, FOLLOW [249] -> GOTO 337
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [249] -> GOTO 337
	expression/L13 = . expression "(" ")", FOLLOW [249] -> GOTO 337
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [249] -> GOTO 337
	iexpression = . expression indirection IDENT, FOLLOW [249] -> GOTO 337
	expression/L12 = . iexpression, FOLLOW [249] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [249] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [249] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [249] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [249] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [249] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [249] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [249] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [249] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [249] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [249] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [249] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [249] -> SHIFT "null" GOTO 117
[225]
	statement/L1 = "with" "(" . expression ")" "{" codeblock "}", FOLLOW [107] -> GOTO 338
	expression/L3 = . expression "=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "+=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "-=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "*=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "/=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "^=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "%=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "&&=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "||=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "&=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "|=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression "<<=" expression, FOLLOW [249] -> GOTO 338
	expression/L3 = . expression ">>=" expression, FOLLOW [249] -> GOTO 338
	expression/L4 = . expression "||" expression, FOLLOW [249] -> GOTO 338
	expression/L5 = . expression "&&" expression, FOLLOW [249] -> GOTO 338
	expression/L6 = . expression "|" expression, FOLLOW [249] -> GOTO 338
	expression/L7 = . expression "^" expression, FOLLOW [249] -> GOTO 338
	expression/L7 = . expression "&" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression "==" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression "!=" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression "<=" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression "<" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression ">=" expression, FOLLOW [249] -> GOTO 338
	expression/L8 = . expression ">" expression, FOLLOW [249] -> GOTO 338
	expression/L9 = . expression "+" expression, FOLLOW [249] -> GOTO 338
	expression/L9 = . expression "-" expression, FOLLOW [249] -> GOTO 338
	expression/L10 = . expression "*" expression, FOLLOW [249] -> GOTO 338
	expression/L10 = . expression "/" expression, FOLLOW [249] -> GOTO 338
	expression/L10 = . expression "%" expression, FOLLOW [249] -> GOTO 338
	expression/L11 = . expression "<<" expression, FOLLOW [249] -> GOTO 338
	expression/L11 = . expression ">>" expression, FOLLOW [249] -> GOTO 338
	expression/L12 = . expression "." IDENT, FOLLOW [249] -> GOTO 338
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [249] -> GOTO 338
	expression/L13 = . expression "(" ")", FOLLOW [249] -> GOTO 338
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [249] -> GOTO 338
	iexpression = . expression indirection IDENT, FOLLOW [249] -> GOTO 338
	expression/L12 = . iexpression, FOLLOW [249] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [249] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [249] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [249] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [249] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [249] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [249] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [249] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [249] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [249] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [249] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [249] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [249] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [249] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [249] -> SHIFT "null" GOTO 117
[226]
	expression/L1 = "new" typespec . ":" expression, FOLLOW [274] -> SHIFT ':' GOTO 339
[227]
	expression/L1 = "cast" typespec . ":" "{" expression "}", FOLLOW [274] -> SHIFT ':' GOTO 340
	expression/L1 = "cast" typespec . ":" "{" "}", FOLLOW [274] -> SHIFT ':' GOTO 340
[228]
	generic_instance = typepath "," generic_instance ., FOLLOW [18] -> REDUCE generic_instance #3
[229]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expressionlist = expression . "," expressionlist, FOLLOW [288] -> SHIFT ',' GOTO 331
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expressionlist = expression ., FOLLOW [288] -> REDUCE expressionlist #1
[230]
	variabledefinition = typespec IDENT "[" expression "]" . "=" expression, FOLLOW [16] -> SHIFT '=' GOTO 341
	variabledefinition = typespec IDENT "[" expression "]" . (step:93), FOLLOW [16] -> REDUCE variabledefinition #5 CALL vardef_array
[231]
	functiondefinition = linkage "function" IDENT typespec callablebody . (40), FOLLOW [283] -> REDUCE functiondefinition #5 CALL funcdef {const=false}
[232]
	functiondefinition = linkage "function" IDENT typespec callablebody_const . (41), FOLLOW [283] -> REDUCE functiondefinition #5 CALL funcdef {const=true}
[233]
	paramdecl = typespec . IDENT, FOLLOW [203] -> SHIFT IDENT GOTO 342
[234]
	callablebody = "(" parameterlist . ")" "{" codeblock "}", FOLLOW [283] -> SHIFT ')' GOTO 343
	callablebody_const = "(" parameterlist . ")" "const" "{" codeblock "}", FOLLOW [283] -> SHIFT ')' GOTO 343
[235]
	parameterlist = parameters . (79), FOLLOW [11] -> REDUCE parameterlist #1 CALL paramdeflist
[236]
	parameters = paramdecl . "," parameters, FOLLOW [11] -> SHIFT ',' GOTO 344
	parameters = paramdecl ., FOLLOW [11] -> REDUCE parameters #1
[237]
	classdefinition = "class" IDENT "{" inclass_definitionlist "}" . (step:36), FOLLOW [182] -> REDUCE classdefinition #5 CALL classdef
[238]
	inclass_definitionlist = inclass_definition inclass_definitionlist ., FOLLOW [21] -> REDUCE inclass_definitionlist #2
[239]
	inclass_definition = typedefinition ";" . (16), FOLLOW [181] -> REDUCE inclass_definition #2 CALL definition 1
[240]
	operatordefinition = linkage "operator" . operatordecl typespec callablebody, FOLLOW [181] -> GOTO 345
	operatordefinition = linkage "operator" . operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 345
	operatordefinition = linkage "operator" . operatordecl callablebody, FOLLOW [181] -> GOTO 345
	operatordefinition = linkage "operator" . operatordecl callablebody_const, FOLLOW [181] -> GOTO 345
	operatordecl = . "(" ")", FOLLOW [207] -> SHIFT '(' GOTO 264
	operatordecl = . "<", FOLLOW [207] -> SHIFT '<' GOTO 265
	operatordecl = . ">", FOLLOW [207] -> SHIFT '>' GOTO 266
	operatordecl = . "&", FOLLOW [207] -> SHIFT '&' GOTO 267
	operatordecl = . "->", FOLLOW [207] -> SHIFT "->" GOTO 268
	operatordecl = . "=", FOLLOW [207] -> SHIFT '=' GOTO 269
	operatordecl = . "+", FOLLOW [207] -> SHIFT '+' GOTO 270
	operatordecl = . "-", FOLLOW [207] -> SHIFT '-' GOTO 271
	operatordecl = . "*", FOLLOW [207] -> SHIFT '*' GOTO 272
	operatordecl = . "/", FOLLOW [207] -> SHIFT '/' GOTO 273
	operatordecl = . "%", FOLLOW [207] -> SHIFT '%' GOTO 274
	operatordecl = . "&&", FOLLOW [207] -> SHIFT "&&" GOTO 275
	operatordecl = . "||", FOLLOW [207] -> SHIFT "||" GOTO 276
	operatordecl = . "|", FOLLOW [207] -> SHIFT '|' GOTO 277
	operatordecl = . "<<", FOLLOW [207] -> SHIFT "<<" GOTO 278
	operatordecl = . ">>", FOLLOW [207] -> SHIFT ">>" GOTO 279
	operatordecl = . "~", FOLLOW [207] -> SHIFT '~' GOTO 280
	operatordecl = . "!", FOLLOW [207] -> SHIFT '!' GOTO 281
	operatordecl = . "[" "]", FOLLOW [207] -> SHIFT '[' GOTO 282
	operatordecl = . "==", FOLLOW [207] -> SHIFT "==" GOTO 283
	operatordecl = . "!=", FOLLOW [207] -> SHIFT "!=" GOTO 284
	operatordecl = . ">=", FOLLOW [207] -> SHIFT ">=" GOTO 285
	operatordecl = . "<=", FOLLOW [207] -> SHIFT "<=" GOTO 286
[241]
	constructordefinition = linkage "constructor" . callablebody, FOLLOW [181] -> GOTO 346
	callablebody = . "(" parameterlist ")" "{" codeblock "}", FOLLOW [181] -> SHIFT '(' GOTO 347
[242]
	inclass_definition = variabledefinition ";" . (16), FOLLOW [181] -> REDUCE inclass_definition #2 CALL definition 1
[243]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	constructordefinition = "destructor" "{" . codeblock "}", FOLLOW [181] -> GOTO 348
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[244]
	generic_typename/L1 = . typename, FOLLOW [183] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [183] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [183] -> GOTO 49
	inheritlist = . typepath "," inheritlist, FOLLOW [22] -> GOTO 142
	inheritlist = . typepath, FOLLOW [22] -> GOTO 142
	inheritlist = typepath "," . inheritlist, FOLLOW [22] -> GOTO 349
	typename/L1 = . IDENT, FOLLOW [185] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [185] -> SHIFT IDENT GOTO 18
[245]
	classdefinition = "class" IDENT ":" inheritlist "{" . inclass_definitionlist "}", FOLLOW [182] -> GOTO 350
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [21] -> GOTO 131
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	inclass_definition = . typedefinition ";", FOLLOW [181] -> GOTO 132
	inclass_definition = . structdefinition, FOLLOW [181] -> GOTO 133
	inclass_definition = . interfacedefinition, FOLLOW [181] -> GOTO 134
	inclass_definition = . classdefinition, FOLLOW [181] -> GOTO 135
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [181] -> GOTO 136
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody_const, FOLLOW [181] -> GOTO 136
	inclass_definition = . functiondefinition, FOLLOW [181] -> GOTO 137
	inclass_definition = . constructordefinition, FOLLOW [181] -> GOTO 138
	inclass_definition = . operatordefinition, FOLLOW [181] -> GOTO 139
	inclass_definition = . variabledefinition ";", FOLLOW [181] -> GOTO 140
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [181] -> SHIFT "interface" GOTO 25
	linkage = . "private", FOLLOW [180] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [180] -> SHIFT "public" GOTO 28
	constructordefinition = . "destructor" "{" codeblock "}", FOLLOW [181] -> SHIFT "destructor" GOTO 141
	inclass_definitionlist = ., FOLLOW [21] -> REDUCE inclass_definitionlist #0
	linkage = . (39), FOLLOW [180] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[246]
	structdefinition = "struct" IDENT "{" instruct_definitionlist "}" . (step:31), FOLLOW [182] -> REDUCE structdefinition #5 CALL structdef
[247]
	instruct_definitionlist = instruct_definition instruct_definitionlist ., FOLLOW [21] -> REDUCE instruct_definitionlist #2
[248]
	instruct_definition = typedefinition ";" . (16), FOLLOW [186] -> REDUCE instruct_definition #2 CALL definition 1
[249]
	instruct_definition = variabledefinition ";" . (16), FOLLOW [186] -> REDUCE instruct_definition #2 CALL definition 1
[250]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	typedefinition = "typedef" "function" IDENT typespec "(" . extern_paramlist ")", FOLLOW [16] -> GOTO 351
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[251]
	extern_paramlist = extern_parameters . (7), FOLLOW [208] -> REDUCE extern_paramlist #1 CALL extern_paramdeflist
[252]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist . ")", FOLLOW [16] -> SHIFT ')' GOTO 352
[253]
	extern_parameters = typespec . IDENT "," extern_parameters, FOLLOW [208] -> SHIFT IDENT GOTO 353
	extern_parameters = typespec . IDENT, FOLLOW [208] -> SHIFT IDENT GOTO 353
	extern_parameters = typespec . "," extern_parameters, FOLLOW [208] -> SHIFT ',' GOTO 354
	extern_parameters = typespec . (6), FOLLOW [208] -> REDUCE extern_parameters #1 CALL extern_paramdef
[254]
	generic_header = generic_defaultlist . (76), FOLLOW [18] -> REDUCE generic_header #1 CALL generic_header
[255]
	generic_header = generic_identlist . (76), FOLLOW [18] -> REDUCE generic_header #1 CALL generic_header
[256]
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '>' GOTO 355
	classdefinition = "generic" "class" IDENT "<" generic_header . ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '>' GOTO 355
[257]
	generic_identlist = IDENT . "," generic_identlist, FOLLOW [18] -> SHIFT ',' GOTO 356
	generic_identlist = IDENT . "," generic_defaultlist, FOLLOW [18] -> SHIFT ',' GOTO 356
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT '=' GOTO 357
	generic_defaultlist = IDENT . "=" typepath, FOLLOW [18] -> SHIFT '=' GOTO 357
	generic_identlist = IDENT . (75), FOLLOW [18] -> REDUCE generic_identlist #1 CALL generic_ident
[258]
	structdefinition = "generic" "struct" IDENT "<" generic_header . ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT '>' GOTO 358
[259]
	interfacedefinition = "interface" IDENT "{" ininterf_definitionlist "}" . (step:33), FOLLOW [182] -> REDUCE interfacedefinition #5 CALL interfacedef
[260]
	ininterf_definitionlist = ininterf_definition ininterf_definitionlist ., FOLLOW [21] -> REDUCE ininterf_definitionlist #2
[261]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> GOTO 359
	ininterf_definition = "function" IDENT . typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 359
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[262]
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT '(' GOTO 360
	ininterf_definition = "procedure" IDENT . "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT '(' GOTO 360
[263]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" ";", FOLLOW [192] -> GOTO 361
	ininterf_definition = "operator" operatordecl . typespec "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 361
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT '(' GOTO 362
	ininterf_definition = "operator" operatordecl . "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT '(' GOTO 362
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[264]
	operatordecl = "(" . ")", FOLLOW [207] -> SHIFT ')' GOTO 363
[265]
	operatordecl = "<" . (72), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="<",symbol="lt"}
[266]
	operatordecl = ">" . (71), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name=">",symbol="gt"}
[267]
	operatordecl = "&" . (59), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="&",symbol="bitand"}
[268]
	operatordecl = "->" . (50), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="->",symbol="arrow"}
[269]
	operatordecl = "=" . (51), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="=",symbol="assign"}
[270]
	operatordecl = "+" . (52), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="+",symbol="plus"}
[271]
	operatordecl = "-" . (53), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="-",symbol="minus"}
[272]
	operatordecl = "*" . (54), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="*",symbol="mul"}
[273]
	operatordecl = "/" . (55), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="/",symbol="div"}
[274]
	operatordecl = "%" . (56), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="%",symbol="mod"}
[275]
	operatordecl = "&&" . (57), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="&&",symbol="and"}
[276]
	operatordecl = "||" . (58), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="||",symbol="or"}
[277]
	operatordecl = "|" . (60), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="|",symbol="bitor"}
[278]
	operatordecl = "<<" . (61), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="<<",symbol="lsh"}
[279]
	operatordecl = ">>" . (62), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name=">>",symbol="rsh"}
[280]
	operatordecl = "~" . (63), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="~",symbol="lneg"}
[281]
	operatordecl = "!" . (64), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="!",symbol="not"}
[282]
	operatordecl = "[" . "]", FOLLOW [207] -> SHIFT ']' GOTO 364
[283]
	operatordecl = "==" . (67), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="==",symbol="eq"}
[284]
	operatordecl = "!=" . (68), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="!=",symbol="ne"}
[285]
	operatordecl = ">=" . (69), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name=">=",symbol="ge"}
[286]
	operatordecl = "<=" . (70), FOLLOW [207] -> REDUCE operatordecl #1 CALL operatordecl {name="<=",symbol="le"}
[287]
	namespacedefinition = "namespace" IDENT "{" namespace_definitionlist "}" . (step:35), FOLLOW [187] -> REDUCE namespacedefinition #5 CALL namespacedef
[288]
	namespace_definitionlist = namespace_definition namespace_definitionlist ., FOLLOW [21] -> REDUCE namespace_definitionlist #2
[289]
	namespace_definition = typedefinition ";" . (16), FOLLOW [193] -> REDUCE namespace_definition #2 CALL definition 1
[290]
	extern_paramlist = . extern_parameters, FOLLOW [208] -> GOTO 251
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist ")" ";", FOLLOW [60] -> GOTO 365
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" . extern_paramlist "..." ")" ";", FOLLOW [60] -> GOTO 365
	generic_typename/L1 = . typename, FOLLOW [210] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [210] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [209] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [208] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [208] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[291]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . ")" ";", FOLLOW [60] -> SHIFT ')' GOTO 366
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist . "..." ")" ";", FOLLOW [60] -> SHIFT "..." GOTO 367
[292]
	iexpression = expression indirection IDENT . (142), FOLLOW [274] -> REDUCE iexpression #3 CALL rep_operator "->"
[293]
	expression/L13 = expression "(" expressionlist . ")", FOLLOW [274] -> SHIFT ')' GOTO 368
[294]
	expression/L13 = expression "(" ")" . (140), FOLLOW [274] -> REDUCE expression #3 CALL operator "()"
[295]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression "<" expression . (126), FOLLOW [274] -> REDUCE expression #3 CALL operator "<"
[296]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression ">" expression . (128), FOLLOW [274] -> REDUCE expression #3 CALL operator ">"
[297]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L7 = expression "&" expression . (122), FOLLOW [274] -> REDUCE expression #3 CALL operator "&"
[298]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L7 = expression "^" expression . (121), FOLLOW [274] -> REDUCE expression #3 CALL operator "^"
[299]
	indirection = "->" indirection . (143), FOLLOW [14] -> REDUCE indirection #2 CALL count
[300]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "=" expression . (105), FOLLOW [274] -> REDUCE expression #3 CALL operator "="
[301]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = expression "+" expression . (129), FOLLOW [274] -> REDUCE expression #3 CALL operator "+"
[302]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L9 = expression "-" expression . (130), FOLLOW [274] -> REDUCE expression #3 CALL operator "-"
[303]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L10 = expression "*" expression . (133), FOLLOW [274] -> REDUCE expression #3 CALL operator "*"
[304]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L10 = expression "/" expression . (134), FOLLOW [274] -> REDUCE expression #3 CALL operator "/"
[305]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L10 = expression "%" expression . (135), FOLLOW [274] -> REDUCE expression #3 CALL operator "%"
[306]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L5 = expression "&&" expression . (119), FOLLOW [274] -> REDUCE expression #3 CALL operator "&&"
[307]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L4 = expression "||" expression . (118), FOLLOW [274] -> REDUCE expression #3 CALL operator "||"
[308]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L6 = expression "|" expression . (120), FOLLOW [274] -> REDUCE expression #3 CALL operator "|"
[309]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L11 = expression "<<" expression . (136), FOLLOW [274] -> REDUCE expression #3 CALL operator "<<"
[310]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L11 = expression ">>" expression . (137), FOLLOW [274] -> REDUCE expression #3 CALL operator ">>"
[311]
	expression/L13 = expression "[" expressionlist . "]", FOLLOW [274] -> SHIFT ']' GOTO 369
[312]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression "==" expression . (123), FOLLOW [274] -> REDUCE expression #3 CALL operator "=="
[313]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression "!=" expression . (124), FOLLOW [274] -> REDUCE expression #3 CALL operator "!="
[314]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression ">=" expression . (127), FOLLOW [274] -> REDUCE expression #3 CALL operator ">="
[315]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L8 = expression "<=" expression . (125), FOLLOW [274] -> REDUCE expression #3 CALL operator "<="
[316]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "+=" expression . (106), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "+"
[317]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "-=" expression . (107), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "-"
[318]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "*=" expression . (108), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "*"
[319]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "/=" expression . (109), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "/"
[320]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "^=" expression . (110), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "^"
[321]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "&=" expression . (111), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "&"
[322]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "%=" expression . (112), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "%"
[323]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "&&=" expression . (113), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "&&"
[324]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "||=" expression . (114), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "||"
[325]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "|=" expression . (115), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "|"
[326]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression "<<=" expression . (116), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator "<<"
[327]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L3 = expression ">>=" expression . (117), FOLLOW [274] -> REDUCE expression #3 CALL assign_operator ">>"
[328]
	expression/L12 = expression "." IDENT . (138), FOLLOW [274] -> REDUCE expression #3 CALL member
[329]
	expression/L2 = "(" expression ")" ., FOLLOW [274] -> REDUCE expression #3
[330]
	statement/L1 = "{" codeblock "}" . (scope), FOLLOW [107] -> REDUCE statement #3
[331]
	expression/L3 = . expression "=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "+=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "-=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "*=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "/=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "^=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "%=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "&&=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "||=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "&=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "|=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression "<<=" expression, FOLLOW [251] -> GOTO 229
	expression/L3 = . expression ">>=" expression, FOLLOW [251] -> GOTO 229
	expression/L4 = . expression "||" expression, FOLLOW [251] -> GOTO 229
	expression/L5 = . expression "&&" expression, FOLLOW [251] -> GOTO 229
	expression/L6 = . expression "|" expression, FOLLOW [251] -> GOTO 229
	expression/L7 = . expression "^" expression, FOLLOW [251] -> GOTO 229
	expression/L7 = . expression "&" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression "==" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression "!=" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression "<=" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression "<" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression ">=" expression, FOLLOW [251] -> GOTO 229
	expression/L8 = . expression ">" expression, FOLLOW [251] -> GOTO 229
	expression/L9 = . expression "+" expression, FOLLOW [251] -> GOTO 229
	expression/L9 = . expression "-" expression, FOLLOW [251] -> GOTO 229
	expression/L10 = . expression "*" expression, FOLLOW [251] -> GOTO 229
	expression/L10 = . expression "/" expression, FOLLOW [251] -> GOTO 229
	expression/L10 = . expression "%" expression, FOLLOW [251] -> GOTO 229
	expression/L11 = . expression "<<" expression, FOLLOW [251] -> GOTO 229
	expression/L11 = . expression ">>" expression, FOLLOW [251] -> GOTO 229
	expression/L12 = . expression "." IDENT, FOLLOW [251] -> GOTO 229
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [251] -> GOTO 229
	expression/L13 = . expression "(" ")", FOLLOW [251] -> GOTO 229
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [251] -> GOTO 229
	iexpression = . expression indirection IDENT, FOLLOW [251] -> GOTO 229
	expressionlist = . expression "," expressionlist, FOLLOW [288] -> GOTO 229
	expressionlist = . expression, FOLLOW [288] -> GOTO 229
	expression/L12 = . iexpression, FOLLOW [251] -> GOTO 93
	expressionlist = expression "," . expressionlist, FOLLOW [288] -> GOTO 370
	expression/L2 = . BOOLEAN, FOLLOW [251] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [251] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [251] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [251] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [251] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [251] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [251] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [251] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [251] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [251] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [251] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [251] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [251] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [251] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [251] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [251] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [251] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [251] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [251] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [251] -> SHIFT "null" GOTO 117
[332]
	expression/L1 = "{" expressionlist "}" . (94), FOLLOW [274] -> REDUCE expression #3 CALL structure
[333]
	statement/L1 = "var" variabledefinition ";" . (82), FOLLOW [107] -> REDUCE statement #3 CALL definition
[334]
	statement/L1 = "return" expression ";" . (step:84), FOLLOW [107] -> REDUCE statement #3 CALL return_value
[335]
	statement/L1 = "delete" expression ";" . (85), FOLLOW [107] -> REDUCE statement #3 CALL delete
[336]
	iexpression = expression . indirection IDENT, FOLLOW [249] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}", FOLLOW [107] -> SHIFT ')' GOTO 371
	statement/L1 = "if" "(" expression . ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT ')' GOTO 371
	expression/L8 = expression . "<" expression, FOLLOW [249] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [249] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [249] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [249] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [249] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [249] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [249] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [249] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [249] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [249] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [249] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [249] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [249] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [249] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [249] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [249] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [249] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [249] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [249] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [249] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [249] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [249] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [249] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [249] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [249] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [249] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [249] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [249] -> SHIFT '.' GOTO 208
[337]
	iexpression = expression . indirection IDENT, FOLLOW [249] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	statement/L1 = "while" "(" expression . ")" "{" codeblock "}", FOLLOW [107] -> SHIFT ')' GOTO 372
	expression/L8 = expression . "<" expression, FOLLOW [249] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [249] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [249] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [249] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [249] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [249] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [249] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [249] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [249] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [249] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [249] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [249] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [249] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [249] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [249] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [249] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [249] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [249] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [249] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [249] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [249] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [249] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [249] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [249] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [249] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [249] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [249] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [249] -> SHIFT '.' GOTO 208
[338]
	iexpression = expression . indirection IDENT, FOLLOW [249] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [249] -> SHIFT '(' GOTO 173
	statement/L1 = "with" "(" expression . ")" "{" codeblock "}", FOLLOW [107] -> SHIFT ')' GOTO 373
	expression/L8 = expression . "<" expression, FOLLOW [249] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [249] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [249] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [249] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [249] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [249] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [249] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [249] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [249] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [249] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [249] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [249] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [249] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [249] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [249] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [249] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [249] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [249] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [249] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [249] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [249] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [249] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [249] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [249] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [249] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [249] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [249] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [249] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [249] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [249] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [249] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [249] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [249] -> SHIFT '.' GOTO 208
[339]
	expression/L1 = "new" typespec ":" . expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 374
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 374
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 374
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 374
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 374
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 374
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 374
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 374
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 374
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 374
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 374
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 374
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 374
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 374
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 374
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 374
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 374
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 374
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 374
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 374
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[340]
	expression/L1 = "cast" typespec ":" . "{" expression "}", FOLLOW [274] -> SHIFT '{' GOTO 375
	expression/L1 = "cast" typespec ":" . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 375
[341]
	variabledefinition = typespec IDENT "[" expression "]" "=" . expression, FOLLOW [16] -> GOTO 376
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 376
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 376
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 376
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 376
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 376
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 376
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 376
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 376
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 376
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 376
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 376
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 376
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 376
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 376
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 376
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 376
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 376
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 376
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 376
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 376
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 121
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
[342]
	paramdecl = typespec IDENT . (80), FOLLOW [203] -> REDUCE paramdecl #2 CALL paramdef
[343]
	callablebody_const = "(" parameterlist ")" . "const" "{" codeblock "}", FOLLOW [283] -> SHIFT "const" GOTO 377
	callablebody = "(" parameterlist ")" . "{" codeblock "}", FOLLOW [283] -> SHIFT '{' GOTO 378
[344]
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	paramdecl = . typespec IDENT, FOLLOW [203] -> GOTO 233
	parameters = paramdecl "," . parameters, FOLLOW [11] -> GOTO 379
	parameters = . paramdecl "," parameters, FOLLOW [11] -> GOTO 236
	parameters = . paramdecl, FOLLOW [11] -> GOTO 236
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
[345]
	generic_typename/L1 = . typename, FOLLOW [177] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [177] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [10] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [10] -> GOTO 8
	operatordefinition = linkage "operator" operatordecl . typespec callablebody, FOLLOW [181] -> GOTO 380
	operatordefinition = linkage "operator" operatordecl . typespec callablebody_const, FOLLOW [181] -> GOTO 380
	operatordefinition = linkage "operator" operatordecl . callablebody, FOLLOW [181] -> GOTO 381
	operatordefinition = linkage "operator" operatordecl . callablebody_const, FOLLOW [181] -> GOTO 382
	typename/L1 = . IDENT, FOLLOW [178] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [178] -> SHIFT IDENT GOTO 18
	callablebody = . "(" parameterlist ")" "{" codeblock "}", FOLLOW [181] -> SHIFT '(' GOTO 126
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}", FOLLOW [181] -> SHIFT '(' GOTO 126
	typespec/L1 = . "const" generic_typename, FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [10] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [10] -> SHIFT "any" GOTO 20
[346]
	constructordefinition = linkage "constructor" callablebody . (44), FOLLOW [181] -> REDUCE constructordefinition #3 CALL constructordef
[347]
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	paramdecl = . typespec IDENT, FOLLOW [203] -> GOTO 233
	callablebody = "(" . parameterlist ")" "{" codeblock "}", FOLLOW [181] -> GOTO 383
	parameterlist = . parameters, FOLLOW [11] -> GOTO 235
	parameters = . paramdecl "," parameters, FOLLOW [11] -> GOTO 236
	parameters = . paramdecl, FOLLOW [11] -> GOTO 236
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	parameterlist = . (79), FOLLOW [11] -> REDUCE parameterlist #0 CALL paramdeflist
[348]
	constructordefinition = "destructor" "{" codeblock . "}", FOLLOW [181] -> SHIFT '}' GOTO 384
[349]
	inheritlist = typepath "," inheritlist . (step:34), FOLLOW [22] -> REDUCE inheritlist #3 CALL inheritdef 1
[350]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 385
[351]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist . ")", FOLLOW [16] -> SHIFT ')' GOTO 386
[352]
	typedefinition = "typedef" "procedure" IDENT "(" extern_paramlist ")" . (step:30), FOLLOW [16] -> REDUCE typedefinition #6 CALL typedef_proctype
[353]
	extern_parameters = typespec IDENT . "," extern_parameters, FOLLOW [208] -> SHIFT ',' GOTO 387
	extern_parameters = typespec IDENT . (6), FOLLOW [208] -> REDUCE extern_parameters #2 CALL extern_paramdef
[354]
	extern_parameters = typespec "," . extern_parameters, FOLLOW [208] -> GOTO 388
	generic_typename/L1 = . typename, FOLLOW [210] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [210] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [209] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [208] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
[355]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 389
	classdefinition = "generic" "class" IDENT "<" generic_header ">" . ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT ':' GOTO 390
[356]
	generic_identlist = IDENT "," . generic_defaultlist, FOLLOW [18] -> GOTO 391
	generic_identlist = IDENT "," . generic_identlist, FOLLOW [18] -> GOTO 392
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_defaultlist = . IDENT "=" typepath, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_identlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 257
	generic_identlist = . IDENT, FOLLOW [18] -> SHIFT IDENT GOTO 257
[357]
	generic_typename/L1 = . typename, FOLLOW [69] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [69] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [69] -> GOTO 49
	generic_defaultlist = IDENT "=" . typepath "," generic_defaultlist, FOLLOW [18] -> GOTO 393
	generic_defaultlist = IDENT "=" . typepath, FOLLOW [18] -> GOTO 393
	typename/L1 = . IDENT, FOLLOW [199] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [199] -> SHIFT IDENT GOTO 18
[358]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" . "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 394
[359]
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT '(' GOTO 395
	ininterf_definition = "function" IDENT typespec . "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT '(' GOTO 395
[360]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" ";", FOLLOW [192] -> GOTO 396
	ininterf_definition = "procedure" IDENT "(" . extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 396
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[361]
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" ";", FOLLOW [192] -> SHIFT '(' GOTO 397
	ininterf_definition = "operator" operatordecl typespec . "(" extern_paramlist ")" "const" ";", FOLLOW [192] -> SHIFT '(' GOTO 397
[362]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" ";", FOLLOW [192] -> GOTO 398
	ininterf_definition = "operator" operatordecl "(" . extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 398
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[363]
	operatordecl = "(" ")" . (65), FOLLOW [207] -> REDUCE operatordecl #2 CALL operatordecl {name="()",symbol="call"}
[364]
	operatordecl = "[" "]" . (66), FOLLOW [207] -> REDUCE operatordecl #2 CALL operatordecl {name="[]",symbol="get"}
[365]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . ")" ";", FOLLOW [60] -> SHIFT ')' GOTO 399
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist . "..." ")" ";", FOLLOW [60] -> SHIFT "..." GOTO 400
[366]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" . ";", FOLLOW [60] -> SHIFT ';' GOTO 401
[367]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." . ")" ";", FOLLOW [60] -> SHIFT ')' GOTO 402
[368]
	expression/L13 = expression "(" expressionlist ")" . (140), FOLLOW [274] -> REDUCE expression #4 CALL operator "()"
[369]
	expression/L13 = expression "[" expressionlist "]" . (141), FOLLOW [274] -> REDUCE expression #4 CALL operator "[]"
[370]
	expressionlist = expression "," expressionlist ., FOLLOW [288] -> REDUCE expressionlist #3
[371]
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 403
	statement/L1 = "if" "(" expression ")" . "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 403
[372]
	statement/L1 = "while" "(" expression ")" . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 404
[373]
	statement/L1 = "with" "(" expression ")" . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 405
[374]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
	expression/L1 = "new" typespec ":" expression . (95), FOLLOW [274] -> REDUCE expression #4 CALL allocate
[375]
	expression/L1 = "cast" typespec ":" "{" . expression "}", FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "+=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "-=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "*=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "/=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "^=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "%=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "&&=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "||=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "&=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "|=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression "<<=" expression, FOLLOW [274] -> GOTO 406
	expression/L3 = . expression ">>=" expression, FOLLOW [274] -> GOTO 406
	expression/L4 = . expression "||" expression, FOLLOW [274] -> GOTO 406
	expression/L5 = . expression "&&" expression, FOLLOW [274] -> GOTO 406
	expression/L6 = . expression "|" expression, FOLLOW [274] -> GOTO 406
	expression/L7 = . expression "^" expression, FOLLOW [274] -> GOTO 406
	expression/L7 = . expression "&" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression "==" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression "!=" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression "<=" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression "<" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression ">=" expression, FOLLOW [274] -> GOTO 406
	expression/L8 = . expression ">" expression, FOLLOW [274] -> GOTO 406
	expression/L9 = . expression "+" expression, FOLLOW [274] -> GOTO 406
	expression/L9 = . expression "-" expression, FOLLOW [274] -> GOTO 406
	expression/L10 = . expression "*" expression, FOLLOW [274] -> GOTO 406
	expression/L10 = . expression "/" expression, FOLLOW [274] -> GOTO 406
	expression/L10 = . expression "%" expression, FOLLOW [274] -> GOTO 406
	expression/L11 = . expression "<<" expression, FOLLOW [274] -> GOTO 406
	expression/L11 = . expression ">>" expression, FOLLOW [274] -> GOTO 406
	expression/L12 = . expression "." IDENT, FOLLOW [274] -> GOTO 406
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [274] -> GOTO 406
	expression/L13 = . expression "(" ")", FOLLOW [274] -> GOTO 406
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [274] -> GOTO 406
	iexpression = . expression indirection IDENT, FOLLOW [274] -> GOTO 406
	expression/L12 = . iexpression, FOLLOW [274] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [274] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [274] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [274] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [274] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [274] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [274] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [274] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [274] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 102
	expression/L1 = . "{" expressionlist "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = . "{" "}", FOLLOW [274] -> SHIFT '{' GOTO 121
	expression/L1 = "cast" typespec ":" "{" . "}", FOLLOW [274] -> SHIFT '}' GOTO 407
	expression/L9 = . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [274] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [274] -> SHIFT '!' GOTO 108
	expression/L1 = . "new" typespec ":" expression, FOLLOW [274] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [274] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [274] -> SHIFT "null" GOTO 117
[376]
	iexpression = expression . indirection IDENT, FOLLOW [106] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [106] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [106] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [106] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [106] -> SHIFT '^' GOTO 178
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [106] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [106] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [106] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [106] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [106] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [106] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [106] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [106] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [106] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [106] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [106] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [106] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [106] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [106] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [106] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [106] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [106] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [106] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [106] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [106] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [106] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [106] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [106] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [106] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [106] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [106] -> SHIFT '.' GOTO 208
	variabledefinition = typespec IDENT "[" expression "]" "=" expression . (step:92), FOLLOW [16] -> REDUCE variabledefinition #7 CALL vardef_array_assign
[377]
	callablebody_const = "(" parameterlist ")" "const" . "{" codeblock "}", FOLLOW [283] -> SHIFT '{' GOTO 408
[378]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	callablebody = "(" parameterlist ")" "{" . codeblock "}", FOLLOW [283] -> GOTO 409
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[379]
	parameters = paramdecl "," parameters ., FOLLOW [11] -> REDUCE parameters #3
[380]
	operatordefinition = linkage "operator" operatordecl typespec . callablebody, FOLLOW [181] -> GOTO 410
	operatordefinition = linkage "operator" operatordecl typespec . callablebody_const, FOLLOW [181] -> GOTO 411
	callablebody = . "(" parameterlist ")" "{" codeblock "}", FOLLOW [181] -> SHIFT '(' GOTO 126
	callablebody_const = . "(" parameterlist ")" "const" "{" codeblock "}", FOLLOW [181] -> SHIFT '(' GOTO 126
[381]
	operatordefinition = linkage "operator" operatordecl callablebody . (48), FOLLOW [181] -> REDUCE operatordefinition #4 CALL operator_procdef {const=false}
[382]
	operatordefinition = linkage "operator" operatordecl callablebody_const . (49), FOLLOW [181] -> REDUCE operatordefinition #4 CALL operator_procdef {const=true}
[383]
	callablebody = "(" parameterlist . ")" "{" codeblock "}", FOLLOW [181] -> SHIFT ')' GOTO 412
[384]
	constructordefinition = "destructor" "{" codeblock "}" . (45), FOLLOW [181] -> REDUCE constructordefinition #4 CALL destructordef
[385]
	classdefinition = "class" IDENT ":" inheritlist "{" inclass_definitionlist "}" . (step:36), FOLLOW [182] -> REDUCE classdefinition #7 CALL classdef
[386]
	typedefinition = "typedef" "function" IDENT typespec "(" extern_paramlist ")" . (step:29), FOLLOW [16] -> REDUCE typedefinition #7 CALL typedef_functype
[387]
	extern_parameters = typespec IDENT "," . extern_parameters, FOLLOW [208] -> GOTO 413
	generic_typename/L1 = . typename, FOLLOW [210] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [210] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [209] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [209] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [208] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [208] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [211] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [209] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [209] -> SHIFT "any" GOTO 20
[388]
	extern_parameters = typespec "," extern_parameters . (6), FOLLOW [208] -> REDUCE extern_parameters #3 CALL extern_paramdef
[389]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" . inclass_definitionlist "}", FOLLOW [182] -> GOTO 414
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [21] -> GOTO 131
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	inclass_definition = . typedefinition ";", FOLLOW [181] -> GOTO 132
	inclass_definition = . structdefinition, FOLLOW [181] -> GOTO 133
	inclass_definition = . interfacedefinition, FOLLOW [181] -> GOTO 134
	inclass_definition = . classdefinition, FOLLOW [181] -> GOTO 135
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [181] -> GOTO 136
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody_const, FOLLOW [181] -> GOTO 136
	inclass_definition = . functiondefinition, FOLLOW [181] -> GOTO 137
	inclass_definition = . constructordefinition, FOLLOW [181] -> GOTO 138
	inclass_definition = . operatordefinition, FOLLOW [181] -> GOTO 139
	inclass_definition = . variabledefinition ";", FOLLOW [181] -> GOTO 140
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [181] -> SHIFT "interface" GOTO 25
	linkage = . "private", FOLLOW [180] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [180] -> SHIFT "public" GOTO 28
	constructordefinition = . "destructor" "{" codeblock "}", FOLLOW [181] -> SHIFT "destructor" GOTO 141
	inclass_definitionlist = ., FOLLOW [21] -> REDUCE inclass_definitionlist #0
	linkage = . (39), FOLLOW [180] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[390]
	generic_typename/L1 = . typename, FOLLOW [183] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [183] -> GOTO 7
	typepath/L1 = . generic_typename, FOLLOW [183] -> GOTO 49
	inheritlist = . typepath "," inheritlist, FOLLOW [22] -> GOTO 142
	inheritlist = . typepath, FOLLOW [22] -> GOTO 142
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" . inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> GOTO 415
	typename/L1 = . IDENT, FOLLOW [185] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [185] -> SHIFT IDENT GOTO 18
[391]
	generic_identlist = IDENT "," generic_defaultlist . (75), FOLLOW [18] -> REDUCE generic_identlist #3 CALL generic_ident
[392]
	generic_identlist = IDENT "," generic_identlist . (75), FOLLOW [18] -> REDUCE generic_identlist #3 CALL generic_ident
[393]
	generic_defaultlist = IDENT "=" typepath . "," generic_defaultlist, FOLLOW [18] -> SHIFT ',' GOTO 416
	generic_defaultlist = IDENT "=" typepath . (74), FOLLOW [18] -> REDUCE generic_defaultlist #3 CALL generic_ident_type
[394]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" . instruct_definitionlist "}", FOLLOW [182] -> GOTO 417
	instruct_definitionlist = . instruct_definition instruct_definitionlist, FOLLOW [21] -> GOTO 145
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	instruct_definition = . typedefinition ";", FOLLOW [186] -> GOTO 146
	instruct_definition = . structdefinition, FOLLOW [186] -> GOTO 147
	instruct_definition = . variabledefinition ";", FOLLOW [186] -> GOTO 148
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 149
	instruct_definitionlist = ., FOLLOW [21] -> REDUCE instruct_definitionlist #0
[395]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" ";", FOLLOW [192] -> GOTO 418
	ininterf_definition = "function" IDENT typespec "(" . extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 418
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[396]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" ";", FOLLOW [192] -> SHIFT ')' GOTO 419
	ininterf_definition = "procedure" IDENT "(" extern_paramlist . ")" "const" ";", FOLLOW [192] -> SHIFT ')' GOTO 419
[397]
	extern_paramlist = . extern_parameters, FOLLOW [11] -> GOTO 251
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" ";", FOLLOW [192] -> GOTO 420
	ininterf_definition = "operator" operatordecl typespec "(" . extern_paramlist ")" "const" ";", FOLLOW [192] -> GOTO 420
	generic_typename/L1 = . typename, FOLLOW [205] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [205] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [204] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [204] -> GOTO 8
	extern_parameters = . typespec "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT "," extern_parameters, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec, FOLLOW [11] -> GOTO 253
	extern_parameters = . typespec IDENT, FOLLOW [11] -> GOTO 253
	typename/L1 = . IDENT, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [206] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [204] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [204] -> SHIFT "any" GOTO 20
	extern_paramlist = . (7), FOLLOW [11] -> REDUCE extern_paramlist #0 CALL extern_paramdeflist
[398]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" ";", FOLLOW [192] -> SHIFT ')' GOTO 421
	ininterf_definition = "operator" operatordecl "(" extern_paramlist . ")" "const" ";", FOLLOW [192] -> SHIFT ')' GOTO 421
[399]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" . ";", FOLLOW [60] -> SHIFT ';' GOTO 422
[400]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." . ")" ";", FOLLOW [60] -> SHIFT ')' GOTO 423
[401]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist ")" ";" . (3), FOLLOW [60] -> REDUCE extern_definition #8 CALL extern_procdef
[402]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" . ";", FOLLOW [60] -> SHIFT ';' GOTO 424
[403]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}", FOLLOW [107] -> GOTO 425
	statement/L1 = "if" "(" expression ")" "{" . codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> GOTO 425
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[404]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statement/L1 = "while" "(" expression ")" "{" . codeblock "}", FOLLOW [107] -> GOTO 426
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[405]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statement/L1 = "with" "(" expression ")" "{" . codeblock "}", FOLLOW [107] -> GOTO 427
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[406]
	iexpression = expression . indirection IDENT, FOLLOW [274] -> GOTO 172
	expression/L13 = expression . "(" expressionlist ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L13 = expression . "(" ")", FOLLOW [274] -> SHIFT '(' GOTO 173
	expression/L8 = expression . "<" expression, FOLLOW [274] -> SHIFT '<' GOTO 175
	expression/L8 = expression . ">" expression, FOLLOW [274] -> SHIFT '>' GOTO 176
	expression/L7 = expression . "&" expression, FOLLOW [274] -> SHIFT '&' GOTO 177
	expression/L7 = expression . "^" expression, FOLLOW [274] -> SHIFT '^' GOTO 178
	expression/L1 = "cast" typespec ":" "{" expression . "}", FOLLOW [274] -> SHIFT '}' GOTO 428
	indirection = . "->" indirection, FOLLOW [14] -> SHIFT "->" GOTO 179
	indirection = . "->", FOLLOW [14] -> SHIFT "->" GOTO 179
	expression/L3 = expression . "=" expression, FOLLOW [274] -> SHIFT '=' GOTO 180
	expression/L9 = expression . "+" expression, FOLLOW [274] -> SHIFT '+' GOTO 181
	expression/L9 = expression . "-" expression, FOLLOW [274] -> SHIFT '-' GOTO 182
	expression/L10 = expression . "*" expression, FOLLOW [274] -> SHIFT '*' GOTO 183
	expression/L10 = expression . "/" expression, FOLLOW [274] -> SHIFT '/' GOTO 184
	expression/L10 = expression . "%" expression, FOLLOW [274] -> SHIFT '%' GOTO 185
	expression/L5 = expression . "&&" expression, FOLLOW [274] -> SHIFT "&&" GOTO 186
	expression/L4 = expression . "||" expression, FOLLOW [274] -> SHIFT "||" GOTO 187
	expression/L6 = expression . "|" expression, FOLLOW [274] -> SHIFT '|' GOTO 188
	expression/L11 = expression . "<<" expression, FOLLOW [274] -> SHIFT "<<" GOTO 189
	expression/L11 = expression . ">>" expression, FOLLOW [274] -> SHIFT ">>" GOTO 190
	expression/L13 = expression . "[" expressionlist "]", FOLLOW [274] -> SHIFT '[' GOTO 191
	expression/L8 = expression . "==" expression, FOLLOW [274] -> SHIFT "==" GOTO 192
	expression/L8 = expression . "!=" expression, FOLLOW [274] -> SHIFT "!=" GOTO 193
	expression/L8 = expression . ">=" expression, FOLLOW [274] -> SHIFT ">=" GOTO 194
	expression/L8 = expression . "<=" expression, FOLLOW [274] -> SHIFT "<=" GOTO 195
	expression/L3 = expression . "+=" expression, FOLLOW [274] -> SHIFT "+=" GOTO 196
	expression/L3 = expression . "-=" expression, FOLLOW [274] -> SHIFT "-=" GOTO 197
	expression/L3 = expression . "*=" expression, FOLLOW [274] -> SHIFT "*=" GOTO 198
	expression/L3 = expression . "/=" expression, FOLLOW [274] -> SHIFT "/=" GOTO 199
	expression/L3 = expression . "^=" expression, FOLLOW [274] -> SHIFT "^=" GOTO 200
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "&=" expression, FOLLOW [274] -> SHIFT "&=" GOTO 201
	expression/L3 = expression . "%=" expression, FOLLOW [274] -> SHIFT "%=" GOTO 202
	expression/L3 = expression . "&&=" expression, FOLLOW [274] -> SHIFT "&&=" GOTO 203
	expression/L3 = expression . "||=" expression, FOLLOW [274] -> SHIFT "||=" GOTO 204
	expression/L3 = expression . "|=" expression, FOLLOW [274] -> SHIFT "|=" GOTO 205
	expression/L3 = expression . "<<=" expression, FOLLOW [274] -> SHIFT "<<=" GOTO 206
	expression/L3 = expression . ">>=" expression, FOLLOW [274] -> SHIFT ">>=" GOTO 207
	expression/L12 = expression . "." IDENT, FOLLOW [274] -> SHIFT '.' GOTO 208
[407]
	expression/L1 = "cast" typespec ":" "{" "}" . (96), FOLLOW [274] -> REDUCE expression #5 CALL typecast
[408]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	callablebody_const = "(" parameterlist ")" "const" "{" . codeblock "}", FOLLOW [283] -> GOTO 429
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[409]
	callablebody = "(" parameterlist ")" "{" codeblock . "}", FOLLOW [283] -> SHIFT '}' GOTO 430
[410]
	operatordefinition = linkage "operator" operatordecl typespec callablebody . (46), FOLLOW [181] -> REDUCE operatordefinition #5 CALL operator_funcdef {const=false}
[411]
	operatordefinition = linkage "operator" operatordecl typespec callablebody_const . (47), FOLLOW [181] -> REDUCE operatordefinition #5 CALL operator_funcdef {const=true}
[412]
	callablebody = "(" parameterlist ")" . "{" codeblock "}", FOLLOW [181] -> SHIFT '{' GOTO 378
[413]
	extern_parameters = typespec IDENT "," extern_parameters . (6), FOLLOW [208] -> REDUCE extern_parameters #4 CALL extern_paramdef
[414]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 431
[415]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist . "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT '{' GOTO 432
[416]
	generic_defaultlist = IDENT "=" typepath "," . generic_defaultlist, FOLLOW [18] -> GOTO 433
	generic_defaultlist = . IDENT "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT IDENT GOTO 434
	generic_defaultlist = . IDENT "=" typepath, FOLLOW [18] -> SHIFT IDENT GOTO 434
[417]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 435
[418]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" ";", FOLLOW [192] -> SHIFT ')' GOTO 436
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist . ")" "const" ";", FOLLOW [192] -> SHIFT ')' GOTO 436
[419]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . ";", FOLLOW [192] -> SHIFT ';' GOTO 437
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" . "const" ";", FOLLOW [192] -> SHIFT "const" GOTO 438
[420]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" ";", FOLLOW [192] -> SHIFT ')' GOTO 439
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist . ")" "const" ";", FOLLOW [192] -> SHIFT ')' GOTO 439
[421]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . ";", FOLLOW [192] -> SHIFT ';' GOTO 440
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" . "const" ";", FOLLOW [192] -> SHIFT "const" GOTO 441
[422]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist ")" ";" . (2), FOLLOW [60] -> REDUCE extern_definition #9 CALL extern_funcdef
[423]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" . ";", FOLLOW [60] -> SHIFT ';' GOTO 442
[424]
	extern_definition = "extern" DQSTRING "procedure" IDENT "(" extern_paramlist "..." ")" ";" . (5), FOLLOW [60] -> REDUCE extern_definition #9 CALL extern_procdef_vararg
[425]
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}", FOLLOW [107] -> SHIFT '}' GOTO 443
	statement/L1 = "if" "(" expression ")" "{" codeblock . "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT '}' GOTO 443
[426]
	statement/L1 = "while" "(" expression ")" "{" codeblock . "}", FOLLOW [107] -> SHIFT '}' GOTO 444
[427]
	statement/L1 = "with" "(" expression ")" "{" codeblock . "}", FOLLOW [107] -> SHIFT '}' GOTO 445
[428]
	expression/L1 = "cast" typespec ":" "{" expression "}" . (96), FOLLOW [274] -> REDUCE expression #6 CALL typecast
[429]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock . "}", FOLLOW [283] -> SHIFT '}' GOTO 446
[430]
	callablebody = "(" parameterlist ")" "{" codeblock "}" . (scope:77), FOLLOW [283] -> REDUCE callablebody #6 CALL callablebody
[431]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}" . (step:37), FOLLOW [182] -> REDUCE classdefinition #9 CALL generic_classdef
[432]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" . inclass_definitionlist "}", FOLLOW [182] -> GOTO 447
	inclass_definitionlist = . inclass_definition inclass_definitionlist, FOLLOW [21] -> GOTO 131
	generic_typename/L1 = . typename, FOLLOW [64] -> GOTO 7
	generic_typename/L1 = . typename "<" generic_instancelist ">", FOLLOW [64] -> GOTO 7
	typespec/L1 = . generic_typename, FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "&", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^", FOLLOW [14] -> GOTO 8
	typespec/L1 = . generic_typename "^" "&", FOLLOW [14] -> GOTO 8
	variabledefinition = . typespec IDENT, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]" "=" expression, FOLLOW [16] -> GOTO 9
	variabledefinition = . typespec IDENT "[" expression "]", FOLLOW [16] -> GOTO 9
	inclass_definition = . typedefinition ";", FOLLOW [181] -> GOTO 132
	inclass_definition = . structdefinition, FOLLOW [181] -> GOTO 133
	inclass_definition = . interfacedefinition, FOLLOW [181] -> GOTO 134
	inclass_definition = . classdefinition, FOLLOW [181] -> GOTO 135
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [181] -> GOTO 136
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [181] -> GOTO 136
	constructordefinition = . linkage "constructor" callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl typespec callablebody_const, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody, FOLLOW [181] -> GOTO 136
	operatordefinition = . linkage "operator" operatordecl callablebody_const, FOLLOW [181] -> GOTO 136
	inclass_definition = . functiondefinition, FOLLOW [181] -> GOTO 137
	inclass_definition = . constructordefinition, FOLLOW [181] -> GOTO 138
	inclass_definition = . operatordefinition, FOLLOW [181] -> GOTO 139
	inclass_definition = . variabledefinition ";", FOLLOW [181] -> GOTO 140
	typename/L1 = . IDENT, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typename/L1 = . IDENT "::" typename, FOLLOW [65] -> SHIFT IDENT GOTO 18
	typespec/L1 = . "const" generic_typename, FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "const" generic_typename "^" "&", FOLLOW [14] -> SHIFT "const" GOTO 19
	typespec/L1 = . "any" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "class" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	typespec/L1 = . "any" "const" "struct" "^", FOLLOW [14] -> SHIFT "any" GOTO 20
	classdefinition = . "class" IDENT "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	classdefinition = . "class" IDENT ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "class" GOTO 21
	structdefinition = . "struct" IDENT "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "struct" GOTO 22
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	structdefinition = . "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}", FOLLOW [181] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	classdefinition = . "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}", FOLLOW [182] -> SHIFT "generic" GOTO 24
	interfacedefinition = . "interface" IDENT "{" ininterf_definitionlist "}", FOLLOW [181] -> SHIFT "interface" GOTO 25
	linkage = . "private", FOLLOW [180] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [180] -> SHIFT "public" GOTO 28
	constructordefinition = . "destructor" "{" codeblock "}", FOLLOW [181] -> SHIFT "destructor" GOTO 141
	inclass_definitionlist = ., FOLLOW [21] -> REDUCE inclass_definitionlist #0
	linkage = . (39), FOLLOW [180] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[433]
	generic_defaultlist = IDENT "=" typepath "," generic_defaultlist . (74), FOLLOW [18] -> REDUCE generic_defaultlist #5 CALL generic_ident_type
[434]
	generic_defaultlist = IDENT . "=" typepath "," generic_defaultlist, FOLLOW [18] -> SHIFT '=' GOTO 357
	generic_defaultlist = IDENT . "=" typepath, FOLLOW [18] -> SHIFT '=' GOTO 357
[435]
	structdefinition = "generic" "struct" IDENT "<" generic_header ">" "{" instruct_definitionlist "}" . (step:32), FOLLOW [182] -> REDUCE structdefinition #9 CALL generic_structdef
[436]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . ";", FOLLOW [192] -> SHIFT ';' GOTO 448
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" . "const" ";", FOLLOW [192] -> SHIFT "const" GOTO 449
[437]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" ";" . (10), FOLLOW [192] -> REDUCE ininterf_definition #6 CALL interface_procdef {const=false}
[438]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" . ";", FOLLOW [192] -> SHIFT ';' GOTO 450
[439]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . ";", FOLLOW [192] -> SHIFT ';' GOTO 451
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" . "const" ";", FOLLOW [192] -> SHIFT "const" GOTO 452
[440]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" ";" . (14), FOLLOW [192] -> REDUCE ininterf_definition #6 CALL interface_operator_procdef {const=false}
[441]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" . ";", FOLLOW [192] -> SHIFT ';' GOTO 453
[442]
	extern_definition = "extern" DQSTRING "function" IDENT typespec "(" extern_paramlist "..." ")" ";" . (4), FOLLOW [60] -> REDUCE extern_definition #10 CALL extern_funcdef_vararg
[443]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" . "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "else" GOTO 454
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" . (scope:86), FOLLOW [107] -> REDUCE statement #7 CALL conditional_if
[444]
	statement/L1 = "while" "(" expression ")" "{" codeblock "}" . (scope:88), FOLLOW [107] -> REDUCE statement #7 CALL conditional_while
[445]
	statement/L1 = "with" "(" expression ")" "{" codeblock "}" . (step:89), FOLLOW [107] -> REDUCE statement #7 CALL with_do
[446]
	callablebody_const = "(" parameterlist ")" "const" "{" codeblock "}" . (scope:77), FOLLOW [283] -> REDUCE callablebody_const #7 CALL callablebody
[447]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist . "}", FOLLOW [182] -> SHIFT '}' GOTO 455
[448]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" ";" . (8), FOLLOW [192] -> REDUCE ininterf_definition #7 CALL interface_funcdef {const=false}
[449]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" . ";", FOLLOW [192] -> SHIFT ';' GOTO 456
[450]
	ininterf_definition = "procedure" IDENT "(" extern_paramlist ")" "const" ";" . (11), FOLLOW [192] -> REDUCE ininterf_definition #7 CALL interface_procdef {const=true}
[451]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" ";" . (12), FOLLOW [192] -> REDUCE ininterf_definition #7 CALL interface_operator_funcdef {const=false}
[452]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" . ";", FOLLOW [192] -> SHIFT ';' GOTO 457
[453]
	ininterf_definition = "operator" operatordecl "(" extern_paramlist ")" "const" ";" . (15), FOLLOW [192] -> REDUCE ininterf_definition #7 CALL interface_operator_procdef {const=true}
[454]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 458
[455]
	classdefinition = "generic" "class" IDENT "<" generic_header ">" ":" inheritlist "{" inclass_definitionlist "}" . (step:37), FOLLOW [182] -> REDUCE classdefinition #11 CALL generic_classdef
[456]
	ininterf_definition = "function" IDENT typespec "(" extern_paramlist ")" "const" ";" . (9), FOLLOW [192] -> REDUCE ininterf_definition #8 CALL interface_funcdef {const=true}
[457]
	ininterf_definition = "operator" operatordecl typespec "(" extern_paramlist ")" "const" ";" . (13), FOLLOW [192] -> REDUCE ininterf_definition #8 CALL interface_operator_funcdef {const=true}
[458]
	statement/L1 = . typedefinition ";", FOLLOW [107] -> GOTO 87
	functiondefinition = . linkage "function" IDENT typespec callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "function" IDENT typespec callablebody_const, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody, FOLLOW [107] -> GOTO 15
	functiondefinition = . linkage "procedure" IDENT callablebody_const, FOLLOW [107] -> GOTO 15
	statement/L1 = . functiondefinition, FOLLOW [107] -> GOTO 88
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" . codeblock "}", FOLLOW [107] -> GOTO 459
	codeblock = . statementlist, FOLLOW [21] -> GOTO 90
	statementlist = . statement statementlist, FOLLOW [21] -> GOTO 91
	statement/L1 = . expression ";", FOLLOW [107] -> GOTO 92
	expression/L3 = . expression "=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "+=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "-=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "*=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "/=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "^=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "%=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "||=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "&=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "|=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression "<<=" expression, FOLLOW [106] -> GOTO 92
	expression/L3 = . expression ">>=" expression, FOLLOW [106] -> GOTO 92
	expression/L4 = . expression "||" expression, FOLLOW [106] -> GOTO 92
	expression/L5 = . expression "&&" expression, FOLLOW [106] -> GOTO 92
	expression/L6 = . expression "|" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "^" expression, FOLLOW [106] -> GOTO 92
	expression/L7 = . expression "&" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "==" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "!=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression "<" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">=" expression, FOLLOW [106] -> GOTO 92
	expression/L8 = . expression ">" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "+" expression, FOLLOW [106] -> GOTO 92
	expression/L9 = . expression "-" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "*" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "/" expression, FOLLOW [106] -> GOTO 92
	expression/L10 = . expression "%" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression "<<" expression, FOLLOW [106] -> GOTO 92
	expression/L11 = . expression ">>" expression, FOLLOW [106] -> GOTO 92
	expression/L12 = . expression "." IDENT, FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" expressionlist ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "(" ")", FOLLOW [106] -> GOTO 92
	expression/L13 = . expression "[" expressionlist "]", FOLLOW [106] -> GOTO 92
	iexpression = . expression indirection IDENT, FOLLOW [106] -> GOTO 92
	expression/L12 = . iexpression, FOLLOW [106] -> GOTO 93
	expression/L2 = . BOOLEAN, FOLLOW [106] -> SHIFT BOOLEAN GOTO 94
	expression/L2 = . IDENT, FOLLOW [106] -> SHIFT IDENT GOTO 95
	expression/L2 = . DQSTRING, FOLLOW [106] -> SHIFT DQSTRING GOTO 96
	expression/L2 = . SQSTRING, FOLLOW [106] -> SHIFT SQSTRING GOTO 97
	expression/L2 = . CARDINAL, FOLLOW [106] -> SHIFT CARDINAL GOTO 98
	expression/L2 = . INTEGER, FOLLOW [106] -> SHIFT INTEGER GOTO 99
	expression/L2 = . FLOAT, FOLLOW [106] -> SHIFT FLOAT GOTO 100
	expression/L2 = . "(" expression ")", FOLLOW [106] -> SHIFT '(' GOTO 101
	expression/L9 = . "&" expression, FOLLOW [106] -> SHIFT '&' GOTO 102
	typedefinition = . "typedef" typepath IDENT, FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "function" IDENT typespec "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	typedefinition = . "typedef" "procedure" IDENT "(" extern_paramlist ")", FOLLOW [16] -> SHIFT "typedef" GOTO 23
	statement/L1 = . "{" codeblock "}", FOLLOW [107] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" expressionlist "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	expression/L1 = . "{" "}", FOLLOW [106] -> SHIFT '{' GOTO 103
	linkage = . "private", FOLLOW [62] -> SHIFT "private" GOTO 27
	linkage = . "public", FOLLOW [62] -> SHIFT "public" GOTO 28
	expression/L9 = . "+" expression, FOLLOW [106] -> SHIFT '+' GOTO 104
	expression/L9 = . "-" expression, FOLLOW [106] -> SHIFT '-' GOTO 105
	expression/L12 = . "*" expression, FOLLOW [106] -> SHIFT '*' GOTO 106
	expression/L9 = . "~" expression, FOLLOW [106] -> SHIFT '~' GOTO 107
	expression/L9 = . "!" expression, FOLLOW [106] -> SHIFT '!' GOTO 108
	statement/L1 = . "var" variabledefinition ";", FOLLOW [107] -> SHIFT "var" GOTO 109
	statement/L1 = . "return" expression ";", FOLLOW [107] -> SHIFT "return" GOTO 110
	statement/L1 = . "delete" expression ";", FOLLOW [107] -> SHIFT "delete" GOTO 111
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}", FOLLOW [107] -> SHIFT "if" GOTO 112
	statement/L1 = . "while" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "while" GOTO 113
	statement/L1 = . "with" "(" expression ")" "{" codeblock "}", FOLLOW [107] -> SHIFT "with" GOTO 114
	expression/L1 = . "new" typespec ":" expression, FOLLOW [106] -> SHIFT "new" GOTO 115
	expression/L1 = . "cast" typespec ":" "{" expression "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L1 = . "cast" typespec ":" "{" "}", FOLLOW [106] -> SHIFT "cast" GOTO 116
	expression/L2 = . "null", FOLLOW [106] -> SHIFT "null" GOTO 117
	statementlist = ., FOLLOW [21] -> REDUCE statementlist #0
	linkage = . (39), FOLLOW [62] -> REDUCE linkage #0 CALL linkage {private=false,linkage="external"}
[459]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock . "}", FOLLOW [107] -> SHIFT '}' GOTO 460
[460]
	statement/L1 = "if" "(" expression ")" "{" codeblock "}" "else" "{" codeblock "}" . (scope:87), FOLLOW [107] -> REDUCE statement #11 CALL conditional_if_else

-- Function calls:
(1) program
(2) extern_funcdef
(3) extern_procdef
(4) extern_funcdef_vararg
(5) extern_procdef_vararg
(6) extern_paramdef
(7) extern_paramdeflist
(8) interface_funcdef, {const=false}
(9) interface_funcdef, {const=true}
(10) interface_procdef, {const=false}
(11) interface_procdef, {const=true}
(12) interface_operator_funcdef, {const=false}
(13) interface_operator_funcdef, {const=true}
(14) interface_operator_procdef, {const=false}
(15) interface_operator_procdef, {const=true}
(16) definition, 1
(17) definition, 2
(18) typespec, ""
(19) typespec, "const "
(20) typespec, "&"
(21) typespec, "const&"
(22) typespec, "^"
(23) typespec, "const^"
(24) typespec, "^&"
(25) typespec, "const^&"
(26) typespec_key, "class^"
(27) typespec_key, "const struct^"
(28) typedef
(29) typedef_functype
(30) typedef_proctype
(31) structdef
(32) generic_structdef
(33) interfacedef
(34) inheritdef, 1
(35) namespacedef
(36) classdef
(37) generic_classdef
(38) linkage, {private=true,linkage="internal"}
(39) linkage, {private=false,linkage="external"}
(40) funcdef, {const=false}
(41) funcdef, {const=true}
(42) procdef, {const=false}
(43) procdef, {const=true}
(44) constructordef
(45) destructordef
(46) operator_funcdef, {const=false}
(47) operator_funcdef, {const=true}
(48) operator_procdef, {const=false}
(49) operator_procdef, {const=true}
(50) operatordecl, {name="->",symbol="arrow"}
(51) operatordecl, {name="=",symbol="assign"}
(52) operatordecl, {name="+",symbol="plus"}
(53) operatordecl, {name="-",symbol="minus"}
(54) operatordecl, {name="*",symbol="mul"}
(55) operatordecl, {name="/",symbol="div"}
(56) operatordecl, {name="%",symbol="mod"}
(57) operatordecl, {name="&&",symbol="and"}
(58) operatordecl, {name="||",symbol="or"}
(59) operatordecl, {name="&",symbol="bitand"}
(60) operatordecl, {name="|",symbol="bitor"}
(61) operatordecl, {name="<<",symbol="lsh"}
(62) operatordecl, {name=">>",symbol="rsh"}
(63) operatordecl, {name="~",symbol="lneg"}
(64) operatordecl, {name="!",symbol="not"}
(65) operatordecl, {name="()",symbol="call"}
(66) operatordecl, {name="[]",symbol="get"}
(67) operatordecl, {name="==",symbol="eq"}
(68) operatordecl, {name="!=",symbol="ne"}
(69) operatordecl, {name=">=",symbol="ge"}
(70) operatordecl, {name="<=",symbol="le"}
(71) operatordecl, {name=">",symbol="gt"}
(72) operatordecl, {name="<",symbol="lt"}
(73) generic_instancelist
(74) generic_ident_type
(75) generic_ident
(76) generic_header
(77) callablebody
(78) main_procdef
(79) paramdeflist
(80) paramdef
(81) codeblock
(82) definition
(83) free_expression
(84) return_value
(85) delete
(86) conditional_if
(87) conditional_if_else
(88) conditional_while
(89) with_do
(90) vardef
(91) vardef_assign
(92) vardef_array_assign
(93) vardef_array
(94) structure
(95) allocate
(96) typecast
(97) variable
(98) constant, "constexpr bool"
(99) constant, "constexpr uint"
(100) constant, "constexpr int"
(101) constant, "constexpr float"
(102) null, "constexpr float"
(103) string_constant, "constexpr float"
(104) char_constant, "constexpr float"
(105) operator, "="
(106) assign_operator, "+"
(107) assign_operator, "-"
(108) assign_operator, "*"
(109) assign_operator, "/"
(110) assign_operator, "^"
(111) assign_operator, "&"
(112) assign_operator, "%"
(113) assign_operator, "&&"
(114) assign_operator, "||"
(115) assign_operator, "|"
(116) assign_operator, "<<"
(117) assign_operator, ">>"
(118) operator, "||"
(119) operator, "&&"
(120) operator, "|"
(121) operator, "^"
(122) operator, "&"
(123) operator, "=="
(124) operator, "!="
(125) operator, "<="
(126) operator, "<"
(127) operator, ">="
(128) operator, ">"
(129) operator, "+"
(130) operator, "-"
(131) operator, "~"
(132) operator, "!"
(133) operator, "*"
(134) operator, "/"
(135) operator, "%"
(136) operator, "<<"
(137) operator, ">>"
(138) member
(139) operator, "->"
(140) operator, "()"
(141) operator, "[]"
(142) rep_operator, "->"
(143) count

-- Action table:
[1]
	$ => Reduce #0 extern_definitionlist
	IDENT => Reduce #0 extern_definitionlist
	"extern" => Shift goto 4
	"function" => Reduce #0 extern_definitionlist
	"procedure" => Reduce #0 extern_definitionlist
	"const" => Reduce #0 extern_definitionlist
	"any" => Reduce #0 extern_definitionlist
	"class" => Reduce #0 extern_definitionlist
	"struct" => Reduce #0 extern_definitionlist
	"typedef" => Reduce #0 extern_definitionlist
	"generic" => Reduce #0 extern_definitionlist
	"interface" => Reduce #0 extern_definitionlist
	"namespace" => Reduce #0 extern_definitionlist
	"private" => Reduce #0 extern_definitionlist
	"public" => Reduce #0 extern_definitionlist
	"main" => Reduce #0 extern_definitionlist
[2]
	$ => Reduce #0 free_definitionlist
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"namespace" => Shift goto 26
	"private" => Shift goto 27
	"public" => Shift goto 28
	"main" => Reduce #0 free_definitionlist
[3]
	$ => Reduce #0 extern_definitionlist
	IDENT => Reduce #0 extern_definitionlist
	"extern" => Shift goto 4
	"function" => Reduce #0 extern_definitionlist
	"procedure" => Reduce #0 extern_definitionlist
	"const" => Reduce #0 extern_definitionlist
	"any" => Reduce #0 extern_definitionlist
	"class" => Reduce #0 extern_definitionlist
	"struct" => Reduce #0 extern_definitionlist
	"typedef" => Reduce #0 extern_definitionlist
	"generic" => Reduce #0 extern_definitionlist
	"interface" => Reduce #0 extern_definitionlist
	"namespace" => Reduce #0 extern_definitionlist
	"private" => Reduce #0 extern_definitionlist
	"public" => Reduce #0 extern_definitionlist
	"main" => Reduce #0 extern_definitionlist
[4]
	DQSTRING => Shift goto 30
[5]
	$ => Reduce #0 main_procedure
	"main" => Shift goto 32
[6]
	$ => Reduce #0 free_definitionlist
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"namespace" => Shift goto 26
	"private" => Shift goto 27
	"public" => Shift goto 28
	"main" => Reduce #0 free_definitionlist
[7]
	IDENT => Reduce #1 generic_typename
	'(' => Reduce #1 generic_typename
	')' => Reduce #1 generic_typename
	"..." => Reduce #1 generic_typename
	',' => Reduce #1 generic_typename
	'<' => Shift goto 34
	'>' => Reduce #1 generic_typename
	'&' => Reduce #1 generic_typename
	'^' => Reduce #1 generic_typename
	'{' => Reduce #1 generic_typename
	':' => Reduce #1 generic_typename
[8]
	IDENT => Reduce #1 typespec call typespec ""
	'(' => Reduce #1 typespec call typespec ""
	')' => Reduce #1 typespec call typespec ""
	"..." => Reduce #1 typespec call typespec ""
	',' => Reduce #1 typespec call typespec ""
	'&' => Shift goto 35
	'^' => Shift goto 36
	':' => Reduce #1 typespec call typespec ""
[9]
	IDENT => Shift goto 37
[10]
	';' => Shift goto 38
[11]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[12]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[13]
	$ => Reduce #1 free_definition
	IDENT => Reduce #1 free_definition
	"function" => Reduce #1 free_definition
	"procedure" => Reduce #1 free_definition
	"const" => Reduce #1 free_definition
	"any" => Reduce #1 free_definition
	"class" => Reduce #1 free_definition
	"struct" => Reduce #1 free_definition
	"typedef" => Reduce #1 free_definition
	"generic" => Reduce #1 free_definition
	"interface" => Reduce #1 free_definition
	"namespace" => Reduce #1 free_definition
	"private" => Reduce #1 free_definition
	"public" => Reduce #1 free_definition
	"main" => Reduce #1 free_definition
[14]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[15]
	"function" => Shift goto 39
	"procedure" => Shift goto 40
[16]
	$ => Reduce #1 free_definition call definition 1
	IDENT => Reduce #1 free_definition call definition 1
	"function" => Reduce #1 free_definition call definition 1
	"procedure" => Reduce #1 free_definition call definition 1
	"const" => Reduce #1 free_definition call definition 1
	"any" => Reduce #1 free_definition call definition 1
	"class" => Reduce #1 free_definition call definition 1
	"struct" => Reduce #1 free_definition call definition 1
	"typedef" => Reduce #1 free_definition call definition 1
	"generic" => Reduce #1 free_definition call definition 1
	"interface" => Reduce #1 free_definition call definition 1
	"namespace" => Reduce #1 free_definition call definition 1
	"private" => Reduce #1 free_definition call definition 1
	"public" => Reduce #1 free_definition call definition 1
	"main" => Reduce #1 free_definition call definition 1
[17]
	';' => Shift goto 41
[18]
	IDENT => Reduce #1 typename
	'(' => Reduce #1 typename
	')' => Reduce #1 typename
	"..." => Reduce #1 typename
	',' => Reduce #1 typename
	"::" => Shift goto 42
	'<' => Reduce #1 typename
	'>' => Reduce #1 typename
	'&' => Reduce #1 typename
	'^' => Reduce #1 typename
	'{' => Reduce #1 typename
	':' => Reduce #1 typename
[19]
	IDENT => Shift goto 18
[20]
	"const" => Shift goto 44
	"class" => Shift goto 45
	"struct" => Shift goto 46
[21]
	IDENT => Shift goto 47
[22]
	IDENT => Shift goto 48
[23]
	IDENT => Shift goto 18
	"function" => Shift goto 51
	"procedure" => Shift goto 52
[24]
	"class" => Shift goto 53
	"struct" => Shift goto 54
[25]
	IDENT => Shift goto 55
[26]
	IDENT => Shift goto 56
[27]
	"function" => Reduce #1 linkage call linkage {private=true,linkage="internal"}
	"procedure" => Reduce #1 linkage call linkage {private=true,linkage="internal"}
	"operator" => Reduce #1 linkage call linkage {private=true,linkage="internal"}
	"constructor" => Reduce #1 linkage call linkage {private=true,linkage="internal"}
[28]
	"function" => Reduce #1 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #1 linkage call linkage {private=false,linkage="external"}
	"operator" => Reduce #1 linkage call linkage {private=false,linkage="external"}
	"constructor" => Reduce #1 linkage call linkage {private=false,linkage="external"}
[29]
	$ => Reduce #2 extern_definitionlist
	IDENT => Reduce #2 extern_definitionlist
	"function" => Reduce #2 extern_definitionlist
	"procedure" => Reduce #2 extern_definitionlist
	"const" => Reduce #2 extern_definitionlist
	"any" => Reduce #2 extern_definitionlist
	"class" => Reduce #2 extern_definitionlist
	"struct" => Reduce #2 extern_definitionlist
	"typedef" => Reduce #2 extern_definitionlist
	"generic" => Reduce #2 extern_definitionlist
	"interface" => Reduce #2 extern_definitionlist
	"namespace" => Reduce #2 extern_definitionlist
	"private" => Reduce #2 extern_definitionlist
	"public" => Reduce #2 extern_definitionlist
	"main" => Reduce #2 extern_definitionlist
[30]
	"function" => Shift goto 57
	"procedure" => Shift goto 58
[31]
	$ => Accept
[32]
	'{' => Shift goto 59
[33]
	$ => Reduce #2 free_definitionlist
	"main" => Reduce #2 free_definitionlist
[34]
	IDENT => Shift goto 18
[35]
	IDENT => Reduce #2 typespec call typespec "&"
	'(' => Reduce #2 typespec call typespec "&"
	')' => Reduce #2 typespec call typespec "&"
	"..." => Reduce #2 typespec call typespec "&"
	',' => Reduce #2 typespec call typespec "&"
	':' => Reduce #2 typespec call typespec "&"
[36]
	IDENT => Reduce #2 typespec call typespec "^"
	'(' => Reduce #2 typespec call typespec "^"
	')' => Reduce #2 typespec call typespec "^"
	"..." => Reduce #2 typespec call typespec "^"
	',' => Reduce #2 typespec call typespec "^"
	'&' => Shift goto 63
	':' => Reduce #2 typespec call typespec "^"
[37]
	';' => Reduce #2 variabledefinition call vardef
	'=' => Shift goto 64
	'[' => Shift goto 65
[38]
	$ => Reduce #2 free_definition call definition 1
	IDENT => Reduce #2 free_definition call definition 1
	"function" => Reduce #2 free_definition call definition 1
	"procedure" => Reduce #2 free_definition call definition 1
	"const" => Reduce #2 free_definition call definition 1
	"any" => Reduce #2 free_definition call definition 1
	"class" => Reduce #2 free_definition call definition 1
	"struct" => Reduce #2 free_definition call definition 1
	"typedef" => Reduce #2 free_definition call definition 1
	"generic" => Reduce #2 free_definition call definition 1
	"interface" => Reduce #2 free_definition call definition 1
	"namespace" => Reduce #2 free_definition call definition 1
	"private" => Reduce #2 free_definition call definition 1
	"public" => Reduce #2 free_definition call definition 1
	"main" => Reduce #2 free_definition call definition 1
[39]
	IDENT => Shift goto 66
[40]
	IDENT => Shift goto 67
[41]
	$ => Reduce #2 free_definition call definition 1
	IDENT => Reduce #2 free_definition call definition 1
	"function" => Reduce #2 free_definition call definition 1
	"procedure" => Reduce #2 free_definition call definition 1
	"const" => Reduce #2 free_definition call definition 1
	"any" => Reduce #2 free_definition call definition 1
	"class" => Reduce #2 free_definition call definition 1
	"struct" => Reduce #2 free_definition call definition 1
	"typedef" => Reduce #2 free_definition call definition 1
	"generic" => Reduce #2 free_definition call definition 1
	"interface" => Reduce #2 free_definition call definition 1
	"namespace" => Reduce #2 free_definition call definition 1
	"private" => Reduce #2 free_definition call definition 1
	"public" => Reduce #2 free_definition call definition 1
	"main" => Reduce #2 free_definition call definition 1
[42]
	IDENT => Shift goto 18
[43]
	IDENT => Reduce #2 typespec call typespec "const "
	'(' => Reduce #2 typespec call typespec "const "
	')' => Reduce #2 typespec call typespec "const "
	"..." => Reduce #2 typespec call typespec "const "
	',' => Reduce #2 typespec call typespec "const "
	'&' => Shift goto 69
	'^' => Shift goto 70
	':' => Reduce #2 typespec call typespec "const "
[44]
	"class" => Shift goto 71
	"struct" => Shift goto 72
[45]
	'^' => Shift goto 73
[46]
	'^' => Shift goto 74
[47]
	'{' => Shift goto 75
	':' => Shift goto 76
[48]
	'{' => Shift goto 77
[49]
	IDENT => Reduce #1 typepath call typespec ""
	',' => Reduce #1 typepath call typespec ""
	'>' => Reduce #1 typepath call typespec ""
	'{' => Reduce #1 typepath call typespec ""
[50]
	IDENT => Shift goto 78
[51]
	IDENT => Shift goto 79
[52]
	IDENT => Shift goto 80
[53]
	IDENT => Shift goto 81
[54]
	IDENT => Shift goto 82
[55]
	'{' => Shift goto 83
[56]
	'{' => Shift goto 84
[57]
	IDENT => Shift goto 85
[58]
	IDENT => Shift goto 86
[59]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[60]
	',' => Shift goto 118
	'>' => Reduce #1 generic_instance
[61]
	'>' => Reduce #1 generic_instancelist call generic_instancelist
[62]
	'>' => Shift goto 119
[63]
	IDENT => Reduce #3 typespec call typespec "^&"
	'(' => Reduce #3 typespec call typespec "^&"
	')' => Reduce #3 typespec call typespec "^&"
	"..." => Reduce #3 typespec call typespec "^&"
	',' => Reduce #3 typespec call typespec "^&"
	':' => Reduce #3 typespec call typespec "^&"
[64]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[65]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[66]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[67]
	'(' => Shift goto 126
[68]
	IDENT => Reduce #3 typename
	'(' => Reduce #3 typename
	')' => Reduce #3 typename
	"..." => Reduce #3 typename
	',' => Reduce #3 typename
	'<' => Reduce #3 typename
	'>' => Reduce #3 typename
	'&' => Reduce #3 typename
	'^' => Reduce #3 typename
	'{' => Reduce #3 typename
	':' => Reduce #3 typename
[69]
	IDENT => Reduce #3 typespec call typespec "const&"
	'(' => Reduce #3 typespec call typespec "const&"
	')' => Reduce #3 typespec call typespec "const&"
	"..." => Reduce #3 typespec call typespec "const&"
	',' => Reduce #3 typespec call typespec "const&"
	':' => Reduce #3 typespec call typespec "const&"
[70]
	IDENT => Reduce #3 typespec call typespec "const^"
	'(' => Reduce #3 typespec call typespec "const^"
	')' => Reduce #3 typespec call typespec "const^"
	"..." => Reduce #3 typespec call typespec "const^"
	',' => Reduce #3 typespec call typespec "const^"
	'&' => Shift goto 127
	':' => Reduce #3 typespec call typespec "const^"
[71]
	'^' => Shift goto 128
[72]
	'^' => Shift goto 129
[73]
	IDENT => Reduce #3 typespec call typespec_key "class^"
	'(' => Reduce #3 typespec call typespec_key "class^"
	')' => Reduce #3 typespec call typespec_key "class^"
	"..." => Reduce #3 typespec call typespec_key "class^"
	',' => Reduce #3 typespec call typespec_key "class^"
	':' => Reduce #3 typespec call typespec_key "class^"
[74]
	IDENT => Reduce #3 typespec call typespec_key "class^"
	'(' => Reduce #3 typespec call typespec_key "class^"
	')' => Reduce #3 typespec call typespec_key "class^"
	"..." => Reduce #3 typespec call typespec_key "class^"
	',' => Reduce #3 typespec call typespec_key "class^"
	':' => Reduce #3 typespec call typespec_key "class^"
[75]
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"private" => Shift goto 27
	"public" => Shift goto 28
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"destructor" => Shift goto 141
[76]
	IDENT => Shift goto 18
[77]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto 149
[78]
	';' => Reduce #3 typedefinition call typedef
[79]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[80]
	'(' => Shift goto 151
[81]
	'<' => Shift goto 152
[82]
	'<' => Shift goto 153
[83]
	"function" => Shift goto 156
	"procedure" => Shift goto 157
	"operator" => Shift goto 158
	'}' => Reduce #0 ininterf_definitionlist
[84]
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 namespace_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"namespace" => Shift goto 26
	"private" => Shift goto 27
	"public" => Shift goto 28
[85]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[86]
	'(' => Shift goto 168
[87]
	';' => Shift goto 169
[88]
	$ => Reduce #1 statement call definition
	BOOLEAN => Reduce #1 statement call definition
	IDENT => Reduce #1 statement call definition
	DQSTRING => Reduce #1 statement call definition
	SQSTRING => Reduce #1 statement call definition
	CARDINAL => Reduce #1 statement call definition
	INTEGER => Reduce #1 statement call definition
	FLOAT => Reduce #1 statement call definition
	"function" => Reduce #1 statement call definition
	'(' => Reduce #1 statement call definition
	"procedure" => Reduce #1 statement call definition
	'&' => Reduce #1 statement call definition
	"typedef" => Reduce #1 statement call definition
	'{' => Reduce #1 statement call definition
	'}' => Reduce #1 statement call definition
	"private" => Reduce #1 statement call definition
	"public" => Reduce #1 statement call definition
	'+' => Reduce #1 statement call definition
	'-' => Reduce #1 statement call definition
	'*' => Reduce #1 statement call definition
	'~' => Reduce #1 statement call definition
	'!' => Reduce #1 statement call definition
	"var" => Reduce #1 statement call definition
	"return" => Reduce #1 statement call definition
	"delete" => Reduce #1 statement call definition
	"if" => Reduce #1 statement call definition
	"while" => Reduce #1 statement call definition
	"with" => Reduce #1 statement call definition
	"new" => Reduce #1 statement call definition
	"cast" => Reduce #1 statement call definition
	"null" => Reduce #1 statement call definition
[89]
	'}' => Shift goto 170
[90]
	'}' => Reduce #1 codeblock call codeblock
[91]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[92]
	'(' => Shift goto 173
	';' => Shift goto 174
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[93]
	'(' => Reduce #1 expression
	')' => Reduce #1 expression
	';' => Reduce #1 expression
	',' => Reduce #1 expression
	'<' => Reduce #1 expression
	'>' => Reduce #1 expression
	'&' => Reduce #1 expression
	'^' => Reduce #1 expression
	'}' => Reduce #1 expression
	"->" => Reduce #1 expression
	'=' => Reduce #1 expression
	'+' => Reduce #1 expression
	'-' => Reduce #1 expression
	'*' => Reduce #1 expression
	'/' => Reduce #1 expression
	'%' => Reduce #1 expression
	"&&" => Reduce #1 expression
	"||" => Reduce #1 expression
	'|' => Reduce #1 expression
	"<<" => Reduce #1 expression
	">>" => Reduce #1 expression
	'[' => Reduce #1 expression
	']' => Reduce #1 expression
	"==" => Reduce #1 expression
	"!=" => Reduce #1 expression
	">=" => Reduce #1 expression
	"<=" => Reduce #1 expression
	"+=" => Reduce #1 expression
	"-=" => Reduce #1 expression
	"*=" => Reduce #1 expression
	"/=" => Reduce #1 expression
	"^=" => Reduce #1 expression
	"&=" => Reduce #1 expression
	"%=" => Reduce #1 expression
	"&&=" => Reduce #1 expression
	"||=" => Reduce #1 expression
	"|=" => Reduce #1 expression
	"<<=" => Reduce #1 expression
	">>=" => Reduce #1 expression
	'.' => Reduce #1 expression
[94]
	'(' => Reduce #1 expression call constant "constexpr bool"
	')' => Reduce #1 expression call constant "constexpr bool"
	';' => Reduce #1 expression call constant "constexpr bool"
	',' => Reduce #1 expression call constant "constexpr bool"
	'<' => Reduce #1 expression call constant "constexpr bool"
	'>' => Reduce #1 expression call constant "constexpr bool"
	'&' => Reduce #1 expression call constant "constexpr bool"
	'^' => Reduce #1 expression call constant "constexpr bool"
	'}' => Reduce #1 expression call constant "constexpr bool"
	"->" => Reduce #1 expression call constant "constexpr bool"
	'=' => Reduce #1 expression call constant "constexpr bool"
	'+' => Reduce #1 expression call constant "constexpr bool"
	'-' => Reduce #1 expression call constant "constexpr bool"
	'*' => Reduce #1 expression call constant "constexpr bool"
	'/' => Reduce #1 expression call constant "constexpr bool"
	'%' => Reduce #1 expression call constant "constexpr bool"
	"&&" => Reduce #1 expression call constant "constexpr bool"
	"||" => Reduce #1 expression call constant "constexpr bool"
	'|' => Reduce #1 expression call constant "constexpr bool"
	"<<" => Reduce #1 expression call constant "constexpr bool"
	">>" => Reduce #1 expression call constant "constexpr bool"
	'[' => Reduce #1 expression call constant "constexpr bool"
	']' => Reduce #1 expression call constant "constexpr bool"
	"==" => Reduce #1 expression call constant "constexpr bool"
	"!=" => Reduce #1 expression call constant "constexpr bool"
	">=" => Reduce #1 expression call constant "constexpr bool"
	"<=" => Reduce #1 expression call constant "constexpr bool"
	"+=" => Reduce #1 expression call constant "constexpr bool"
	"-=" => Reduce #1 expression call constant "constexpr bool"
	"*=" => Reduce #1 expression call constant "constexpr bool"
	"/=" => Reduce #1 expression call constant "constexpr bool"
	"^=" => Reduce #1 expression call constant "constexpr bool"
	"&=" => Reduce #1 expression call constant "constexpr bool"
	"%=" => Reduce #1 expression call constant "constexpr bool"
	"&&=" => Reduce #1 expression call constant "constexpr bool"
	"||=" => Reduce #1 expression call constant "constexpr bool"
	"|=" => Reduce #1 expression call constant "constexpr bool"
	"<<=" => Reduce #1 expression call constant "constexpr bool"
	">>=" => Reduce #1 expression call constant "constexpr bool"
	'.' => Reduce #1 expression call constant "constexpr bool"
[95]
	'(' => Reduce #1 expression call variable
	')' => Reduce #1 expression call variable
	';' => Reduce #1 expression call variable
	',' => Reduce #1 expression call variable
	'<' => Reduce #1 expression call variable
	'>' => Reduce #1 expression call variable
	'&' => Reduce #1 expression call variable
	'^' => Reduce #1 expression call variable
	'}' => Reduce #1 expression call variable
	"->" => Reduce #1 expression call variable
	'=' => Reduce #1 expression call variable
	'+' => Reduce #1 expression call variable
	'-' => Reduce #1 expression call variable
	'*' => Reduce #1 expression call variable
	'/' => Reduce #1 expression call variable
	'%' => Reduce #1 expression call variable
	"&&" => Reduce #1 expression call variable
	"||" => Reduce #1 expression call variable
	'|' => Reduce #1 expression call variable
	"<<" => Reduce #1 expression call variable
	">>" => Reduce #1 expression call variable
	'[' => Reduce #1 expression call variable
	']' => Reduce #1 expression call variable
	"==" => Reduce #1 expression call variable
	"!=" => Reduce #1 expression call variable
	">=" => Reduce #1 expression call variable
	"<=" => Reduce #1 expression call variable
	"+=" => Reduce #1 expression call variable
	"-=" => Reduce #1 expression call variable
	"*=" => Reduce #1 expression call variable
	"/=" => Reduce #1 expression call variable
	"^=" => Reduce #1 expression call variable
	"&=" => Reduce #1 expression call variable
	"%=" => Reduce #1 expression call variable
	"&&=" => Reduce #1 expression call variable
	"||=" => Reduce #1 expression call variable
	"|=" => Reduce #1 expression call variable
	"<<=" => Reduce #1 expression call variable
	">>=" => Reduce #1 expression call variable
	'.' => Reduce #1 expression call variable
[96]
	'(' => Reduce #1 expression call string_constant "constexpr float"
	')' => Reduce #1 expression call string_constant "constexpr float"
	';' => Reduce #1 expression call string_constant "constexpr float"
	',' => Reduce #1 expression call string_constant "constexpr float"
	'<' => Reduce #1 expression call string_constant "constexpr float"
	'>' => Reduce #1 expression call string_constant "constexpr float"
	'&' => Reduce #1 expression call string_constant "constexpr float"
	'^' => Reduce #1 expression call string_constant "constexpr float"
	'}' => Reduce #1 expression call string_constant "constexpr float"
	"->" => Reduce #1 expression call string_constant "constexpr float"
	'=' => Reduce #1 expression call string_constant "constexpr float"
	'+' => Reduce #1 expression call string_constant "constexpr float"
	'-' => Reduce #1 expression call string_constant "constexpr float"
	'*' => Reduce #1 expression call string_constant "constexpr float"
	'/' => Reduce #1 expression call string_constant "constexpr float"
	'%' => Reduce #1 expression call string_constant "constexpr float"
	"&&" => Reduce #1 expression call string_constant "constexpr float"
	"||" => Reduce #1 expression call string_constant "constexpr float"
	'|' => Reduce #1 expression call string_constant "constexpr float"
	"<<" => Reduce #1 expression call string_constant "constexpr float"
	">>" => Reduce #1 expression call string_constant "constexpr float"
	'[' => Reduce #1 expression call string_constant "constexpr float"
	']' => Reduce #1 expression call string_constant "constexpr float"
	"==" => Reduce #1 expression call string_constant "constexpr float"
	"!=" => Reduce #1 expression call string_constant "constexpr float"
	">=" => Reduce #1 expression call string_constant "constexpr float"
	"<=" => Reduce #1 expression call string_constant "constexpr float"
	"+=" => Reduce #1 expression call string_constant "constexpr float"
	"-=" => Reduce #1 expression call string_constant "constexpr float"
	"*=" => Reduce #1 expression call string_constant "constexpr float"
	"/=" => Reduce #1 expression call string_constant "constexpr float"
	"^=" => Reduce #1 expression call string_constant "constexpr float"
	"&=" => Reduce #1 expression call string_constant "constexpr float"
	"%=" => Reduce #1 expression call string_constant "constexpr float"
	"&&=" => Reduce #1 expression call string_constant "constexpr float"
	"||=" => Reduce #1 expression call string_constant "constexpr float"
	"|=" => Reduce #1 expression call string_constant "constexpr float"
	"<<=" => Reduce #1 expression call string_constant "constexpr float"
	">>=" => Reduce #1 expression call string_constant "constexpr float"
	'.' => Reduce #1 expression call string_constant "constexpr float"
[97]
	'(' => Reduce #1 expression call char_constant "constexpr float"
	')' => Reduce #1 expression call char_constant "constexpr float"
	';' => Reduce #1 expression call char_constant "constexpr float"
	',' => Reduce #1 expression call char_constant "constexpr float"
	'<' => Reduce #1 expression call char_constant "constexpr float"
	'>' => Reduce #1 expression call char_constant "constexpr float"
	'&' => Reduce #1 expression call char_constant "constexpr float"
	'^' => Reduce #1 expression call char_constant "constexpr float"
	'}' => Reduce #1 expression call char_constant "constexpr float"
	"->" => Reduce #1 expression call char_constant "constexpr float"
	'=' => Reduce #1 expression call char_constant "constexpr float"
	'+' => Reduce #1 expression call char_constant "constexpr float"
	'-' => Reduce #1 expression call char_constant "constexpr float"
	'*' => Reduce #1 expression call char_constant "constexpr float"
	'/' => Reduce #1 expression call char_constant "constexpr float"
	'%' => Reduce #1 expression call char_constant "constexpr float"
	"&&" => Reduce #1 expression call char_constant "constexpr float"
	"||" => Reduce #1 expression call char_constant "constexpr float"
	'|' => Reduce #1 expression call char_constant "constexpr float"
	"<<" => Reduce #1 expression call char_constant "constexpr float"
	">>" => Reduce #1 expression call char_constant "constexpr float"
	'[' => Reduce #1 expression call char_constant "constexpr float"
	']' => Reduce #1 expression call char_constant "constexpr float"
	"==" => Reduce #1 expression call char_constant "constexpr float"
	"!=" => Reduce #1 expression call char_constant "constexpr float"
	">=" => Reduce #1 expression call char_constant "constexpr float"
	"<=" => Reduce #1 expression call char_constant "constexpr float"
	"+=" => Reduce #1 expression call char_constant "constexpr float"
	"-=" => Reduce #1 expression call char_constant "constexpr float"
	"*=" => Reduce #1 expression call char_constant "constexpr float"
	"/=" => Reduce #1 expression call char_constant "constexpr float"
	"^=" => Reduce #1 expression call char_constant "constexpr float"
	"&=" => Reduce #1 expression call char_constant "constexpr float"
	"%=" => Reduce #1 expression call char_constant "constexpr float"
	"&&=" => Reduce #1 expression call char_constant "constexpr float"
	"||=" => Reduce #1 expression call char_constant "constexpr float"
	"|=" => Reduce #1 expression call char_constant "constexpr float"
	"<<=" => Reduce #1 expression call char_constant "constexpr float"
	">>=" => Reduce #1 expression call char_constant "constexpr float"
	'.' => Reduce #1 expression call char_constant "constexpr float"
[98]
	'(' => Reduce #1 expression call constant "constexpr uint"
	')' => Reduce #1 expression call constant "constexpr uint"
	';' => Reduce #1 expression call constant "constexpr uint"
	',' => Reduce #1 expression call constant "constexpr uint"
	'<' => Reduce #1 expression call constant "constexpr uint"
	'>' => Reduce #1 expression call constant "constexpr uint"
	'&' => Reduce #1 expression call constant "constexpr uint"
	'^' => Reduce #1 expression call constant "constexpr uint"
	'}' => Reduce #1 expression call constant "constexpr uint"
	"->" => Reduce #1 expression call constant "constexpr uint"
	'=' => Reduce #1 expression call constant "constexpr uint"
	'+' => Reduce #1 expression call constant "constexpr uint"
	'-' => Reduce #1 expression call constant "constexpr uint"
	'*' => Reduce #1 expression call constant "constexpr uint"
	'/' => Reduce #1 expression call constant "constexpr uint"
	'%' => Reduce #1 expression call constant "constexpr uint"
	"&&" => Reduce #1 expression call constant "constexpr uint"
	"||" => Reduce #1 expression call constant "constexpr uint"
	'|' => Reduce #1 expression call constant "constexpr uint"
	"<<" => Reduce #1 expression call constant "constexpr uint"
	">>" => Reduce #1 expression call constant "constexpr uint"
	'[' => Reduce #1 expression call constant "constexpr uint"
	']' => Reduce #1 expression call constant "constexpr uint"
	"==" => Reduce #1 expression call constant "constexpr uint"
	"!=" => Reduce #1 expression call constant "constexpr uint"
	">=" => Reduce #1 expression call constant "constexpr uint"
	"<=" => Reduce #1 expression call constant "constexpr uint"
	"+=" => Reduce #1 expression call constant "constexpr uint"
	"-=" => Reduce #1 expression call constant "constexpr uint"
	"*=" => Reduce #1 expression call constant "constexpr uint"
	"/=" => Reduce #1 expression call constant "constexpr uint"
	"^=" => Reduce #1 expression call constant "constexpr uint"
	"&=" => Reduce #1 expression call constant "constexpr uint"
	"%=" => Reduce #1 expression call constant "constexpr uint"
	"&&=" => Reduce #1 expression call constant "constexpr uint"
	"||=" => Reduce #1 expression call constant "constexpr uint"
	"|=" => Reduce #1 expression call constant "constexpr uint"
	"<<=" => Reduce #1 expression call constant "constexpr uint"
	">>=" => Reduce #1 expression call constant "constexpr uint"
	'.' => Reduce #1 expression call constant "constexpr uint"
[99]
	'(' => Reduce #1 expression call constant "constexpr int"
	')' => Reduce #1 expression call constant "constexpr int"
	';' => Reduce #1 expression call constant "constexpr int"
	',' => Reduce #1 expression call constant "constexpr int"
	'<' => Reduce #1 expression call constant "constexpr int"
	'>' => Reduce #1 expression call constant "constexpr int"
	'&' => Reduce #1 expression call constant "constexpr int"
	'^' => Reduce #1 expression call constant "constexpr int"
	'}' => Reduce #1 expression call constant "constexpr int"
	"->" => Reduce #1 expression call constant "constexpr int"
	'=' => Reduce #1 expression call constant "constexpr int"
	'+' => Reduce #1 expression call constant "constexpr int"
	'-' => Reduce #1 expression call constant "constexpr int"
	'*' => Reduce #1 expression call constant "constexpr int"
	'/' => Reduce #1 expression call constant "constexpr int"
	'%' => Reduce #1 expression call constant "constexpr int"
	"&&" => Reduce #1 expression call constant "constexpr int"
	"||" => Reduce #1 expression call constant "constexpr int"
	'|' => Reduce #1 expression call constant "constexpr int"
	"<<" => Reduce #1 expression call constant "constexpr int"
	">>" => Reduce #1 expression call constant "constexpr int"
	'[' => Reduce #1 expression call constant "constexpr int"
	']' => Reduce #1 expression call constant "constexpr int"
	"==" => Reduce #1 expression call constant "constexpr int"
	"!=" => Reduce #1 expression call constant "constexpr int"
	">=" => Reduce #1 expression call constant "constexpr int"
	"<=" => Reduce #1 expression call constant "constexpr int"
	"+=" => Reduce #1 expression call constant "constexpr int"
	"-=" => Reduce #1 expression call constant "constexpr int"
	"*=" => Reduce #1 expression call constant "constexpr int"
	"/=" => Reduce #1 expression call constant "constexpr int"
	"^=" => Reduce #1 expression call constant "constexpr int"
	"&=" => Reduce #1 expression call constant "constexpr int"
	"%=" => Reduce #1 expression call constant "constexpr int"
	"&&=" => Reduce #1 expression call constant "constexpr int"
	"||=" => Reduce #1 expression call constant "constexpr int"
	"|=" => Reduce #1 expression call constant "constexpr int"
	"<<=" => Reduce #1 expression call constant "constexpr int"
	">>=" => Reduce #1 expression call constant "constexpr int"
	'.' => Reduce #1 expression call constant "constexpr int"
[100]
	'(' => Reduce #1 expression call constant "constexpr float"
	')' => Reduce #1 expression call constant "constexpr float"
	';' => Reduce #1 expression call constant "constexpr float"
	',' => Reduce #1 expression call constant "constexpr float"
	'<' => Reduce #1 expression call constant "constexpr float"
	'>' => Reduce #1 expression call constant "constexpr float"
	'&' => Reduce #1 expression call constant "constexpr float"
	'^' => Reduce #1 expression call constant "constexpr float"
	'}' => Reduce #1 expression call constant "constexpr float"
	"->" => Reduce #1 expression call constant "constexpr float"
	'=' => Reduce #1 expression call constant "constexpr float"
	'+' => Reduce #1 expression call constant "constexpr float"
	'-' => Reduce #1 expression call constant "constexpr float"
	'*' => Reduce #1 expression call constant "constexpr float"
	'/' => Reduce #1 expression call constant "constexpr float"
	'%' => Reduce #1 expression call constant "constexpr float"
	"&&" => Reduce #1 expression call constant "constexpr float"
	"||" => Reduce #1 expression call constant "constexpr float"
	'|' => Reduce #1 expression call constant "constexpr float"
	"<<" => Reduce #1 expression call constant "constexpr float"
	">>" => Reduce #1 expression call constant "constexpr float"
	'[' => Reduce #1 expression call constant "constexpr float"
	']' => Reduce #1 expression call constant "constexpr float"
	"==" => Reduce #1 expression call constant "constexpr float"
	"!=" => Reduce #1 expression call constant "constexpr float"
	">=" => Reduce #1 expression call constant "constexpr float"
	"<=" => Reduce #1 expression call constant "constexpr float"
	"+=" => Reduce #1 expression call constant "constexpr float"
	"-=" => Reduce #1 expression call constant "constexpr float"
	"*=" => Reduce #1 expression call constant "constexpr float"
	"/=" => Reduce #1 expression call constant "constexpr float"
	"^=" => Reduce #1 expression call constant "constexpr float"
	"&=" => Reduce #1 expression call constant "constexpr float"
	"%=" => Reduce #1 expression call constant "constexpr float"
	"&&=" => Reduce #1 expression call constant "constexpr float"
	"||=" => Reduce #1 expression call constant "constexpr float"
	"|=" => Reduce #1 expression call constant "constexpr float"
	"<<=" => Reduce #1 expression call constant "constexpr float"
	">>=" => Reduce #1 expression call constant "constexpr float"
	'.' => Reduce #1 expression call constant "constexpr float"
[101]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[102]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[103]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Shift goto 214
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[104]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[105]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[106]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[107]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[108]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[109]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[110]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[111]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[112]
	'(' => Shift goto 223
[113]
	'(' => Shift goto 224
[114]
	'(' => Shift goto 225
[115]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[116]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[117]
	'(' => Reduce #1 expression call null "constexpr float"
	')' => Reduce #1 expression call null "constexpr float"
	';' => Reduce #1 expression call null "constexpr float"
	',' => Reduce #1 expression call null "constexpr float"
	'<' => Reduce #1 expression call null "constexpr float"
	'>' => Reduce #1 expression call null "constexpr float"
	'&' => Reduce #1 expression call null "constexpr float"
	'^' => Reduce #1 expression call null "constexpr float"
	'}' => Reduce #1 expression call null "constexpr float"
	"->" => Reduce #1 expression call null "constexpr float"
	'=' => Reduce #1 expression call null "constexpr float"
	'+' => Reduce #1 expression call null "constexpr float"
	'-' => Reduce #1 expression call null "constexpr float"
	'*' => Reduce #1 expression call null "constexpr float"
	'/' => Reduce #1 expression call null "constexpr float"
	'%' => Reduce #1 expression call null "constexpr float"
	"&&" => Reduce #1 expression call null "constexpr float"
	"||" => Reduce #1 expression call null "constexpr float"
	'|' => Reduce #1 expression call null "constexpr float"
	"<<" => Reduce #1 expression call null "constexpr float"
	">>" => Reduce #1 expression call null "constexpr float"
	'[' => Reduce #1 expression call null "constexpr float"
	']' => Reduce #1 expression call null "constexpr float"
	"==" => Reduce #1 expression call null "constexpr float"
	"!=" => Reduce #1 expression call null "constexpr float"
	">=" => Reduce #1 expression call null "constexpr float"
	"<=" => Reduce #1 expression call null "constexpr float"
	"+=" => Reduce #1 expression call null "constexpr float"
	"-=" => Reduce #1 expression call null "constexpr float"
	"*=" => Reduce #1 expression call null "constexpr float"
	"/=" => Reduce #1 expression call null "constexpr float"
	"^=" => Reduce #1 expression call null "constexpr float"
	"&=" => Reduce #1 expression call null "constexpr float"
	"%=" => Reduce #1 expression call null "constexpr float"
	"&&=" => Reduce #1 expression call null "constexpr float"
	"||=" => Reduce #1 expression call null "constexpr float"
	"|=" => Reduce #1 expression call null "constexpr float"
	"<<=" => Reduce #1 expression call null "constexpr float"
	">>=" => Reduce #1 expression call null "constexpr float"
	'.' => Reduce #1 expression call null "constexpr float"
[118]
	IDENT => Shift goto 18
[119]
	IDENT => Reduce #4 generic_typename
	'(' => Reduce #4 generic_typename
	')' => Reduce #4 generic_typename
	"..." => Reduce #4 generic_typename
	',' => Reduce #4 generic_typename
	'>' => Reduce #4 generic_typename
	'&' => Reduce #4 generic_typename
	'^' => Reduce #4 generic_typename
	'{' => Reduce #4 generic_typename
	':' => Reduce #4 generic_typename
[120]
	'(' => Shift goto 173
	';' => Reduce #4 variabledefinition call vardef_assign
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[121]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'}' => Shift goto 214
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[122]
	'(' => Shift goto 173
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Shift goto 230
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[123]
	'(' => Shift goto 126
[124]
	$ => Reduce #4 functiondefinition call procdef {const=false}
	BOOLEAN => Reduce #4 functiondefinition call procdef {const=false}
	IDENT => Reduce #4 functiondefinition call procdef {const=false}
	DQSTRING => Reduce #4 functiondefinition call procdef {const=false}
	SQSTRING => Reduce #4 functiondefinition call procdef {const=false}
	CARDINAL => Reduce #4 functiondefinition call procdef {const=false}
	INTEGER => Reduce #4 functiondefinition call procdef {const=false}
	FLOAT => Reduce #4 functiondefinition call procdef {const=false}
	"function" => Reduce #4 functiondefinition call procdef {const=false}
	'(' => Reduce #4 functiondefinition call procdef {const=false}
	"procedure" => Reduce #4 functiondefinition call procdef {const=false}
	"const" => Reduce #4 functiondefinition call procdef {const=false}
	"operator" => Reduce #4 functiondefinition call procdef {const=false}
	'&' => Reduce #4 functiondefinition call procdef {const=false}
	"any" => Reduce #4 functiondefinition call procdef {const=false}
	"class" => Reduce #4 functiondefinition call procdef {const=false}
	"struct" => Reduce #4 functiondefinition call procdef {const=false}
	"typedef" => Reduce #4 functiondefinition call procdef {const=false}
	'{' => Reduce #4 functiondefinition call procdef {const=false}
	'}' => Reduce #4 functiondefinition call procdef {const=false}
	"generic" => Reduce #4 functiondefinition call procdef {const=false}
	"interface" => Reduce #4 functiondefinition call procdef {const=false}
	"namespace" => Reduce #4 functiondefinition call procdef {const=false}
	"private" => Reduce #4 functiondefinition call procdef {const=false}
	"public" => Reduce #4 functiondefinition call procdef {const=false}
	"constructor" => Reduce #4 functiondefinition call procdef {const=false}
	"destructor" => Reduce #4 functiondefinition call procdef {const=false}
	'+' => Reduce #4 functiondefinition call procdef {const=false}
	'-' => Reduce #4 functiondefinition call procdef {const=false}
	'*' => Reduce #4 functiondefinition call procdef {const=false}
	'~' => Reduce #4 functiondefinition call procdef {const=false}
	'!' => Reduce #4 functiondefinition call procdef {const=false}
	"main" => Reduce #4 functiondefinition call procdef {const=false}
	"var" => Reduce #4 functiondefinition call procdef {const=false}
	"return" => Reduce #4 functiondefinition call procdef {const=false}
	"delete" => Reduce #4 functiondefinition call procdef {const=false}
	"if" => Reduce #4 functiondefinition call procdef {const=false}
	"while" => Reduce #4 functiondefinition call procdef {const=false}
	"with" => Reduce #4 functiondefinition call procdef {const=false}
	"new" => Reduce #4 functiondefinition call procdef {const=false}
	"cast" => Reduce #4 functiondefinition call procdef {const=false}
	"null" => Reduce #4 functiondefinition call procdef {const=false}
[125]
	$ => Reduce #4 functiondefinition call procdef {const=true}
	BOOLEAN => Reduce #4 functiondefinition call procdef {const=true}
	IDENT => Reduce #4 functiondefinition call procdef {const=true}
	DQSTRING => Reduce #4 functiondefinition call procdef {const=true}
	SQSTRING => Reduce #4 functiondefinition call procdef {const=true}
	CARDINAL => Reduce #4 functiondefinition call procdef {const=true}
	INTEGER => Reduce #4 functiondefinition call procdef {const=true}
	FLOAT => Reduce #4 functiondefinition call procdef {const=true}
	"function" => Reduce #4 functiondefinition call procdef {const=true}
	'(' => Reduce #4 functiondefinition call procdef {const=true}
	"procedure" => Reduce #4 functiondefinition call procdef {const=true}
	"const" => Reduce #4 functiondefinition call procdef {const=true}
	"operator" => Reduce #4 functiondefinition call procdef {const=true}
	'&' => Reduce #4 functiondefinition call procdef {const=true}
	"any" => Reduce #4 functiondefinition call procdef {const=true}
	"class" => Reduce #4 functiondefinition call procdef {const=true}
	"struct" => Reduce #4 functiondefinition call procdef {const=true}
	"typedef" => Reduce #4 functiondefinition call procdef {const=true}
	'{' => Reduce #4 functiondefinition call procdef {const=true}
	'}' => Reduce #4 functiondefinition call procdef {const=true}
	"generic" => Reduce #4 functiondefinition call procdef {const=true}
	"interface" => Reduce #4 functiondefinition call procdef {const=true}
	"namespace" => Reduce #4 functiondefinition call procdef {const=true}
	"private" => Reduce #4 functiondefinition call procdef {const=true}
	"public" => Reduce #4 functiondefinition call procdef {const=true}
	"constructor" => Reduce #4 functiondefinition call procdef {const=true}
	"destructor" => Reduce #4 functiondefinition call procdef {const=true}
	'+' => Reduce #4 functiondefinition call procdef {const=true}
	'-' => Reduce #4 functiondefinition call procdef {const=true}
	'*' => Reduce #4 functiondefinition call procdef {const=true}
	'~' => Reduce #4 functiondefinition call procdef {const=true}
	'!' => Reduce #4 functiondefinition call procdef {const=true}
	"main" => Reduce #4 functiondefinition call procdef {const=true}
	"var" => Reduce #4 functiondefinition call procdef {const=true}
	"return" => Reduce #4 functiondefinition call procdef {const=true}
	"delete" => Reduce #4 functiondefinition call procdef {const=true}
	"if" => Reduce #4 functiondefinition call procdef {const=true}
	"while" => Reduce #4 functiondefinition call procdef {const=true}
	"with" => Reduce #4 functiondefinition call procdef {const=true}
	"new" => Reduce #4 functiondefinition call procdef {const=true}
	"cast" => Reduce #4 functiondefinition call procdef {const=true}
	"null" => Reduce #4 functiondefinition call procdef {const=true}
[126]
	IDENT => Shift goto 18
	')' => Reduce #0 parameterlist call paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[127]
	IDENT => Reduce #4 typespec call typespec "const^&"
	'(' => Reduce #4 typespec call typespec "const^&"
	')' => Reduce #4 typespec call typespec "const^&"
	"..." => Reduce #4 typespec call typespec "const^&"
	',' => Reduce #4 typespec call typespec "const^&"
	':' => Reduce #4 typespec call typespec "const^&"
[128]
	IDENT => Reduce #4 typespec call typespec_key "const struct^"
	'(' => Reduce #4 typespec call typespec_key "const struct^"
	')' => Reduce #4 typespec call typespec_key "const struct^"
	"..." => Reduce #4 typespec call typespec_key "const struct^"
	',' => Reduce #4 typespec call typespec_key "const struct^"
	':' => Reduce #4 typespec call typespec_key "const struct^"
[129]
	IDENT => Reduce #4 typespec call typespec_key "const struct^"
	'(' => Reduce #4 typespec call typespec_key "const struct^"
	')' => Reduce #4 typespec call typespec_key "const struct^"
	"..." => Reduce #4 typespec call typespec_key "const struct^"
	',' => Reduce #4 typespec call typespec_key "const struct^"
	':' => Reduce #4 typespec call typespec_key "const struct^"
[130]
	'}' => Shift goto 237
[131]
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"private" => Shift goto 27
	"public" => Shift goto 28
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"destructor" => Shift goto 141
[132]
	';' => Shift goto 239
[133]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[134]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[135]
	$ => Reduce #1 inclass_definition call definition 1
	IDENT => Reduce #1 inclass_definition call definition 1
	"function" => Reduce #1 inclass_definition call definition 1
	"procedure" => Reduce #1 inclass_definition call definition 1
	"const" => Reduce #1 inclass_definition call definition 1
	"operator" => Reduce #1 inclass_definition call definition 1
	"any" => Reduce #1 inclass_definition call definition 1
	"class" => Reduce #1 inclass_definition call definition 1
	"struct" => Reduce #1 inclass_definition call definition 1
	"typedef" => Reduce #1 inclass_definition call definition 1
	'}' => Reduce #1 inclass_definition call definition 1
	"generic" => Reduce #1 inclass_definition call definition 1
	"interface" => Reduce #1 inclass_definition call definition 1
	"private" => Reduce #1 inclass_definition call definition 1
	"public" => Reduce #1 inclass_definition call definition 1
	"constructor" => Reduce #1 inclass_definition call definition 1
	"destructor" => Reduce #1 inclass_definition call definition 1
[136]
	"function" => Shift goto 39
	"procedure" => Shift goto 40
	"operator" => Shift goto 240
	"constructor" => Shift goto 241
[137]
	$ => Reduce #1 inclass_definition call definition 2
	IDENT => Reduce #1 inclass_definition call definition 2
	"function" => Reduce #1 inclass_definition call definition 2
	"procedure" => Reduce #1 inclass_definition call definition 2
	"const" => Reduce #1 inclass_definition call definition 2
	"operator" => Reduce #1 inclass_definition call definition 2
	"any" => Reduce #1 inclass_definition call definition 2
	"class" => Reduce #1 inclass_definition call definition 2
	"struct" => Reduce #1 inclass_definition call definition 2
	"typedef" => Reduce #1 inclass_definition call definition 2
	'}' => Reduce #1 inclass_definition call definition 2
	"generic" => Reduce #1 inclass_definition call definition 2
	"interface" => Reduce #1 inclass_definition call definition 2
	"private" => Reduce #1 inclass_definition call definition 2
	"public" => Reduce #1 inclass_definition call definition 2
	"constructor" => Reduce #1 inclass_definition call definition 2
	"destructor" => Reduce #1 inclass_definition call definition 2
[138]
	$ => Reduce #1 inclass_definition call definition 2
	IDENT => Reduce #1 inclass_definition call definition 2
	"function" => Reduce #1 inclass_definition call definition 2
	"procedure" => Reduce #1 inclass_definition call definition 2
	"const" => Reduce #1 inclass_definition call definition 2
	"operator" => Reduce #1 inclass_definition call definition 2
	"any" => Reduce #1 inclass_definition call definition 2
	"class" => Reduce #1 inclass_definition call definition 2
	"struct" => Reduce #1 inclass_definition call definition 2
	"typedef" => Reduce #1 inclass_definition call definition 2
	'}' => Reduce #1 inclass_definition call definition 2
	"generic" => Reduce #1 inclass_definition call definition 2
	"interface" => Reduce #1 inclass_definition call definition 2
	"private" => Reduce #1 inclass_definition call definition 2
	"public" => Reduce #1 inclass_definition call definition 2
	"constructor" => Reduce #1 inclass_definition call definition 2
	"destructor" => Reduce #1 inclass_definition call definition 2
[139]
	$ => Reduce #1 inclass_definition call definition 2
	IDENT => Reduce #1 inclass_definition call definition 2
	"function" => Reduce #1 inclass_definition call definition 2
	"procedure" => Reduce #1 inclass_definition call definition 2
	"const" => Reduce #1 inclass_definition call definition 2
	"operator" => Reduce #1 inclass_definition call definition 2
	"any" => Reduce #1 inclass_definition call definition 2
	"class" => Reduce #1 inclass_definition call definition 2
	"struct" => Reduce #1 inclass_definition call definition 2
	"typedef" => Reduce #1 inclass_definition call definition 2
	'}' => Reduce #1 inclass_definition call definition 2
	"generic" => Reduce #1 inclass_definition call definition 2
	"interface" => Reduce #1 inclass_definition call definition 2
	"private" => Reduce #1 inclass_definition call definition 2
	"public" => Reduce #1 inclass_definition call definition 2
	"constructor" => Reduce #1 inclass_definition call definition 2
	"destructor" => Reduce #1 inclass_definition call definition 2
[140]
	';' => Shift goto 242
[141]
	'{' => Shift goto 243
[142]
	',' => Shift goto 244
	'{' => Reduce #1 inheritlist call inheritdef 1
[143]
	'{' => Shift goto 245
[144]
	'}' => Shift goto 246
[145]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto 149
[146]
	';' => Shift goto 248
[147]
	$ => Reduce #1 instruct_definition call definition 1
	IDENT => Reduce #1 instruct_definition call definition 1
	"const" => Reduce #1 instruct_definition call definition 1
	"any" => Reduce #1 instruct_definition call definition 1
	"struct" => Reduce #1 instruct_definition call definition 1
	"typedef" => Reduce #1 instruct_definition call definition 1
	'}' => Reduce #1 instruct_definition call definition 1
	"generic" => Reduce #1 instruct_definition call definition 1
[148]
	';' => Shift goto 249
[149]
	"struct" => Shift goto 54
[150]
	'(' => Shift goto 250
[151]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[152]
	IDENT => Shift goto 257
[153]
	IDENT => Shift goto 257
[154]
	'}' => Shift goto 259
[155]
	"function" => Shift goto 156
	"procedure" => Shift goto 157
	"operator" => Shift goto 158
	'}' => Reduce #0 ininterf_definitionlist
[156]
	IDENT => Shift goto 261
[157]
	IDENT => Shift goto 262
[158]
	'(' => Shift goto 264
	'<' => Shift goto 265
	'>' => Shift goto 266
	'&' => Shift goto 267
	"->" => Shift goto 268
	'=' => Shift goto 269
	'+' => Shift goto 270
	'-' => Shift goto 271
	'*' => Shift goto 272
	'/' => Shift goto 273
	'%' => Shift goto 274
	"&&" => Shift goto 275
	"||" => Shift goto 276
	'|' => Shift goto 277
	"<<" => Shift goto 278
	">>" => Shift goto 279
	'~' => Shift goto 280
	'!' => Shift goto 281
	'[' => Shift goto 282
	"==" => Shift goto 283
	"!=" => Shift goto 284
	">=" => Shift goto 285
	"<=" => Shift goto 286
[159]
	'}' => Shift goto 287
[160]
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 namespace_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"namespace" => Shift goto 26
	"private" => Shift goto 27
	"public" => Shift goto 28
[161]
	';' => Shift goto 289
[162]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[163]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[164]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[165]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[166]
	$ => Reduce #1 namespace_definition call definition 1
	"function" => Reduce #1 namespace_definition call definition 1
	"procedure" => Reduce #1 namespace_definition call definition 1
	"class" => Reduce #1 namespace_definition call definition 1
	"struct" => Reduce #1 namespace_definition call definition 1
	"typedef" => Reduce #1 namespace_definition call definition 1
	'}' => Reduce #1 namespace_definition call definition 1
	"generic" => Reduce #1 namespace_definition call definition 1
	"interface" => Reduce #1 namespace_definition call definition 1
	"namespace" => Reduce #1 namespace_definition call definition 1
	"private" => Reduce #1 namespace_definition call definition 1
	"public" => Reduce #1 namespace_definition call definition 1
[167]
	'(' => Shift goto 290
[168]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"..." => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[169]
	$ => Reduce #2 statement call definition
	BOOLEAN => Reduce #2 statement call definition
	IDENT => Reduce #2 statement call definition
	DQSTRING => Reduce #2 statement call definition
	SQSTRING => Reduce #2 statement call definition
	CARDINAL => Reduce #2 statement call definition
	INTEGER => Reduce #2 statement call definition
	FLOAT => Reduce #2 statement call definition
	"function" => Reduce #2 statement call definition
	'(' => Reduce #2 statement call definition
	"procedure" => Reduce #2 statement call definition
	'&' => Reduce #2 statement call definition
	"typedef" => Reduce #2 statement call definition
	'{' => Reduce #2 statement call definition
	'}' => Reduce #2 statement call definition
	"private" => Reduce #2 statement call definition
	"public" => Reduce #2 statement call definition
	'+' => Reduce #2 statement call definition
	'-' => Reduce #2 statement call definition
	'*' => Reduce #2 statement call definition
	'~' => Reduce #2 statement call definition
	'!' => Reduce #2 statement call definition
	"var" => Reduce #2 statement call definition
	"return" => Reduce #2 statement call definition
	"delete" => Reduce #2 statement call definition
	"if" => Reduce #2 statement call definition
	"while" => Reduce #2 statement call definition
	"with" => Reduce #2 statement call definition
	"new" => Reduce #2 statement call definition
	"cast" => Reduce #2 statement call definition
	"null" => Reduce #2 statement call definition
[170]
	$ => Reduce #4 main_procedure call main_procdef
[171]
	'}' => Reduce #2 statementlist
[172]
	IDENT => Shift goto 292
[173]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	')' => Shift goto 294
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[174]
	$ => Reduce #2 statement call free_expression
	BOOLEAN => Reduce #2 statement call free_expression
	IDENT => Reduce #2 statement call free_expression
	DQSTRING => Reduce #2 statement call free_expression
	SQSTRING => Reduce #2 statement call free_expression
	CARDINAL => Reduce #2 statement call free_expression
	INTEGER => Reduce #2 statement call free_expression
	FLOAT => Reduce #2 statement call free_expression
	"function" => Reduce #2 statement call free_expression
	'(' => Reduce #2 statement call free_expression
	"procedure" => Reduce #2 statement call free_expression
	'&' => Reduce #2 statement call free_expression
	"typedef" => Reduce #2 statement call free_expression
	'{' => Reduce #2 statement call free_expression
	'}' => Reduce #2 statement call free_expression
	"private" => Reduce #2 statement call free_expression
	"public" => Reduce #2 statement call free_expression
	'+' => Reduce #2 statement call free_expression
	'-' => Reduce #2 statement call free_expression
	'*' => Reduce #2 statement call free_expression
	'~' => Reduce #2 statement call free_expression
	'!' => Reduce #2 statement call free_expression
	"var" => Reduce #2 statement call free_expression
	"return" => Reduce #2 statement call free_expression
	"delete" => Reduce #2 statement call free_expression
	"if" => Reduce #2 statement call free_expression
	"while" => Reduce #2 statement call free_expression
	"with" => Reduce #2 statement call free_expression
	"new" => Reduce #2 statement call free_expression
	"cast" => Reduce #2 statement call free_expression
	"null" => Reduce #2 statement call free_expression
[175]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[176]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[177]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[178]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[179]
	IDENT => Reduce #1 indirection call count
	"->" => Shift goto 179
[180]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[181]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[182]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[183]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[184]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[185]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[186]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[187]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[188]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[189]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[190]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[191]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[192]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[193]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[194]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[195]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[196]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[197]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[198]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[199]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[200]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[201]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[202]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[203]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[204]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[205]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[206]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[207]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[208]
	IDENT => Shift goto 328
[209]
	'(' => Shift goto 173
	')' => Shift goto 329
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[210]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "&"
	';' => Reduce #2 expression call operator "&"
	',' => Reduce #2 expression call operator "&"
	'<' => Reduce #2 expression call operator "&"
	'>' => Reduce #2 expression call operator "&"
	'&' => Reduce #2 expression call operator "&"
	'^' => Reduce #2 expression call operator "&"
	'}' => Reduce #2 expression call operator "&"
	"->" => Reduce #2 expression call operator "&"
	'=' => Reduce #2 expression call operator "&"
	'+' => Reduce #2 expression call operator "&"
	'-' => Reduce #2 expression call operator "&"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #2 expression call operator "&"
	"||" => Reduce #2 expression call operator "&"
	'|' => Reduce #2 expression call operator "&"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "&"
	"==" => Reduce #2 expression call operator "&"
	"!=" => Reduce #2 expression call operator "&"
	">=" => Reduce #2 expression call operator "&"
	"<=" => Reduce #2 expression call operator "&"
	"+=" => Reduce #2 expression call operator "&"
	"-=" => Reduce #2 expression call operator "&"
	"*=" => Reduce #2 expression call operator "&"
	"/=" => Reduce #2 expression call operator "&"
	"^=" => Reduce #2 expression call operator "&"
	"&=" => Reduce #2 expression call operator "&"
	"%=" => Reduce #2 expression call operator "&"
	"&&=" => Reduce #2 expression call operator "&"
	"||=" => Reduce #2 expression call operator "&"
	"|=" => Reduce #2 expression call operator "&"
	"<<=" => Reduce #2 expression call operator "&"
	">>=" => Reduce #2 expression call operator "&"
	'.' => Shift goto 208
[211]
	'}' => Shift goto 330
[212]
	'(' => Shift goto 173
	';' => Shift goto 174
	',' => Shift goto 331
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #1 expressionlist
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[213]
	'}' => Shift goto 332
[214]
	'(' => Reduce #2 expression call structure
	')' => Reduce #2 expression call structure
	';' => Reduce #2 expression call structure
	',' => Reduce #2 expression call structure
	'<' => Reduce #2 expression call structure
	'>' => Reduce #2 expression call structure
	'&' => Reduce #2 expression call structure
	'^' => Reduce #2 expression call structure
	'}' => Reduce #2 expression call structure
	"->" => Reduce #2 expression call structure
	'=' => Reduce #2 expression call structure
	'+' => Reduce #2 expression call structure
	'-' => Reduce #2 expression call structure
	'*' => Reduce #2 expression call structure
	'/' => Reduce #2 expression call structure
	'%' => Reduce #2 expression call structure
	"&&" => Reduce #2 expression call structure
	"||" => Reduce #2 expression call structure
	'|' => Reduce #2 expression call structure
	"<<" => Reduce #2 expression call structure
	">>" => Reduce #2 expression call structure
	'[' => Reduce #2 expression call structure
	']' => Reduce #2 expression call structure
	"==" => Reduce #2 expression call structure
	"!=" => Reduce #2 expression call structure
	">=" => Reduce #2 expression call structure
	"<=" => Reduce #2 expression call structure
	"+=" => Reduce #2 expression call structure
	"-=" => Reduce #2 expression call structure
	"*=" => Reduce #2 expression call structure
	"/=" => Reduce #2 expression call structure
	"^=" => Reduce #2 expression call structure
	"&=" => Reduce #2 expression call structure
	"%=" => Reduce #2 expression call structure
	"&&=" => Reduce #2 expression call structure
	"||=" => Reduce #2 expression call structure
	"|=" => Reduce #2 expression call structure
	"<<=" => Reduce #2 expression call structure
	">>=" => Reduce #2 expression call structure
	'.' => Reduce #2 expression call structure
[215]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "+"
	';' => Reduce #2 expression call operator "+"
	',' => Reduce #2 expression call operator "+"
	'<' => Reduce #2 expression call operator "+"
	'>' => Reduce #2 expression call operator "+"
	'&' => Reduce #2 expression call operator "+"
	'^' => Reduce #2 expression call operator "+"
	'}' => Reduce #2 expression call operator "+"
	"->" => Reduce #2 expression call operator "+"
	'=' => Reduce #2 expression call operator "+"
	'+' => Reduce #2 expression call operator "+"
	'-' => Reduce #2 expression call operator "+"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #2 expression call operator "+"
	"||" => Reduce #2 expression call operator "+"
	'|' => Reduce #2 expression call operator "+"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "+"
	"==" => Reduce #2 expression call operator "+"
	"!=" => Reduce #2 expression call operator "+"
	">=" => Reduce #2 expression call operator "+"
	"<=" => Reduce #2 expression call operator "+"
	"+=" => Reduce #2 expression call operator "+"
	"-=" => Reduce #2 expression call operator "+"
	"*=" => Reduce #2 expression call operator "+"
	"/=" => Reduce #2 expression call operator "+"
	"^=" => Reduce #2 expression call operator "+"
	"&=" => Reduce #2 expression call operator "+"
	"%=" => Reduce #2 expression call operator "+"
	"&&=" => Reduce #2 expression call operator "+"
	"||=" => Reduce #2 expression call operator "+"
	"|=" => Reduce #2 expression call operator "+"
	"<<=" => Reduce #2 expression call operator "+"
	">>=" => Reduce #2 expression call operator "+"
	'.' => Shift goto 208
[216]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "-"
	';' => Reduce #2 expression call operator "-"
	',' => Reduce #2 expression call operator "-"
	'<' => Reduce #2 expression call operator "-"
	'>' => Reduce #2 expression call operator "-"
	'&' => Reduce #2 expression call operator "-"
	'^' => Reduce #2 expression call operator "-"
	'}' => Reduce #2 expression call operator "-"
	"->" => Reduce #2 expression call operator "-"
	'=' => Reduce #2 expression call operator "-"
	'+' => Reduce #2 expression call operator "-"
	'-' => Reduce #2 expression call operator "-"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #2 expression call operator "-"
	"||" => Reduce #2 expression call operator "-"
	'|' => Reduce #2 expression call operator "-"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "-"
	"==" => Reduce #2 expression call operator "-"
	"!=" => Reduce #2 expression call operator "-"
	">=" => Reduce #2 expression call operator "-"
	"<=" => Reduce #2 expression call operator "-"
	"+=" => Reduce #2 expression call operator "-"
	"-=" => Reduce #2 expression call operator "-"
	"*=" => Reduce #2 expression call operator "-"
	"/=" => Reduce #2 expression call operator "-"
	"^=" => Reduce #2 expression call operator "-"
	"&=" => Reduce #2 expression call operator "-"
	"%=" => Reduce #2 expression call operator "-"
	"&&=" => Reduce #2 expression call operator "-"
	"||=" => Reduce #2 expression call operator "-"
	"|=" => Reduce #2 expression call operator "-"
	"<<=" => Reduce #2 expression call operator "-"
	">>=" => Reduce #2 expression call operator "-"
	'.' => Shift goto 208
[217]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "->"
	';' => Reduce #2 expression call operator "->"
	',' => Reduce #2 expression call operator "->"
	'<' => Reduce #2 expression call operator "->"
	'>' => Reduce #2 expression call operator "->"
	'&' => Reduce #2 expression call operator "->"
	'^' => Reduce #2 expression call operator "->"
	'}' => Reduce #2 expression call operator "->"
	"->" => Reduce #2 expression call operator "->"
	'=' => Reduce #2 expression call operator "->"
	'+' => Reduce #2 expression call operator "->"
	'-' => Reduce #2 expression call operator "->"
	'*' => Reduce #2 expression call operator "->"
	'/' => Reduce #2 expression call operator "->"
	'%' => Reduce #2 expression call operator "->"
	"&&" => Reduce #2 expression call operator "->"
	"||" => Reduce #2 expression call operator "->"
	'|' => Reduce #2 expression call operator "->"
	"<<" => Reduce #2 expression call operator "->"
	">>" => Reduce #2 expression call operator "->"
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "->"
	"==" => Reduce #2 expression call operator "->"
	"!=" => Reduce #2 expression call operator "->"
	">=" => Reduce #2 expression call operator "->"
	"<=" => Reduce #2 expression call operator "->"
	"+=" => Reduce #2 expression call operator "->"
	"-=" => Reduce #2 expression call operator "->"
	"*=" => Reduce #2 expression call operator "->"
	"/=" => Reduce #2 expression call operator "->"
	"^=" => Reduce #2 expression call operator "->"
	"&=" => Reduce #2 expression call operator "->"
	"%=" => Reduce #2 expression call operator "->"
	"&&=" => Reduce #2 expression call operator "->"
	"||=" => Reduce #2 expression call operator "->"
	"|=" => Reduce #2 expression call operator "->"
	"<<=" => Reduce #2 expression call operator "->"
	">>=" => Reduce #2 expression call operator "->"
	'.' => Reduce #2 expression call operator "->"
[218]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "~"
	';' => Reduce #2 expression call operator "~"
	',' => Reduce #2 expression call operator "~"
	'<' => Reduce #2 expression call operator "~"
	'>' => Reduce #2 expression call operator "~"
	'&' => Reduce #2 expression call operator "~"
	'^' => Reduce #2 expression call operator "~"
	'}' => Reduce #2 expression call operator "~"
	"->" => Reduce #2 expression call operator "~"
	'=' => Reduce #2 expression call operator "~"
	'+' => Reduce #2 expression call operator "~"
	'-' => Reduce #2 expression call operator "~"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #2 expression call operator "~"
	"||" => Reduce #2 expression call operator "~"
	'|' => Reduce #2 expression call operator "~"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "~"
	"==" => Reduce #2 expression call operator "~"
	"!=" => Reduce #2 expression call operator "~"
	">=" => Reduce #2 expression call operator "~"
	"<=" => Reduce #2 expression call operator "~"
	"+=" => Reduce #2 expression call operator "~"
	"-=" => Reduce #2 expression call operator "~"
	"*=" => Reduce #2 expression call operator "~"
	"/=" => Reduce #2 expression call operator "~"
	"^=" => Reduce #2 expression call operator "~"
	"&=" => Reduce #2 expression call operator "~"
	"%=" => Reduce #2 expression call operator "~"
	"&&=" => Reduce #2 expression call operator "~"
	"||=" => Reduce #2 expression call operator "~"
	"|=" => Reduce #2 expression call operator "~"
	"<<=" => Reduce #2 expression call operator "~"
	">>=" => Reduce #2 expression call operator "~"
	'.' => Shift goto 208
[219]
	'(' => Shift goto 173
	')' => Reduce #2 expression call operator "!"
	';' => Reduce #2 expression call operator "!"
	',' => Reduce #2 expression call operator "!"
	'<' => Reduce #2 expression call operator "!"
	'>' => Reduce #2 expression call operator "!"
	'&' => Reduce #2 expression call operator "!"
	'^' => Reduce #2 expression call operator "!"
	'}' => Reduce #2 expression call operator "!"
	"->" => Reduce #2 expression call operator "!"
	'=' => Reduce #2 expression call operator "!"
	'+' => Reduce #2 expression call operator "!"
	'-' => Reduce #2 expression call operator "!"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #2 expression call operator "!"
	"||" => Reduce #2 expression call operator "!"
	'|' => Reduce #2 expression call operator "!"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #2 expression call operator "!"
	"==" => Reduce #2 expression call operator "!"
	"!=" => Reduce #2 expression call operator "!"
	">=" => Reduce #2 expression call operator "!"
	"<=" => Reduce #2 expression call operator "!"
	"+=" => Reduce #2 expression call operator "!"
	"-=" => Reduce #2 expression call operator "!"
	"*=" => Reduce #2 expression call operator "!"
	"/=" => Reduce #2 expression call operator "!"
	"^=" => Reduce #2 expression call operator "!"
	"&=" => Reduce #2 expression call operator "!"
	"%=" => Reduce #2 expression call operator "!"
	"&&=" => Reduce #2 expression call operator "!"
	"||=" => Reduce #2 expression call operator "!"
	"|=" => Reduce #2 expression call operator "!"
	"<<=" => Reduce #2 expression call operator "!"
	">>=" => Reduce #2 expression call operator "!"
	'.' => Shift goto 208
[220]
	';' => Shift goto 333
[221]
	'(' => Shift goto 173
	';' => Shift goto 334
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[222]
	'(' => Shift goto 173
	';' => Shift goto 335
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[223]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[224]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[225]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[226]
	':' => Shift goto 339
[227]
	':' => Shift goto 340
[228]
	'>' => Reduce #3 generic_instance
[229]
	'(' => Shift goto 173
	')' => Reduce #1 expressionlist
	',' => Shift goto 331
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #1 expressionlist
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #1 expressionlist
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[230]
	';' => Reduce #5 variabledefinition call vardef_array
	'=' => Shift goto 341
[231]
	$ => Reduce #5 functiondefinition call funcdef {const=false}
	BOOLEAN => Reduce #5 functiondefinition call funcdef {const=false}
	IDENT => Reduce #5 functiondefinition call funcdef {const=false}
	DQSTRING => Reduce #5 functiondefinition call funcdef {const=false}
	SQSTRING => Reduce #5 functiondefinition call funcdef {const=false}
	CARDINAL => Reduce #5 functiondefinition call funcdef {const=false}
	INTEGER => Reduce #5 functiondefinition call funcdef {const=false}
	FLOAT => Reduce #5 functiondefinition call funcdef {const=false}
	"function" => Reduce #5 functiondefinition call funcdef {const=false}
	'(' => Reduce #5 functiondefinition call funcdef {const=false}
	"procedure" => Reduce #5 functiondefinition call funcdef {const=false}
	"const" => Reduce #5 functiondefinition call funcdef {const=false}
	"operator" => Reduce #5 functiondefinition call funcdef {const=false}
	'&' => Reduce #5 functiondefinition call funcdef {const=false}
	"any" => Reduce #5 functiondefinition call funcdef {const=false}
	"class" => Reduce #5 functiondefinition call funcdef {const=false}
	"struct" => Reduce #5 functiondefinition call funcdef {const=false}
	"typedef" => Reduce #5 functiondefinition call funcdef {const=false}
	'{' => Reduce #5 functiondefinition call funcdef {const=false}
	'}' => Reduce #5 functiondefinition call funcdef {const=false}
	"generic" => Reduce #5 functiondefinition call funcdef {const=false}
	"interface" => Reduce #5 functiondefinition call funcdef {const=false}
	"namespace" => Reduce #5 functiondefinition call funcdef {const=false}
	"private" => Reduce #5 functiondefinition call funcdef {const=false}
	"public" => Reduce #5 functiondefinition call funcdef {const=false}
	"constructor" => Reduce #5 functiondefinition call funcdef {const=false}
	"destructor" => Reduce #5 functiondefinition call funcdef {const=false}
	'+' => Reduce #5 functiondefinition call funcdef {const=false}
	'-' => Reduce #5 functiondefinition call funcdef {const=false}
	'*' => Reduce #5 functiondefinition call funcdef {const=false}
	'~' => Reduce #5 functiondefinition call funcdef {const=false}
	'!' => Reduce #5 functiondefinition call funcdef {const=false}
	"main" => Reduce #5 functiondefinition call funcdef {const=false}
	"var" => Reduce #5 functiondefinition call funcdef {const=false}
	"return" => Reduce #5 functiondefinition call funcdef {const=false}
	"delete" => Reduce #5 functiondefinition call funcdef {const=false}
	"if" => Reduce #5 functiondefinition call funcdef {const=false}
	"while" => Reduce #5 functiondefinition call funcdef {const=false}
	"with" => Reduce #5 functiondefinition call funcdef {const=false}
	"new" => Reduce #5 functiondefinition call funcdef {const=false}
	"cast" => Reduce #5 functiondefinition call funcdef {const=false}
	"null" => Reduce #5 functiondefinition call funcdef {const=false}
[232]
	$ => Reduce #5 functiondefinition call funcdef {const=true}
	BOOLEAN => Reduce #5 functiondefinition call funcdef {const=true}
	IDENT => Reduce #5 functiondefinition call funcdef {const=true}
	DQSTRING => Reduce #5 functiondefinition call funcdef {const=true}
	SQSTRING => Reduce #5 functiondefinition call funcdef {const=true}
	CARDINAL => Reduce #5 functiondefinition call funcdef {const=true}
	INTEGER => Reduce #5 functiondefinition call funcdef {const=true}
	FLOAT => Reduce #5 functiondefinition call funcdef {const=true}
	"function" => Reduce #5 functiondefinition call funcdef {const=true}
	'(' => Reduce #5 functiondefinition call funcdef {const=true}
	"procedure" => Reduce #5 functiondefinition call funcdef {const=true}
	"const" => Reduce #5 functiondefinition call funcdef {const=true}
	"operator" => Reduce #5 functiondefinition call funcdef {const=true}
	'&' => Reduce #5 functiondefinition call funcdef {const=true}
	"any" => Reduce #5 functiondefinition call funcdef {const=true}
	"class" => Reduce #5 functiondefinition call funcdef {const=true}
	"struct" => Reduce #5 functiondefinition call funcdef {const=true}
	"typedef" => Reduce #5 functiondefinition call funcdef {const=true}
	'{' => Reduce #5 functiondefinition call funcdef {const=true}
	'}' => Reduce #5 functiondefinition call funcdef {const=true}
	"generic" => Reduce #5 functiondefinition call funcdef {const=true}
	"interface" => Reduce #5 functiondefinition call funcdef {const=true}
	"namespace" => Reduce #5 functiondefinition call funcdef {const=true}
	"private" => Reduce #5 functiondefinition call funcdef {const=true}
	"public" => Reduce #5 functiondefinition call funcdef {const=true}
	"constructor" => Reduce #5 functiondefinition call funcdef {const=true}
	"destructor" => Reduce #5 functiondefinition call funcdef {const=true}
	'+' => Reduce #5 functiondefinition call funcdef {const=true}
	'-' => Reduce #5 functiondefinition call funcdef {const=true}
	'*' => Reduce #5 functiondefinition call funcdef {const=true}
	'~' => Reduce #5 functiondefinition call funcdef {const=true}
	'!' => Reduce #5 functiondefinition call funcdef {const=true}
	"main" => Reduce #5 functiondefinition call funcdef {const=true}
	"var" => Reduce #5 functiondefinition call funcdef {const=true}
	"return" => Reduce #5 functiondefinition call funcdef {const=true}
	"delete" => Reduce #5 functiondefinition call funcdef {const=true}
	"if" => Reduce #5 functiondefinition call funcdef {const=true}
	"while" => Reduce #5 functiondefinition call funcdef {const=true}
	"with" => Reduce #5 functiondefinition call funcdef {const=true}
	"new" => Reduce #5 functiondefinition call funcdef {const=true}
	"cast" => Reduce #5 functiondefinition call funcdef {const=true}
	"null" => Reduce #5 functiondefinition call funcdef {const=true}
[233]
	IDENT => Shift goto 342
[234]
	')' => Shift goto 343
[235]
	')' => Reduce #1 parameterlist call paramdeflist
[236]
	')' => Reduce #1 parameters
	',' => Shift goto 344
[237]
	$ => Reduce #5 classdefinition call classdef
	IDENT => Reduce #5 classdefinition call classdef
	"function" => Reduce #5 classdefinition call classdef
	"procedure" => Reduce #5 classdefinition call classdef
	"const" => Reduce #5 classdefinition call classdef
	"operator" => Reduce #5 classdefinition call classdef
	"any" => Reduce #5 classdefinition call classdef
	"class" => Reduce #5 classdefinition call classdef
	"struct" => Reduce #5 classdefinition call classdef
	"typedef" => Reduce #5 classdefinition call classdef
	'}' => Reduce #5 classdefinition call classdef
	"generic" => Reduce #5 classdefinition call classdef
	"interface" => Reduce #5 classdefinition call classdef
	"namespace" => Reduce #5 classdefinition call classdef
	"private" => Reduce #5 classdefinition call classdef
	"public" => Reduce #5 classdefinition call classdef
	"constructor" => Reduce #5 classdefinition call classdef
	"destructor" => Reduce #5 classdefinition call classdef
	"main" => Reduce #5 classdefinition call classdef
[238]
	'}' => Reduce #2 inclass_definitionlist
[239]
	$ => Reduce #2 inclass_definition call definition 1
	IDENT => Reduce #2 inclass_definition call definition 1
	"function" => Reduce #2 inclass_definition call definition 1
	"procedure" => Reduce #2 inclass_definition call definition 1
	"const" => Reduce #2 inclass_definition call definition 1
	"operator" => Reduce #2 inclass_definition call definition 1
	"any" => Reduce #2 inclass_definition call definition 1
	"class" => Reduce #2 inclass_definition call definition 1
	"struct" => Reduce #2 inclass_definition call definition 1
	"typedef" => Reduce #2 inclass_definition call definition 1
	'}' => Reduce #2 inclass_definition call definition 1
	"generic" => Reduce #2 inclass_definition call definition 1
	"interface" => Reduce #2 inclass_definition call definition 1
	"private" => Reduce #2 inclass_definition call definition 1
	"public" => Reduce #2 inclass_definition call definition 1
	"constructor" => Reduce #2 inclass_definition call definition 1
	"destructor" => Reduce #2 inclass_definition call definition 1
[240]
	'(' => Shift goto 264
	'<' => Shift goto 265
	'>' => Shift goto 266
	'&' => Shift goto 267
	"->" => Shift goto 268
	'=' => Shift goto 269
	'+' => Shift goto 270
	'-' => Shift goto 271
	'*' => Shift goto 272
	'/' => Shift goto 273
	'%' => Shift goto 274
	"&&" => Shift goto 275
	"||" => Shift goto 276
	'|' => Shift goto 277
	"<<" => Shift goto 278
	">>" => Shift goto 279
	'~' => Shift goto 280
	'!' => Shift goto 281
	'[' => Shift goto 282
	"==" => Shift goto 283
	"!=" => Shift goto 284
	">=" => Shift goto 285
	"<=" => Shift goto 286
[241]
	'(' => Shift goto 347
[242]
	$ => Reduce #2 inclass_definition call definition 1
	IDENT => Reduce #2 inclass_definition call definition 1
	"function" => Reduce #2 inclass_definition call definition 1
	"procedure" => Reduce #2 inclass_definition call definition 1
	"const" => Reduce #2 inclass_definition call definition 1
	"operator" => Reduce #2 inclass_definition call definition 1
	"any" => Reduce #2 inclass_definition call definition 1
	"class" => Reduce #2 inclass_definition call definition 1
	"struct" => Reduce #2 inclass_definition call definition 1
	"typedef" => Reduce #2 inclass_definition call definition 1
	'}' => Reduce #2 inclass_definition call definition 1
	"generic" => Reduce #2 inclass_definition call definition 1
	"interface" => Reduce #2 inclass_definition call definition 1
	"private" => Reduce #2 inclass_definition call definition 1
	"public" => Reduce #2 inclass_definition call definition 1
	"constructor" => Reduce #2 inclass_definition call definition 1
	"destructor" => Reduce #2 inclass_definition call definition 1
[243]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[244]
	IDENT => Shift goto 18
[245]
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"private" => Shift goto 27
	"public" => Shift goto 28
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"destructor" => Shift goto 141
[246]
	$ => Reduce #5 structdefinition call structdef
	IDENT => Reduce #5 structdefinition call structdef
	"function" => Reduce #5 structdefinition call structdef
	"procedure" => Reduce #5 structdefinition call structdef
	"const" => Reduce #5 structdefinition call structdef
	"operator" => Reduce #5 structdefinition call structdef
	"any" => Reduce #5 structdefinition call structdef
	"class" => Reduce #5 structdefinition call structdef
	"struct" => Reduce #5 structdefinition call structdef
	"typedef" => Reduce #5 structdefinition call structdef
	'}' => Reduce #5 structdefinition call structdef
	"generic" => Reduce #5 structdefinition call structdef
	"interface" => Reduce #5 structdefinition call structdef
	"namespace" => Reduce #5 structdefinition call structdef
	"private" => Reduce #5 structdefinition call structdef
	"public" => Reduce #5 structdefinition call structdef
	"constructor" => Reduce #5 structdefinition call structdef
	"destructor" => Reduce #5 structdefinition call structdef
	"main" => Reduce #5 structdefinition call structdef
[247]
	'}' => Reduce #2 instruct_definitionlist
[248]
	$ => Reduce #2 instruct_definition call definition 1
	IDENT => Reduce #2 instruct_definition call definition 1
	"const" => Reduce #2 instruct_definition call definition 1
	"any" => Reduce #2 instruct_definition call definition 1
	"struct" => Reduce #2 instruct_definition call definition 1
	"typedef" => Reduce #2 instruct_definition call definition 1
	'}' => Reduce #2 instruct_definition call definition 1
	"generic" => Reduce #2 instruct_definition call definition 1
[249]
	$ => Reduce #2 instruct_definition call definition 1
	IDENT => Reduce #2 instruct_definition call definition 1
	"const" => Reduce #2 instruct_definition call definition 1
	"any" => Reduce #2 instruct_definition call definition 1
	"struct" => Reduce #2 instruct_definition call definition 1
	"typedef" => Reduce #2 instruct_definition call definition 1
	'}' => Reduce #2 instruct_definition call definition 1
	"generic" => Reduce #2 instruct_definition call definition 1
[250]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[251]
	')' => Reduce #1 extern_paramlist call extern_paramdeflist
	"..." => Reduce #1 extern_paramlist call extern_paramdeflist
[252]
	')' => Shift goto 352
[253]
	IDENT => Shift goto 353
	')' => Reduce #1 extern_parameters call extern_paramdef
	"..." => Reduce #1 extern_parameters call extern_paramdef
	',' => Shift goto 354
[254]
	'>' => Reduce #1 generic_header call generic_header
[255]
	'>' => Reduce #1 generic_header call generic_header
[256]
	'>' => Shift goto 355
[257]
	',' => Shift goto 356
	'>' => Reduce #1 generic_identlist call generic_ident
	'=' => Shift goto 357
[258]
	'>' => Shift goto 358
[259]
	$ => Reduce #5 interfacedefinition call interfacedef
	IDENT => Reduce #5 interfacedefinition call interfacedef
	"function" => Reduce #5 interfacedefinition call interfacedef
	"procedure" => Reduce #5 interfacedefinition call interfacedef
	"const" => Reduce #5 interfacedefinition call interfacedef
	"operator" => Reduce #5 interfacedefinition call interfacedef
	"any" => Reduce #5 interfacedefinition call interfacedef
	"class" => Reduce #5 interfacedefinition call interfacedef
	"struct" => Reduce #5 interfacedefinition call interfacedef
	"typedef" => Reduce #5 interfacedefinition call interfacedef
	'}' => Reduce #5 interfacedefinition call interfacedef
	"generic" => Reduce #5 interfacedefinition call interfacedef
	"interface" => Reduce #5 interfacedefinition call interfacedef
	"namespace" => Reduce #5 interfacedefinition call interfacedef
	"private" => Reduce #5 interfacedefinition call interfacedef
	"public" => Reduce #5 interfacedefinition call interfacedef
	"constructor" => Reduce #5 interfacedefinition call interfacedef
	"destructor" => Reduce #5 interfacedefinition call interfacedef
	"main" => Reduce #5 interfacedefinition call interfacedef
[260]
	'}' => Reduce #2 ininterf_definitionlist
[261]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[262]
	'(' => Shift goto 360
[263]
	IDENT => Shift goto 18
	'(' => Shift goto 362
	"const" => Shift goto 19
	"any" => Shift goto 20
[264]
	')' => Shift goto 363
[265]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<",symbol="lt"}
[266]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">",symbol="gt"}
[267]
	IDENT => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	'(' => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	"const" => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
	"any" => Reduce #1 operatordecl call operatordecl {name="&",symbol="bitand"}
[268]
	IDENT => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	'(' => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	"const" => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
	"any" => Reduce #1 operatordecl call operatordecl {name="->",symbol="arrow"}
[269]
	IDENT => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	'(' => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	"const" => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
	"any" => Reduce #1 operatordecl call operatordecl {name="=",symbol="assign"}
[270]
	IDENT => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	'(' => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	"const" => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
	"any" => Reduce #1 operatordecl call operatordecl {name="+",symbol="plus"}
[271]
	IDENT => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	'(' => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	"const" => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
	"any" => Reduce #1 operatordecl call operatordecl {name="-",symbol="minus"}
[272]
	IDENT => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	'(' => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	"const" => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
	"any" => Reduce #1 operatordecl call operatordecl {name="*",symbol="mul"}
[273]
	IDENT => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	'(' => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	"const" => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
	"any" => Reduce #1 operatordecl call operatordecl {name="/",symbol="div"}
[274]
	IDENT => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	'(' => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	"const" => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
	"any" => Reduce #1 operatordecl call operatordecl {name="%",symbol="mod"}
[275]
	IDENT => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	'(' => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	"const" => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
	"any" => Reduce #1 operatordecl call operatordecl {name="&&",symbol="and"}
[276]
	IDENT => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	'(' => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	"const" => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
	"any" => Reduce #1 operatordecl call operatordecl {name="||",symbol="or"}
[277]
	IDENT => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	'(' => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	"const" => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
	"any" => Reduce #1 operatordecl call operatordecl {name="|",symbol="bitor"}
[278]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<<",symbol="lsh"}
[279]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">>",symbol="rsh"}
[280]
	IDENT => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	'(' => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	"const" => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
	"any" => Reduce #1 operatordecl call operatordecl {name="~",symbol="lneg"}
[281]
	IDENT => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	'(' => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	"const" => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
	"any" => Reduce #1 operatordecl call operatordecl {name="!",symbol="not"}
[282]
	']' => Shift goto 364
[283]
	IDENT => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	'(' => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	"const" => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
	"any" => Reduce #1 operatordecl call operatordecl {name="==",symbol="eq"}
[284]
	IDENT => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	'(' => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	"const" => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
	"any" => Reduce #1 operatordecl call operatordecl {name="!=",symbol="ne"}
[285]
	IDENT => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	'(' => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	"const" => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
	"any" => Reduce #1 operatordecl call operatordecl {name=">=",symbol="ge"}
[286]
	IDENT => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	'(' => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	"const" => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
	"any" => Reduce #1 operatordecl call operatordecl {name="<=",symbol="le"}
[287]
	$ => Reduce #5 namespacedefinition call namespacedef
	IDENT => Reduce #5 namespacedefinition call namespacedef
	"function" => Reduce #5 namespacedefinition call namespacedef
	"procedure" => Reduce #5 namespacedefinition call namespacedef
	"const" => Reduce #5 namespacedefinition call namespacedef
	"any" => Reduce #5 namespacedefinition call namespacedef
	"class" => Reduce #5 namespacedefinition call namespacedef
	"struct" => Reduce #5 namespacedefinition call namespacedef
	"typedef" => Reduce #5 namespacedefinition call namespacedef
	'}' => Reduce #5 namespacedefinition call namespacedef
	"generic" => Reduce #5 namespacedefinition call namespacedef
	"interface" => Reduce #5 namespacedefinition call namespacedef
	"namespace" => Reduce #5 namespacedefinition call namespacedef
	"private" => Reduce #5 namespacedefinition call namespacedef
	"public" => Reduce #5 namespacedefinition call namespacedef
	"main" => Reduce #5 namespacedefinition call namespacedef
[288]
	'}' => Reduce #2 namespace_definitionlist
[289]
	$ => Reduce #2 namespace_definition call definition 1
	"function" => Reduce #2 namespace_definition call definition 1
	"procedure" => Reduce #2 namespace_definition call definition 1
	"class" => Reduce #2 namespace_definition call definition 1
	"struct" => Reduce #2 namespace_definition call definition 1
	"typedef" => Reduce #2 namespace_definition call definition 1
	'}' => Reduce #2 namespace_definition call definition 1
	"generic" => Reduce #2 namespace_definition call definition 1
	"interface" => Reduce #2 namespace_definition call definition 1
	"namespace" => Reduce #2 namespace_definition call definition 1
	"private" => Reduce #2 namespace_definition call definition 1
	"public" => Reduce #2 namespace_definition call definition 1
[290]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"..." => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[291]
	')' => Shift goto 366
	"..." => Shift goto 367
[292]
	'(' => Reduce #3 iexpression call rep_operator "->"
	')' => Reduce #3 iexpression call rep_operator "->"
	';' => Reduce #3 iexpression call rep_operator "->"
	',' => Reduce #3 iexpression call rep_operator "->"
	'<' => Reduce #3 iexpression call rep_operator "->"
	'>' => Reduce #3 iexpression call rep_operator "->"
	'&' => Reduce #3 iexpression call rep_operator "->"
	'^' => Reduce #3 iexpression call rep_operator "->"
	'}' => Reduce #3 iexpression call rep_operator "->"
	"->" => Reduce #3 iexpression call rep_operator "->"
	'=' => Reduce #3 iexpression call rep_operator "->"
	'+' => Reduce #3 iexpression call rep_operator "->"
	'-' => Reduce #3 iexpression call rep_operator "->"
	'*' => Reduce #3 iexpression call rep_operator "->"
	'/' => Reduce #3 iexpression call rep_operator "->"
	'%' => Reduce #3 iexpression call rep_operator "->"
	"&&" => Reduce #3 iexpression call rep_operator "->"
	"||" => Reduce #3 iexpression call rep_operator "->"
	'|' => Reduce #3 iexpression call rep_operator "->"
	"<<" => Reduce #3 iexpression call rep_operator "->"
	">>" => Reduce #3 iexpression call rep_operator "->"
	'[' => Reduce #3 iexpression call rep_operator "->"
	']' => Reduce #3 iexpression call rep_operator "->"
	"==" => Reduce #3 iexpression call rep_operator "->"
	"!=" => Reduce #3 iexpression call rep_operator "->"
	">=" => Reduce #3 iexpression call rep_operator "->"
	"<=" => Reduce #3 iexpression call rep_operator "->"
	"+=" => Reduce #3 iexpression call rep_operator "->"
	"-=" => Reduce #3 iexpression call rep_operator "->"
	"*=" => Reduce #3 iexpression call rep_operator "->"
	"/=" => Reduce #3 iexpression call rep_operator "->"
	"^=" => Reduce #3 iexpression call rep_operator "->"
	"&=" => Reduce #3 iexpression call rep_operator "->"
	"%=" => Reduce #3 iexpression call rep_operator "->"
	"&&=" => Reduce #3 iexpression call rep_operator "->"
	"||=" => Reduce #3 iexpression call rep_operator "->"
	"|=" => Reduce #3 iexpression call rep_operator "->"
	"<<=" => Reduce #3 iexpression call rep_operator "->"
	">>=" => Reduce #3 iexpression call rep_operator "->"
	'.' => Reduce #3 iexpression call rep_operator "->"
[293]
	')' => Shift goto 368
[294]
	'(' => Reduce #3 expression call operator "()"
	')' => Reduce #3 expression call operator "()"
	';' => Reduce #3 expression call operator "()"
	',' => Reduce #3 expression call operator "()"
	'<' => Reduce #3 expression call operator "()"
	'>' => Reduce #3 expression call operator "()"
	'&' => Reduce #3 expression call operator "()"
	'^' => Reduce #3 expression call operator "()"
	'}' => Reduce #3 expression call operator "()"
	"->" => Reduce #3 expression call operator "()"
	'=' => Reduce #3 expression call operator "()"
	'+' => Reduce #3 expression call operator "()"
	'-' => Reduce #3 expression call operator "()"
	'*' => Reduce #3 expression call operator "()"
	'/' => Reduce #3 expression call operator "()"
	'%' => Reduce #3 expression call operator "()"
	"&&" => Reduce #3 expression call operator "()"
	"||" => Reduce #3 expression call operator "()"
	'|' => Reduce #3 expression call operator "()"
	"<<" => Reduce #3 expression call operator "()"
	">>" => Reduce #3 expression call operator "()"
	'[' => Reduce #3 expression call operator "()"
	']' => Reduce #3 expression call operator "()"
	"==" => Reduce #3 expression call operator "()"
	"!=" => Reduce #3 expression call operator "()"
	">=" => Reduce #3 expression call operator "()"
	"<=" => Reduce #3 expression call operator "()"
	"+=" => Reduce #3 expression call operator "()"
	"-=" => Reduce #3 expression call operator "()"
	"*=" => Reduce #3 expression call operator "()"
	"/=" => Reduce #3 expression call operator "()"
	"^=" => Reduce #3 expression call operator "()"
	"&=" => Reduce #3 expression call operator "()"
	"%=" => Reduce #3 expression call operator "()"
	"&&=" => Reduce #3 expression call operator "()"
	"||=" => Reduce #3 expression call operator "()"
	"|=" => Reduce #3 expression call operator "()"
	"<<=" => Reduce #3 expression call operator "()"
	">>=" => Reduce #3 expression call operator "()"
	'.' => Reduce #3 expression call operator "()"
[295]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "<"
	';' => Reduce #3 expression call operator "<"
	',' => Reduce #3 expression call operator "<"
	'<' => Reduce #3 expression call operator "<"
	'>' => Reduce #3 expression call operator "<"
	'&' => Reduce #3 expression call operator "<"
	'^' => Reduce #3 expression call operator "<"
	'}' => Reduce #3 expression call operator "<"
	"->" => Reduce #3 expression call operator "<"
	'=' => Reduce #3 expression call operator "<"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "<"
	"||" => Reduce #3 expression call operator "<"
	'|' => Reduce #3 expression call operator "<"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "<"
	"==" => Reduce #3 expression call operator "<"
	"!=" => Reduce #3 expression call operator "<"
	">=" => Reduce #3 expression call operator "<"
	"<=" => Reduce #3 expression call operator "<"
	"+=" => Reduce #3 expression call operator "<"
	"-=" => Reduce #3 expression call operator "<"
	"*=" => Reduce #3 expression call operator "<"
	"/=" => Reduce #3 expression call operator "<"
	"^=" => Reduce #3 expression call operator "<"
	"&=" => Reduce #3 expression call operator "<"
	"%=" => Reduce #3 expression call operator "<"
	"&&=" => Reduce #3 expression call operator "<"
	"||=" => Reduce #3 expression call operator "<"
	"|=" => Reduce #3 expression call operator "<"
	"<<=" => Reduce #3 expression call operator "<"
	">>=" => Reduce #3 expression call operator "<"
	'.' => Shift goto 208
[296]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator ">"
	';' => Reduce #3 expression call operator ">"
	',' => Reduce #3 expression call operator ">"
	'<' => Reduce #3 expression call operator ">"
	'>' => Reduce #3 expression call operator ">"
	'&' => Reduce #3 expression call operator ">"
	'^' => Reduce #3 expression call operator ">"
	'}' => Reduce #3 expression call operator ">"
	"->" => Reduce #3 expression call operator ">"
	'=' => Reduce #3 expression call operator ">"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator ">"
	"||" => Reduce #3 expression call operator ">"
	'|' => Reduce #3 expression call operator ">"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator ">"
	"==" => Reduce #3 expression call operator ">"
	"!=" => Reduce #3 expression call operator ">"
	">=" => Reduce #3 expression call operator ">"
	"<=" => Reduce #3 expression call operator ">"
	"+=" => Reduce #3 expression call operator ">"
	"-=" => Reduce #3 expression call operator ">"
	"*=" => Reduce #3 expression call operator ">"
	"/=" => Reduce #3 expression call operator ">"
	"^=" => Reduce #3 expression call operator ">"
	"&=" => Reduce #3 expression call operator ">"
	"%=" => Reduce #3 expression call operator ">"
	"&&=" => Reduce #3 expression call operator ">"
	"||=" => Reduce #3 expression call operator ">"
	"|=" => Reduce #3 expression call operator ">"
	"<<=" => Reduce #3 expression call operator ">"
	">>=" => Reduce #3 expression call operator ">"
	'.' => Shift goto 208
[297]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "&"
	';' => Reduce #3 expression call operator "&"
	',' => Reduce #3 expression call operator "&"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Reduce #3 expression call operator "&"
	'^' => Reduce #3 expression call operator "&"
	'}' => Reduce #3 expression call operator "&"
	"->" => Reduce #3 expression call operator "&"
	'=' => Reduce #3 expression call operator "&"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "&"
	"||" => Reduce #3 expression call operator "&"
	'|' => Reduce #3 expression call operator "&"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "&"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "&"
	"-=" => Reduce #3 expression call operator "&"
	"*=" => Reduce #3 expression call operator "&"
	"/=" => Reduce #3 expression call operator "&"
	"^=" => Reduce #3 expression call operator "&"
	"&=" => Reduce #3 expression call operator "&"
	"%=" => Reduce #3 expression call operator "&"
	"&&=" => Reduce #3 expression call operator "&"
	"||=" => Reduce #3 expression call operator "&"
	"|=" => Reduce #3 expression call operator "&"
	"<<=" => Reduce #3 expression call operator "&"
	">>=" => Reduce #3 expression call operator "&"
	'.' => Shift goto 208
[298]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "^"
	';' => Reduce #3 expression call operator "^"
	',' => Reduce #3 expression call operator "^"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Reduce #3 expression call operator "^"
	'^' => Reduce #3 expression call operator "^"
	'}' => Reduce #3 expression call operator "^"
	"->" => Reduce #3 expression call operator "^"
	'=' => Reduce #3 expression call operator "^"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "^"
	"||" => Reduce #3 expression call operator "^"
	'|' => Reduce #3 expression call operator "^"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "^"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "^"
	"-=" => Reduce #3 expression call operator "^"
	"*=" => Reduce #3 expression call operator "^"
	"/=" => Reduce #3 expression call operator "^"
	"^=" => Reduce #3 expression call operator "^"
	"&=" => Reduce #3 expression call operator "^"
	"%=" => Reduce #3 expression call operator "^"
	"&&=" => Reduce #3 expression call operator "^"
	"||=" => Reduce #3 expression call operator "^"
	"|=" => Reduce #3 expression call operator "^"
	"<<=" => Reduce #3 expression call operator "^"
	">>=" => Reduce #3 expression call operator "^"
	'.' => Shift goto 208
[299]
	IDENT => Reduce #2 indirection call count
[300]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "="
	';' => Reduce #3 expression call operator "="
	',' => Reduce #3 expression call operator "="
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call operator "="
	"->" => Reduce #3 expression call operator "="
	'=' => Reduce #3 expression call operator "="
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "="
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "="
	"-=" => Reduce #3 expression call operator "="
	"*=" => Reduce #3 expression call operator "="
	"/=" => Reduce #3 expression call operator "="
	"^=" => Reduce #3 expression call operator "="
	"&=" => Reduce #3 expression call operator "="
	"%=" => Reduce #3 expression call operator "="
	"&&=" => Reduce #3 expression call operator "="
	"||=" => Reduce #3 expression call operator "="
	"|=" => Reduce #3 expression call operator "="
	"<<=" => Reduce #3 expression call operator "="
	">>=" => Reduce #3 expression call operator "="
	'.' => Shift goto 208
[301]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "+"
	';' => Reduce #3 expression call operator "+"
	',' => Reduce #3 expression call operator "+"
	'<' => Reduce #3 expression call operator "+"
	'>' => Reduce #3 expression call operator "+"
	'&' => Reduce #3 expression call operator "+"
	'^' => Reduce #3 expression call operator "+"
	'}' => Reduce #3 expression call operator "+"
	"->" => Reduce #3 expression call operator "+"
	'=' => Reduce #3 expression call operator "+"
	'+' => Reduce #3 expression call operator "+"
	'-' => Reduce #3 expression call operator "+"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "+"
	"||" => Reduce #3 expression call operator "+"
	'|' => Reduce #3 expression call operator "+"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "+"
	"==" => Reduce #3 expression call operator "+"
	"!=" => Reduce #3 expression call operator "+"
	">=" => Reduce #3 expression call operator "+"
	"<=" => Reduce #3 expression call operator "+"
	"+=" => Reduce #3 expression call operator "+"
	"-=" => Reduce #3 expression call operator "+"
	"*=" => Reduce #3 expression call operator "+"
	"/=" => Reduce #3 expression call operator "+"
	"^=" => Reduce #3 expression call operator "+"
	"&=" => Reduce #3 expression call operator "+"
	"%=" => Reduce #3 expression call operator "+"
	"&&=" => Reduce #3 expression call operator "+"
	"||=" => Reduce #3 expression call operator "+"
	"|=" => Reduce #3 expression call operator "+"
	"<<=" => Reduce #3 expression call operator "+"
	">>=" => Reduce #3 expression call operator "+"
	'.' => Shift goto 208
[302]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "-"
	';' => Reduce #3 expression call operator "-"
	',' => Reduce #3 expression call operator "-"
	'<' => Reduce #3 expression call operator "-"
	'>' => Reduce #3 expression call operator "-"
	'&' => Reduce #3 expression call operator "-"
	'^' => Reduce #3 expression call operator "-"
	'}' => Reduce #3 expression call operator "-"
	"->" => Reduce #3 expression call operator "-"
	'=' => Reduce #3 expression call operator "-"
	'+' => Reduce #3 expression call operator "-"
	'-' => Reduce #3 expression call operator "-"
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "-"
	"||" => Reduce #3 expression call operator "-"
	'|' => Reduce #3 expression call operator "-"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "-"
	"==" => Reduce #3 expression call operator "-"
	"!=" => Reduce #3 expression call operator "-"
	">=" => Reduce #3 expression call operator "-"
	"<=" => Reduce #3 expression call operator "-"
	"+=" => Reduce #3 expression call operator "-"
	"-=" => Reduce #3 expression call operator "-"
	"*=" => Reduce #3 expression call operator "-"
	"/=" => Reduce #3 expression call operator "-"
	"^=" => Reduce #3 expression call operator "-"
	"&=" => Reduce #3 expression call operator "-"
	"%=" => Reduce #3 expression call operator "-"
	"&&=" => Reduce #3 expression call operator "-"
	"||=" => Reduce #3 expression call operator "-"
	"|=" => Reduce #3 expression call operator "-"
	"<<=" => Reduce #3 expression call operator "-"
	">>=" => Reduce #3 expression call operator "-"
	'.' => Shift goto 208
[303]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "*"
	';' => Reduce #3 expression call operator "*"
	',' => Reduce #3 expression call operator "*"
	'<' => Reduce #3 expression call operator "*"
	'>' => Reduce #3 expression call operator "*"
	'&' => Reduce #3 expression call operator "*"
	'^' => Reduce #3 expression call operator "*"
	'}' => Reduce #3 expression call operator "*"
	"->" => Reduce #3 expression call operator "*"
	'=' => Reduce #3 expression call operator "*"
	'+' => Reduce #3 expression call operator "*"
	'-' => Reduce #3 expression call operator "*"
	'*' => Reduce #3 expression call operator "*"
	'/' => Reduce #3 expression call operator "*"
	'%' => Reduce #3 expression call operator "*"
	"&&" => Reduce #3 expression call operator "*"
	"||" => Reduce #3 expression call operator "*"
	'|' => Reduce #3 expression call operator "*"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "*"
	"==" => Reduce #3 expression call operator "*"
	"!=" => Reduce #3 expression call operator "*"
	">=" => Reduce #3 expression call operator "*"
	"<=" => Reduce #3 expression call operator "*"
	"+=" => Reduce #3 expression call operator "*"
	"-=" => Reduce #3 expression call operator "*"
	"*=" => Reduce #3 expression call operator "*"
	"/=" => Reduce #3 expression call operator "*"
	"^=" => Reduce #3 expression call operator "*"
	"&=" => Reduce #3 expression call operator "*"
	"%=" => Reduce #3 expression call operator "*"
	"&&=" => Reduce #3 expression call operator "*"
	"||=" => Reduce #3 expression call operator "*"
	"|=" => Reduce #3 expression call operator "*"
	"<<=" => Reduce #3 expression call operator "*"
	">>=" => Reduce #3 expression call operator "*"
	'.' => Shift goto 208
[304]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "/"
	';' => Reduce #3 expression call operator "/"
	',' => Reduce #3 expression call operator "/"
	'<' => Reduce #3 expression call operator "/"
	'>' => Reduce #3 expression call operator "/"
	'&' => Reduce #3 expression call operator "/"
	'^' => Reduce #3 expression call operator "/"
	'}' => Reduce #3 expression call operator "/"
	"->" => Reduce #3 expression call operator "/"
	'=' => Reduce #3 expression call operator "/"
	'+' => Reduce #3 expression call operator "/"
	'-' => Reduce #3 expression call operator "/"
	'*' => Reduce #3 expression call operator "/"
	'/' => Reduce #3 expression call operator "/"
	'%' => Reduce #3 expression call operator "/"
	"&&" => Reduce #3 expression call operator "/"
	"||" => Reduce #3 expression call operator "/"
	'|' => Reduce #3 expression call operator "/"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "/"
	"==" => Reduce #3 expression call operator "/"
	"!=" => Reduce #3 expression call operator "/"
	">=" => Reduce #3 expression call operator "/"
	"<=" => Reduce #3 expression call operator "/"
	"+=" => Reduce #3 expression call operator "/"
	"-=" => Reduce #3 expression call operator "/"
	"*=" => Reduce #3 expression call operator "/"
	"/=" => Reduce #3 expression call operator "/"
	"^=" => Reduce #3 expression call operator "/"
	"&=" => Reduce #3 expression call operator "/"
	"%=" => Reduce #3 expression call operator "/"
	"&&=" => Reduce #3 expression call operator "/"
	"||=" => Reduce #3 expression call operator "/"
	"|=" => Reduce #3 expression call operator "/"
	"<<=" => Reduce #3 expression call operator "/"
	">>=" => Reduce #3 expression call operator "/"
	'.' => Shift goto 208
[305]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "%"
	';' => Reduce #3 expression call operator "%"
	',' => Reduce #3 expression call operator "%"
	'<' => Reduce #3 expression call operator "%"
	'>' => Reduce #3 expression call operator "%"
	'&' => Reduce #3 expression call operator "%"
	'^' => Reduce #3 expression call operator "%"
	'}' => Reduce #3 expression call operator "%"
	"->" => Reduce #3 expression call operator "%"
	'=' => Reduce #3 expression call operator "%"
	'+' => Reduce #3 expression call operator "%"
	'-' => Reduce #3 expression call operator "%"
	'*' => Reduce #3 expression call operator "%"
	'/' => Reduce #3 expression call operator "%"
	'%' => Reduce #3 expression call operator "%"
	"&&" => Reduce #3 expression call operator "%"
	"||" => Reduce #3 expression call operator "%"
	'|' => Reduce #3 expression call operator "%"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "%"
	"==" => Reduce #3 expression call operator "%"
	"!=" => Reduce #3 expression call operator "%"
	">=" => Reduce #3 expression call operator "%"
	"<=" => Reduce #3 expression call operator "%"
	"+=" => Reduce #3 expression call operator "%"
	"-=" => Reduce #3 expression call operator "%"
	"*=" => Reduce #3 expression call operator "%"
	"/=" => Reduce #3 expression call operator "%"
	"^=" => Reduce #3 expression call operator "%"
	"&=" => Reduce #3 expression call operator "%"
	"%=" => Reduce #3 expression call operator "%"
	"&&=" => Reduce #3 expression call operator "%"
	"||=" => Reduce #3 expression call operator "%"
	"|=" => Reduce #3 expression call operator "%"
	"<<=" => Reduce #3 expression call operator "%"
	">>=" => Reduce #3 expression call operator "%"
	'.' => Shift goto 208
[306]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "&&"
	';' => Reduce #3 expression call operator "&&"
	',' => Reduce #3 expression call operator "&&"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call operator "&&"
	"->" => Reduce #3 expression call operator "&&"
	'=' => Reduce #3 expression call operator "&&"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "&&"
	"||" => Reduce #3 expression call operator "&&"
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "&&"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "&&"
	"-=" => Reduce #3 expression call operator "&&"
	"*=" => Reduce #3 expression call operator "&&"
	"/=" => Reduce #3 expression call operator "&&"
	"^=" => Reduce #3 expression call operator "&&"
	"&=" => Reduce #3 expression call operator "&&"
	"%=" => Reduce #3 expression call operator "&&"
	"&&=" => Reduce #3 expression call operator "&&"
	"||=" => Reduce #3 expression call operator "&&"
	"|=" => Reduce #3 expression call operator "&&"
	"<<=" => Reduce #3 expression call operator "&&"
	">>=" => Reduce #3 expression call operator "&&"
	'.' => Shift goto 208
[307]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "||"
	';' => Reduce #3 expression call operator "||"
	',' => Reduce #3 expression call operator "||"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call operator "||"
	"->" => Reduce #3 expression call operator "||"
	'=' => Reduce #3 expression call operator "||"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Reduce #3 expression call operator "||"
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "||"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "||"
	"-=" => Reduce #3 expression call operator "||"
	"*=" => Reduce #3 expression call operator "||"
	"/=" => Reduce #3 expression call operator "||"
	"^=" => Reduce #3 expression call operator "||"
	"&=" => Reduce #3 expression call operator "||"
	"%=" => Reduce #3 expression call operator "||"
	"&&=" => Reduce #3 expression call operator "||"
	"||=" => Reduce #3 expression call operator "||"
	"|=" => Reduce #3 expression call operator "||"
	"<<=" => Reduce #3 expression call operator "||"
	">>=" => Reduce #3 expression call operator "||"
	'.' => Shift goto 208
[308]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "|"
	';' => Reduce #3 expression call operator "|"
	',' => Reduce #3 expression call operator "|"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call operator "|"
	"->" => Reduce #3 expression call operator "|"
	'=' => Reduce #3 expression call operator "|"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "|"
	"||" => Reduce #3 expression call operator "|"
	'|' => Reduce #3 expression call operator "|"
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "|"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call operator "|"
	"-=" => Reduce #3 expression call operator "|"
	"*=" => Reduce #3 expression call operator "|"
	"/=" => Reduce #3 expression call operator "|"
	"^=" => Reduce #3 expression call operator "|"
	"&=" => Reduce #3 expression call operator "|"
	"%=" => Reduce #3 expression call operator "|"
	"&&=" => Reduce #3 expression call operator "|"
	"||=" => Reduce #3 expression call operator "|"
	"|=" => Reduce #3 expression call operator "|"
	"<<=" => Reduce #3 expression call operator "|"
	">>=" => Reduce #3 expression call operator "|"
	'.' => Shift goto 208
[309]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "<<"
	';' => Reduce #3 expression call operator "<<"
	',' => Reduce #3 expression call operator "<<"
	'<' => Reduce #3 expression call operator "<<"
	'>' => Reduce #3 expression call operator "<<"
	'&' => Reduce #3 expression call operator "<<"
	'^' => Reduce #3 expression call operator "<<"
	'}' => Reduce #3 expression call operator "<<"
	"->" => Reduce #3 expression call operator "<<"
	'=' => Reduce #3 expression call operator "<<"
	'+' => Reduce #3 expression call operator "<<"
	'-' => Reduce #3 expression call operator "<<"
	'*' => Reduce #3 expression call operator "<<"
	'/' => Reduce #3 expression call operator "<<"
	'%' => Reduce #3 expression call operator "<<"
	"&&" => Reduce #3 expression call operator "<<"
	"||" => Reduce #3 expression call operator "<<"
	'|' => Reduce #3 expression call operator "<<"
	"<<" => Reduce #3 expression call operator "<<"
	">>" => Reduce #3 expression call operator "<<"
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "<<"
	"==" => Reduce #3 expression call operator "<<"
	"!=" => Reduce #3 expression call operator "<<"
	">=" => Reduce #3 expression call operator "<<"
	"<=" => Reduce #3 expression call operator "<<"
	"+=" => Reduce #3 expression call operator "<<"
	"-=" => Reduce #3 expression call operator "<<"
	"*=" => Reduce #3 expression call operator "<<"
	"/=" => Reduce #3 expression call operator "<<"
	"^=" => Reduce #3 expression call operator "<<"
	"&=" => Reduce #3 expression call operator "<<"
	"%=" => Reduce #3 expression call operator "<<"
	"&&=" => Reduce #3 expression call operator "<<"
	"||=" => Reduce #3 expression call operator "<<"
	"|=" => Reduce #3 expression call operator "<<"
	"<<=" => Reduce #3 expression call operator "<<"
	">>=" => Reduce #3 expression call operator "<<"
	'.' => Shift goto 208
[310]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator ">>"
	';' => Reduce #3 expression call operator ">>"
	',' => Reduce #3 expression call operator ">>"
	'<' => Reduce #3 expression call operator ">>"
	'>' => Reduce #3 expression call operator ">>"
	'&' => Reduce #3 expression call operator ">>"
	'^' => Reduce #3 expression call operator ">>"
	'}' => Reduce #3 expression call operator ">>"
	"->" => Reduce #3 expression call operator ">>"
	'=' => Reduce #3 expression call operator ">>"
	'+' => Reduce #3 expression call operator ">>"
	'-' => Reduce #3 expression call operator ">>"
	'*' => Reduce #3 expression call operator ">>"
	'/' => Reduce #3 expression call operator ">>"
	'%' => Reduce #3 expression call operator ">>"
	"&&" => Reduce #3 expression call operator ">>"
	"||" => Reduce #3 expression call operator ">>"
	'|' => Reduce #3 expression call operator ">>"
	"<<" => Reduce #3 expression call operator ">>"
	">>" => Reduce #3 expression call operator ">>"
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator ">>"
	"==" => Reduce #3 expression call operator ">>"
	"!=" => Reduce #3 expression call operator ">>"
	">=" => Reduce #3 expression call operator ">>"
	"<=" => Reduce #3 expression call operator ">>"
	"+=" => Reduce #3 expression call operator ">>"
	"-=" => Reduce #3 expression call operator ">>"
	"*=" => Reduce #3 expression call operator ">>"
	"/=" => Reduce #3 expression call operator ">>"
	"^=" => Reduce #3 expression call operator ">>"
	"&=" => Reduce #3 expression call operator ">>"
	"%=" => Reduce #3 expression call operator ">>"
	"&&=" => Reduce #3 expression call operator ">>"
	"||=" => Reduce #3 expression call operator ">>"
	"|=" => Reduce #3 expression call operator ">>"
	"<<=" => Reduce #3 expression call operator ">>"
	">>=" => Reduce #3 expression call operator ">>"
	'.' => Shift goto 208
[311]
	']' => Shift goto 369
[312]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "=="
	';' => Reduce #3 expression call operator "=="
	',' => Reduce #3 expression call operator "=="
	'<' => Reduce #3 expression call operator "=="
	'>' => Reduce #3 expression call operator "=="
	'&' => Reduce #3 expression call operator "=="
	'^' => Reduce #3 expression call operator "=="
	'}' => Reduce #3 expression call operator "=="
	"->" => Reduce #3 expression call operator "=="
	'=' => Reduce #3 expression call operator "=="
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "=="
	"||" => Reduce #3 expression call operator "=="
	'|' => Reduce #3 expression call operator "=="
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "=="
	"==" => Reduce #3 expression call operator "=="
	"!=" => Reduce #3 expression call operator "=="
	">=" => Reduce #3 expression call operator "=="
	"<=" => Reduce #3 expression call operator "=="
	"+=" => Reduce #3 expression call operator "=="
	"-=" => Reduce #3 expression call operator "=="
	"*=" => Reduce #3 expression call operator "=="
	"/=" => Reduce #3 expression call operator "=="
	"^=" => Reduce #3 expression call operator "=="
	"&=" => Reduce #3 expression call operator "=="
	"%=" => Reduce #3 expression call operator "=="
	"&&=" => Reduce #3 expression call operator "=="
	"||=" => Reduce #3 expression call operator "=="
	"|=" => Reduce #3 expression call operator "=="
	"<<=" => Reduce #3 expression call operator "=="
	">>=" => Reduce #3 expression call operator "=="
	'.' => Shift goto 208
[313]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "!="
	';' => Reduce #3 expression call operator "!="
	',' => Reduce #3 expression call operator "!="
	'<' => Reduce #3 expression call operator "!="
	'>' => Reduce #3 expression call operator "!="
	'&' => Reduce #3 expression call operator "!="
	'^' => Reduce #3 expression call operator "!="
	'}' => Reduce #3 expression call operator "!="
	"->" => Reduce #3 expression call operator "!="
	'=' => Reduce #3 expression call operator "!="
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "!="
	"||" => Reduce #3 expression call operator "!="
	'|' => Reduce #3 expression call operator "!="
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "!="
	"==" => Reduce #3 expression call operator "!="
	"!=" => Reduce #3 expression call operator "!="
	">=" => Reduce #3 expression call operator "!="
	"<=" => Reduce #3 expression call operator "!="
	"+=" => Reduce #3 expression call operator "!="
	"-=" => Reduce #3 expression call operator "!="
	"*=" => Reduce #3 expression call operator "!="
	"/=" => Reduce #3 expression call operator "!="
	"^=" => Reduce #3 expression call operator "!="
	"&=" => Reduce #3 expression call operator "!="
	"%=" => Reduce #3 expression call operator "!="
	"&&=" => Reduce #3 expression call operator "!="
	"||=" => Reduce #3 expression call operator "!="
	"|=" => Reduce #3 expression call operator "!="
	"<<=" => Reduce #3 expression call operator "!="
	">>=" => Reduce #3 expression call operator "!="
	'.' => Shift goto 208
[314]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator ">="
	';' => Reduce #3 expression call operator ">="
	',' => Reduce #3 expression call operator ">="
	'<' => Reduce #3 expression call operator ">="
	'>' => Reduce #3 expression call operator ">="
	'&' => Reduce #3 expression call operator ">="
	'^' => Reduce #3 expression call operator ">="
	'}' => Reduce #3 expression call operator ">="
	"->" => Reduce #3 expression call operator ">="
	'=' => Reduce #3 expression call operator ">="
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator ">="
	"||" => Reduce #3 expression call operator ">="
	'|' => Reduce #3 expression call operator ">="
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator ">="
	"==" => Reduce #3 expression call operator ">="
	"!=" => Reduce #3 expression call operator ">="
	">=" => Reduce #3 expression call operator ">="
	"<=" => Reduce #3 expression call operator ">="
	"+=" => Reduce #3 expression call operator ">="
	"-=" => Reduce #3 expression call operator ">="
	"*=" => Reduce #3 expression call operator ">="
	"/=" => Reduce #3 expression call operator ">="
	"^=" => Reduce #3 expression call operator ">="
	"&=" => Reduce #3 expression call operator ">="
	"%=" => Reduce #3 expression call operator ">="
	"&&=" => Reduce #3 expression call operator ">="
	"||=" => Reduce #3 expression call operator ">="
	"|=" => Reduce #3 expression call operator ">="
	"<<=" => Reduce #3 expression call operator ">="
	">>=" => Reduce #3 expression call operator ">="
	'.' => Shift goto 208
[315]
	'(' => Shift goto 173
	')' => Reduce #3 expression call operator "<="
	';' => Reduce #3 expression call operator "<="
	',' => Reduce #3 expression call operator "<="
	'<' => Reduce #3 expression call operator "<="
	'>' => Reduce #3 expression call operator "<="
	'&' => Reduce #3 expression call operator "<="
	'^' => Reduce #3 expression call operator "<="
	'}' => Reduce #3 expression call operator "<="
	"->" => Reduce #3 expression call operator "<="
	'=' => Reduce #3 expression call operator "<="
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Reduce #3 expression call operator "<="
	"||" => Reduce #3 expression call operator "<="
	'|' => Reduce #3 expression call operator "<="
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call operator "<="
	"==" => Reduce #3 expression call operator "<="
	"!=" => Reduce #3 expression call operator "<="
	">=" => Reduce #3 expression call operator "<="
	"<=" => Reduce #3 expression call operator "<="
	"+=" => Reduce #3 expression call operator "<="
	"-=" => Reduce #3 expression call operator "<="
	"*=" => Reduce #3 expression call operator "<="
	"/=" => Reduce #3 expression call operator "<="
	"^=" => Reduce #3 expression call operator "<="
	"&=" => Reduce #3 expression call operator "<="
	"%=" => Reduce #3 expression call operator "<="
	"&&=" => Reduce #3 expression call operator "<="
	"||=" => Reduce #3 expression call operator "<="
	"|=" => Reduce #3 expression call operator "<="
	"<<=" => Reduce #3 expression call operator "<="
	">>=" => Reduce #3 expression call operator "<="
	'.' => Shift goto 208
[316]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "+"
	';' => Reduce #3 expression call assign_operator "+"
	',' => Reduce #3 expression call assign_operator "+"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "+"
	"->" => Reduce #3 expression call assign_operator "+"
	'=' => Reduce #3 expression call assign_operator "+"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "+"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "+"
	"-=" => Reduce #3 expression call assign_operator "+"
	"*=" => Reduce #3 expression call assign_operator "+"
	"/=" => Reduce #3 expression call assign_operator "+"
	"^=" => Reduce #3 expression call assign_operator "+"
	"&=" => Reduce #3 expression call assign_operator "+"
	"%=" => Reduce #3 expression call assign_operator "+"
	"&&=" => Reduce #3 expression call assign_operator "+"
	"||=" => Reduce #3 expression call assign_operator "+"
	"|=" => Reduce #3 expression call assign_operator "+"
	"<<=" => Reduce #3 expression call assign_operator "+"
	">>=" => Reduce #3 expression call assign_operator "+"
	'.' => Shift goto 208
[317]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "-"
	';' => Reduce #3 expression call assign_operator "-"
	',' => Reduce #3 expression call assign_operator "-"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "-"
	"->" => Reduce #3 expression call assign_operator "-"
	'=' => Reduce #3 expression call assign_operator "-"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "-"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "-"
	"-=" => Reduce #3 expression call assign_operator "-"
	"*=" => Reduce #3 expression call assign_operator "-"
	"/=" => Reduce #3 expression call assign_operator "-"
	"^=" => Reduce #3 expression call assign_operator "-"
	"&=" => Reduce #3 expression call assign_operator "-"
	"%=" => Reduce #3 expression call assign_operator "-"
	"&&=" => Reduce #3 expression call assign_operator "-"
	"||=" => Reduce #3 expression call assign_operator "-"
	"|=" => Reduce #3 expression call assign_operator "-"
	"<<=" => Reduce #3 expression call assign_operator "-"
	">>=" => Reduce #3 expression call assign_operator "-"
	'.' => Shift goto 208
[318]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "*"
	';' => Reduce #3 expression call assign_operator "*"
	',' => Reduce #3 expression call assign_operator "*"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "*"
	"->" => Reduce #3 expression call assign_operator "*"
	'=' => Reduce #3 expression call assign_operator "*"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "*"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "*"
	"-=" => Reduce #3 expression call assign_operator "*"
	"*=" => Reduce #3 expression call assign_operator "*"
	"/=" => Reduce #3 expression call assign_operator "*"
	"^=" => Reduce #3 expression call assign_operator "*"
	"&=" => Reduce #3 expression call assign_operator "*"
	"%=" => Reduce #3 expression call assign_operator "*"
	"&&=" => Reduce #3 expression call assign_operator "*"
	"||=" => Reduce #3 expression call assign_operator "*"
	"|=" => Reduce #3 expression call assign_operator "*"
	"<<=" => Reduce #3 expression call assign_operator "*"
	">>=" => Reduce #3 expression call assign_operator "*"
	'.' => Shift goto 208
[319]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "/"
	';' => Reduce #3 expression call assign_operator "/"
	',' => Reduce #3 expression call assign_operator "/"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "/"
	"->" => Reduce #3 expression call assign_operator "/"
	'=' => Reduce #3 expression call assign_operator "/"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "/"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "/"
	"-=" => Reduce #3 expression call assign_operator "/"
	"*=" => Reduce #3 expression call assign_operator "/"
	"/=" => Reduce #3 expression call assign_operator "/"
	"^=" => Reduce #3 expression call assign_operator "/"
	"&=" => Reduce #3 expression call assign_operator "/"
	"%=" => Reduce #3 expression call assign_operator "/"
	"&&=" => Reduce #3 expression call assign_operator "/"
	"||=" => Reduce #3 expression call assign_operator "/"
	"|=" => Reduce #3 expression call assign_operator "/"
	"<<=" => Reduce #3 expression call assign_operator "/"
	">>=" => Reduce #3 expression call assign_operator "/"
	'.' => Shift goto 208
[320]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "^"
	';' => Reduce #3 expression call assign_operator "^"
	',' => Reduce #3 expression call assign_operator "^"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "^"
	"->" => Reduce #3 expression call assign_operator "^"
	'=' => Reduce #3 expression call assign_operator "^"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "^"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "^"
	"-=" => Reduce #3 expression call assign_operator "^"
	"*=" => Reduce #3 expression call assign_operator "^"
	"/=" => Reduce #3 expression call assign_operator "^"
	"^=" => Reduce #3 expression call assign_operator "^"
	"&=" => Reduce #3 expression call assign_operator "^"
	"%=" => Reduce #3 expression call assign_operator "^"
	"&&=" => Reduce #3 expression call assign_operator "^"
	"||=" => Reduce #3 expression call assign_operator "^"
	"|=" => Reduce #3 expression call assign_operator "^"
	"<<=" => Reduce #3 expression call assign_operator "^"
	">>=" => Reduce #3 expression call assign_operator "^"
	'.' => Shift goto 208
[321]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "&"
	';' => Reduce #3 expression call assign_operator "&"
	',' => Reduce #3 expression call assign_operator "&"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "&"
	"->" => Reduce #3 expression call assign_operator "&"
	'=' => Reduce #3 expression call assign_operator "&"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "&"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "&"
	"-=" => Reduce #3 expression call assign_operator "&"
	"*=" => Reduce #3 expression call assign_operator "&"
	"/=" => Reduce #3 expression call assign_operator "&"
	"^=" => Reduce #3 expression call assign_operator "&"
	"&=" => Reduce #3 expression call assign_operator "&"
	"%=" => Reduce #3 expression call assign_operator "&"
	"&&=" => Reduce #3 expression call assign_operator "&"
	"||=" => Reduce #3 expression call assign_operator "&"
	"|=" => Reduce #3 expression call assign_operator "&"
	"<<=" => Reduce #3 expression call assign_operator "&"
	">>=" => Reduce #3 expression call assign_operator "&"
	'.' => Shift goto 208
[322]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "%"
	';' => Reduce #3 expression call assign_operator "%"
	',' => Reduce #3 expression call assign_operator "%"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "%"
	"->" => Reduce #3 expression call assign_operator "%"
	'=' => Reduce #3 expression call assign_operator "%"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "%"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "%"
	"-=" => Reduce #3 expression call assign_operator "%"
	"*=" => Reduce #3 expression call assign_operator "%"
	"/=" => Reduce #3 expression call assign_operator "%"
	"^=" => Reduce #3 expression call assign_operator "%"
	"&=" => Reduce #3 expression call assign_operator "%"
	"%=" => Reduce #3 expression call assign_operator "%"
	"&&=" => Reduce #3 expression call assign_operator "%"
	"||=" => Reduce #3 expression call assign_operator "%"
	"|=" => Reduce #3 expression call assign_operator "%"
	"<<=" => Reduce #3 expression call assign_operator "%"
	">>=" => Reduce #3 expression call assign_operator "%"
	'.' => Shift goto 208
[323]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "&&"
	';' => Reduce #3 expression call assign_operator "&&"
	',' => Reduce #3 expression call assign_operator "&&"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "&&"
	"->" => Reduce #3 expression call assign_operator "&&"
	'=' => Reduce #3 expression call assign_operator "&&"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "&&"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "&&"
	"-=" => Reduce #3 expression call assign_operator "&&"
	"*=" => Reduce #3 expression call assign_operator "&&"
	"/=" => Reduce #3 expression call assign_operator "&&"
	"^=" => Reduce #3 expression call assign_operator "&&"
	"&=" => Reduce #3 expression call assign_operator "&&"
	"%=" => Reduce #3 expression call assign_operator "&&"
	"&&=" => Reduce #3 expression call assign_operator "&&"
	"||=" => Reduce #3 expression call assign_operator "&&"
	"|=" => Reduce #3 expression call assign_operator "&&"
	"<<=" => Reduce #3 expression call assign_operator "&&"
	">>=" => Reduce #3 expression call assign_operator "&&"
	'.' => Shift goto 208
[324]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "||"
	';' => Reduce #3 expression call assign_operator "||"
	',' => Reduce #3 expression call assign_operator "||"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "||"
	"->" => Reduce #3 expression call assign_operator "||"
	'=' => Reduce #3 expression call assign_operator "||"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "||"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "||"
	"-=" => Reduce #3 expression call assign_operator "||"
	"*=" => Reduce #3 expression call assign_operator "||"
	"/=" => Reduce #3 expression call assign_operator "||"
	"^=" => Reduce #3 expression call assign_operator "||"
	"&=" => Reduce #3 expression call assign_operator "||"
	"%=" => Reduce #3 expression call assign_operator "||"
	"&&=" => Reduce #3 expression call assign_operator "||"
	"||=" => Reduce #3 expression call assign_operator "||"
	"|=" => Reduce #3 expression call assign_operator "||"
	"<<=" => Reduce #3 expression call assign_operator "||"
	">>=" => Reduce #3 expression call assign_operator "||"
	'.' => Shift goto 208
[325]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "|"
	';' => Reduce #3 expression call assign_operator "|"
	',' => Reduce #3 expression call assign_operator "|"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "|"
	"->" => Reduce #3 expression call assign_operator "|"
	'=' => Reduce #3 expression call assign_operator "|"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "|"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "|"
	"-=" => Reduce #3 expression call assign_operator "|"
	"*=" => Reduce #3 expression call assign_operator "|"
	"/=" => Reduce #3 expression call assign_operator "|"
	"^=" => Reduce #3 expression call assign_operator "|"
	"&=" => Reduce #3 expression call assign_operator "|"
	"%=" => Reduce #3 expression call assign_operator "|"
	"&&=" => Reduce #3 expression call assign_operator "|"
	"||=" => Reduce #3 expression call assign_operator "|"
	"|=" => Reduce #3 expression call assign_operator "|"
	"<<=" => Reduce #3 expression call assign_operator "|"
	">>=" => Reduce #3 expression call assign_operator "|"
	'.' => Shift goto 208
[326]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator "<<"
	';' => Reduce #3 expression call assign_operator "<<"
	',' => Reduce #3 expression call assign_operator "<<"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator "<<"
	"->" => Reduce #3 expression call assign_operator "<<"
	'=' => Reduce #3 expression call assign_operator "<<"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator "<<"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator "<<"
	"-=" => Reduce #3 expression call assign_operator "<<"
	"*=" => Reduce #3 expression call assign_operator "<<"
	"/=" => Reduce #3 expression call assign_operator "<<"
	"^=" => Reduce #3 expression call assign_operator "<<"
	"&=" => Reduce #3 expression call assign_operator "<<"
	"%=" => Reduce #3 expression call assign_operator "<<"
	"&&=" => Reduce #3 expression call assign_operator "<<"
	"||=" => Reduce #3 expression call assign_operator "<<"
	"|=" => Reduce #3 expression call assign_operator "<<"
	"<<=" => Reduce #3 expression call assign_operator "<<"
	">>=" => Reduce #3 expression call assign_operator "<<"
	'.' => Shift goto 208
[327]
	'(' => Shift goto 173
	')' => Reduce #3 expression call assign_operator ">>"
	';' => Reduce #3 expression call assign_operator ">>"
	',' => Reduce #3 expression call assign_operator ">>"
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #3 expression call assign_operator ">>"
	"->" => Reduce #3 expression call assign_operator ">>"
	'=' => Reduce #3 expression call assign_operator ">>"
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #3 expression call assign_operator ">>"
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Reduce #3 expression call assign_operator ">>"
	"-=" => Reduce #3 expression call assign_operator ">>"
	"*=" => Reduce #3 expression call assign_operator ">>"
	"/=" => Reduce #3 expression call assign_operator ">>"
	"^=" => Reduce #3 expression call assign_operator ">>"
	"&=" => Reduce #3 expression call assign_operator ">>"
	"%=" => Reduce #3 expression call assign_operator ">>"
	"&&=" => Reduce #3 expression call assign_operator ">>"
	"||=" => Reduce #3 expression call assign_operator ">>"
	"|=" => Reduce #3 expression call assign_operator ">>"
	"<<=" => Reduce #3 expression call assign_operator ">>"
	">>=" => Reduce #3 expression call assign_operator ">>"
	'.' => Shift goto 208
[328]
	'(' => Reduce #3 expression call member
	')' => Reduce #3 expression call member
	';' => Reduce #3 expression call member
	',' => Reduce #3 expression call member
	'<' => Reduce #3 expression call member
	'>' => Reduce #3 expression call member
	'&' => Reduce #3 expression call member
	'^' => Reduce #3 expression call member
	'}' => Reduce #3 expression call member
	"->" => Reduce #3 expression call member
	'=' => Reduce #3 expression call member
	'+' => Reduce #3 expression call member
	'-' => Reduce #3 expression call member
	'*' => Reduce #3 expression call member
	'/' => Reduce #3 expression call member
	'%' => Reduce #3 expression call member
	"&&" => Reduce #3 expression call member
	"||" => Reduce #3 expression call member
	'|' => Reduce #3 expression call member
	"<<" => Reduce #3 expression call member
	">>" => Reduce #3 expression call member
	'[' => Reduce #3 expression call member
	']' => Reduce #3 expression call member
	"==" => Reduce #3 expression call member
	"!=" => Reduce #3 expression call member
	">=" => Reduce #3 expression call member
	"<=" => Reduce #3 expression call member
	"+=" => Reduce #3 expression call member
	"-=" => Reduce #3 expression call member
	"*=" => Reduce #3 expression call member
	"/=" => Reduce #3 expression call member
	"^=" => Reduce #3 expression call member
	"&=" => Reduce #3 expression call member
	"%=" => Reduce #3 expression call member
	"&&=" => Reduce #3 expression call member
	"||=" => Reduce #3 expression call member
	"|=" => Reduce #3 expression call member
	"<<=" => Reduce #3 expression call member
	">>=" => Reduce #3 expression call member
	'.' => Reduce #3 expression call member
[329]
	'(' => Reduce #3 expression
	')' => Reduce #3 expression
	';' => Reduce #3 expression
	',' => Reduce #3 expression
	'<' => Reduce #3 expression
	'>' => Reduce #3 expression
	'&' => Reduce #3 expression
	'^' => Reduce #3 expression
	'}' => Reduce #3 expression
	"->" => Reduce #3 expression
	'=' => Reduce #3 expression
	'+' => Reduce #3 expression
	'-' => Reduce #3 expression
	'*' => Reduce #3 expression
	'/' => Reduce #3 expression
	'%' => Reduce #3 expression
	"&&" => Reduce #3 expression
	"||" => Reduce #3 expression
	'|' => Reduce #3 expression
	"<<" => Reduce #3 expression
	">>" => Reduce #3 expression
	'[' => Reduce #3 expression
	']' => Reduce #3 expression
	"==" => Reduce #3 expression
	"!=" => Reduce #3 expression
	">=" => Reduce #3 expression
	"<=" => Reduce #3 expression
	"+=" => Reduce #3 expression
	"-=" => Reduce #3 expression
	"*=" => Reduce #3 expression
	"/=" => Reduce #3 expression
	"^=" => Reduce #3 expression
	"&=" => Reduce #3 expression
	"%=" => Reduce #3 expression
	"&&=" => Reduce #3 expression
	"||=" => Reduce #3 expression
	"|=" => Reduce #3 expression
	"<<=" => Reduce #3 expression
	">>=" => Reduce #3 expression
	'.' => Reduce #3 expression
[330]
	$ => Reduce #3 statement
	BOOLEAN => Reduce #3 statement
	IDENT => Reduce #3 statement
	DQSTRING => Reduce #3 statement
	SQSTRING => Reduce #3 statement
	CARDINAL => Reduce #3 statement
	INTEGER => Reduce #3 statement
	FLOAT => Reduce #3 statement
	"function" => Reduce #3 statement
	'(' => Reduce #3 statement
	"procedure" => Reduce #3 statement
	'&' => Reduce #3 statement
	"typedef" => Reduce #3 statement
	'{' => Reduce #3 statement
	'}' => Reduce #3 statement
	"private" => Reduce #3 statement
	"public" => Reduce #3 statement
	'+' => Reduce #3 statement
	'-' => Reduce #3 statement
	'*' => Reduce #3 statement
	'~' => Reduce #3 statement
	'!' => Reduce #3 statement
	"var" => Reduce #3 statement
	"return" => Reduce #3 statement
	"delete" => Reduce #3 statement
	"if" => Reduce #3 statement
	"while" => Reduce #3 statement
	"with" => Reduce #3 statement
	"new" => Reduce #3 statement
	"cast" => Reduce #3 statement
	"null" => Reduce #3 statement
[331]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[332]
	'(' => Reduce #3 expression call structure
	')' => Reduce #3 expression call structure
	';' => Reduce #3 expression call structure
	',' => Reduce #3 expression call structure
	'<' => Reduce #3 expression call structure
	'>' => Reduce #3 expression call structure
	'&' => Reduce #3 expression call structure
	'^' => Reduce #3 expression call structure
	'}' => Reduce #3 expression call structure
	"->" => Reduce #3 expression call structure
	'=' => Reduce #3 expression call structure
	'+' => Reduce #3 expression call structure
	'-' => Reduce #3 expression call structure
	'*' => Reduce #3 expression call structure
	'/' => Reduce #3 expression call structure
	'%' => Reduce #3 expression call structure
	"&&" => Reduce #3 expression call structure
	"||" => Reduce #3 expression call structure
	'|' => Reduce #3 expression call structure
	"<<" => Reduce #3 expression call structure
	">>" => Reduce #3 expression call structure
	'[' => Reduce #3 expression call structure
	']' => Reduce #3 expression call structure
	"==" => Reduce #3 expression call structure
	"!=" => Reduce #3 expression call structure
	">=" => Reduce #3 expression call structure
	"<=" => Reduce #3 expression call structure
	"+=" => Reduce #3 expression call structure
	"-=" => Reduce #3 expression call structure
	"*=" => Reduce #3 expression call structure
	"/=" => Reduce #3 expression call structure
	"^=" => Reduce #3 expression call structure
	"&=" => Reduce #3 expression call structure
	"%=" => Reduce #3 expression call structure
	"&&=" => Reduce #3 expression call structure
	"||=" => Reduce #3 expression call structure
	"|=" => Reduce #3 expression call structure
	"<<=" => Reduce #3 expression call structure
	">>=" => Reduce #3 expression call structure
	'.' => Reduce #3 expression call structure
[333]
	$ => Reduce #3 statement call definition
	BOOLEAN => Reduce #3 statement call definition
	IDENT => Reduce #3 statement call definition
	DQSTRING => Reduce #3 statement call definition
	SQSTRING => Reduce #3 statement call definition
	CARDINAL => Reduce #3 statement call definition
	INTEGER => Reduce #3 statement call definition
	FLOAT => Reduce #3 statement call definition
	"function" => Reduce #3 statement call definition
	'(' => Reduce #3 statement call definition
	"procedure" => Reduce #3 statement call definition
	'&' => Reduce #3 statement call definition
	"typedef" => Reduce #3 statement call definition
	'{' => Reduce #3 statement call definition
	'}' => Reduce #3 statement call definition
	"private" => Reduce #3 statement call definition
	"public" => Reduce #3 statement call definition
	'+' => Reduce #3 statement call definition
	'-' => Reduce #3 statement call definition
	'*' => Reduce #3 statement call definition
	'~' => Reduce #3 statement call definition
	'!' => Reduce #3 statement call definition
	"var" => Reduce #3 statement call definition
	"return" => Reduce #3 statement call definition
	"delete" => Reduce #3 statement call definition
	"if" => Reduce #3 statement call definition
	"while" => Reduce #3 statement call definition
	"with" => Reduce #3 statement call definition
	"new" => Reduce #3 statement call definition
	"cast" => Reduce #3 statement call definition
	"null" => Reduce #3 statement call definition
[334]
	$ => Reduce #3 statement call return_value
	BOOLEAN => Reduce #3 statement call return_value
	IDENT => Reduce #3 statement call return_value
	DQSTRING => Reduce #3 statement call return_value
	SQSTRING => Reduce #3 statement call return_value
	CARDINAL => Reduce #3 statement call return_value
	INTEGER => Reduce #3 statement call return_value
	FLOAT => Reduce #3 statement call return_value
	"function" => Reduce #3 statement call return_value
	'(' => Reduce #3 statement call return_value
	"procedure" => Reduce #3 statement call return_value
	'&' => Reduce #3 statement call return_value
	"typedef" => Reduce #3 statement call return_value
	'{' => Reduce #3 statement call return_value
	'}' => Reduce #3 statement call return_value
	"private" => Reduce #3 statement call return_value
	"public" => Reduce #3 statement call return_value
	'+' => Reduce #3 statement call return_value
	'-' => Reduce #3 statement call return_value
	'*' => Reduce #3 statement call return_value
	'~' => Reduce #3 statement call return_value
	'!' => Reduce #3 statement call return_value
	"var" => Reduce #3 statement call return_value
	"return" => Reduce #3 statement call return_value
	"delete" => Reduce #3 statement call return_value
	"if" => Reduce #3 statement call return_value
	"while" => Reduce #3 statement call return_value
	"with" => Reduce #3 statement call return_value
	"new" => Reduce #3 statement call return_value
	"cast" => Reduce #3 statement call return_value
	"null" => Reduce #3 statement call return_value
[335]
	$ => Reduce #3 statement call delete
	BOOLEAN => Reduce #3 statement call delete
	IDENT => Reduce #3 statement call delete
	DQSTRING => Reduce #3 statement call delete
	SQSTRING => Reduce #3 statement call delete
	CARDINAL => Reduce #3 statement call delete
	INTEGER => Reduce #3 statement call delete
	FLOAT => Reduce #3 statement call delete
	"function" => Reduce #3 statement call delete
	'(' => Reduce #3 statement call delete
	"procedure" => Reduce #3 statement call delete
	'&' => Reduce #3 statement call delete
	"typedef" => Reduce #3 statement call delete
	'{' => Reduce #3 statement call delete
	'}' => Reduce #3 statement call delete
	"private" => Reduce #3 statement call delete
	"public" => Reduce #3 statement call delete
	'+' => Reduce #3 statement call delete
	'-' => Reduce #3 statement call delete
	'*' => Reduce #3 statement call delete
	'~' => Reduce #3 statement call delete
	'!' => Reduce #3 statement call delete
	"var" => Reduce #3 statement call delete
	"return" => Reduce #3 statement call delete
	"delete" => Reduce #3 statement call delete
	"if" => Reduce #3 statement call delete
	"while" => Reduce #3 statement call delete
	"with" => Reduce #3 statement call delete
	"new" => Reduce #3 statement call delete
	"cast" => Reduce #3 statement call delete
	"null" => Reduce #3 statement call delete
[336]
	'(' => Shift goto 173
	')' => Shift goto 371
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[337]
	'(' => Shift goto 173
	')' => Shift goto 372
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[338]
	'(' => Shift goto 173
	')' => Shift goto 373
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[339]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[340]
	'{' => Shift goto 375
[341]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[342]
	')' => Reduce #2 paramdecl call paramdef
	',' => Reduce #2 paramdecl call paramdef
[343]
	"const" => Shift goto 377
	'{' => Shift goto 378
[344]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[345]
	IDENT => Shift goto 18
	'(' => Shift goto 126
	"const" => Shift goto 19
	"any" => Shift goto 20
[346]
	$ => Reduce #3 constructordefinition call constructordef
	IDENT => Reduce #3 constructordefinition call constructordef
	"function" => Reduce #3 constructordefinition call constructordef
	"procedure" => Reduce #3 constructordefinition call constructordef
	"const" => Reduce #3 constructordefinition call constructordef
	"operator" => Reduce #3 constructordefinition call constructordef
	"any" => Reduce #3 constructordefinition call constructordef
	"class" => Reduce #3 constructordefinition call constructordef
	"struct" => Reduce #3 constructordefinition call constructordef
	"typedef" => Reduce #3 constructordefinition call constructordef
	'}' => Reduce #3 constructordefinition call constructordef
	"generic" => Reduce #3 constructordefinition call constructordef
	"interface" => Reduce #3 constructordefinition call constructordef
	"private" => Reduce #3 constructordefinition call constructordef
	"public" => Reduce #3 constructordefinition call constructordef
	"constructor" => Reduce #3 constructordefinition call constructordef
	"destructor" => Reduce #3 constructordefinition call constructordef
[347]
	IDENT => Shift goto 18
	')' => Reduce #0 parameterlist call paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[348]
	'}' => Shift goto 384
[349]
	'{' => Reduce #3 inheritlist call inheritdef 1
[350]
	'}' => Shift goto 385
[351]
	')' => Shift goto 386
[352]
	';' => Reduce #6 typedefinition call typedef_proctype
[353]
	')' => Reduce #2 extern_parameters call extern_paramdef
	"..." => Reduce #2 extern_parameters call extern_paramdef
	',' => Shift goto 387
[354]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[355]
	'{' => Shift goto 389
	':' => Shift goto 390
[356]
	IDENT => Shift goto 257
[357]
	IDENT => Shift goto 18
[358]
	'{' => Shift goto 394
[359]
	'(' => Shift goto 395
[360]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[361]
	'(' => Shift goto 397
[362]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[363]
	IDENT => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	'(' => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	"const" => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
	"any" => Reduce #2 operatordecl call operatordecl {name="()",symbol="call"}
[364]
	IDENT => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	'(' => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	"const" => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
	"any" => Reduce #2 operatordecl call operatordecl {name="[]",symbol="get"}
[365]
	')' => Shift goto 399
	"..." => Shift goto 400
[366]
	';' => Shift goto 401
[367]
	')' => Shift goto 402
[368]
	'(' => Reduce #4 expression call operator "()"
	')' => Reduce #4 expression call operator "()"
	';' => Reduce #4 expression call operator "()"
	',' => Reduce #4 expression call operator "()"
	'<' => Reduce #4 expression call operator "()"
	'>' => Reduce #4 expression call operator "()"
	'&' => Reduce #4 expression call operator "()"
	'^' => Reduce #4 expression call operator "()"
	'}' => Reduce #4 expression call operator "()"
	"->" => Reduce #4 expression call operator "()"
	'=' => Reduce #4 expression call operator "()"
	'+' => Reduce #4 expression call operator "()"
	'-' => Reduce #4 expression call operator "()"
	'*' => Reduce #4 expression call operator "()"
	'/' => Reduce #4 expression call operator "()"
	'%' => Reduce #4 expression call operator "()"
	"&&" => Reduce #4 expression call operator "()"
	"||" => Reduce #4 expression call operator "()"
	'|' => Reduce #4 expression call operator "()"
	"<<" => Reduce #4 expression call operator "()"
	">>" => Reduce #4 expression call operator "()"
	'[' => Reduce #4 expression call operator "()"
	']' => Reduce #4 expression call operator "()"
	"==" => Reduce #4 expression call operator "()"
	"!=" => Reduce #4 expression call operator "()"
	">=" => Reduce #4 expression call operator "()"
	"<=" => Reduce #4 expression call operator "()"
	"+=" => Reduce #4 expression call operator "()"
	"-=" => Reduce #4 expression call operator "()"
	"*=" => Reduce #4 expression call operator "()"
	"/=" => Reduce #4 expression call operator "()"
	"^=" => Reduce #4 expression call operator "()"
	"&=" => Reduce #4 expression call operator "()"
	"%=" => Reduce #4 expression call operator "()"
	"&&=" => Reduce #4 expression call operator "()"
	"||=" => Reduce #4 expression call operator "()"
	"|=" => Reduce #4 expression call operator "()"
	"<<=" => Reduce #4 expression call operator "()"
	">>=" => Reduce #4 expression call operator "()"
	'.' => Reduce #4 expression call operator "()"
[369]
	'(' => Reduce #4 expression call operator "[]"
	')' => Reduce #4 expression call operator "[]"
	';' => Reduce #4 expression call operator "[]"
	',' => Reduce #4 expression call operator "[]"
	'<' => Reduce #4 expression call operator "[]"
	'>' => Reduce #4 expression call operator "[]"
	'&' => Reduce #4 expression call operator "[]"
	'^' => Reduce #4 expression call operator "[]"
	'}' => Reduce #4 expression call operator "[]"
	"->" => Reduce #4 expression call operator "[]"
	'=' => Reduce #4 expression call operator "[]"
	'+' => Reduce #4 expression call operator "[]"
	'-' => Reduce #4 expression call operator "[]"
	'*' => Reduce #4 expression call operator "[]"
	'/' => Reduce #4 expression call operator "[]"
	'%' => Reduce #4 expression call operator "[]"
	"&&" => Reduce #4 expression call operator "[]"
	"||" => Reduce #4 expression call operator "[]"
	'|' => Reduce #4 expression call operator "[]"
	"<<" => Reduce #4 expression call operator "[]"
	">>" => Reduce #4 expression call operator "[]"
	'[' => Reduce #4 expression call operator "[]"
	']' => Reduce #4 expression call operator "[]"
	"==" => Reduce #4 expression call operator "[]"
	"!=" => Reduce #4 expression call operator "[]"
	">=" => Reduce #4 expression call operator "[]"
	"<=" => Reduce #4 expression call operator "[]"
	"+=" => Reduce #4 expression call operator "[]"
	"-=" => Reduce #4 expression call operator "[]"
	"*=" => Reduce #4 expression call operator "[]"
	"/=" => Reduce #4 expression call operator "[]"
	"^=" => Reduce #4 expression call operator "[]"
	"&=" => Reduce #4 expression call operator "[]"
	"%=" => Reduce #4 expression call operator "[]"
	"&&=" => Reduce #4 expression call operator "[]"
	"||=" => Reduce #4 expression call operator "[]"
	"|=" => Reduce #4 expression call operator "[]"
	"<<=" => Reduce #4 expression call operator "[]"
	">>=" => Reduce #4 expression call operator "[]"
	'.' => Reduce #4 expression call operator "[]"
[370]
	')' => Reduce #3 expressionlist
	'}' => Reduce #3 expressionlist
	']' => Reduce #3 expressionlist
[371]
	'{' => Shift goto 403
[372]
	'{' => Shift goto 404
[373]
	'{' => Shift goto 405
[374]
	'(' => Shift goto 173
	')' => Reduce #4 expression call allocate
	';' => Reduce #4 expression call allocate
	',' => Reduce #4 expression call allocate
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Reduce #4 expression call allocate
	"->" => Reduce #4 expression call allocate
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	']' => Reduce #4 expression call allocate
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[375]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	'(' => Shift goto 101
	'&' => Shift goto 102
	'{' => Shift goto 121
	'}' => Shift goto 407
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[376]
	'(' => Shift goto 173
	';' => Reduce #7 variabledefinition call vardef_array_assign
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[377]
	'{' => Shift goto 408
[378]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[379]
	')' => Reduce #3 parameters
[380]
	'(' => Shift goto 126
[381]
	$ => Reduce #4 operatordefinition call operator_procdef {const=false}
	IDENT => Reduce #4 operatordefinition call operator_procdef {const=false}
	"function" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"procedure" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"const" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"operator" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"any" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"class" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"struct" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"typedef" => Reduce #4 operatordefinition call operator_procdef {const=false}
	'}' => Reduce #4 operatordefinition call operator_procdef {const=false}
	"generic" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"interface" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"private" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"public" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"constructor" => Reduce #4 operatordefinition call operator_procdef {const=false}
	"destructor" => Reduce #4 operatordefinition call operator_procdef {const=false}
[382]
	$ => Reduce #4 operatordefinition call operator_procdef {const=true}
	IDENT => Reduce #4 operatordefinition call operator_procdef {const=true}
	"function" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"procedure" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"const" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"operator" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"any" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"class" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"struct" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"typedef" => Reduce #4 operatordefinition call operator_procdef {const=true}
	'}' => Reduce #4 operatordefinition call operator_procdef {const=true}
	"generic" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"interface" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"private" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"public" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"constructor" => Reduce #4 operatordefinition call operator_procdef {const=true}
	"destructor" => Reduce #4 operatordefinition call operator_procdef {const=true}
[383]
	')' => Shift goto 412
[384]
	$ => Reduce #4 constructordefinition call destructordef
	IDENT => Reduce #4 constructordefinition call destructordef
	"function" => Reduce #4 constructordefinition call destructordef
	"procedure" => Reduce #4 constructordefinition call destructordef
	"const" => Reduce #4 constructordefinition call destructordef
	"operator" => Reduce #4 constructordefinition call destructordef
	"any" => Reduce #4 constructordefinition call destructordef
	"class" => Reduce #4 constructordefinition call destructordef
	"struct" => Reduce #4 constructordefinition call destructordef
	"typedef" => Reduce #4 constructordefinition call destructordef
	'}' => Reduce #4 constructordefinition call destructordef
	"generic" => Reduce #4 constructordefinition call destructordef
	"interface" => Reduce #4 constructordefinition call destructordef
	"private" => Reduce #4 constructordefinition call destructordef
	"public" => Reduce #4 constructordefinition call destructordef
	"constructor" => Reduce #4 constructordefinition call destructordef
	"destructor" => Reduce #4 constructordefinition call destructordef
[385]
	$ => Reduce #7 classdefinition call classdef
	IDENT => Reduce #7 classdefinition call classdef
	"function" => Reduce #7 classdefinition call classdef
	"procedure" => Reduce #7 classdefinition call classdef
	"const" => Reduce #7 classdefinition call classdef
	"operator" => Reduce #7 classdefinition call classdef
	"any" => Reduce #7 classdefinition call classdef
	"class" => Reduce #7 classdefinition call classdef
	"struct" => Reduce #7 classdefinition call classdef
	"typedef" => Reduce #7 classdefinition call classdef
	'}' => Reduce #7 classdefinition call classdef
	"generic" => Reduce #7 classdefinition call classdef
	"interface" => Reduce #7 classdefinition call classdef
	"namespace" => Reduce #7 classdefinition call classdef
	"private" => Reduce #7 classdefinition call classdef
	"public" => Reduce #7 classdefinition call classdef
	"constructor" => Reduce #7 classdefinition call classdef
	"destructor" => Reduce #7 classdefinition call classdef
	"main" => Reduce #7 classdefinition call classdef
[386]
	';' => Reduce #7 typedefinition call typedef_functype
[387]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
[388]
	')' => Reduce #3 extern_parameters call extern_paramdef
	"..." => Reduce #3 extern_parameters call extern_paramdef
[389]
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"private" => Shift goto 27
	"public" => Shift goto 28
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"destructor" => Shift goto 141
[390]
	IDENT => Shift goto 18
[391]
	'>' => Reduce #3 generic_identlist call generic_ident
[392]
	'>' => Reduce #3 generic_identlist call generic_ident
[393]
	',' => Shift goto 416
	'>' => Reduce #3 generic_defaultlist call generic_ident_type
[394]
	IDENT => Shift goto 18
	"const" => Shift goto 19
	"any" => Shift goto 20
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 instruct_definitionlist
	"generic" => Shift goto 149
[395]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[396]
	')' => Shift goto 419
[397]
	IDENT => Shift goto 18
	')' => Reduce #0 extern_paramlist call extern_paramdeflist
	"const" => Shift goto 19
	"any" => Shift goto 20
[398]
	')' => Shift goto 421
[399]
	';' => Shift goto 422
[400]
	')' => Shift goto 423
[401]
	$ => Reduce #8 extern_definition call extern_procdef
	IDENT => Reduce #8 extern_definition call extern_procdef
	"extern" => Reduce #8 extern_definition call extern_procdef
	"function" => Reduce #8 extern_definition call extern_procdef
	"procedure" => Reduce #8 extern_definition call extern_procdef
	"const" => Reduce #8 extern_definition call extern_procdef
	"any" => Reduce #8 extern_definition call extern_procdef
	"class" => Reduce #8 extern_definition call extern_procdef
	"struct" => Reduce #8 extern_definition call extern_procdef
	"typedef" => Reduce #8 extern_definition call extern_procdef
	"generic" => Reduce #8 extern_definition call extern_procdef
	"interface" => Reduce #8 extern_definition call extern_procdef
	"namespace" => Reduce #8 extern_definition call extern_procdef
	"private" => Reduce #8 extern_definition call extern_procdef
	"public" => Reduce #8 extern_definition call extern_procdef
	"main" => Reduce #8 extern_definition call extern_procdef
[402]
	';' => Shift goto 424
[403]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[404]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[405]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[406]
	'(' => Shift goto 173
	'<' => Shift goto 175
	'>' => Shift goto 176
	'&' => Shift goto 177
	'^' => Shift goto 178
	'}' => Shift goto 428
	"->" => Shift goto 179
	'=' => Shift goto 180
	'+' => Shift goto 181
	'-' => Shift goto 182
	'*' => Shift goto 183
	'/' => Shift goto 184
	'%' => Shift goto 185
	"&&" => Shift goto 186
	"||" => Shift goto 187
	'|' => Shift goto 188
	"<<" => Shift goto 189
	">>" => Shift goto 190
	'[' => Shift goto 191
	"==" => Shift goto 192
	"!=" => Shift goto 193
	">=" => Shift goto 194
	"<=" => Shift goto 195
	"+=" => Shift goto 196
	"-=" => Shift goto 197
	"*=" => Shift goto 198
	"/=" => Shift goto 199
	"^=" => Shift goto 200
	"&=" => Shift goto 201
	"%=" => Shift goto 202
	"&&=" => Shift goto 203
	"||=" => Shift goto 204
	"|=" => Shift goto 205
	"<<=" => Shift goto 206
	">>=" => Shift goto 207
	'.' => Shift goto 208
[407]
	'(' => Reduce #5 expression call typecast
	')' => Reduce #5 expression call typecast
	';' => Reduce #5 expression call typecast
	',' => Reduce #5 expression call typecast
	'<' => Reduce #5 expression call typecast
	'>' => Reduce #5 expression call typecast
	'&' => Reduce #5 expression call typecast
	'^' => Reduce #5 expression call typecast
	'}' => Reduce #5 expression call typecast
	"->" => Reduce #5 expression call typecast
	'=' => Reduce #5 expression call typecast
	'+' => Reduce #5 expression call typecast
	'-' => Reduce #5 expression call typecast
	'*' => Reduce #5 expression call typecast
	'/' => Reduce #5 expression call typecast
	'%' => Reduce #5 expression call typecast
	"&&" => Reduce #5 expression call typecast
	"||" => Reduce #5 expression call typecast
	'|' => Reduce #5 expression call typecast
	"<<" => Reduce #5 expression call typecast
	">>" => Reduce #5 expression call typecast
	'[' => Reduce #5 expression call typecast
	']' => Reduce #5 expression call typecast
	"==" => Reduce #5 expression call typecast
	"!=" => Reduce #5 expression call typecast
	">=" => Reduce #5 expression call typecast
	"<=" => Reduce #5 expression call typecast
	"+=" => Reduce #5 expression call typecast
	"-=" => Reduce #5 expression call typecast
	"*=" => Reduce #5 expression call typecast
	"/=" => Reduce #5 expression call typecast
	"^=" => Reduce #5 expression call typecast
	"&=" => Reduce #5 expression call typecast
	"%=" => Reduce #5 expression call typecast
	"&&=" => Reduce #5 expression call typecast
	"||=" => Reduce #5 expression call typecast
	"|=" => Reduce #5 expression call typecast
	"<<=" => Reduce #5 expression call typecast
	">>=" => Reduce #5 expression call typecast
	'.' => Reduce #5 expression call typecast
[408]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[409]
	'}' => Shift goto 430
[410]
	$ => Reduce #5 operatordefinition call operator_funcdef {const=false}
	IDENT => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"function" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"procedure" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"const" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"operator" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"any" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"class" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"struct" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"typedef" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	'}' => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"generic" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"interface" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"private" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"public" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"constructor" => Reduce #5 operatordefinition call operator_funcdef {const=false}
	"destructor" => Reduce #5 operatordefinition call operator_funcdef {const=false}
[411]
	$ => Reduce #5 operatordefinition call operator_funcdef {const=true}
	IDENT => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"function" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"procedure" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"const" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"operator" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"any" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"class" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"struct" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"typedef" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	'}' => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"generic" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"interface" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"private" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"public" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"constructor" => Reduce #5 operatordefinition call operator_funcdef {const=true}
	"destructor" => Reduce #5 operatordefinition call operator_funcdef {const=true}
[412]
	'{' => Shift goto 378
[413]
	')' => Reduce #4 extern_parameters call extern_paramdef
	"..." => Reduce #4 extern_parameters call extern_paramdef
[414]
	'}' => Shift goto 431
[415]
	'{' => Shift goto 432
[416]
	IDENT => Shift goto 434
[417]
	'}' => Shift goto 435
[418]
	')' => Shift goto 436
[419]
	';' => Shift goto 437
	"const" => Shift goto 438
[420]
	')' => Shift goto 439
[421]
	';' => Shift goto 440
	"const" => Shift goto 441
[422]
	$ => Reduce #9 extern_definition call extern_funcdef
	IDENT => Reduce #9 extern_definition call extern_funcdef
	"extern" => Reduce #9 extern_definition call extern_funcdef
	"function" => Reduce #9 extern_definition call extern_funcdef
	"procedure" => Reduce #9 extern_definition call extern_funcdef
	"const" => Reduce #9 extern_definition call extern_funcdef
	"any" => Reduce #9 extern_definition call extern_funcdef
	"class" => Reduce #9 extern_definition call extern_funcdef
	"struct" => Reduce #9 extern_definition call extern_funcdef
	"typedef" => Reduce #9 extern_definition call extern_funcdef
	"generic" => Reduce #9 extern_definition call extern_funcdef
	"interface" => Reduce #9 extern_definition call extern_funcdef
	"namespace" => Reduce #9 extern_definition call extern_funcdef
	"private" => Reduce #9 extern_definition call extern_funcdef
	"public" => Reduce #9 extern_definition call extern_funcdef
	"main" => Reduce #9 extern_definition call extern_funcdef
[423]
	';' => Shift goto 442
[424]
	$ => Reduce #9 extern_definition call extern_procdef_vararg
	IDENT => Reduce #9 extern_definition call extern_procdef_vararg
	"extern" => Reduce #9 extern_definition call extern_procdef_vararg
	"function" => Reduce #9 extern_definition call extern_procdef_vararg
	"procedure" => Reduce #9 extern_definition call extern_procdef_vararg
	"const" => Reduce #9 extern_definition call extern_procdef_vararg
	"any" => Reduce #9 extern_definition call extern_procdef_vararg
	"class" => Reduce #9 extern_definition call extern_procdef_vararg
	"struct" => Reduce #9 extern_definition call extern_procdef_vararg
	"typedef" => Reduce #9 extern_definition call extern_procdef_vararg
	"generic" => Reduce #9 extern_definition call extern_procdef_vararg
	"interface" => Reduce #9 extern_definition call extern_procdef_vararg
	"namespace" => Reduce #9 extern_definition call extern_procdef_vararg
	"private" => Reduce #9 extern_definition call extern_procdef_vararg
	"public" => Reduce #9 extern_definition call extern_procdef_vararg
	"main" => Reduce #9 extern_definition call extern_procdef_vararg
[425]
	'}' => Shift goto 443
[426]
	'}' => Shift goto 444
[427]
	'}' => Shift goto 445
[428]
	'(' => Reduce #6 expression call typecast
	')' => Reduce #6 expression call typecast
	';' => Reduce #6 expression call typecast
	',' => Reduce #6 expression call typecast
	'<' => Reduce #6 expression call typecast
	'>' => Reduce #6 expression call typecast
	'&' => Reduce #6 expression call typecast
	'^' => Reduce #6 expression call typecast
	'}' => Reduce #6 expression call typecast
	"->" => Reduce #6 expression call typecast
	'=' => Reduce #6 expression call typecast
	'+' => Reduce #6 expression call typecast
	'-' => Reduce #6 expression call typecast
	'*' => Reduce #6 expression call typecast
	'/' => Reduce #6 expression call typecast
	'%' => Reduce #6 expression call typecast
	"&&" => Reduce #6 expression call typecast
	"||" => Reduce #6 expression call typecast
	'|' => Reduce #6 expression call typecast
	"<<" => Reduce #6 expression call typecast
	">>" => Reduce #6 expression call typecast
	'[' => Reduce #6 expression call typecast
	']' => Reduce #6 expression call typecast
	"==" => Reduce #6 expression call typecast
	"!=" => Reduce #6 expression call typecast
	">=" => Reduce #6 expression call typecast
	"<=" => Reduce #6 expression call typecast
	"+=" => Reduce #6 expression call typecast
	"-=" => Reduce #6 expression call typecast
	"*=" => Reduce #6 expression call typecast
	"/=" => Reduce #6 expression call typecast
	"^=" => Reduce #6 expression call typecast
	"&=" => Reduce #6 expression call typecast
	"%=" => Reduce #6 expression call typecast
	"&&=" => Reduce #6 expression call typecast
	"||=" => Reduce #6 expression call typecast
	"|=" => Reduce #6 expression call typecast
	"<<=" => Reduce #6 expression call typecast
	">>=" => Reduce #6 expression call typecast
	'.' => Reduce #6 expression call typecast
[429]
	'}' => Shift goto 446
[430]
	$ => Reduce #6 callablebody call callablebody
	BOOLEAN => Reduce #6 callablebody call callablebody
	IDENT => Reduce #6 callablebody call callablebody
	DQSTRING => Reduce #6 callablebody call callablebody
	SQSTRING => Reduce #6 callablebody call callablebody
	CARDINAL => Reduce #6 callablebody call callablebody
	INTEGER => Reduce #6 callablebody call callablebody
	FLOAT => Reduce #6 callablebody call callablebody
	"function" => Reduce #6 callablebody call callablebody
	'(' => Reduce #6 callablebody call callablebody
	"procedure" => Reduce #6 callablebody call callablebody
	"const" => Reduce #6 callablebody call callablebody
	"operator" => Reduce #6 callablebody call callablebody
	'&' => Reduce #6 callablebody call callablebody
	"any" => Reduce #6 callablebody call callablebody
	"class" => Reduce #6 callablebody call callablebody
	"struct" => Reduce #6 callablebody call callablebody
	"typedef" => Reduce #6 callablebody call callablebody
	'{' => Reduce #6 callablebody call callablebody
	'}' => Reduce #6 callablebody call callablebody
	"generic" => Reduce #6 callablebody call callablebody
	"interface" => Reduce #6 callablebody call callablebody
	"namespace" => Reduce #6 callablebody call callablebody
	"private" => Reduce #6 callablebody call callablebody
	"public" => Reduce #6 callablebody call callablebody
	"constructor" => Reduce #6 callablebody call callablebody
	"destructor" => Reduce #6 callablebody call callablebody
	'+' => Reduce #6 callablebody call callablebody
	'-' => Reduce #6 callablebody call callablebody
	'*' => Reduce #6 callablebody call callablebody
	'~' => Reduce #6 callablebody call callablebody
	'!' => Reduce #6 callablebody call callablebody
	"main" => Reduce #6 callablebody call callablebody
	"var" => Reduce #6 callablebody call callablebody
	"return" => Reduce #6 callablebody call callablebody
	"delete" => Reduce #6 callablebody call callablebody
	"if" => Reduce #6 callablebody call callablebody
	"while" => Reduce #6 callablebody call callablebody
	"with" => Reduce #6 callablebody call callablebody
	"new" => Reduce #6 callablebody call callablebody
	"cast" => Reduce #6 callablebody call callablebody
	"null" => Reduce #6 callablebody call callablebody
[431]
	$ => Reduce #9 classdefinition call generic_classdef
	IDENT => Reduce #9 classdefinition call generic_classdef
	"function" => Reduce #9 classdefinition call generic_classdef
	"procedure" => Reduce #9 classdefinition call generic_classdef
	"const" => Reduce #9 classdefinition call generic_classdef
	"operator" => Reduce #9 classdefinition call generic_classdef
	"any" => Reduce #9 classdefinition call generic_classdef
	"class" => Reduce #9 classdefinition call generic_classdef
	"struct" => Reduce #9 classdefinition call generic_classdef
	"typedef" => Reduce #9 classdefinition call generic_classdef
	'}' => Reduce #9 classdefinition call generic_classdef
	"generic" => Reduce #9 classdefinition call generic_classdef
	"interface" => Reduce #9 classdefinition call generic_classdef
	"namespace" => Reduce #9 classdefinition call generic_classdef
	"private" => Reduce #9 classdefinition call generic_classdef
	"public" => Reduce #9 classdefinition call generic_classdef
	"constructor" => Reduce #9 classdefinition call generic_classdef
	"destructor" => Reduce #9 classdefinition call generic_classdef
	"main" => Reduce #9 classdefinition call generic_classdef
[432]
	IDENT => Shift goto 18
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"const" => Shift goto 19
	"operator" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"any" => Shift goto 20
	"class" => Shift goto 21
	"struct" => Shift goto 22
	"typedef" => Shift goto 23
	'}' => Reduce #0 inclass_definitionlist
	"generic" => Shift goto 24
	"interface" => Shift goto 25
	"private" => Shift goto 27
	"public" => Shift goto 28
	"constructor" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	"destructor" => Shift goto 141
[433]
	'>' => Reduce #5 generic_defaultlist call generic_ident_type
[434]
	'=' => Shift goto 357
[435]
	$ => Reduce #9 structdefinition call generic_structdef
	IDENT => Reduce #9 structdefinition call generic_structdef
	"function" => Reduce #9 structdefinition call generic_structdef
	"procedure" => Reduce #9 structdefinition call generic_structdef
	"const" => Reduce #9 structdefinition call generic_structdef
	"operator" => Reduce #9 structdefinition call generic_structdef
	"any" => Reduce #9 structdefinition call generic_structdef
	"class" => Reduce #9 structdefinition call generic_structdef
	"struct" => Reduce #9 structdefinition call generic_structdef
	"typedef" => Reduce #9 structdefinition call generic_structdef
	'}' => Reduce #9 structdefinition call generic_structdef
	"generic" => Reduce #9 structdefinition call generic_structdef
	"interface" => Reduce #9 structdefinition call generic_structdef
	"namespace" => Reduce #9 structdefinition call generic_structdef
	"private" => Reduce #9 structdefinition call generic_structdef
	"public" => Reduce #9 structdefinition call generic_structdef
	"constructor" => Reduce #9 structdefinition call generic_structdef
	"destructor" => Reduce #9 structdefinition call generic_structdef
	"main" => Reduce #9 structdefinition call generic_structdef
[436]
	';' => Shift goto 448
	"const" => Shift goto 449
[437]
	$ => Reduce #6 ininterf_definition call interface_procdef {const=false}
	"function" => Reduce #6 ininterf_definition call interface_procdef {const=false}
	"procedure" => Reduce #6 ininterf_definition call interface_procdef {const=false}
	"operator" => Reduce #6 ininterf_definition call interface_procdef {const=false}
	'}' => Reduce #6 ininterf_definition call interface_procdef {const=false}
[438]
	';' => Shift goto 450
[439]
	';' => Shift goto 451
	"const" => Shift goto 452
[440]
	$ => Reduce #6 ininterf_definition call interface_operator_procdef {const=false}
	"function" => Reduce #6 ininterf_definition call interface_operator_procdef {const=false}
	"procedure" => Reduce #6 ininterf_definition call interface_operator_procdef {const=false}
	"operator" => Reduce #6 ininterf_definition call interface_operator_procdef {const=false}
	'}' => Reduce #6 ininterf_definition call interface_operator_procdef {const=false}
[441]
	';' => Shift goto 453
[442]
	$ => Reduce #10 extern_definition call extern_funcdef_vararg
	IDENT => Reduce #10 extern_definition call extern_funcdef_vararg
	"extern" => Reduce #10 extern_definition call extern_funcdef_vararg
	"function" => Reduce #10 extern_definition call extern_funcdef_vararg
	"procedure" => Reduce #10 extern_definition call extern_funcdef_vararg
	"const" => Reduce #10 extern_definition call extern_funcdef_vararg
	"any" => Reduce #10 extern_definition call extern_funcdef_vararg
	"class" => Reduce #10 extern_definition call extern_funcdef_vararg
	"struct" => Reduce #10 extern_definition call extern_funcdef_vararg
	"typedef" => Reduce #10 extern_definition call extern_funcdef_vararg
	"generic" => Reduce #10 extern_definition call extern_funcdef_vararg
	"interface" => Reduce #10 extern_definition call extern_funcdef_vararg
	"namespace" => Reduce #10 extern_definition call extern_funcdef_vararg
	"private" => Reduce #10 extern_definition call extern_funcdef_vararg
	"public" => Reduce #10 extern_definition call extern_funcdef_vararg
	"main" => Reduce #10 extern_definition call extern_funcdef_vararg
[443]
	$ => Reduce #7 statement call conditional_if
	BOOLEAN => Reduce #7 statement call conditional_if
	IDENT => Reduce #7 statement call conditional_if
	DQSTRING => Reduce #7 statement call conditional_if
	SQSTRING => Reduce #7 statement call conditional_if
	CARDINAL => Reduce #7 statement call conditional_if
	INTEGER => Reduce #7 statement call conditional_if
	FLOAT => Reduce #7 statement call conditional_if
	"function" => Reduce #7 statement call conditional_if
	'(' => Reduce #7 statement call conditional_if
	"procedure" => Reduce #7 statement call conditional_if
	'&' => Reduce #7 statement call conditional_if
	"typedef" => Reduce #7 statement call conditional_if
	'{' => Reduce #7 statement call conditional_if
	'}' => Reduce #7 statement call conditional_if
	"private" => Reduce #7 statement call conditional_if
	"public" => Reduce #7 statement call conditional_if
	'+' => Reduce #7 statement call conditional_if
	'-' => Reduce #7 statement call conditional_if
	'*' => Reduce #7 statement call conditional_if
	'~' => Reduce #7 statement call conditional_if
	'!' => Reduce #7 statement call conditional_if
	"var" => Reduce #7 statement call conditional_if
	"return" => Reduce #7 statement call conditional_if
	"delete" => Reduce #7 statement call conditional_if
	"if" => Reduce #7 statement call conditional_if
	"else" => Shift goto 454
	"while" => Reduce #7 statement call conditional_if
	"with" => Reduce #7 statement call conditional_if
	"new" => Reduce #7 statement call conditional_if
	"cast" => Reduce #7 statement call conditional_if
	"null" => Reduce #7 statement call conditional_if
[444]
	$ => Reduce #7 statement call conditional_while
	BOOLEAN => Reduce #7 statement call conditional_while
	IDENT => Reduce #7 statement call conditional_while
	DQSTRING => Reduce #7 statement call conditional_while
	SQSTRING => Reduce #7 statement call conditional_while
	CARDINAL => Reduce #7 statement call conditional_while
	INTEGER => Reduce #7 statement call conditional_while
	FLOAT => Reduce #7 statement call conditional_while
	"function" => Reduce #7 statement call conditional_while
	'(' => Reduce #7 statement call conditional_while
	"procedure" => Reduce #7 statement call conditional_while
	'&' => Reduce #7 statement call conditional_while
	"typedef" => Reduce #7 statement call conditional_while
	'{' => Reduce #7 statement call conditional_while
	'}' => Reduce #7 statement call conditional_while
	"private" => Reduce #7 statement call conditional_while
	"public" => Reduce #7 statement call conditional_while
	'+' => Reduce #7 statement call conditional_while
	'-' => Reduce #7 statement call conditional_while
	'*' => Reduce #7 statement call conditional_while
	'~' => Reduce #7 statement call conditional_while
	'!' => Reduce #7 statement call conditional_while
	"var" => Reduce #7 statement call conditional_while
	"return" => Reduce #7 statement call conditional_while
	"delete" => Reduce #7 statement call conditional_while
	"if" => Reduce #7 statement call conditional_while
	"while" => Reduce #7 statement call conditional_while
	"with" => Reduce #7 statement call conditional_while
	"new" => Reduce #7 statement call conditional_while
	"cast" => Reduce #7 statement call conditional_while
	"null" => Reduce #7 statement call conditional_while
[445]
	$ => Reduce #7 statement call with_do
	BOOLEAN => Reduce #7 statement call with_do
	IDENT => Reduce #7 statement call with_do
	DQSTRING => Reduce #7 statement call with_do
	SQSTRING => Reduce #7 statement call with_do
	CARDINAL => Reduce #7 statement call with_do
	INTEGER => Reduce #7 statement call with_do
	FLOAT => Reduce #7 statement call with_do
	"function" => Reduce #7 statement call with_do
	'(' => Reduce #7 statement call with_do
	"procedure" => Reduce #7 statement call with_do
	'&' => Reduce #7 statement call with_do
	"typedef" => Reduce #7 statement call with_do
	'{' => Reduce #7 statement call with_do
	'}' => Reduce #7 statement call with_do
	"private" => Reduce #7 statement call with_do
	"public" => Reduce #7 statement call with_do
	'+' => Reduce #7 statement call with_do
	'-' => Reduce #7 statement call with_do
	'*' => Reduce #7 statement call with_do
	'~' => Reduce #7 statement call with_do
	'!' => Reduce #7 statement call with_do
	"var" => Reduce #7 statement call with_do
	"return" => Reduce #7 statement call with_do
	"delete" => Reduce #7 statement call with_do
	"if" => Reduce #7 statement call with_do
	"while" => Reduce #7 statement call with_do
	"with" => Reduce #7 statement call with_do
	"new" => Reduce #7 statement call with_do
	"cast" => Reduce #7 statement call with_do
	"null" => Reduce #7 statement call with_do
[446]
	$ => Reduce #7 callablebody_const call callablebody
	BOOLEAN => Reduce #7 callablebody_const call callablebody
	IDENT => Reduce #7 callablebody_const call callablebody
	DQSTRING => Reduce #7 callablebody_const call callablebody
	SQSTRING => Reduce #7 callablebody_const call callablebody
	CARDINAL => Reduce #7 callablebody_const call callablebody
	INTEGER => Reduce #7 callablebody_const call callablebody
	FLOAT => Reduce #7 callablebody_const call callablebody
	"function" => Reduce #7 callablebody_const call callablebody
	'(' => Reduce #7 callablebody_const call callablebody
	"procedure" => Reduce #7 callablebody_const call callablebody
	"const" => Reduce #7 callablebody_const call callablebody
	"operator" => Reduce #7 callablebody_const call callablebody
	'&' => Reduce #7 callablebody_const call callablebody
	"any" => Reduce #7 callablebody_const call callablebody
	"class" => Reduce #7 callablebody_const call callablebody
	"struct" => Reduce #7 callablebody_const call callablebody
	"typedef" => Reduce #7 callablebody_const call callablebody
	'{' => Reduce #7 callablebody_const call callablebody
	'}' => Reduce #7 callablebody_const call callablebody
	"generic" => Reduce #7 callablebody_const call callablebody
	"interface" => Reduce #7 callablebody_const call callablebody
	"namespace" => Reduce #7 callablebody_const call callablebody
	"private" => Reduce #7 callablebody_const call callablebody
	"public" => Reduce #7 callablebody_const call callablebody
	"constructor" => Reduce #7 callablebody_const call callablebody
	"destructor" => Reduce #7 callablebody_const call callablebody
	'+' => Reduce #7 callablebody_const call callablebody
	'-' => Reduce #7 callablebody_const call callablebody
	'*' => Reduce #7 callablebody_const call callablebody
	'~' => Reduce #7 callablebody_const call callablebody
	'!' => Reduce #7 callablebody_const call callablebody
	"main" => Reduce #7 callablebody_const call callablebody
	"var" => Reduce #7 callablebody_const call callablebody
	"return" => Reduce #7 callablebody_const call callablebody
	"delete" => Reduce #7 callablebody_const call callablebody
	"if" => Reduce #7 callablebody_const call callablebody
	"while" => Reduce #7 callablebody_const call callablebody
	"with" => Reduce #7 callablebody_const call callablebody
	"new" => Reduce #7 callablebody_const call callablebody
	"cast" => Reduce #7 callablebody_const call callablebody
	"null" => Reduce #7 callablebody_const call callablebody
[447]
	'}' => Shift goto 455
[448]
	$ => Reduce #7 ininterf_definition call interface_funcdef {const=false}
	"function" => Reduce #7 ininterf_definition call interface_funcdef {const=false}
	"procedure" => Reduce #7 ininterf_definition call interface_funcdef {const=false}
	"operator" => Reduce #7 ininterf_definition call interface_funcdef {const=false}
	'}' => Reduce #7 ininterf_definition call interface_funcdef {const=false}
[449]
	';' => Shift goto 456
[450]
	$ => Reduce #7 ininterf_definition call interface_procdef {const=true}
	"function" => Reduce #7 ininterf_definition call interface_procdef {const=true}
	"procedure" => Reduce #7 ininterf_definition call interface_procdef {const=true}
	"operator" => Reduce #7 ininterf_definition call interface_procdef {const=true}
	'}' => Reduce #7 ininterf_definition call interface_procdef {const=true}
[451]
	$ => Reduce #7 ininterf_definition call interface_operator_funcdef {const=false}
	"function" => Reduce #7 ininterf_definition call interface_operator_funcdef {const=false}
	"procedure" => Reduce #7 ininterf_definition call interface_operator_funcdef {const=false}
	"operator" => Reduce #7 ininterf_definition call interface_operator_funcdef {const=false}
	'}' => Reduce #7 ininterf_definition call interface_operator_funcdef {const=false}
[452]
	';' => Shift goto 457
[453]
	$ => Reduce #7 ininterf_definition call interface_operator_procdef {const=true}
	"function" => Reduce #7 ininterf_definition call interface_operator_procdef {const=true}
	"procedure" => Reduce #7 ininterf_definition call interface_operator_procdef {const=true}
	"operator" => Reduce #7 ininterf_definition call interface_operator_procdef {const=true}
	'}' => Reduce #7 ininterf_definition call interface_operator_procdef {const=true}
[454]
	'{' => Shift goto 458
[455]
	$ => Reduce #11 classdefinition call generic_classdef
	IDENT => Reduce #11 classdefinition call generic_classdef
	"function" => Reduce #11 classdefinition call generic_classdef
	"procedure" => Reduce #11 classdefinition call generic_classdef
	"const" => Reduce #11 classdefinition call generic_classdef
	"operator" => Reduce #11 classdefinition call generic_classdef
	"any" => Reduce #11 classdefinition call generic_classdef
	"class" => Reduce #11 classdefinition call generic_classdef
	"struct" => Reduce #11 classdefinition call generic_classdef
	"typedef" => Reduce #11 classdefinition call generic_classdef
	'}' => Reduce #11 classdefinition call generic_classdef
	"generic" => Reduce #11 classdefinition call generic_classdef
	"interface" => Reduce #11 classdefinition call generic_classdef
	"namespace" => Reduce #11 classdefinition call generic_classdef
	"private" => Reduce #11 classdefinition call generic_classdef
	"public" => Reduce #11 classdefinition call generic_classdef
	"constructor" => Reduce #11 classdefinition call generic_classdef
	"destructor" => Reduce #11 classdefinition call generic_classdef
	"main" => Reduce #11 classdefinition call generic_classdef
[456]
	$ => Reduce #8 ininterf_definition call interface_funcdef {const=true}
	"function" => Reduce #8 ininterf_definition call interface_funcdef {const=true}
	"procedure" => Reduce #8 ininterf_definition call interface_funcdef {const=true}
	"operator" => Reduce #8 ininterf_definition call interface_funcdef {const=true}
	'}' => Reduce #8 ininterf_definition call interface_funcdef {const=true}
[457]
	$ => Reduce #8 ininterf_definition call interface_operator_funcdef {const=true}
	"function" => Reduce #8 ininterf_definition call interface_operator_funcdef {const=true}
	"procedure" => Reduce #8 ininterf_definition call interface_operator_funcdef {const=true}
	"operator" => Reduce #8 ininterf_definition call interface_operator_funcdef {const=true}
	'}' => Reduce #8 ininterf_definition call interface_operator_funcdef {const=true}
[458]
	BOOLEAN => Shift goto 94
	IDENT => Shift goto 95
	DQSTRING => Shift goto 96
	SQSTRING => Shift goto 97
	CARDINAL => Shift goto 98
	INTEGER => Shift goto 99
	FLOAT => Shift goto 100
	"function" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'(' => Shift goto 101
	"procedure" => Reduce #0 linkage call linkage {private=false,linkage="external"}
	'&' => Shift goto 102
	"typedef" => Shift goto 23
	'{' => Shift goto 103
	'}' => Reduce #0 statementlist
	"private" => Shift goto 27
	"public" => Shift goto 28
	'+' => Shift goto 104
	'-' => Shift goto 105
	'*' => Shift goto 106
	'~' => Shift goto 107
	'!' => Shift goto 108
	"var" => Shift goto 109
	"return" => Shift goto 110
	"delete" => Shift goto 111
	"if" => Shift goto 112
	"while" => Shift goto 113
	"with" => Shift goto 114
	"new" => Shift goto 115
	"cast" => Shift goto 116
	"null" => Shift goto 117
[459]
	'}' => Shift goto 460
[460]
	$ => Reduce #11 statement call conditional_if_else
	BOOLEAN => Reduce #11 statement call conditional_if_else
	IDENT => Reduce #11 statement call conditional_if_else
	DQSTRING => Reduce #11 statement call conditional_if_else
	SQSTRING => Reduce #11 statement call conditional_if_else
	CARDINAL => Reduce #11 statement call conditional_if_else
	INTEGER => Reduce #11 statement call conditional_if_else
	FLOAT => Reduce #11 statement call conditional_if_else
	"function" => Reduce #11 statement call conditional_if_else
	'(' => Reduce #11 statement call conditional_if_else
	"procedure" => Reduce #11 statement call conditional_if_else
	'&' => Reduce #11 statement call conditional_if_else
	"typedef" => Reduce #11 statement call conditional_if_else
	'{' => Reduce #11 statement call conditional_if_else
	'}' => Reduce #11 statement call conditional_if_else
	"private" => Reduce #11 statement call conditional_if_else
	"public" => Reduce #11 statement call conditional_if_else
	'+' => Reduce #11 statement call conditional_if_else
	'-' => Reduce #11 statement call conditional_if_else
	'*' => Reduce #11 statement call conditional_if_else
	'~' => Reduce #11 statement call conditional_if_else
	'!' => Reduce #11 statement call conditional_if_else
	"var" => Reduce #11 statement call conditional_if_else
	"return" => Reduce #11 statement call conditional_if_else
	"delete" => Reduce #11 statement call conditional_if_else
	"if" => Reduce #11 statement call conditional_if_else
	"while" => Reduce #11 statement call conditional_if_else
	"with" => Reduce #11 statement call conditional_if_else
	"new" => Reduce #11 statement call conditional_if_else
	"cast" => Reduce #11 statement call conditional_if_else
	"null" => Reduce #11 statement call conditional_if_else

-- Goto table:
[1]
	extern_definitionlist => 2
	extern_definition => 3
[2]
	free_definitionlist => 5
	free_definition => 6
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 10
	structdefinition => 11
	interfacedefinition => 12
	namespacedefinition => 13
	classdefinition => 14
	linkage => 15
	functiondefinition => 16
	variabledefinition => 17
[3]
	extern_definitionlist => 29
	extern_definition => 3
[5]
	main_procedure => 31
[6]
	free_definitionlist => 33
	free_definition => 6
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 10
	structdefinition => 11
	interfacedefinition => 12
	namespacedefinition => 13
	classdefinition => 14
	linkage => 15
	functiondefinition => 16
	variabledefinition => 17
[19]
	typename => 7
	generic_typename => 43
[23]
	typename => 7
	generic_typename => 49
	typepath => 50
[34]
	typename => 7
	generic_typename => 49
	typepath => 60
	generic_instance => 61
	generic_instancelist => 62
[42]
	typename => 68
[59]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 89
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[64]
	expression => 120
	iexpression => 93
[65]
	expression => 122
	iexpression => 93
[66]
	typename => 7
	generic_typename => 8
	typespec => 123
[67]
	callablebody => 124
	callablebody_const => 125
[75]
	inclass_definitionlist => 130
	inclass_definition => 131
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 132
	structdefinition => 133
	interfacedefinition => 134
	classdefinition => 135
	linkage => 136
	functiondefinition => 137
	constructordefinition => 138
	operatordefinition => 139
	variabledefinition => 140
[76]
	typename => 7
	generic_typename => 49
	typepath => 142
	inheritlist => 143
[77]
	instruct_definitionlist => 144
	instruct_definition => 145
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 146
	structdefinition => 147
	variabledefinition => 148
[79]
	typename => 7
	generic_typename => 8
	typespec => 150
[83]
	ininterf_definitionlist => 154
	ininterf_definition => 155
[84]
	namespace_definitionlist => 159
	namespace_definition => 160
	typedefinition => 161
	structdefinition => 162
	interfacedefinition => 163
	namespacedefinition => 164
	classdefinition => 165
	linkage => 15
	functiondefinition => 166
[85]
	typename => 7
	generic_typename => 8
	typespec => 167
[91]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	statementlist => 171
	statement => 91
	expression => 92
	iexpression => 93
[92]
	indirection => 172
[101]
	expression => 209
	iexpression => 93
[102]
	expression => 210
	iexpression => 93
[103]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 211
	statementlist => 90
	statement => 91
	expression => 212
	iexpression => 93
	expressionlist => 213
[104]
	expression => 215
	iexpression => 93
[105]
	expression => 216
	iexpression => 93
[106]
	expression => 217
	iexpression => 93
[107]
	expression => 218
	iexpression => 93
[108]
	expression => 219
	iexpression => 93
[109]
	typename => 7
	generic_typename => 8
	typespec => 9
	variabledefinition => 220
[110]
	expression => 221
	iexpression => 93
[111]
	expression => 222
	iexpression => 93
[115]
	typename => 7
	generic_typename => 8
	typespec => 226
[116]
	typename => 7
	generic_typename => 8
	typespec => 227
[118]
	typename => 7
	generic_typename => 49
	typepath => 60
	generic_instance => 228
[120]
	indirection => 172
[121]
	expression => 229
	iexpression => 93
	expressionlist => 213
[122]
	indirection => 172
[123]
	callablebody => 231
	callablebody_const => 232
[126]
	typename => 7
	generic_typename => 8
	typespec => 233
	parameterlist => 234
	parameters => 235
	paramdecl => 236
[131]
	inclass_definitionlist => 238
	inclass_definition => 131
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 132
	structdefinition => 133
	interfacedefinition => 134
	classdefinition => 135
	linkage => 136
	functiondefinition => 137
	constructordefinition => 138
	operatordefinition => 139
	variabledefinition => 140
[145]
	instruct_definitionlist => 247
	instruct_definition => 145
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 146
	structdefinition => 147
	variabledefinition => 148
[151]
	extern_parameters => 251
	extern_paramlist => 252
	typename => 7
	generic_typename => 8
	typespec => 253
[152]
	generic_defaultlist => 254
	generic_identlist => 255
	generic_header => 256
[153]
	generic_defaultlist => 254
	generic_identlist => 255
	generic_header => 258
[155]
	ininterf_definitionlist => 260
	ininterf_definition => 155
[158]
	operatordecl => 263
[160]
	namespace_definitionlist => 288
	namespace_definition => 160
	typedefinition => 161
	structdefinition => 162
	interfacedefinition => 163
	namespacedefinition => 164
	classdefinition => 165
	linkage => 15
	functiondefinition => 166
[168]
	extern_parameters => 251
	extern_paramlist => 291
	typename => 7
	generic_typename => 8
	typespec => 253
[173]
	expression => 229
	iexpression => 93
	expressionlist => 293
[175]
	expression => 295
	iexpression => 93
[176]
	expression => 296
	iexpression => 93
[177]
	expression => 297
	iexpression => 93
[178]
	expression => 298
	iexpression => 93
[179]
	indirection => 299
[180]
	expression => 300
	iexpression => 93
[181]
	expression => 301
	iexpression => 93
[182]
	expression => 302
	iexpression => 93
[183]
	expression => 303
	iexpression => 93
[184]
	expression => 304
	iexpression => 93
[185]
	expression => 305
	iexpression => 93
[186]
	expression => 306
	iexpression => 93
[187]
	expression => 307
	iexpression => 93
[188]
	expression => 308
	iexpression => 93
[189]
	expression => 309
	iexpression => 93
[190]
	expression => 310
	iexpression => 93
[191]
	expression => 229
	iexpression => 93
	expressionlist => 311
[192]
	expression => 312
	iexpression => 93
[193]
	expression => 313
	iexpression => 93
[194]
	expression => 314
	iexpression => 93
[195]
	expression => 315
	iexpression => 93
[196]
	expression => 316
	iexpression => 93
[197]
	expression => 317
	iexpression => 93
[198]
	expression => 318
	iexpression => 93
[199]
	expression => 319
	iexpression => 93
[200]
	expression => 320
	iexpression => 93
[201]
	expression => 321
	iexpression => 93
[202]
	expression => 322
	iexpression => 93
[203]
	expression => 323
	iexpression => 93
[204]
	expression => 324
	iexpression => 93
[205]
	expression => 325
	iexpression => 93
[206]
	expression => 326
	iexpression => 93
[207]
	expression => 327
	iexpression => 93
[209]
	indirection => 172
[210]
	indirection => 172
[212]
	indirection => 172
[215]
	indirection => 172
[216]
	indirection => 172
[217]
	indirection => 172
[218]
	indirection => 172
[219]
	indirection => 172
[221]
	indirection => 172
[222]
	indirection => 172
[223]
	expression => 336
	iexpression => 93
[224]
	expression => 337
	iexpression => 93
[225]
	expression => 338
	iexpression => 93
[229]
	indirection => 172
[240]
	operatordecl => 345
[241]
	callablebody => 346
[243]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 348
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[244]
	typename => 7
	generic_typename => 49
	typepath => 142
	inheritlist => 349
[245]
	inclass_definitionlist => 350
	inclass_definition => 131
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 132
	structdefinition => 133
	interfacedefinition => 134
	classdefinition => 135
	linkage => 136
	functiondefinition => 137
	constructordefinition => 138
	operatordefinition => 139
	variabledefinition => 140
[250]
	extern_parameters => 251
	extern_paramlist => 351
	typename => 7
	generic_typename => 8
	typespec => 253
[261]
	typename => 7
	generic_typename => 8
	typespec => 359
[263]
	typename => 7
	generic_typename => 8
	typespec => 361
[290]
	extern_parameters => 251
	extern_paramlist => 365
	typename => 7
	generic_typename => 8
	typespec => 253
[295]
	indirection => 172
[296]
	indirection => 172
[297]
	indirection => 172
[298]
	indirection => 172
[300]
	indirection => 172
[301]
	indirection => 172
[302]
	indirection => 172
[303]
	indirection => 172
[304]
	indirection => 172
[305]
	indirection => 172
[306]
	indirection => 172
[307]
	indirection => 172
[308]
	indirection => 172
[309]
	indirection => 172
[310]
	indirection => 172
[312]
	indirection => 172
[313]
	indirection => 172
[314]
	indirection => 172
[315]
	indirection => 172
[316]
	indirection => 172
[317]
	indirection => 172
[318]
	indirection => 172
[319]
	indirection => 172
[320]
	indirection => 172
[321]
	indirection => 172
[322]
	indirection => 172
[323]
	indirection => 172
[324]
	indirection => 172
[325]
	indirection => 172
[326]
	indirection => 172
[327]
	indirection => 172
[331]
	expression => 229
	iexpression => 93
	expressionlist => 370
[336]
	indirection => 172
[337]
	indirection => 172
[338]
	indirection => 172
[339]
	expression => 374
	iexpression => 93
[341]
	expression => 376
	iexpression => 93
[344]
	typename => 7
	generic_typename => 8
	typespec => 233
	parameters => 379
	paramdecl => 236
[345]
	typename => 7
	generic_typename => 8
	typespec => 380
	callablebody => 381
	callablebody_const => 382
[347]
	typename => 7
	generic_typename => 8
	typespec => 233
	parameterlist => 383
	parameters => 235
	paramdecl => 236
[354]
	extern_parameters => 388
	typename => 7
	generic_typename => 8
	typespec => 253
[356]
	generic_defaultlist => 391
	generic_identlist => 392
[357]
	typename => 7
	generic_typename => 49
	typepath => 393
[360]
	extern_parameters => 251
	extern_paramlist => 396
	typename => 7
	generic_typename => 8
	typespec => 253
[362]
	extern_parameters => 251
	extern_paramlist => 398
	typename => 7
	generic_typename => 8
	typespec => 253
[374]
	indirection => 172
[375]
	expression => 406
	iexpression => 93
[376]
	indirection => 172
[378]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 409
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[380]
	callablebody => 410
	callablebody_const => 411
[387]
	extern_parameters => 413
	typename => 7
	generic_typename => 8
	typespec => 253
[389]
	inclass_definitionlist => 414
	inclass_definition => 131
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 132
	structdefinition => 133
	interfacedefinition => 134
	classdefinition => 135
	linkage => 136
	functiondefinition => 137
	constructordefinition => 138
	operatordefinition => 139
	variabledefinition => 140
[390]
	typename => 7
	generic_typename => 49
	typepath => 142
	inheritlist => 415
[394]
	instruct_definitionlist => 417
	instruct_definition => 145
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 146
	structdefinition => 147
	variabledefinition => 148
[395]
	extern_parameters => 251
	extern_paramlist => 418
	typename => 7
	generic_typename => 8
	typespec => 253
[397]
	extern_parameters => 251
	extern_paramlist => 420
	typename => 7
	generic_typename => 8
	typespec => 253
[403]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 425
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[404]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 426
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[405]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 427
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[406]
	indirection => 172
[408]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 429
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93
[416]
	generic_defaultlist => 433
[432]
	inclass_definitionlist => 447
	inclass_definition => 131
	typename => 7
	generic_typename => 8
	typespec => 9
	typedefinition => 132
	structdefinition => 133
	interfacedefinition => 134
	classdefinition => 135
	linkage => 136
	functiondefinition => 137
	constructordefinition => 138
	operatordefinition => 139
	variabledefinition => 140
[458]
	typedefinition => 87
	linkage => 15
	functiondefinition => 88
	codeblock => 459
	statementlist => 90
	statement => 91
	expression => 92
	iexpression => 93

