; ModuleID = 'examples/language1/sources/class.prg'
source_filename = "examples/language1/sources/class.prg"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

%Object__1__VMT = type { i32 (i8*)*, i32 (i8*)* }
%Object__1 = type {i8*, %Object__1__VMT* }
%Point__1 = type { i32, i32 }
%Line__1 = type { %Point__1 }
define private dso_local void @__dtor_Point__1( %Point__1* %ptr) alwaysinline {
enter:
br label %end
end:
ret void
}
$Point__1__VMT__Object__1 = comdat any
@Point__1__VMT__Object__1 = linkonce_odr dso_local unnamed_addr constant %Object__1__VMT { 
	i32 (i8*)* bitcast (i32 (%Point__1*)* @__C_Point__1__x to i32 (i8*)*),
	i32 (i8*)* bitcast (i32 (%Point__1*)* @__C_Point__1__y to i32 (i8*)*) }, comdat, align 8
define private dso_local void @__dtor_Line__1( %Line__1* %ptr) alwaysinline {
enter:
%r1 = getelementptr inbounds %Line__1, %Line__1* %ptr, i32 0, i32 0
call void @__dtor_Point__1( %Point__1* %r1)
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}


define external void @__C_Point__1__$ctor__i32__i32( %Point__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
ret void
}

define external void @__C_Point__1__$assign__i32__i32( %Point__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
ret void
}

define external i32 @__C_Point__1__x( %Point__1* %ths ) #0 noinline nounwind {
entry:
%r1 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
%r2 = load i32, i32* %r1
ret i32 %r2
}

define external i32 @__C_Point__1__y( %Point__1* %ths ) #0 noinline nounwind {
entry:
%r1 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
%r2 = load i32, i32* %r1
ret i32 %r2
}

define external void @__C_Line__1__$ctor__i32__i32( %Line__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Line__1, %Line__1* %ths, i32 0, i32 0
call void @__C_Point__1__$ctor__i32__i32( %Point__1* %r3, i32 %r1, i32 %r2)
ret void
}

define external void @__C_Line__1__move__i32__i32( %Line__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Line__1, %Line__1* %ths, i32 0, i32 0
call void @__C_Point__1__$ctor__i32__i32( %Point__1* %r3, i32 %r1, i32 %r2)
ret void
}

declare dso_local i32 @__gxx_personality_v0(...)
define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
ret i32 0
br label %exit
exit:
ret i32 0
}


attributes #0 = {
	"disable-tail-calls"="false" "frame-pointer"="all" "min-legal-vector-width"="0" 
	"correctly-rounded-divide-sqrt-fp-math"="false" "less-precise-fpmad"="false" "no-infs-fp-math"="false" 
	"no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "unsafe-fp-math"="false" 
	"no-jump-tables"="false" "stack-protector-buffer-size"="8" 
	"target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "use-soft-float"="false"
}
attributes #1 = {
	"no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "stack-protector-buffer-size"="8" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
