
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

%Object__1__VMT = type { i32 (i8*)*, i32 (i8*)*, i32 (i8*, i32)*, i32 (i8*, i32)* }
%Object__1 = type {i8*, %Object__1__VMT* }
%ObjectUpdater__1__VMT = type { void (i8*, i32, i32)* }
%ObjectUpdater__1 = type {i8*, %ObjectUpdater__1__VMT* }
%Point__1 = type { i32, i32 }
%Line__1 = type { %Point__1 }
define private dso_local void @__dtor_Point__1( %Point__1* %ths) alwaysinline {
enter:
br label %end
end:
ret void
}
$Point__1__VMT__Object__1 = comdat any
@Point__1__VMT__Object__1 = linkonce_odr dso_local unnamed_addr constant %Object__1__VMT { 
	i32 (i8*)* bitcast (i32 (%Point__1*)* @__C_Point__1__x__const to i32 (i8*)*),
	i32 (i8*)* bitcast (i32 (%Point__1*)* @__C_Point__1__y__const to i32 (i8*)*),
	i32 (i8*, i32)* bitcast (i32 (%Point__1*, i32)* @__C_Point__1__ofs_x__i32__const to i32 (i8*, i32)*),
	i32 (i8*, i32)* bitcast (i32 (%Point__1*, i32)* @__C_Point__1__ofs_y__i32__const to i32 (i8*, i32)*) }, comdat, align 8
$Point__1__VMT__ObjectUpdater__1 = comdat any
@Point__1__VMT__ObjectUpdater__1 = linkonce_odr dso_local unnamed_addr constant %ObjectUpdater__1__VMT { 
	void (i8*, i32, i32)* bitcast (void (%Point__1*, i32, i32)* @__C_Point__1__$assign__i32__i32 to void (i8*, i32, i32)*) }, comdat, align 8
define private dso_local void @__dtor_Line__1( %Line__1* %ths) alwaysinline {
enter:
%r1 = getelementptr inbounds %Line__1, %Line__1* %ths, i32 0, i32 0
call void @__dtor_Point__1( %Point__1* %r1)
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}


declare external void @printf( i8*, ... ) #1 nounwind

define external void @__C_Point__1__$ctor__i32__i32( %Point__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
ret void
}

define external void @__C_Point__1__$assign__i32__i32( %Point__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
ret void
}

define external i32 @__C_Point__1__x__const( %Point__1* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
%r2 = load i32, i32* %r1
ret i32 %r2
}

define external i32 @__C_Point__1__y__const( %Point__1* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
%r2 = load i32, i32* %r1
ret i32 %r2
}

define external i32 @__C_Point__1__ofs_x__i32__const( %Point__1* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 0
%r3 = load i32, i32* %r2
%r4 = add nsw i32 %r3, %r1
ret i32 %r4
}

define external i32 @__C_Point__1__ofs_y__i32__const( %Point__1* %ths, i32 %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %Point__1, %Point__1* %ths, i32 0, i32 1
%r3 = load i32, i32* %r2
%r4 = add nsw i32 %r3, %r1
ret i32 %r4
}

define external void @__C_Point__1__object__const( %Object__1* sret %rt, %Point__1* %ths ) #0 noinline nounwind {
entry:
%r1 = bitcast %Point__1* %ths to i8*
%r2 = getelementptr inbounds %Object__1, %Object__1* %rt, i32 0, i32 0
store i8* %r1, i8** %r2, align 8
%r3 = getelementptr inbounds %Object__1, %Object__1* %rt, i32 0, i32 1
store %Object__1__VMT* @Point__1__VMT__Object__1, %Object__1__VMT** %r3, align 8
ret void
}

define external void @__C_Point__1__updater( %ObjectUpdater__1* sret %rt, %Point__1* %ths ) #0 noinline nounwind {
entry:
%r1 = bitcast %Point__1* %ths to i8*
%r2 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %rt, i32 0, i32 0
store i8* %r1, i8** %r2, align 8
%r3 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %rt, i32 0, i32 1
store %ObjectUpdater__1__VMT* @Point__1__VMT__ObjectUpdater__1, %ObjectUpdater__1__VMT** %r3, align 8
ret void
}

define external void @__C_Line__1__$ctor__i32__i32( %Line__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Line__1, %Line__1* %ths, i32 0, i32 0
call void @__C_Point__1__$assign__i32__i32( %Point__1* %r3, i32 %r1, i32 %r2)
ret void
}

define external void @__C_Line__1__move__i32__i32( %Line__1* %ths, i32 %r1, i32 %r2 ) #0 noinline nounwind {
entry:
%r3 = getelementptr inbounds %Line__1, %Line__1* %ths, i32 0, i32 0
call void @__C_Point__1__$assign__i32__i32( %Point__1* %r3, i32 %r1, i32 %r2)
ret void
}
@string1 = private unnamed_addr constant [18 x i8] c"RESULT[1] x = %d\0A\00"
@string2 = private unnamed_addr constant [18 x i8] c"RESULT[1] y = %d\0A\00"
@string3 = private unnamed_addr constant [18 x i8] c"RESULT[2] x = %d\0A\00"
@string4 = private unnamed_addr constant [18 x i8] c"RESULT[2] y = %d\0A\00"
@string5 = private unnamed_addr constant [18 x i8] c"RESULT[3] x = %d\0A\00"
@string6 = private unnamed_addr constant [18 x i8] c"RESULT[3] y = %d\0A\00"
@string7 = private unnamed_addr constant [18 x i8] c"RESULT[4] x = %d\0A\00"
@string8 = private unnamed_addr constant [18 x i8] c"RESULT[4] y = %d\0A\00"

declare dso_local i32 @__gxx_personality_v0(...)
define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r1 = alloca float, align 4
store float 0x3FF3AE1480000000, float* %r1
%r2 = alloca %Line__1, align 8
call void @__C_Line__1__$ctor__i32__i32( %Line__1* %r2, i32 1, i32 4)
%r4 = alloca %Object__1, align 8
%r3 = getelementptr inbounds %Line__1, %Line__1* %r2, i32 0, i32 0
call void @__C_Point__1__object__const( %Object__1* sret %r4, %Point__1* %r3)
%r5 = getelementptr inbounds [18 x i8], [18 x i8]* @string1, i64 0, i64 0
%r8 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r9 = load %Object__1__VMT*, %Object__1__VMT** %r8
%r10 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r9, i32 0, i32 0
%r6 = load i32 (i8*)*, i32 (i8*)** %r10, align 8
%r11 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r7 = load i8*, i8** %r11
%r12 = call i32 %r6( i8* %r7)
call void(i8*,  ...) @printf( i8* %r5, i32 %r12)
%r13 = getelementptr inbounds [18 x i8], [18 x i8]* @string2, i64 0, i64 0
%r16 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r17 = load %Object__1__VMT*, %Object__1__VMT** %r16
%r18 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r17, i32 0, i32 1
%r14 = load i32 (i8*)*, i32 (i8*)** %r18, align 8
%r19 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r15 = load i8*, i8** %r19
%r20 = call i32 %r14( i8* %r15)
call void(i8*,  ...) @printf( i8* %r13, i32 %r20)
%r22 = alloca %ObjectUpdater__1, align 8
%r21 = getelementptr inbounds %Line__1, %Line__1* %r2, i32 0, i32 0
call void @__C_Point__1__updater( %ObjectUpdater__1* sret %r22, %Point__1* %r21)
%r25 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r22, i32 0, i32 1
%r26 = load %ObjectUpdater__1__VMT*, %ObjectUpdater__1__VMT** %r25
%r27 = getelementptr inbounds %ObjectUpdater__1__VMT, %ObjectUpdater__1__VMT* %r26, i32 0, i32 0
%r23 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r27, align 8
%r28 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r22, i32 0, i32 0
%r24 = load i8*, i8** %r28
call void %r23( i8* %r24, i32 31, i32 411)
%r29 = getelementptr inbounds [18 x i8], [18 x i8]* @string3, i64 0, i64 0
%r32 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r33 = load %Object__1__VMT*, %Object__1__VMT** %r32
%r34 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r33, i32 0, i32 0
%r30 = load i32 (i8*)*, i32 (i8*)** %r34, align 8
%r35 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r31 = load i8*, i8** %r35
%r36 = call i32 %r30( i8* %r31)
call void(i8*,  ...) @printf( i8* %r29, i32 %r36)
%r37 = getelementptr inbounds [18 x i8], [18 x i8]* @string4, i64 0, i64 0
%r40 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r41 = load %Object__1__VMT*, %Object__1__VMT** %r40
%r42 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r41, i32 0, i32 1
%r38 = load i32 (i8*)*, i32 (i8*)** %r42, align 8
%r43 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r39 = load i8*, i8** %r43
%r44 = call i32 %r38( i8* %r39)
call void(i8*,  ...) @printf( i8* %r37, i32 %r44)
%r47 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r22, i32 0, i32 1
%r48 = load %ObjectUpdater__1__VMT*, %ObjectUpdater__1__VMT** %r47
%r49 = getelementptr inbounds %ObjectUpdater__1__VMT, %ObjectUpdater__1__VMT* %r48, i32 0, i32 0
%r45 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r49, align 8
%r50 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r22, i32 0, i32 0
%r46 = load i8*, i8** %r50
call void %r45( i8* %r46, i32 71, i32 511)
%r51 = getelementptr inbounds [18 x i8], [18 x i8]* @string5, i64 0, i64 0
%r54 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r55 = load %Object__1__VMT*, %Object__1__VMT** %r54
%r56 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r55, i32 0, i32 2
%r52 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r56, align 8
%r57 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r53 = load i8*, i8** %r57
%r58 = call i32 %r52( i8* %r53, i32 -13)
call void(i8*,  ...) @printf( i8* %r51, i32 %r58)
%r59 = getelementptr inbounds [18 x i8], [18 x i8]* @string6, i64 0, i64 0
%r62 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r63 = load %Object__1__VMT*, %Object__1__VMT** %r62
%r64 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r63, i32 0, i32 3
%r60 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r64, align 8
%r65 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r61 = load i8*, i8** %r65
%r66 = call i32 %r60( i8* %r61, i32 1)
call void(i8*,  ...) @printf( i8* %r59, i32 %r66)
%r67 = alloca %ObjectUpdater__1, align 8
%r68 = load %ObjectUpdater__1, %ObjectUpdater__1* %r22
store %ObjectUpdater__1 %r68, %ObjectUpdater__1* %r67
%r71 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r67, i32 0, i32 1
%r72 = load %ObjectUpdater__1__VMT*, %ObjectUpdater__1__VMT** %r71
%r73 = getelementptr inbounds %ObjectUpdater__1__VMT, %ObjectUpdater__1__VMT* %r72, i32 0, i32 0
%r69 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r73, align 8
%r74 = getelementptr inbounds %ObjectUpdater__1, %ObjectUpdater__1* %r67, i32 0, i32 0
%r70 = load i8*, i8** %r74
call void %r69( i8* %r70, i32 32, i32 412)
%r75 = getelementptr inbounds [18 x i8], [18 x i8]* @string7, i64 0, i64 0
%r78 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r79 = load %Object__1__VMT*, %Object__1__VMT** %r78
%r80 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r79, i32 0, i32 2
%r76 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r80, align 8
%r81 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r77 = load i8*, i8** %r81
%r82 = call i32 %r76( i8* %r77, i32 -11)
call void(i8*,  ...) @printf( i8* %r75, i32 %r82)
%r83 = getelementptr inbounds [18 x i8], [18 x i8]* @string8, i64 0, i64 0
%r86 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 1
%r87 = load %Object__1__VMT*, %Object__1__VMT** %r86
%r88 = getelementptr inbounds %Object__1__VMT, %Object__1__VMT* %r87, i32 0, i32 1
%r84 = load i32 (i8*)*, i32 (i8*)** %r88, align 8
%r89 = getelementptr inbounds %Object__1, %Object__1* %r4, i32 0, i32 0
%r85 = load i8*, i8** %r89
%r90 = call i32 %r84( i8* %r85)
call void(i8*,  ...) @printf( i8* %r83, i32 %r90)
ret i32 0
br label %L1
L1:
call void @__dtor_Line__1( %Line__1* %r2)
br label %exit
exit:
ret i32 0
}


