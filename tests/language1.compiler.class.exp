
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
%Object__VMT = type { i32 (i8*)*, i32 (i8*)*, i32 (i8*, i32)*, i32 (i8*, i32)* }
%Object = type {i8*, %Object__VMT* }
%ObjectUpdater__VMT = type { void (i8*, i32, i32)* }
%ObjectUpdater = type {i8*, %ObjectUpdater__VMT* }
%Point = type { i32, i32 }
%Line = type { %Point }
define private dso_local void @__partial_dtor_Point( %Point* %ths, i32 %istate) {
enter:
br label %end
end:
ret void
}
$Point__VMT__Object = comdat any
@Point__VMT__Object = linkonce_odr dso_local unnamed_addr constant %Object__VMT { 
	i32 (i8*)* bitcast (i32 (%Point*)* @__C_Point__x__const to i32 (i8*)*),
	i32 (i8*)* bitcast (i32 (%Point*)* @__C_Point__y__const to i32 (i8*)*),
	i32 (i8*, i32)* bitcast (i32 (%Point*, i32)* @__C_Point__ofs_x__i32__const to i32 (i8*, i32)*),
	i32 (i8*, i32)* bitcast (i32 (%Point*, i32)* @__C_Point__ofs_y__i32__const to i32 (i8*, i32)*) }, comdat, align 8
$Point__VMT__ObjectUpdater = comdat any
@Point__VMT__ObjectUpdater = linkonce_odr dso_local unnamed_addr constant %ObjectUpdater__VMT { 
	void (i8*, i32, i32)* bitcast (void (%Point*, i32, i32)* @__C_Point__$assign__i32__i32 to void (i8*, i32, i32)*) }, comdat, align 8
define private dso_local void @__dtor_Line( %Line* %ths) {
enter:
%r1 = getelementptr inbounds %Line, %Line* %ths, i32 0, i32 0
call void @__dtor_Point( %Point* %r1)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor_Line( %Line* %ths, i32 %istate) {
enter:
%r2 = icmp sle i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %Line, %Line* %ths, i32 0, i32 0
call void @__dtor_Point( %Point* %r1)
br label %L2
L2:
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
define external void @__C_Point__$ctor__i32__i32( %Point* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
br label %L1
L1:
ret void
}
define external void @__dtor_Point( %Point* %ths ) #0 nounwind {
entry:
br label %L1
L1:
ret void
}
define external void @__C_Point__$assign__i32__i32( %Point* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 0
store i32 %r1, i32* %r3
%r4 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 1
store i32 %r2, i32* %r4
br label %L1
L1:
ret void
}
define external i32 @__C_Point__x__const( %Point* %ths ) #0 noinline nounwind {
entry:
%r1 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 0
%r2 = load i32, i32* %r1
br label %L1
L1:
ret i32 %r2
}
define external i32 @__C_Point__y__const( %Point* %ths ) #0 noinline nounwind {
entry:
%r1 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 1
%r2 = load i32, i32* %r1
br label %L1
L1:
ret i32 %r2
}
define external i32 @__C_Point__ofs_x__i32__const( %Point* %ths, i32 %r1 ) #0 noinline nounwind {
entry:
%r2 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 0
%r3 = load i32, i32* %r2
%r4 = add nsw i32 %r3, %r1
br label %L1
L1:
ret i32 %r4
}
define external i32 @__C_Point__ofs_y__i32__const( %Point* %ths, i32 %r1 ) #0 noinline nounwind {
entry:
%r2 = getelementptr inbounds %Point, %Point* %ths, i32 0, i32 1
%r3 = load i32, i32* %r2
%r4 = add nsw i32 %r3, %r1
br label %L1
L1:
ret i32 %r4
}
define external void @__C_Point__object__const( %Object* sret %rt, %Point* %ths ) #0 nounwind {
entry:
%r1 = bitcast %Point* %ths to i8*
%r2 = getelementptr inbounds %Object, %Object* %rt, i32 0, i32 0
store i8* %r1, i8** %r2, align 8
%r3 = getelementptr inbounds %Object, %Object* %rt, i32 0, i32 1
store %Object__VMT* @Point__VMT__Object, %Object__VMT** %r3, align 8
br label %L1
L1:
ret void
}
define external void @__C_Point__updater( %ObjectUpdater* sret %rt, %Point* %ths ) #0 nounwind {
entry:
%r1 = bitcast %Point* %ths to i8*
%r2 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %rt, i32 0, i32 0
store i8* %r1, i8** %r2, align 8
%r3 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %rt, i32 0, i32 1
store %ObjectUpdater__VMT* @Point__VMT__ObjectUpdater, %ObjectUpdater__VMT** %r3, align 8
br label %L1
L1:
ret void
}
define external void @__C_Line__$ctor__i32__i32( %Line* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %Line, %Line* %ths, i32 0, i32 0
call void @__C_Point__$ctor__i32__i32( %Point* %r3, i32 %r1, i32 %r2)
br label %L1
L1:
ret void
}
define external void @__C_Line__move__i32__i32( %Line* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %Line, %Line* %ths, i32 0, i32 0
call void @__C_Point__$assign__i32__i32( %Point* %r3, i32 %r1, i32 %r2)
br label %L1
L1:
ret void
}
@string1 = private unnamed_addr constant [18 x i8] c"RESULT[1] x = %d\0A\00"
@string2 = private unnamed_addr constant [18 x i8] c"RESULT[1] y = %d\0A\00"
@string3 = private unnamed_addr constant [18 x i8] c"RESULT[2] x = %d\0A\00"
@string4 = private unnamed_addr constant [18 x i8] c"RESULT[2] y = %d\0A\00"
@string5 = private unnamed_addr constant [18 x i8] c"RESULT[3] x = %d\0A\00"
@string6 = private unnamed_addr constant [18 x i8] c"RESULT[3] y = %d\0A\00"
@string7 = private unnamed_addr constant [18 x i8] c"RESULT[4] x = %d\0A\00"
@string8 = private unnamed_addr constant [18 x i8] c"RESULT[4] y = %d\0A\00"

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r1 = alloca i32, align 4
%r2 = alloca float, align 4
store float 0x3FF3AE1480000000, float* %r2
%r3 = alloca %Line, align 8
call void @__C_Line__$ctor__i32__i32( %Line* %r3, i32 7, i32 4)
%r5 = alloca %Object, align 8
%r4 = getelementptr inbounds %Line, %Line* %r3, i32 0, i32 0
call void @__C_Point__object__const( %Object* sret %r5, %Point* %r4)
%r6 = getelementptr inbounds [18 x i8], [18 x i8]* @string1, i64 0, i64 0
%r9 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r10 = load %Object__VMT*, %Object__VMT** %r9
%r11 = getelementptr inbounds %Object__VMT, %Object__VMT* %r10, i32 0, i32 0
%r7 = load i32 (i8*)*, i32 (i8*)** %r11, align 8
%r12 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r8 = load i8*, i8** %r12
%r13 = call i32 %r7( i8* %r8)
call void(i8*,  ...) @printf( i8* %r6, i32 %r13)
%r14 = getelementptr inbounds [18 x i8], [18 x i8]* @string2, i64 0, i64 0
%r17 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r18 = load %Object__VMT*, %Object__VMT** %r17
%r19 = getelementptr inbounds %Object__VMT, %Object__VMT* %r18, i32 0, i32 1
%r15 = load i32 (i8*)*, i32 (i8*)** %r19, align 8
%r20 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r16 = load i8*, i8** %r20
%r21 = call i32 %r15( i8* %r16)
call void(i8*,  ...) @printf( i8* %r14, i32 %r21)
%r23 = alloca %ObjectUpdater, align 8
%r22 = getelementptr inbounds %Line, %Line* %r3, i32 0, i32 0
call void @__C_Point__updater( %ObjectUpdater* sret %r23, %Point* %r22)
%r26 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r23, i32 0, i32 1
%r27 = load %ObjectUpdater__VMT*, %ObjectUpdater__VMT** %r26
%r28 = getelementptr inbounds %ObjectUpdater__VMT, %ObjectUpdater__VMT* %r27, i32 0, i32 0
%r24 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r28, align 8
%r29 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r23, i32 0, i32 0
%r25 = load i8*, i8** %r29
call void %r24( i8* %r25, i32 31, i32 411)
%r30 = getelementptr inbounds [18 x i8], [18 x i8]* @string3, i64 0, i64 0
%r33 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r34 = load %Object__VMT*, %Object__VMT** %r33
%r35 = getelementptr inbounds %Object__VMT, %Object__VMT* %r34, i32 0, i32 0
%r31 = load i32 (i8*)*, i32 (i8*)** %r35, align 8
%r36 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r32 = load i8*, i8** %r36
%r37 = call i32 %r31( i8* %r32)
call void(i8*,  ...) @printf( i8* %r30, i32 %r37)
%r38 = getelementptr inbounds [18 x i8], [18 x i8]* @string4, i64 0, i64 0
%r41 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r42 = load %Object__VMT*, %Object__VMT** %r41
%r43 = getelementptr inbounds %Object__VMT, %Object__VMT* %r42, i32 0, i32 1
%r39 = load i32 (i8*)*, i32 (i8*)** %r43, align 8
%r44 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r40 = load i8*, i8** %r44
%r45 = call i32 %r39( i8* %r40)
call void(i8*,  ...) @printf( i8* %r38, i32 %r45)
%r48 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r23, i32 0, i32 1
%r49 = load %ObjectUpdater__VMT*, %ObjectUpdater__VMT** %r48
%r50 = getelementptr inbounds %ObjectUpdater__VMT, %ObjectUpdater__VMT* %r49, i32 0, i32 0
%r46 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r50, align 8
%r51 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r23, i32 0, i32 0
%r47 = load i8*, i8** %r51
call void %r46( i8* %r47, i32 71, i32 511)
%r52 = getelementptr inbounds [18 x i8], [18 x i8]* @string5, i64 0, i64 0
%r55 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r56 = load %Object__VMT*, %Object__VMT** %r55
%r57 = getelementptr inbounds %Object__VMT, %Object__VMT* %r56, i32 0, i32 2
%r53 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r57, align 8
%r58 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r54 = load i8*, i8** %r58
%r59 = call i32 %r53( i8* %r54, i32 -13)
call void(i8*,  ...) @printf( i8* %r52, i32 %r59)
%r60 = getelementptr inbounds [18 x i8], [18 x i8]* @string6, i64 0, i64 0
%r63 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r64 = load %Object__VMT*, %Object__VMT** %r63
%r65 = getelementptr inbounds %Object__VMT, %Object__VMT* %r64, i32 0, i32 3
%r61 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r65, align 8
%r66 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r62 = load i8*, i8** %r66
%r67 = call i32 %r61( i8* %r62, i32 1)
call void(i8*,  ...) @printf( i8* %r60, i32 %r67)
%r68 = alloca %ObjectUpdater, align 8
%r69 = load %ObjectUpdater, %ObjectUpdater* %r23
store %ObjectUpdater %r69, %ObjectUpdater* %r68
%r72 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r68, i32 0, i32 1
%r73 = load %ObjectUpdater__VMT*, %ObjectUpdater__VMT** %r72
%r74 = getelementptr inbounds %ObjectUpdater__VMT, %ObjectUpdater__VMT* %r73, i32 0, i32 0
%r70 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %r74, align 8
%r75 = getelementptr inbounds %ObjectUpdater, %ObjectUpdater* %r68, i32 0, i32 0
%r71 = load i8*, i8** %r75
call void %r70( i8* %r71, i32 32, i32 412)
%r76 = getelementptr inbounds [18 x i8], [18 x i8]* @string7, i64 0, i64 0
%r79 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r80 = load %Object__VMT*, %Object__VMT** %r79
%r81 = getelementptr inbounds %Object__VMT, %Object__VMT* %r80, i32 0, i32 2
%r77 = load i32 (i8*, i32)*, i32 (i8*, i32)** %r81, align 8
%r82 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r78 = load i8*, i8** %r82
%r83 = call i32 %r77( i8* %r78, i32 -11)
call void(i8*,  ...) @printf( i8* %r76, i32 %r83)
%r84 = getelementptr inbounds [18 x i8], [18 x i8]* @string8, i64 0, i64 0
%r87 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 1
%r88 = load %Object__VMT*, %Object__VMT** %r87
%r89 = getelementptr inbounds %Object__VMT, %Object__VMT* %r88, i32 0, i32 1
%r85 = load i32 (i8*)*, i32 (i8*)** %r89, align 8
%r90 = getelementptr inbounds %Object, %Object* %r5, i32 0, i32 0
%r86 = load i8*, i8** %r90
%r91 = call i32 %r85( i8* %r86)
call void(i8*,  ...) @printf( i8* %r84, i32 %r91)
store i32 0, i32* %r1
br label %L2
L2:
call void @__dtor_Line( %Line* %r3)
br label %L3
L3:
br label %L1
L1:
%r92 = load i32, i32* %r1
ret i32 %r92
}


