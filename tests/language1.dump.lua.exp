{
	mewa = "0.6.7",
	language = "language1",
	typesystem = "language1/typesystem",
	cmdline = "cmdlinearg",
	lexer = {
		comment = {{ "/*", "*/" },"//" },
		keyword = {
			"extern", "function", "(", ")", ";", "procedure", "...", ",",
			"operator", "const", "nothrow", "::", "any", "class", "^", "struct",
			"[", "]", "&", "typedef", "{", "}", "generic", "interface",
			"namespace", ":", "private", "public", "constructor", "destructor", "->", "=",
			"+", "-", "*", "/", "%", "&&", "||", "|",
			"<<", ">>", "~", "!", "==", "!=", ">=", "<=",
			">", "<", "lambda", "main", "elseif", "else", "catch", "try",
			"var", "return", "throw", "delete", "if", "while", "with", "new",
			"cast", "null", "+=", "-=", "*=", "/=", "^=", "&=",
			"%=", "&&=", "||=", "|=", "<<=", ">>=", "." },
		token = {
			{ "BOOLEAN", "((true)|(false))" },
			{ "IDENT", "[a-zA-Z_]+[a-zA-Z_0-9]*" },
			{ "DQSTRING", '["]((([^\\\\"\\n]+)|([\\\\][^"\\n]))*)["]', 1 },
			{ "SQSTRING", "[']((([^\\\\'\\n]+)|([\\\\][^'\\n]))*)[']", 1 },
			{ "UINTEGER", "[0123456789]+" },
			{ "FLOAT", "[0123456789]*[.][0123456789]+" },
			{ "FLOAT", "[0123456789]*[.][0123456789]+[Ee][+-]{0,1}[0123456789]+" },
			{ "ILLEGAL", "[0123456789]+[A-Za-z_]" },
			{ "ILLEGAL", "[0123456789]*[.][0123456789]+[A-Za-z_]" },
			{ "ILLEGAL", "[0123456789]*[.][0123456789]+[Ee][+-]{0,1}[0123456789]+[A-Za-z_]" } }},
	nonterminal = {
		"program", "extern_definitionlist", "free_definitionlist", "namespace_definitionlist",
		"instruct_definitionlist", "inclass_definitionlist", "ininterf_definitionlist", "extern_definition",
		"extern_paramdecl", "extern_parameters", "extern_paramlist", "ininterf_definition",
		"funcattribute", "instruct_definition", "inclass_definition", "free_definition",
		"namespace_definition", "typename", "typehdr", "typegen",
		"typespec", "typedefinition", "structdefinition", "interfacedefinition",
		"inheritlist", "namespacedefinition", "classdefinition", "linkage",
		"functiondefinition", "constructordefinition", "operatordefinition", "operatordecl",
		"lambda_paramlist", "lambda_parameters", "lamda_expression", "generic_instance_defelem",
		"generic_instance_deflist", "generic_instance", "generic_defaultlist", "generic_identlist",
		"generic_header", "callablebody", "main_procedure", "impl_paramlist",
		"impl_parameters", "impl_paramdecl", "codeblock", "statementlist",
		"elseblock", "catchblock", "tryblock", "statement",
		"variabledefinition", "expression", "iexpression", "indirection",
		"expressionlist"},
	action = {
		[XX] = YY,	[XX] = YY,	[XX] = YY,	[XX] = YY,
		[XX] = YY,	[XX] = YY,	[XX] = YY,	[XX] = YY},
	gto = {
		[XX] = YY,	[XX] = YY,	[XX] = YY,	[XX] = YY,
		[XX] = YY,	[XX] = YY,	[XX] = YY,	[XX] = YY},
	call = {
		{ name="program", proc=typesystem.program},
		{ name="extern_funcdef", proc=typesystem.extern_funcdef},
		{ name="extern_procdef", proc=typesystem.extern_procdef},
		{ name="extern_funcdef_vararg", proc=typesystem.extern_funcdef_vararg},
		{ name="extern_procdef_vararg", proc=typesystem.extern_procdef_vararg},
		{ name="extern_paramdef", proc=typesystem.extern_paramdef},
		{ name="extern_paramdef_collect", proc=typesystem.extern_paramdef_collect},
		{ name="extern_paramdeflist", proc=typesystem.extern_paramdeflist},
		{ name="interface_funcdef", proc=typesystem.interface_funcdef},
		{ name="interface_procdef", proc=typesystem.interface_procdef},
		{ name="interface_operator_funcdef", proc=typesystem.interface_operator_funcdef},
		{ name="interface_operator_procdef", proc=typesystem.interface_operator_procdef},
		{ name="funcattribute {const=true}", proc=typesystem.funcattribute, obj={const=true}},
		{ name="funcattribute {throws=false}", proc=typesystem.funcattribute, obj={throws=false}},
		{ name="funcattribute {const=false,throws=true}", proc=typesystem.funcattribute, obj={const=false,throws=true}},
		{ name="definition 1", proc=typesystem.definition, obj=1},
		{ name="definition 2", proc=typesystem.definition, obj=2},
		{ name="definition_2pass 4", proc=typesystem.definition_2pass, obj=4},
		{ name="typehdr {const=false}", proc=typesystem.typehdr, obj={const=false}},
		{ name="typehdr {const=true}", proc=typesystem.typehdr, obj={const=true}},
		{ name="typehdr_any any class^", proc=typesystem.typehdr_any, obj="any class^"},
		{ name="typehdr_any any const class^", proc=typesystem.typehdr_any, obj="any const class^"},
		{ name="typehdr_any any struct^", proc=typesystem.typehdr_any, obj="any struct^"},
		{ name="typehdr_any any const struct^", proc=typesystem.typehdr_any, obj="any const struct^"},
		{ name="typegen_generic", proc=typesystem.typegen_generic},
		{ name="typegen_pointer {const=false}", proc=typesystem.typegen_pointer, obj={const=false}},
		{ name="typegen_pointer {const=true}", proc=typesystem.typegen_pointer, obj={const=true}},
		{ name="typespec", proc=typesystem.typespec},
		{ name="typespec_ref", proc=typesystem.typespec_ref},
		{ name="typedef", proc=typesystem.typedef},
		{ name="typedef_functype {throws=true}", proc=typesystem.typedef_functype, obj={throws=true}},
		{ name="typedef_proctype {throws=true}", proc=typesystem.typedef_proctype, obj={throws=true}},
		{ name="typedef_functype {throws=false}", proc=typesystem.typedef_functype, obj={throws=false}},
		{ name="typedef_proctype {throws=false}", proc=typesystem.typedef_proctype, obj={throws=false}},
		{ name="structdef", proc=typesystem.structdef},
		{ name="generic_structdef", proc=typesystem.generic_structdef},
		{ name="interfacedef", proc=typesystem.interfacedef},
		{ name="inheritdef 1", proc=typesystem.inheritdef, obj=1},
		{ name="namespacedef", proc=typesystem.namespacedef},
		{ name="classdef", proc=typesystem.classdef},
		{ name="generic_classdef", proc=typesystem.generic_classdef},
		{ name='linkage {private=true,linkage="internal",explicit=true}', proc=typesystem.linkage, obj={private=true,linkage="internal",explicit=true}},
		{ name='linkage {private=false,linkage="external",explicit=true}', proc=typesystem.linkage, obj={private=false,linkage="external",explicit=true}},
		{ name='linkage {private=false,linkage="external",explicit=false}', proc=typesystem.linkage, obj={private=false,linkage="external",explicit=false}},
		{ name="funcdef", proc=typesystem.funcdef},
		{ name="procdef", proc=typesystem.procdef},
		{ name="generic_funcdef", proc=typesystem.generic_funcdef},
		{ name="generic_procdef", proc=typesystem.generic_procdef},
		{ name="constructordef", proc=typesystem.constructordef},
		{ name='destructordef {linkage="external"}', proc=typesystem.destructordef, obj={linkage="external"}},
		{ name="operator_funcdef", proc=typesystem.operator_funcdef},
		{ name="operator_procdef", proc=typesystem.operator_procdef},
		{ name='operatordecl {name="->",symbol="arrow"}', proc=typesystem.operatordecl, obj={name="->",symbol="arrow"}},
		{ name='operatordecl {name="=",symbol="assign"}', proc=typesystem.operatordecl, obj={name="=",symbol="assign"}},
		{ name='operatordecl {name="+",symbol="plus"}', proc=typesystem.operatordecl, obj={name="+",symbol="plus"}},
		{ name='operatordecl {name="-",symbol="minus"}', proc=typesystem.operatordecl, obj={name="-",symbol="minus"}},
		{ name='operatordecl {name="*",symbol="mul"}', proc=typesystem.operatordecl, obj={name="*",symbol="mul"}},
		{ name='operatordecl {name="/",symbol="div"}', proc=typesystem.operatordecl, obj={name="/",symbol="div"}},
		{ name='operatordecl {name="%",symbol="mod"}', proc=typesystem.operatordecl, obj={name="%",symbol="mod"}},
		{ name='operatordecl {name="&&",symbol="and"}', proc=typesystem.operatordecl, obj={name="&&",symbol="and"}},
		{ name='operatordecl {name="||",symbol="or"}', proc=typesystem.operatordecl, obj={name="||",symbol="or"}},
		{ name='operatordecl {name="&",symbol="bitand"}', proc=typesystem.operatordecl, obj={name="&",symbol="bitand"}},
		{ name='operatordecl {name="|",symbol="bitor"}', proc=typesystem.operatordecl, obj={name="|",symbol="bitor"}},
		{ name='operatordecl {name="<<",symbol="lsh"}', proc=typesystem.operatordecl, obj={name="<<",symbol="lsh"}},
		{ name='operatordecl {name=">>",symbol="rsh"}', proc=typesystem.operatordecl, obj={name=">>",symbol="rsh"}},
		{ name='operatordecl {name="~",symbol="lneg"}', proc=typesystem.operatordecl, obj={name="~",symbol="lneg"}},
		{ name='operatordecl {name="!",symbol="not"}', proc=typesystem.operatordecl, obj={name="!",symbol="not"}},
		{ name='operatordecl {name="()",symbol="call"}', proc=typesystem.operatordecl, obj={name="()",symbol="call"}},
		{ name='operatordecl {name="[]",symbol="get"}', proc=typesystem.operatordecl, obj={name="[]",symbol="get"}},
		{ name='operatordecl {name="==",symbol="eq"}', proc=typesystem.operatordecl, obj={name="==",symbol="eq"}},
		{ name='operatordecl {name="!=",symbol="ne"}', proc=typesystem.operatordecl, obj={name="!=",symbol="ne"}},
		{ name='operatordecl {name=">=",symbol="ge"}', proc=typesystem.operatordecl, obj={name=">=",symbol="ge"}},
		{ name='operatordecl {name="<=",symbol="le"}', proc=typesystem.operatordecl, obj={name="<=",symbol="le"}},
		{ name='operatordecl {name=">",symbol="gt"}', proc=typesystem.operatordecl, obj={name=">",symbol="gt"}},
		{ name='operatordecl {name="<",symbol="lt"}', proc=typesystem.operatordecl, obj={name="<",symbol="lt"}},
		{ name="lambda_paramdeflist", proc=typesystem.lambda_paramdeflist},
		{ name="lambda_expression", proc=typesystem.lambda_expression},
		{ name="generic_instance_dimension", proc=typesystem.generic_instance_dimension},
		{ name="generic_instance_deflist", proc=typesystem.generic_instance_deflist},
		{ name="generic_instance", proc=typesystem.generic_instance},
		{ name="generic_header_ident_type", proc=typesystem.generic_header_ident_type},
		{ name="generic_header_ident", proc=typesystem.generic_header_ident},
		{ name="generic_header", proc=typesystem.generic_header},
		{ name="callablebody", proc=typesystem.callablebody},
		{ name="main_procdef", proc=typesystem.main_procdef},
		{ name="paramdeflist", proc=typesystem.paramdeflist},
		{ name="paramdef", proc=typesystem.paramdef},
		{ name="codeblock", proc=typesystem.codeblock},
		{ name="conditional_elseif", proc=typesystem.conditional_elseif},
		{ name="conditional_else", proc=typesystem.conditional_else},
		{ name="catchblock", proc=typesystem.catchblock},
		{ name="tryblock", proc=typesystem.tryblock},
		{ name="free_expression", proc=typesystem.free_expression},
		{ name="return_value", proc=typesystem.return_value},
		{ name="return_void", proc=typesystem.return_void},
		{ name="throw_exception", proc=typesystem.throw_exception},
		{ name="trycatch", proc=typesystem.trycatch},
		{ name="delete", proc=typesystem.delete},
		{ name="conditional_if", proc=typesystem.conditional_if},
		{ name="conditional_while", proc=typesystem.conditional_while},
		{ name="with_do", proc=typesystem.with_do},
		{ name="vardef", proc=typesystem.vardef},
		{ name="structure", proc=typesystem.structure},
		{ name="allocate", proc=typesystem.allocate},
		{ name="typecast", proc=typesystem.typecast},
		{ name="variable", proc=typesystem.variable},
		{ name="constant constexpr bool", proc=typesystem.constant, obj="constexpr bool"},
		{ name="constant constexpr uint", proc=typesystem.constant, obj="constexpr uint"},
		{ name="constant constexpr float", proc=typesystem.constant, obj="constexpr float"},
		{ name="null", proc=typesystem.null},
		{ name="string_constant", proc=typesystem.string_constant},
		{ name="char_constant", proc=typesystem.char_constant},
		{ name="binop =", proc=typesystem.binop, obj="="},
		{ name="assign_operator +", proc=typesystem.assign_operator, obj="+"},
		{ name="assign_operator -", proc=typesystem.assign_operator, obj="-"},
		{ name="assign_operator *", proc=typesystem.assign_operator, obj="*"},
		{ name="assign_operator /", proc=typesystem.assign_operator, obj="/"},
		{ name="assign_operator ^", proc=typesystem.assign_operator, obj="^"},
		{ name="assign_operator &", proc=typesystem.assign_operator, obj="&"},
		{ name="assign_operator %", proc=typesystem.assign_operator, obj="%"},
		{ name="assign_operator &&", proc=typesystem.assign_operator, obj="&&"},
		{ name="assign_operator ||", proc=typesystem.assign_operator, obj="||"},
		{ name="assign_operator |", proc=typesystem.assign_operator, obj="|"},
		{ name="assign_operator <<", proc=typesystem.assign_operator, obj="<<"},
		{ name="assign_operator >>", proc=typesystem.assign_operator, obj=">>"},
		{ name="binop ||", proc=typesystem.binop, obj="||"},
		{ name="binop &&", proc=typesystem.binop, obj="&&"},
		{ name="binop |", proc=typesystem.binop, obj="|"},
		{ name="binop ^", proc=typesystem.binop, obj="^"},
		{ name="binop &", proc=typesystem.binop, obj="&"},
		{ name="binop ==", proc=typesystem.binop, obj="=="},
		{ name="binop !=", proc=typesystem.binop, obj="!="},
		{ name="binop <=", proc=typesystem.binop, obj="<="},
		{ name="binop <", proc=typesystem.binop, obj="<"},
		{ name="binop >=", proc=typesystem.binop, obj=">="},
		{ name="binop >", proc=typesystem.binop, obj=">"},
		{ name="binop +", proc=typesystem.binop, obj="+"},
		{ name="binop -", proc=typesystem.binop, obj="-"},
		{ name="operator_address &", proc=typesystem.operator_address, obj="&"},
		{ name="unop -", proc=typesystem.unop, obj="-"},
		{ name="unop +", proc=typesystem.unop, obj="+"},
		{ name="unop ~", proc=typesystem.unop, obj="~"},
		{ name="unop !", proc=typesystem.unop, obj="!"},
		{ name="binop *", proc=typesystem.binop, obj="*"},
		{ name="binop /", proc=typesystem.binop, obj="/"},
		{ name="binop %", proc=typesystem.binop, obj="%"},
		{ name="binop <<", proc=typesystem.binop, obj="<<"},
		{ name="binop >>", proc=typesystem.binop, obj=">>"},
		{ name="member", proc=typesystem.member},
		{ name="unop ->", proc=typesystem.unop, obj="->"},
		{ name="operator ()", proc=typesystem.operator, obj="()"},
		{ name="operator_array []", proc=typesystem.operator_array, obj="[]"},
		{ name="rep_operator ->", proc=typesystem.rep_operator, obj="->"},
		{ name="count", proc=typesystem.count}}
}

