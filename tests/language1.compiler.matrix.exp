
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
%__Matrix__double__4__4 = type { [4 x [4 x double]] }
%__Matrix__double__3__3 = type { [3 x [3 x double]] }
%__Matrix__double__3__4 = type { [3 x [4 x double]] }
%__Matrix__double__4__3 = type { [4 x [3 x double]] }
define private dso_local void @__ctor_3__double( [3 x double]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi double* [%base, %enter], [%A2, %loop]
store double 0.00000, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = icmp eq double* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__double( [3 x double]* %ths_ar, [3 x double]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x double], [3 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %loop]
%oth = phi double* [%oth_base, %enter], [%A3, %loop]
%r1 = load double, double* %oth
store double %r1, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_3__double( [3 x double]* %ths_ar, [3 x double]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x double], [3 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %loop]
%oth = phi double* [%oth_base, %enter], [%A3, %loop]
%r2 = load double, double* %oth
store double %r2, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__double( [3 x double]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi double* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds double, double* %ths, i64 -1
%A3 = icmp eq double* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_4__3__double( [4 x [3 x double]]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [3 x double]* [%base, %enter], [%A2, %loop]
call void @__ctor_3__double( [3 x double]* %ths, i32 0)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = icmp eq [3 x double]* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__3__double( [4 x [3 x double]]* %ths_ar, [4 x [3 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_copy_3__double( [3 x double]* %ths, [3 x double]* %oth)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_4__3__double( [4 x [3 x double]]* %ths_ar, [4 x [3 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_assign_3__double( [3 x double]* %ths, [3 x double]* %oth)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__3__double( [4 x [3 x double]]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [3 x double]* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 -1
call void @__dtor_3__double( [3 x double]* %ths)
%A3 = icmp eq [3 x double]* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_4__double( [4 x double]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi double* [%base, %enter], [%A2, %loop]
store double 0.00000, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = icmp eq double* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__double( [4 x double]* %ths_ar, [4 x double]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x double], [4 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %loop]
%oth = phi double* [%oth_base, %enter], [%A3, %loop]
%r1 = load double, double* %oth
store double %r1, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_4__double( [4 x double]* %ths_ar, [4 x double]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x double], [4 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %loop]
%oth = phi double* [%oth_base, %enter], [%A3, %loop]
%r2 = load double, double* %oth
store double %r2, double* %ths
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__double( [4 x double]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi double* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds double, double* %ths, i64 -1
%A3 = icmp eq double* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_4__4__double( [4 x [4 x double]]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [4 x double]* [%base, %enter], [%A2, %loop]
call void @__ctor_4__double( [4 x double]* %ths, i32 0)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = icmp eq [4 x double]* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__4__double( [4 x [4 x double]]* %ths_ar, [4 x [4 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_copy_4__double( [4 x double]* %ths, [4 x double]* %oth)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_4__4__double( [4 x [4 x double]]* %ths_ar, [4 x [4 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_assign_4__double( [4 x double]* %ths, [4 x double]* %oth)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__4__double( [4 x [4 x double]]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [4 x double]* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 -1
call void @__dtor_4__double( [4 x double]* %ths)
%A3 = icmp eq [4 x double]* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__dtor_4__4__double( [4 x [4 x double]]* %r1)
br label %end
end:
ret void
}
define private dso_local void @__ctor_3__4__double( [3 x [4 x double]]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [4 x double]* [%base, %enter], [%A2, %loop]
call void @__ctor_4__double( [4 x double]* %ths, i32 0)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = icmp eq [4 x double]* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__4__double( [3 x [4 x double]]* %ths_ar, [3 x [4 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_copy_4__double( [4 x double]* %ths, [4 x double]* %oth)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_3__4__double( [3 x [4 x double]]* %ths_ar, [3 x [4 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_assign_4__double( [4 x double]* %ths, [4 x double]* %oth)
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__4__double( [3 x [4 x double]]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [4 x double]* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 -1
call void @__dtor_4__double( [4 x double]* %ths)
%A3 = icmp eq [4 x double]* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_3__3__double( [3 x [3 x double]]* %ar, i32 %start) alwaysinline {
enter:
%base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 %start
%top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [3 x double]* [%base, %enter], [%A2, %loop]
call void @__ctor_3__double( [3 x double]* %ths, i32 0)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = icmp eq [3 x double]* %A2, %top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__3__double( [3 x [3 x double]]* %ths_ar, [3 x [3 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_copy_3__double( [3 x double]* %ths, [3 x double]* %oth)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_assign_3__3__double( [3 x [3 x double]]* %ths_ar, [3 x [3 x double]]* %oth_ar) alwaysinline {
enter:
%ths_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %loop]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %loop]
call void @__ctor_assign_3__double( [3 x double]* %ths, [3 x double]* %oth)
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__3__double( [3 x [3 x double]]* %ar) alwaysinline {
enter:
%base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [3 x double]* [%top, %enter], [%A2, %loop]
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 -1
call void @__dtor_3__double( [3 x double]* %ths)
%A3 = icmp eq [3 x double]* %A2, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__dtor_3__3__double( [3 x [3 x double]]* %r1)
br label %end
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__dtor_3__4__double( [3 x [4 x double]]* %r1)
br label %end
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__dtor_4__3__double( [4 x [3 x double]]* %r1)
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
@epsilon = internal global double 0.00000, align 8
define external i32 @sgn__double( double %r1 ) #0 nounwind {
entry:
%r2 = load double, double* @epsilon
%r3 = fcmp oge double %r1, %r2
br i1 %r3, label %L8, label %L7
L8:
br label %L2
L7:
%r4 = load double, double* @epsilon
%r5 = fneg double %r4
%r6 = fcmp ole double %r1, %r5
br i1 %r6, label %L6, label %L5
L6:
br label %L3
L5:
br label %L4
L2:
ret i32 1
L3:
ret i32 -1
L4:
ret i32 0
}
define external void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__ctor_4__4__double( [4 x [4 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__4__4__$ctor__$4x$4xdouble$( %__Matrix__double__4__4* %ths, [4 x [4 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__ctor_copy_4__4__double( [4 x [4 x double]]* %r2, [4 x [4 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
call void @__ctor_copy_4__4__double( [4 x [4 x double]]* %r2, [4 x [4 x double]]* %r3)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__4__$plus____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [4 x double], [4 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fadd double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__4__$minus____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [4 x double], [4 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fsub double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__4__$minus__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
%r1 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r1)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fneg double %r18
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r1)
br label %L7
L7:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r1)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__4__$mul____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L9
L9:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L8, label %L7
L8:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L6
L6:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L5, label %L4
L5:
%r9 = alloca double, align 8
store double 0x0, double* %r9
%r10 = alloca i32, align 4
store i32 0, i32* %r10
br label %L3
L3:
%r11 = load i32, i32* %r10
%r12 = icmp slt i32 %r11, 4
br i1 %r12, label %L2, label %L1
L2:
%r26 = load double, double* %r9
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r3
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r10
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r10
%r20 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r6
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fmul double %r23, %r24
%r27 = fadd double %r26, %r25
store double %r27, double* %r9
%r28 = load i32, i32* %r10
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r10
br label %L3
L1:
%r30 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r31 = load i32, i32* %r3
%r32 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r30, i32 0, i32 %r31
%r33 = load i32, i32* %r6
%r34 = getelementptr inbounds [4 x double], [4 x double]* %r32, i32 0, i32 %r33
%r35 = load double, double* %r9
store double %r35, double* %r34
%r36 = load i32, i32* %r6
%r37 = add nsw i32 %r36, 1
store i32 %r37, i32* %r6
br label %L6
L4:
%r38 = load i32, i32* %r3
%r39 = add nsw i32 %r38, 1
store i32 %r39, i32* %r3
br label %L9
L7:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L10
L10:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L11
L11:
ret void
}
define external void @__C___Matrix__double__4__4__$mul__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fmul double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__4__$div__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fdiv double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L8
L8:
ret void
}
define external double* @__C___Matrix__double__4__4__$get__i32__i32( %__Matrix__double__4__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__4__4__$get__i32__i32__const( %__Matrix__double__4__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__ctor_3__3__double( [3 x [3 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__3__3__$ctor__$3x$3xdouble$( %__Matrix__double__3__3* %ths, [3 x [3 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__ctor_copy_3__3__double( [3 x [3 x double]]* %r2, [3 x [3 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
call void @__ctor_copy_3__3__double( [3 x [3 x double]]* %r2, [3 x [3 x double]]* %r3)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__3__$plus____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [3 x double], [3 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fadd double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__3__$minus____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [3 x double], [3 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fsub double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__3__$minus__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
%r1 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r1)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fneg double %r18
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r1)
br label %L7
L7:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r1)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__3__$mul____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L9
L9:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L8, label %L7
L8:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L6
L6:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L5, label %L4
L5:
%r9 = alloca double, align 8
store double 0x0, double* %r9
%r10 = alloca i32, align 4
store i32 0, i32* %r10
br label %L3
L3:
%r11 = load i32, i32* %r10
%r12 = icmp slt i32 %r11, 3
br i1 %r12, label %L2, label %L1
L2:
%r26 = load double, double* %r9
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r3
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r10
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r10
%r20 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r6
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fmul double %r23, %r24
%r27 = fadd double %r26, %r25
store double %r27, double* %r9
%r28 = load i32, i32* %r10
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r10
br label %L3
L1:
%r30 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r31 = load i32, i32* %r3
%r32 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r30, i32 0, i32 %r31
%r33 = load i32, i32* %r6
%r34 = getelementptr inbounds [3 x double], [3 x double]* %r32, i32 0, i32 %r33
%r35 = load double, double* %r9
store double %r35, double* %r34
%r36 = load i32, i32* %r6
%r37 = add nsw i32 %r36, 1
store i32 %r37, i32* %r6
br label %L6
L4:
%r38 = load i32, i32* %r3
%r39 = add nsw i32 %r38, 1
store i32 %r39, i32* %r3
br label %L9
L7:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L10
L10:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L11
L11:
ret void
}
define external void @__C___Matrix__double__3__3__$mul__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fmul double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__3__$div__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fdiv double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L8
L8:
ret void
}
define external double* @__C___Matrix__double__3__3__$get__i32__i32( %__Matrix__double__3__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__3__3__$get__i32__i32__const( %__Matrix__double__3__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__ctor_3__4__double( [3 x [4 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__3__4__$ctor__$3x$4xdouble$( %__Matrix__double__3__4* %ths, [3 x [4 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__ctor_copy_3__4__double( [3 x [4 x double]]* %r2, [3 x [4 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
call void @__ctor_copy_3__4__double( [3 x [4 x double]]* %r2, [3 x [4 x double]]* %r3)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__4__$plus____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__4, align 8
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [4 x double], [4 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fadd double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %rt, %__Matrix__double__3__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__4__$minus____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__4, align 8
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [4 x double], [4 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fsub double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %rt, %__Matrix__double__3__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__4__$minus__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
%r1 = alloca %__Matrix__double__3__4, align 8
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %r1)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fneg double %r18
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
call void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %rt, %__Matrix__double__3__4* %r1)
br label %L7
L7:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r1)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__4__$mul____Matrix__double__4__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L9
L9:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L8, label %L7
L8:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L6
L6:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L5, label %L4
L5:
%r9 = alloca double, align 8
store double 0x0, double* %r9
%r10 = alloca i32, align 4
store i32 0, i32* %r10
br label %L3
L3:
%r11 = load i32, i32* %r10
%r12 = icmp slt i32 %r11, 4
br i1 %r12, label %L2, label %L1
L2:
%r26 = load double, double* %r9
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r3
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r10
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r10
%r20 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r6
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fmul double %r23, %r24
%r27 = fadd double %r26, %r25
store double %r27, double* %r9
%r28 = load i32, i32* %r10
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r10
br label %L3
L1:
%r30 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r2, i32 0, i32 0
%r31 = load i32, i32* %r3
%r32 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r30, i32 0, i32 %r31
%r33 = load i32, i32* %r6
%r34 = getelementptr inbounds [3 x double], [3 x double]* %r32, i32 0, i32 %r33
%r35 = load double, double* %r9
store double %r35, double* %r34
%r36 = load i32, i32* %r6
%r37 = add nsw i32 %r36, 1
store i32 %r37, i32* %r6
br label %L6
L4:
%r38 = load i32, i32* %r3
%r39 = add nsw i32 %r38, 1
store i32 %r39, i32* %r3
br label %L9
L7:
call void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %rt, %__Matrix__double__3__3* %r2)
br label %L10
L10:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r2)
br label %L11
L11:
ret void
}
define external void @__C___Matrix__double__3__4__$mul__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__4, align 8
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fmul double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %rt, %__Matrix__double__3__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__3__4__$div__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__3__4, align 8
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 3
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [4 x double], [4 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [4 x double], [4 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fdiv double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %rt, %__Matrix__double__3__4* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r2)
br label %L8
L8:
ret void
}
define external double* @__C___Matrix__double__3__4__$get__i32__i32( %__Matrix__double__3__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__3__4__$get__i32__i32__const( %__Matrix__double__3__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__ctor_4__3__double( [4 x [3 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__4__3__$ctor__$4x$3xdouble$( %__Matrix__double__4__3* %ths, [4 x [3 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__ctor_copy_4__3__double( [4 x [3 x double]]* %r2, [4 x [3 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
call void @__ctor_copy_4__3__double( [4 x [3 x double]]* %r2, [4 x [3 x double]]* %r3)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__3__$plus____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [3 x double], [3 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fadd double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %rt, %__Matrix__double__4__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__3__$minus____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r24 = load double, double* %r18
%r19 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r20 = load i32, i32* %r3
%r21 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 %r20
%r22 = load i32, i32* %r6
%r23 = getelementptr inbounds [3 x double], [3 x double]* %r21, i32 0, i32 %r22
%r25 = load double, double* %r23
%r26 = fsub double %r24, %r25
store double %r26, double* %r13
%r27 = load i32, i32* %r6
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r6
br label %L3
L1:
%r29 = load i32, i32* %r3
%r30 = add nsw i32 %r29, 1
store i32 %r30, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %rt, %__Matrix__double__4__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__3__$minus__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
%r1 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %r1)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fneg double %r18
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
call void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %rt, %__Matrix__double__4__3* %r1)
br label %L7
L7:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r1)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__3__$mul____Matrix__double__3__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L9
L9:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L8, label %L7
L8:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L6
L6:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 4
br i1 %r8, label %L5, label %L4
L5:
%r9 = alloca double, align 8
store double 0x0, double* %r9
%r10 = alloca i32, align 4
store i32 0, i32* %r10
br label %L3
L3:
%r11 = load i32, i32* %r10
%r12 = icmp slt i32 %r11, 3
br i1 %r12, label %L2, label %L1
L2:
%r26 = load double, double* %r9
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r3
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r10
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r10
%r20 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r6
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fmul double %r23, %r24
%r27 = fadd double %r26, %r25
store double %r27, double* %r9
%r28 = load i32, i32* %r10
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r10
br label %L3
L1:
%r30 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r2, i32 0, i32 0
%r31 = load i32, i32* %r3
%r32 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r30, i32 0, i32 %r31
%r33 = load i32, i32* %r6
%r34 = getelementptr inbounds [4 x double], [4 x double]* %r32, i32 0, i32 %r33
%r35 = load double, double* %r9
store double %r35, double* %r34
%r36 = load i32, i32* %r6
%r37 = add nsw i32 %r36, 1
store i32 %r37, i32* %r6
br label %L6
L4:
%r38 = load i32, i32* %r3
%r39 = add nsw i32 %r38, 1
store i32 %r39, i32* %r3
br label %L9
L7:
call void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %rt, %__Matrix__double__4__4* %r2)
br label %L10
L10:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r2)
br label %L11
L11:
ret void
}
define external void @__C___Matrix__double__4__3__$mul__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fmul double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %rt, %__Matrix__double__4__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L8
L8:
ret void
}
define external void @__C___Matrix__double__4__3__$div__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
%r2 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %r2)
%r3 = alloca i32, align 4
store i32 0, i32* %r3
br label %L6
L6:
%r4 = load i32, i32* %r3
%r5 = icmp slt i32 %r4, 4
br i1 %r5, label %L5, label %L4
L5:
%r6 = alloca i32, align 4
store i32 0, i32* %r6
br label %L3
L3:
%r7 = load i32, i32* %r6
%r8 = icmp slt i32 %r7, 3
br i1 %r8, label %L2, label %L1
L2:
%r9 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r2, i32 0, i32 0
%r10 = load i32, i32* %r3
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r9, i32 0, i32 %r10
%r12 = load i32, i32* %r6
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 %r12
%r14 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r15 = load i32, i32* %r3
%r16 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r14, i32 0, i32 %r15
%r17 = load i32, i32* %r6
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r16, i32 0, i32 %r17
%r19 = load double, double* %r18
%r20 = fdiv double %r19, %r1
store double %r20, double* %r13
%r21 = load i32, i32* %r6
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r6
br label %L3
L1:
%r23 = load i32, i32* %r3
%r24 = add nsw i32 %r23, 1
store i32 %r24, i32* %r3
br label %L6
L4:
call void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %rt, %__Matrix__double__4__3* %r2)
br label %L7
L7:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L8
L8:
ret void
}
define external double* @__C___Matrix__double__4__3__$get__i32__i32( %__Matrix__double__4__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__4__3__$get__i32__i32__const( %__Matrix__double__4__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
@string1 = private unnamed_addr constant [12 x i8] c"Matrix %s:\0A\00"
@string2 = private unnamed_addr constant [2 x i8] c"A\00"
@string3 = private unnamed_addr constant [6 x i8] c"\09%.4f\00"
@string4 = private unnamed_addr constant [2 x i8] c"\0A\00"
define internal void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r9 = load i32, i32* %r2
%r10 = load i32, i32* %r5
%r11 = call double @__C___Matrix__double__4__3__$get__i32__i32__const( %__Matrix__double__4__3* %r1, i32 %r9, i32 %r10)
call void(i8*,  ...) @printf( i8* %r8, double %r11)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
@string5 = private unnamed_addr constant [2 x i8] c"B\00"
define internal void @printMatrix__3__4____Matrix__double__3__4$( %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r9 = load i32, i32* %r2
%r10 = load i32, i32* %r5
%r11 = call double @__C___Matrix__double__3__4__$get__i32__i32__const( %__Matrix__double__3__4* %r1, i32 %r9, i32 %r10)
call void(i8*,  ...) @printf( i8* %r8, double %r11)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
@string6 = private unnamed_addr constant [4 x i8] c"A*B\00"
define internal void @printMatrix__4__4____Matrix__double__4__4$( %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r9 = load i32, i32* %r2
%r10 = load i32, i32* %r5
%r11 = call double @__C___Matrix__double__4__4__$get__i32__i32__const( %__Matrix__double__4__4* %r1, i32 %r9, i32 %r10)
call void(i8*,  ...) @printf( i8* %r8, double %r11)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
@string7 = private unnamed_addr constant [4 x i8] c"B*A\00"
define internal void @printMatrix__3__3____Matrix__double__3__3$( %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r9 = load i32, i32* %r2
%r10 = load i32, i32* %r5
%r11 = call double @__C___Matrix__double__3__3__$get__i32__i32__const( %__Matrix__double__3__3* %r1, i32 %r9, i32 %r10)
call void(i8*,  ...) @printf( i8* %r8, double %r11)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
store double 0x3C9FFE5AB7E8AD5E, double* @epsilon
%r1 = alloca i32, align 4
%r2 = alloca %__Matrix__double__4__3, align 8
%r19 = alloca [4 x [3 x double]], align 8
%r3 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 0
%r4 = getelementptr inbounds [3 x double], [3 x double]* %r3, i32 0, i32 0
store double 0x0, double* %r4
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r3, i32 0, i32 1
store double 0x4000000000000000, double* %r5
%r6 = getelementptr inbounds [3 x double], [3 x double]* %r3, i32 0, i32 2
store double 0x3FF0000000000000, double* %r6
%r7 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 1
%r8 = getelementptr inbounds [3 x double], [3 x double]* %r7, i32 0, i32 0
store double 0x4008000000000000, double* %r8
%r9 = getelementptr inbounds [3 x double], [3 x double]* %r7, i32 0, i32 1
store double 0x3FF0000000000000, double* %r9
%r10 = getelementptr inbounds [3 x double], [3 x double]* %r7, i32 0, i32 2
store double 0x3FF0000000000000, double* %r10
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 2
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 0
store double 0x4010000000000000, double* %r12
%r13 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 1
store double 0x0, double* %r13
%r14 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 2
store double 0x3FF0000000000000, double* %r14
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r19, i32 0, i32 3
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 0
store double 0x3FF0000000000000, double* %r16
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 1
store double 0x4014000000000000, double* %r17
%r18 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 2
store double 0x4000000000000000, double* %r18
call void @__C___Matrix__double__4__3__$ctor__$4x$3xdouble$( %__Matrix__double__4__3* %r2, [4 x [3 x double]]* %r19)
%r20 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r21 = getelementptr inbounds [2 x i8], [2 x i8]* @string2, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r20, i8* %r21)
call void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r2)
%r22 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r22)
%r23 = alloca %__Matrix__double__3__4, align 8
%r39 = alloca [3 x [4 x double]], align 8
%r24 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r39, i32 0, i32 0
%r25 = getelementptr inbounds [4 x double], [4 x double]* %r24, i32 0, i32 0
store double 0x3FF0000000000000, double* %r25
%r26 = getelementptr inbounds [4 x double], [4 x double]* %r24, i32 0, i32 1
store double 0x4000000000000000, double* %r26
%r27 = getelementptr inbounds [4 x double], [4 x double]* %r24, i32 0, i32 2
store double 0x0, double* %r27
%r28 = getelementptr inbounds [4 x double], [4 x double]* %r24, i32 0, i32 3
store double 0x4008000000000000, double* %r28
%r29 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r39, i32 0, i32 1
%r30 = getelementptr inbounds [4 x double], [4 x double]* %r29, i32 0, i32 0
store double 0x4010000000000000, double* %r30
%r31 = getelementptr inbounds [4 x double], [4 x double]* %r29, i32 0, i32 1
store double 0x0, double* %r31
%r32 = getelementptr inbounds [4 x double], [4 x double]* %r29, i32 0, i32 2
store double 0x4014000000000000, double* %r32
%r33 = getelementptr inbounds [4 x double], [4 x double]* %r29, i32 0, i32 3
store double 0x4000000000000000, double* %r33
%r34 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r39, i32 0, i32 2
%r35 = getelementptr inbounds [4 x double], [4 x double]* %r34, i32 0, i32 0
store double 0x4008000000000000, double* %r35
%r36 = getelementptr inbounds [4 x double], [4 x double]* %r34, i32 0, i32 1
store double 0x4008000000000000, double* %r36
%r37 = getelementptr inbounds [4 x double], [4 x double]* %r34, i32 0, i32 2
store double 0x3FF0000000000000, double* %r37
%r38 = getelementptr inbounds [4 x double], [4 x double]* %r34, i32 0, i32 3
store double 0x3FF0000000000000, double* %r38
call void @__C___Matrix__double__3__4__$ctor__$3x$4xdouble$( %__Matrix__double__3__4* %r23, [3 x [4 x double]]* %r39)
%r40 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r41 = getelementptr inbounds [2 x i8], [2 x i8]* @string5, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r40, i8* %r41)
call void @printMatrix__3__4____Matrix__double__3__4$( %__Matrix__double__3__4* %r23)
%r42 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r42)
%r43 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__3__$mul____Matrix__double__3__4$__const( %__Matrix__double__4__4* sret %r43, %__Matrix__double__4__3* %r2, %__Matrix__double__3__4* %r23)
%r44 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r45 = getelementptr inbounds [4 x i8], [4 x i8]* @string6, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r44, i8* %r45)
call void @printMatrix__4__4____Matrix__double__4__4$( %__Matrix__double__4__4* %r43)
%r46 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r46)
%r47 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__4__$mul____Matrix__double__4__3$__const( %__Matrix__double__3__3* sret %r47, %__Matrix__double__3__4* %r23, %__Matrix__double__4__3* %r2)
%r48 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r49 = getelementptr inbounds [4 x i8], [4 x i8]* @string7, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r48, i8* %r49)
call void @printMatrix__3__3____Matrix__double__3__3$( %__Matrix__double__3__3* %r47)
%r50 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r50)
store i32 0, i32* %r1
br label %L5
L5:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r47)
br label %L4
L4:
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r43)
br label %L3
L3:
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r23)
br label %L2
L2:
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L1
L1:
%r51 = load i32, i32* %r1
ret i32 %r51
}


