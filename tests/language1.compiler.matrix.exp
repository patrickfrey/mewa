@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__ctors, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__dtors, i8* null }]

declare external i32 @__gxx_personality_v0( ... ) nounwind
%__Matrix__double__4__4 = type { [4 x [4 x double]] }
%__Matrix__double__3__3 = type { [3 x [3 x double]] }
%__Matrix__double__3__4 = type { [3 x [4 x double]] }
%__Matrix__double__4__3 = type { [4 x [3 x double]] }
@string1 = private unnamed_addr constant [12 x i8] c"Matrix %s:\0A\00"
@string2 = private unnamed_addr constant [2 x i8] c"A\00"
@string3 = private unnamed_addr constant [6 x i8] c"\09%.4f\00"
@string4 = private unnamed_addr constant [2 x i8] c"\0A\00"
@string5 = private unnamed_addr constant [2 x i8] c"B\00"
@string6 = private unnamed_addr constant [2 x i8] c"C\00"
@string7 = private unnamed_addr constant [4 x i8] c"A+C\00"
@string8 = private unnamed_addr constant [4 x i8] c"A*B\00"
@string9 = private unnamed_addr constant [6 x i8] c"A*1.4\00"
@string10 = private unnamed_addr constant [4 x i8] c"B*A\00"
define private dso_local void @__ctor_init_3__double( [3 x double]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 3
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
store double 0.00000, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = icmp eq double* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__double( [3 x double]* %ths_ar, [3 x double]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x double], [3 x double]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x double], [3 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
%oth = phi double* [%oth_base, %enter], [%A3, %cond]
%r1 = load double, double* %oth
store double %r1, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__double( [3 x double]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x double], [3 x double]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi double* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds double, double* %ths, i64 -1
%A3 = icmp eq double* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_init_4__3__double( [4 x [3 x double]]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %cond]
call void @__ctor_init_3__double( [3 x double]* %ths, i32 0)
br label %cond
cond:
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__3__double( [4 x [3 x double]]* %ths_ar, [4 x [3 x double]]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %cond]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %cond]
call void @__ctor_copy_3__double( [3 x double]* %ths, [3 x double]* %oth)
br label %cond
cond:
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__3__double( [4 x [3 x double]]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi [3 x double]* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 -1
call void @__dtor_3__double( [3 x double]* %ths, i32 3)
%A3 = icmp eq [3 x double]* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_init_4__double( [4 x double]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 4
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
store double 0.00000, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = icmp eq double* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__double( [4 x double]* %ths_ar, [4 x double]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x double], [4 x double]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x double], [4 x double]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi double* [%ths_base, %enter], [%A2, %cond]
%oth = phi double* [%oth_base, %enter], [%A3, %cond]
%r1 = load double, double* %oth
store double %r1, double* %ths
br label %cond
cond:
%A2 = getelementptr inbounds double, double* %ths, i64 1
%A3 = getelementptr inbounds double, double* %oth, i64 1
%A4 = icmp eq double* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__double( [4 x double]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x double], [4 x double]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi double* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds double, double* %ths, i64 -1
%A3 = icmp eq double* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_init_4__4__double( [4 x [4 x double]]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 4
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %cond]
call void @__ctor_init_4__double( [4 x double]* %ths, i32 0)
br label %cond
cond:
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_4__4__double( [4 x [4 x double]]* %ths_ar, [4 x [4 x double]]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ths_ar, i32 0, i32 4
%oth_base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %cond]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %cond]
call void @__ctor_copy_4__double( [4 x double]* %ths, [4 x double]* %oth)
br label %cond
cond:
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_4__4__double( [4 x [4 x double]]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi [4 x double]* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 -1
call void @__dtor_4__double( [4 x double]* %ths, i32 4)
%A3 = icmp eq [4 x double]* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__dtor_4__4__double( [4 x [4 x double]]* %r1, i32 4)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor___Matrix__double__4__4( %__Matrix__double__4__4* %ths, i32 %istate) {
enter:
%r2 = icmp uge i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__dtor_4__4__double( [4 x [4 x double]]* %r1, i32 4)
br label %L2
L2:
br label %end
end:
ret void
}
define private dso_local void @__ctor_init_3__4__double( [3 x [4 x double]]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %cond]
call void @__ctor_init_4__double( [4 x double]* %ths, i32 0)
br label %cond
cond:
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__4__double( [3 x [4 x double]]* %ths_ar, [3 x [4 x double]]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [4 x double]* [%ths_base, %enter], [%A2, %cond]
%oth = phi [4 x double]* [%oth_base, %enter], [%A3, %cond]
call void @__ctor_copy_4__double( [4 x double]* %ths, [4 x double]* %oth)
br label %cond
cond:
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 1
%A3 = getelementptr inbounds [4 x double], [4 x double]* %oth, i64 1
%A4 = icmp eq [4 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__4__double( [3 x [4 x double]]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi [4 x double]* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds [4 x double], [4 x double]* %ths, i64 -1
call void @__dtor_4__double( [4 x double]* %ths, i32 4)
%A3 = icmp eq [4 x double]* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_init_3__3__double( [3 x [3 x double]]* %ths_ar, i32 %start)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 %start
%ths_top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 3
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %cond]
call void @__ctor_init_3__double( [3 x double]* %ths, i32 0)
br label %cond
cond:
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__ctor_copy_3__3__double( [3 x [3 x double]]* %ths_ar, [3 x [3 x double]]* %oth_ar)#0 nounwind {
enter:
%ths_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 0
%ths_top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ths_ar, i32 0, i32 3
%oth_base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %oth_ar, i32 0, i32 0
br label %loop
loop:
%ths = phi [3 x double]* [%ths_base, %enter], [%A2, %cond]
%oth = phi [3 x double]* [%oth_base, %enter], [%A3, %cond]
call void @__ctor_copy_3__double( [3 x double]* %ths, [3 x double]* %oth)
br label %cond
cond:
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 1
%A3 = getelementptr inbounds [3 x double], [3 x double]* %oth, i64 1
%A4 = icmp eq [3 x double]* %A2, %ths_top
br i1 %A4, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor_3__3__double( [3 x [3 x double]]* %ar, i32 %arsize) alwaysinline {
enter:
%X1 = icmp eq i32 %arsize, 0
br i1 %X1, label %end, label %start
start:
%artop = sub nsw i32 %arsize, 1
%base = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 0
%top = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %ar, i32 0, i32 %artop
br label %loop
loop:
%ths = phi [3 x double]* [%top, %start], [%A2, %loop]
%A2 = getelementptr inbounds [3 x double], [3 x double]* %ths, i64 -1
call void @__dtor_3__double( [3 x double]* %ths, i32 3)
%A3 = icmp eq [3 x double]* %ths, %base
br i1 %A3, label %end, label %loop
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__dtor_3__3__double( [3 x [3 x double]]* %r1, i32 3)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor___Matrix__double__3__3( %__Matrix__double__3__3* %ths, i32 %istate) {
enter:
%r2 = icmp uge i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__dtor_3__3__double( [3 x [3 x double]]* %r1, i32 3)
br label %L2
L2:
br label %end
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__dtor_3__4__double( [3 x [4 x double]]* %r1, i32 3)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor___Matrix__double__3__4( %__Matrix__double__3__4* %ths, i32 %istate) {
enter:
%r2 = icmp uge i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__dtor_3__4__double( [3 x [4 x double]]* %r1, i32 3)
br label %L2
L2:
br label %end
end:
ret void
}
define private dso_local void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %ths) {
enter:
%r1 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__dtor_4__3__double( [4 x [3 x double]]* %r1, i32 4)
br label %end
end:
ret void
}
define private dso_local void @__partial_dtor___Matrix__double__4__3( %__Matrix__double__4__3* %ths, i32 %istate) {
enter:
%r2 = icmp uge i32 %istate, 1
br i1 %r2, label %L1, label %L2
L1:
%r1 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__dtor_4__3__double( [4 x [3 x double]]* %r1, i32 4)
br label %L2
L2:
br label %end
end:
ret void
}


define internal void @_GLOBAL__ctors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

define internal void @_GLOBAL__dtors() nounwind uwtable readnone optsize ssp section ".text.startup" {
  ret void
}

declare external void @printf( i8*, ... ) nounwind
@epsilon = internal global double 0x3C9FFE5AB7E8AD5E, align 8
define external i32 @sgn__double( double %r1 ) #0 nounwind {
entry:
%r2 = load double, double* @epsilon
%r3 = fcmp oge double %r1, %r2
br i1 %r3, label %L8, label %L7
L8:
br label %L2
L7:
%r4 = load double, double* @epsilon
%r5 = fneg double %r4
%r6 = fcmp ole double %r1, %r5
br i1 %r6, label %L6, label %L5
L6:
br label %L3
L5:
br label %L4
L2:
ret i32 1
L3:
ret i32 -1
L4:
ret i32 0
}
define external void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__ctor_init_4__4__double( [4 x [4 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__4__4__$ctor__$4x$4xdouble$( %__Matrix__double__4__4* %ths, [4 x [4 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
call void @__ctor_copy_4__4__double( [4 x [4 x double]]* %r2, [4 x [4 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__4__$ctor____Matrix__double__4__4$( %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
call void @__ctor_copy_4__4__double( [4 x [4 x double]]* %r2, [4 x [4 x double]]* %r3)
br label %L1
L1:
ret void
}
define internal i32 @__C___Matrix__double__4__4__summate__int__const( %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
%r1 = alloca i32, align 4
store i32 0, i32* %r1
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r13 = load i32, i32* %r1
%r15 = sitofp i32 %r13 to double
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r14 = load double, double* %r12
%r16 = fadd double %r15, %r14
%r17 = fptosi double %r16 to i32
store i32 %r17, i32* %r1
%r18 = load i32, i32* %r5
%r19 = add nsw i32 %r18, 1
store i32 %r19, i32* %r5
br label %L3
L1:
%r20 = load i32, i32* %r2
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r2
br label %L6
L4:
%r22 = load i32, i32* %r1
br label %L7
L7:
ret i32 %r22
}
define external i32 @__C___Matrix__double__4__4__summate_int__const( %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
%r1 = call i32 @__C___Matrix__double__4__4__summate__int__const( %__Matrix__double__4__4* %ths)
br label %L1
L1:
ret i32 %r1
}
define internal void @__C___Matrix__double__4__4__elementwise___X__Matrix__double__4__4__lambda__a__b__c__1____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fadd double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__4__$plus____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__elementwise___X__Matrix__double__4__4__lambda__a__b__c__1____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__4__4__elementwise___X__Matrix__double__4__4__lambda__a__b__c__3____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fsub double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__4__$minus____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__elementwise___X__Matrix__double__4__4__lambda__a__b__c__3____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__4__$minus__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r1 = alloca i32, align 4
store i32 0, i32* %r1
br label %L6
L6:
%r2 = load i32, i32* %r1
%r3 = icmp slt i32 %r2, 4
br i1 %r3, label %L5, label %L4
L5:
%r4 = alloca i32, align 4
store i32 0, i32* %r4
br label %L3
L3:
%r5 = load i32, i32* %r4
%r6 = icmp slt i32 %r5, 4
br i1 %r6, label %L2, label %L1
L2:
%r7 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r8 = load i32, i32* %r1
%r9 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r7, i32 0, i32 %r8
%r10 = load i32, i32* %r4
%r11 = getelementptr inbounds [4 x double], [4 x double]* %r9, i32 0, i32 %r10
%r12 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r13 = load i32, i32* %r1
%r14 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r4
%r16 = getelementptr inbounds [4 x double], [4 x double]* %r14, i32 0, i32 %r15
%r17 = load double, double* %r16
%r18 = fneg double %r17
store double %r18, double* %r11
%r19 = load i32, i32* %r4
%r20 = add nsw i32 %r19, 1
store i32 %r20, i32* %r4
br label %L3
L1:
%r21 = load i32, i32* %r1
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r1
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__4__$mul____Matrix__double__4__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L9
L9:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L8, label %L7
L8:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L6
L6:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L5, label %L4
L5:
%r8 = alloca double, align 8
store double 0x0, double* %r8
%r9 = alloca i32, align 4
store i32 0, i32* %r9
br label %L3
L3:
%r10 = load i32, i32* %r9
%r11 = icmp slt i32 %r10, 4
br i1 %r11, label %L2, label %L1
L2:
%r25 = load double, double* %r8
%r12 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r13 = load i32, i32* %r2
%r14 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r9
%r16 = getelementptr inbounds [4 x double], [4 x double]* %r14, i32 0, i32 %r15
%r22 = load double, double* %r16
%r17 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %r1, i32 0, i32 0
%r18 = load i32, i32* %r9
%r19 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r17, i32 0, i32 %r18
%r20 = load i32, i32* %r5
%r21 = getelementptr inbounds [4 x double], [4 x double]* %r19, i32 0, i32 %r20
%r23 = load double, double* %r21
%r24 = fmul double %r22, %r23
%r26 = fadd double %r25, %r24
store double %r26, double* %r8
%r27 = load i32, i32* %r9
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r9
br label %L3
L1:
%r29 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r30 = load i32, i32* %r2
%r31 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r29, i32 0, i32 %r30
%r32 = load i32, i32* %r5
%r33 = getelementptr inbounds [4 x double], [4 x double]* %r31, i32 0, i32 %r32
%r34 = load double, double* %r8
store double %r34, double* %r33
%r35 = load i32, i32* %r5
%r36 = add nsw i32 %r35, 1
store i32 %r36, i32* %r5
br label %L6
L4:
%r37 = load i32, i32* %r2
%r38 = add nsw i32 %r37, 1
store i32 %r38, i32* %r2
br label %L9
L7:
br label %L10
L10:
ret void
}
define internal void @__C___Matrix__double__4__4__elementwise_scalar___X__Matrix__double__4__4__lambda__a__b__v__1__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fmul double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__4__$mul__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__elementwise_scalar___X__Matrix__double__4__4__lambda__a__b__v__1__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__4__4__elementwise_scalar___X__Matrix__double__4__4__lambda__a__b__v__3__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fdiv double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__4__$div__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__elementwise_scalar___X__Matrix__double__4__4__lambda__a__b__v__3__double__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__4* %ths, double %r1)
br label %L1
L1:
ret void
}
define external double* @__C___Matrix__double__4__4__$get__i32__i32( %__Matrix__double__4__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__4__4__$get__i32__i32__const( %__Matrix__double__4__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__ctor_init_3__3__double( [3 x [3 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__3__3__$ctor__$3x$3xdouble$( %__Matrix__double__3__3* %ths, [3 x [3 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
call void @__ctor_copy_3__3__double( [3 x [3 x double]]* %r2, [3 x [3 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__3__$ctor____Matrix__double__3__3$( %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
call void @__ctor_copy_3__3__double( [3 x [3 x double]]* %r2, [3 x [3 x double]]* %r3)
br label %L1
L1:
ret void
}
define internal i32 @__C___Matrix__double__3__3__summate__int__const( %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
%r1 = alloca i32, align 4
store i32 0, i32* %r1
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r13 = load i32, i32* %r1
%r15 = sitofp i32 %r13 to double
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r14 = load double, double* %r12
%r16 = fadd double %r15, %r14
%r17 = fptosi double %r16 to i32
store i32 %r17, i32* %r1
%r18 = load i32, i32* %r5
%r19 = add nsw i32 %r18, 1
store i32 %r19, i32* %r5
br label %L3
L1:
%r20 = load i32, i32* %r2
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r2
br label %L6
L4:
%r22 = load i32, i32* %r1
br label %L7
L7:
ret i32 %r22
}
define external i32 @__C___Matrix__double__3__3__summate_int__const( %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
%r1 = call i32 @__C___Matrix__double__3__3__summate__int__const( %__Matrix__double__3__3* %ths)
br label %L1
L1:
ret i32 %r1
}
define internal void @__C___Matrix__double__3__3__elementwise___X__Matrix__double__3__3__lambda__a__b__c__5____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fadd double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__3__$plus____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__elementwise___X__Matrix__double__3__3__lambda__a__b__c__5____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__3__3__elementwise___X__Matrix__double__3__3__lambda__a__b__c__7____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fsub double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__3__$minus____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__elementwise___X__Matrix__double__3__3__lambda__a__b__c__7____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__3__$minus__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r1 = alloca i32, align 4
store i32 0, i32* %r1
br label %L6
L6:
%r2 = load i32, i32* %r1
%r3 = icmp slt i32 %r2, 3
br i1 %r3, label %L5, label %L4
L5:
%r4 = alloca i32, align 4
store i32 0, i32* %r4
br label %L3
L3:
%r5 = load i32, i32* %r4
%r6 = icmp slt i32 %r5, 3
br i1 %r6, label %L2, label %L1
L2:
%r7 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r8 = load i32, i32* %r1
%r9 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r7, i32 0, i32 %r8
%r10 = load i32, i32* %r4
%r11 = getelementptr inbounds [3 x double], [3 x double]* %r9, i32 0, i32 %r10
%r12 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r13 = load i32, i32* %r1
%r14 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r4
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r14, i32 0, i32 %r15
%r17 = load double, double* %r16
%r18 = fneg double %r17
store double %r18, double* %r11
%r19 = load i32, i32* %r4
%r20 = add nsw i32 %r19, 1
store i32 %r20, i32* %r4
br label %L3
L1:
%r21 = load i32, i32* %r1
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r1
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__3__$mul____Matrix__double__3__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L9
L9:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L8, label %L7
L8:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L6
L6:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L5, label %L4
L5:
%r8 = alloca double, align 8
store double 0x0, double* %r8
%r9 = alloca i32, align 4
store i32 0, i32* %r9
br label %L3
L3:
%r10 = load i32, i32* %r9
%r11 = icmp slt i32 %r10, 3
br i1 %r11, label %L2, label %L1
L2:
%r25 = load double, double* %r8
%r12 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r13 = load i32, i32* %r2
%r14 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r9
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r14, i32 0, i32 %r15
%r22 = load double, double* %r16
%r17 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %r1, i32 0, i32 0
%r18 = load i32, i32* %r9
%r19 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r17, i32 0, i32 %r18
%r20 = load i32, i32* %r5
%r21 = getelementptr inbounds [3 x double], [3 x double]* %r19, i32 0, i32 %r20
%r23 = load double, double* %r21
%r24 = fmul double %r22, %r23
%r26 = fadd double %r25, %r24
store double %r26, double* %r8
%r27 = load i32, i32* %r9
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r9
br label %L3
L1:
%r29 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r30 = load i32, i32* %r2
%r31 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r29, i32 0, i32 %r30
%r32 = load i32, i32* %r5
%r33 = getelementptr inbounds [3 x double], [3 x double]* %r31, i32 0, i32 %r32
%r34 = load double, double* %r8
store double %r34, double* %r33
%r35 = load i32, i32* %r5
%r36 = add nsw i32 %r35, 1
store i32 %r36, i32* %r5
br label %L6
L4:
%r37 = load i32, i32* %r2
%r38 = add nsw i32 %r37, 1
store i32 %r38, i32* %r2
br label %L9
L7:
br label %L10
L10:
ret void
}
define internal void @__C___Matrix__double__3__3__elementwise_scalar___X__Matrix__double__3__3__lambda__a__b__v__5__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fmul double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__3__$mul__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__elementwise_scalar___X__Matrix__double__3__3__lambda__a__b__v__5__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__3__3__elementwise_scalar___X__Matrix__double__3__3__lambda__a__b__v__7__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fdiv double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__3__$div__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__elementwise_scalar___X__Matrix__double__3__3__lambda__a__b__v__7__double__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__3* %ths, double %r1)
br label %L1
L1:
ret void
}
define external double* @__C___Matrix__double__3__3__$get__i32__i32( %__Matrix__double__3__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__3__3__$get__i32__i32__const( %__Matrix__double__3__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__ctor_init_3__4__double( [3 x [4 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__3__4__$ctor__$3x$4xdouble$( %__Matrix__double__3__4* %ths, [3 x [4 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
call void @__ctor_copy_3__4__double( [3 x [4 x double]]* %r2, [3 x [4 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__4__$ctor____Matrix__double__3__4$( %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
call void @__ctor_copy_3__4__double( [3 x [4 x double]]* %r2, [3 x [4 x double]]* %r3)
br label %L1
L1:
ret void
}
define internal i32 @__C___Matrix__double__3__4__summate__int__const( %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
%r1 = alloca i32, align 4
store i32 0, i32* %r1
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r13 = load i32, i32* %r1
%r15 = sitofp i32 %r13 to double
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r14 = load double, double* %r12
%r16 = fadd double %r15, %r14
%r17 = fptosi double %r16 to i32
store i32 %r17, i32* %r1
%r18 = load i32, i32* %r5
%r19 = add nsw i32 %r18, 1
store i32 %r19, i32* %r5
br label %L3
L1:
%r20 = load i32, i32* %r2
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r2
br label %L6
L4:
%r22 = load i32, i32* %r1
br label %L7
L7:
ret i32 %r22
}
define external i32 @__C___Matrix__double__3__4__summate_int__const( %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
%r1 = call i32 @__C___Matrix__double__3__4__summate__int__const( %__Matrix__double__3__4* %ths)
br label %L1
L1:
ret i32 %r1
}
define internal void @__C___Matrix__double__3__4__elementwise___X__Matrix__double__3__4__lambda__a__b__c__9____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fadd double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__4__$plus____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__elementwise___X__Matrix__double__3__4__lambda__a__b__c__9____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__3__4__elementwise___X__Matrix__double__3__4__lambda__a__b__c__11____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [4 x double], [4 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fsub double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__4__$minus____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__elementwise___X__Matrix__double__3__4__lambda__a__b__c__11____Matrix__double__3__4$__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__3__4* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__3__4__$minus__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %rt)
%r1 = alloca i32, align 4
store i32 0, i32* %r1
br label %L6
L6:
%r2 = load i32, i32* %r1
%r3 = icmp slt i32 %r2, 3
br i1 %r3, label %L5, label %L4
L5:
%r4 = alloca i32, align 4
store i32 0, i32* %r4
br label %L3
L3:
%r5 = load i32, i32* %r4
%r6 = icmp slt i32 %r5, 4
br i1 %r6, label %L2, label %L1
L2:
%r7 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %rt, i32 0, i32 0
%r8 = load i32, i32* %r1
%r9 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r7, i32 0, i32 %r8
%r10 = load i32, i32* %r4
%r11 = getelementptr inbounds [4 x double], [4 x double]* %r9, i32 0, i32 %r10
%r12 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r13 = load i32, i32* %r1
%r14 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r4
%r16 = getelementptr inbounds [4 x double], [4 x double]* %r14, i32 0, i32 %r15
%r17 = load double, double* %r16
%r18 = fneg double %r17
store double %r18, double* %r11
%r19 = load i32, i32* %r4
%r20 = add nsw i32 %r19, 1
store i32 %r20, i32* %r4
br label %L3
L1:
%r21 = load i32, i32* %r1
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r1
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__4__$mul____Matrix__double__4__3$__const( %__Matrix__double__3__3* sret %rt, %__Matrix__double__3__4* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__3__$ctor( %__Matrix__double__3__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L9
L9:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L8, label %L7
L8:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L6
L6:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L5, label %L4
L5:
%r8 = alloca double, align 8
store double 0x0, double* %r8
%r9 = alloca i32, align 4
store i32 0, i32* %r9
br label %L3
L3:
%r10 = load i32, i32* %r9
%r11 = icmp slt i32 %r10, 4
br i1 %r11, label %L2, label %L1
L2:
%r25 = load double, double* %r8
%r12 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r13 = load i32, i32* %r2
%r14 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r9
%r16 = getelementptr inbounds [4 x double], [4 x double]* %r14, i32 0, i32 %r15
%r22 = load double, double* %r16
%r17 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r18 = load i32, i32* %r9
%r19 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r17, i32 0, i32 %r18
%r20 = load i32, i32* %r5
%r21 = getelementptr inbounds [3 x double], [3 x double]* %r19, i32 0, i32 %r20
%r23 = load double, double* %r21
%r24 = fmul double %r22, %r23
%r26 = fadd double %r25, %r24
store double %r26, double* %r8
%r27 = load i32, i32* %r9
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r9
br label %L3
L1:
%r29 = getelementptr inbounds %__Matrix__double__3__3, %__Matrix__double__3__3* %rt, i32 0, i32 0
%r30 = load i32, i32* %r2
%r31 = getelementptr inbounds [3 x [3 x double]], [3 x [3 x double]]* %r29, i32 0, i32 %r30
%r32 = load i32, i32* %r5
%r33 = getelementptr inbounds [3 x double], [3 x double]* %r31, i32 0, i32 %r32
%r34 = load double, double* %r8
store double %r34, double* %r33
%r35 = load i32, i32* %r5
%r36 = add nsw i32 %r35, 1
store i32 %r36, i32* %r5
br label %L6
L4:
%r37 = load i32, i32* %r2
%r38 = add nsw i32 %r37, 1
store i32 %r38, i32* %r2
br label %L9
L7:
br label %L10
L10:
ret void
}
define internal void @__C___Matrix__double__3__4__elementwise_scalar___X__Matrix__double__3__4__lambda__a__b__v__9__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fmul double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__4__$mul__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__elementwise_scalar___X__Matrix__double__3__4__lambda__a__b__v__9__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__3__4__elementwise_scalar___X__Matrix__double__3__4__lambda__a__b__v__11__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__$ctor( %__Matrix__double__3__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [4 x double], [4 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [4 x double], [4 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fdiv double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__3__4__$div__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__3__4__elementwise_scalar___X__Matrix__double__3__4__lambda__a__b__v__11__double__const( %__Matrix__double__3__4* sret %rt, %__Matrix__double__3__4* %ths, double %r1)
br label %L1
L1:
ret void
}
define external double* @__C___Matrix__double__3__4__$get__i32__i32( %__Matrix__double__3__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__3__4__$get__i32__i32__const( %__Matrix__double__3__4* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [4 x double], [4 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define external void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
%r1 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__ctor_init_4__3__double( [4 x [3 x double]]* %r1, i32 0)
br label %L4
L4:
ret void
}
define external void @__C___Matrix__double__4__3__$ctor__$4x$3xdouble$( %__Matrix__double__4__3* %ths, [4 x [3 x double]]* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
call void @__ctor_copy_4__3__double( [4 x [3 x double]]* %r2, [4 x [3 x double]]* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__3__$ctor____Matrix__double__4__3$( %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
call void @__ctor_copy_4__3__double( [4 x [3 x double]]* %r2, [4 x [3 x double]]* %r3)
br label %L1
L1:
ret void
}
define internal i32 @__C___Matrix__double__4__3__summate__int__const( %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
%r1 = alloca i32, align 4
store i32 0, i32* %r1
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r13 = load i32, i32* %r1
%r15 = sitofp i32 %r13 to double
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r14 = load double, double* %r12
%r16 = fadd double %r15, %r14
%r17 = fptosi double %r16 to i32
store i32 %r17, i32* %r1
%r18 = load i32, i32* %r5
%r19 = add nsw i32 %r18, 1
store i32 %r19, i32* %r5
br label %L3
L1:
%r20 = load i32, i32* %r2
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r2
br label %L6
L4:
%r22 = load i32, i32* %r1
br label %L7
L7:
ret i32 %r22
}
define external i32 @__C___Matrix__double__4__3__summate_int__const( %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
%r1 = call i32 @__C___Matrix__double__4__3__summate__int__const( %__Matrix__double__4__3* %ths)
br label %L1
L1:
ret i32 %r1
}
define internal void @__C___Matrix__double__4__3__elementwise___X__Matrix__double__4__3__lambda__a__b__c__13____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fadd double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__3__$plus____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__elementwise___X__Matrix__double__4__3__lambda__a__b__c__13____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__4__3__elementwise___X__Matrix__double__4__3__lambda__a__b__c__15____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r23 = load double, double* %r17
%r18 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %r1, i32 0, i32 0
%r19 = load i32, i32* %r2
%r20 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r18, i32 0, i32 %r19
%r21 = load i32, i32* %r5
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r20, i32 0, i32 %r21
%r24 = load double, double* %r22
%r25 = fsub double %r23, %r24
store double %r25, double* %r12
%r26 = load i32, i32* %r5
%r27 = add nsw i32 %r26, 1
store i32 %r27, i32* %r5
br label %L3
L1:
%r28 = load i32, i32* %r2
%r29 = add nsw i32 %r28, 1
store i32 %r29, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__3__$minus____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__elementwise___X__Matrix__double__4__3__lambda__a__b__c__15____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__4__3* %r1)
br label %L1
L1:
ret void
}
define external void @__C___Matrix__double__4__3__$minus__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %rt)
%r1 = alloca i32, align 4
store i32 0, i32* %r1
br label %L6
L6:
%r2 = load i32, i32* %r1
%r3 = icmp slt i32 %r2, 4
br i1 %r3, label %L5, label %L4
L5:
%r4 = alloca i32, align 4
store i32 0, i32* %r4
br label %L3
L3:
%r5 = load i32, i32* %r4
%r6 = icmp slt i32 %r5, 3
br i1 %r6, label %L2, label %L1
L2:
%r7 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %rt, i32 0, i32 0
%r8 = load i32, i32* %r1
%r9 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r7, i32 0, i32 %r8
%r10 = load i32, i32* %r4
%r11 = getelementptr inbounds [3 x double], [3 x double]* %r9, i32 0, i32 %r10
%r12 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r13 = load i32, i32* %r1
%r14 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r4
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r14, i32 0, i32 %r15
%r17 = load double, double* %r16
%r18 = fneg double %r17
store double %r18, double* %r11
%r19 = load i32, i32* %r4
%r20 = add nsw i32 %r19, 1
store i32 %r20, i32* %r4
br label %L3
L1:
%r21 = load i32, i32* %r1
%r22 = add nsw i32 %r21, 1
store i32 %r22, i32* %r1
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__3__$mul____Matrix__double__3__4$__const( %__Matrix__double__4__4* sret %rt, %__Matrix__double__4__3* %ths, %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__4__$ctor( %__Matrix__double__4__4* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L9
L9:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L8, label %L7
L8:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L6
L6:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L5, label %L4
L5:
%r8 = alloca double, align 8
store double 0x0, double* %r8
%r9 = alloca i32, align 4
store i32 0, i32* %r9
br label %L3
L3:
%r10 = load i32, i32* %r9
%r11 = icmp slt i32 %r10, 3
br i1 %r11, label %L2, label %L1
L2:
%r25 = load double, double* %r8
%r12 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r13 = load i32, i32* %r2
%r14 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r12, i32 0, i32 %r13
%r15 = load i32, i32* %r9
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r14, i32 0, i32 %r15
%r22 = load double, double* %r16
%r17 = getelementptr inbounds %__Matrix__double__3__4, %__Matrix__double__3__4* %r1, i32 0, i32 0
%r18 = load i32, i32* %r9
%r19 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r17, i32 0, i32 %r18
%r20 = load i32, i32* %r5
%r21 = getelementptr inbounds [4 x double], [4 x double]* %r19, i32 0, i32 %r20
%r23 = load double, double* %r21
%r24 = fmul double %r22, %r23
%r26 = fadd double %r25, %r24
store double %r26, double* %r8
%r27 = load i32, i32* %r9
%r28 = add nsw i32 %r27, 1
store i32 %r28, i32* %r9
br label %L3
L1:
%r29 = getelementptr inbounds %__Matrix__double__4__4, %__Matrix__double__4__4* %rt, i32 0, i32 0
%r30 = load i32, i32* %r2
%r31 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %r29, i32 0, i32 %r30
%r32 = load i32, i32* %r5
%r33 = getelementptr inbounds [4 x double], [4 x double]* %r31, i32 0, i32 %r32
%r34 = load double, double* %r8
store double %r34, double* %r33
%r35 = load i32, i32* %r5
%r36 = add nsw i32 %r35, 1
store i32 %r36, i32* %r5
br label %L6
L4:
%r37 = load i32, i32* %r2
%r38 = add nsw i32 %r37, 1
store i32 %r38, i32* %r2
br label %L9
L7:
br label %L10
L10:
ret void
}
define internal void @__C___Matrix__double__4__3__elementwise_scalar___X__Matrix__double__4__3__lambda__a__b__v__13__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fmul double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__3__$mul__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__elementwise_scalar___X__Matrix__double__4__3__lambda__a__b__v__13__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1)
br label %L1
L1:
ret void
}
define internal void @__C___Matrix__double__4__3__elementwise_scalar___X__Matrix__double__4__3__lambda__a__b__v__15__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__$ctor( %__Matrix__double__4__3* %rt)
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r8 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %rt, i32 0, i32 0
%r9 = load i32, i32* %r2
%r10 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r8, i32 0, i32 %r9
%r11 = load i32, i32* %r5
%r12 = getelementptr inbounds [3 x double], [3 x double]* %r10, i32 0, i32 %r11
%r13 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r14 = load i32, i32* %r2
%r15 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r13, i32 0, i32 %r14
%r16 = load i32, i32* %r5
%r17 = getelementptr inbounds [3 x double], [3 x double]* %r15, i32 0, i32 %r16
%r18 = load double, double* %r17
%r19 = fdiv double %r18, %r1
store double %r19, double* %r12
%r20 = load i32, i32* %r5
%r21 = add nsw i32 %r20, 1
store i32 %r21, i32* %r5
br label %L3
L1:
%r22 = load i32, i32* %r2
%r23 = add nsw i32 %r22, 1
store i32 %r23, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define external void @__C___Matrix__double__4__3__$div__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1 ) #0 nounwind {
entry:
call void @__C___Matrix__double__4__3__elementwise_scalar___X__Matrix__double__4__3__lambda__a__b__v__15__double__const( %__Matrix__double__4__3* sret %rt, %__Matrix__double__4__3* %ths, double %r1)
br label %L1
L1:
ret void
}
define external double* @__C___Matrix__double__4__3__$get__i32__i32( %__Matrix__double__4__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
br label %L1
L1:
ret double* %r5
}
define external double @__C___Matrix__double__4__3__$get__i32__i32__const( %__Matrix__double__4__3* %ths, i32 %r1, i32 %r2 ) #0 nounwind {
entry:
%r3 = getelementptr inbounds %__Matrix__double__4__3, %__Matrix__double__4__3* %ths, i32 0, i32 0
%r4 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r3, i32 0, i32 %r1
%r5 = getelementptr inbounds [3 x double], [3 x double]* %r4, i32 0, i32 %r2
%r6 = load double, double* %r5
br label %L1
L1:
ret double %r6
}
define internal void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r11 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r8 = load i32, i32* %r2
%r9 = load i32, i32* %r5
%r10 = call double @__C___Matrix__double__4__3__$get__i32__i32__const( %__Matrix__double__4__3* %r1, i32 %r8, i32 %r9)
call void(i8*,  ...) @printf( i8* %r11, double %r10)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define internal void @printMatrix__3__4____Matrix__double__3__4$( %__Matrix__double__3__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r11 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r8 = load i32, i32* %r2
%r9 = load i32, i32* %r5
%r10 = call double @__C___Matrix__double__3__4__$get__i32__i32__const( %__Matrix__double__3__4* %r1, i32 %r8, i32 %r9)
call void(i8*,  ...) @printf( i8* %r11, double %r10)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define internal void @printMatrix__4__4____Matrix__double__4__4$( %__Matrix__double__4__4* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 4
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 4
br i1 %r7, label %L2, label %L1
L2:
%r11 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r8 = load i32, i32* %r2
%r9 = load i32, i32* %r5
%r10 = call double @__C___Matrix__double__4__4__$get__i32__i32__const( %__Matrix__double__4__4* %r1, i32 %r8, i32 %r9)
call void(i8*,  ...) @printf( i8* %r11, double %r10)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}
define internal void @printMatrix__3__3____Matrix__double__3__3$( %__Matrix__double__3__3* %r1 ) #0 nounwind {
entry:
%r2 = alloca i32, align 4
store i32 0, i32* %r2
br label %L6
L6:
%r3 = load i32, i32* %r2
%r4 = icmp slt i32 %r3, 3
br i1 %r4, label %L5, label %L4
L5:
%r5 = alloca i32, align 4
store i32 0, i32* %r5
br label %L3
L3:
%r6 = load i32, i32* %r5
%r7 = icmp slt i32 %r6, 3
br i1 %r7, label %L2, label %L1
L2:
%r11 = getelementptr inbounds [6 x i8], [6 x i8]* @string3, i64 0, i64 0
%r8 = load i32, i32* %r2
%r9 = load i32, i32* %r5
%r10 = call double @__C___Matrix__double__3__3__$get__i32__i32__const( %__Matrix__double__3__3* %r1, i32 %r8, i32 %r9)
call void(i8*,  ...) @printf( i8* %r11, double %r10)
%r12 = load i32, i32* %r5
%r13 = add nsw i32 %r12, 1
store i32 %r13, i32* %r5
br label %L3
L1:
%r14 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r14)
%r15 = load i32, i32* %r2
%r16 = add nsw i32 %r15, 1
store i32 %r16, i32* %r2
br label %L6
L4:
br label %L7
L7:
ret void
}

define dso_local i32 @main(i32 %argc, i8** %argv) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
{
entry:
%r1 = alloca i32, align 4
%r2 = alloca %__Matrix__double__4__3, align 8
%r29 = alloca [4 x [3 x double]], align 8
%r5 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r29, i32 0, i32 0
%r8 = getelementptr inbounds [3 x double], [3 x double]* %r5, i32 0, i32 0
store double 0x0, double* %r8
%r9 = getelementptr inbounds [3 x double], [3 x double]* %r5, i32 0, i32 1
store double 0x4000000000000000, double* %r9
%r10 = getelementptr inbounds [3 x double], [3 x double]* %r5, i32 0, i32 2
store double 0x3FF0000000000000, double* %r10
%r11 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r29, i32 0, i32 1
%r14 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 0
store double 0x4008000000000000, double* %r14
%r15 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 1
store double 0x3FF0000000000000, double* %r15
%r16 = getelementptr inbounds [3 x double], [3 x double]* %r11, i32 0, i32 2
store double 0x3FF0000000000000, double* %r16
%r17 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r29, i32 0, i32 2
%r20 = getelementptr inbounds [3 x double], [3 x double]* %r17, i32 0, i32 0
store double 0x4010000000000000, double* %r20
%r21 = getelementptr inbounds [3 x double], [3 x double]* %r17, i32 0, i32 1
store double 0x0, double* %r21
%r22 = getelementptr inbounds [3 x double], [3 x double]* %r17, i32 0, i32 2
store double 0x3FF0000000000000, double* %r22
%r23 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r29, i32 0, i32 3
%r26 = getelementptr inbounds [3 x double], [3 x double]* %r23, i32 0, i32 0
store double 0x3FF0000000000000, double* %r26
%r27 = getelementptr inbounds [3 x double], [3 x double]* %r23, i32 0, i32 1
store double 0x4014000000000000, double* %r27
%r28 = getelementptr inbounds [3 x double], [3 x double]* %r23, i32 0, i32 2
store double 0x4000000000000000, double* %r28
call void @__C___Matrix__double__4__3__$ctor__$4x$3xdouble$( %__Matrix__double__4__3* %r2, [4 x [3 x double]]* %r29)
%r30 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r31 = getelementptr inbounds [2 x i8], [2 x i8]* @string2, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r30, i8* %r31)
call void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r2)
%r32 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r32)
%r33 = alloca %__Matrix__double__3__4, align 8
%r57 = alloca [3 x [4 x double]], align 8
%r36 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r57, i32 0, i32 0
%r39 = getelementptr inbounds [4 x double], [4 x double]* %r36, i32 0, i32 0
store double 0x3FF0000000000000, double* %r39
%r40 = getelementptr inbounds [4 x double], [4 x double]* %r36, i32 0, i32 1
store double 0x4000000000000000, double* %r40
%r41 = getelementptr inbounds [4 x double], [4 x double]* %r36, i32 0, i32 2
store double 0x0, double* %r41
%r42 = getelementptr inbounds [4 x double], [4 x double]* %r36, i32 0, i32 3
store double 0x4008000000000000, double* %r42
%r43 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r57, i32 0, i32 1
%r46 = getelementptr inbounds [4 x double], [4 x double]* %r43, i32 0, i32 0
store double 0x4010000000000000, double* %r46
%r47 = getelementptr inbounds [4 x double], [4 x double]* %r43, i32 0, i32 1
store double 0x0, double* %r47
%r48 = getelementptr inbounds [4 x double], [4 x double]* %r43, i32 0, i32 2
store double 0x4014000000000000, double* %r48
%r49 = getelementptr inbounds [4 x double], [4 x double]* %r43, i32 0, i32 3
store double 0x4000000000000000, double* %r49
%r50 = getelementptr inbounds [3 x [4 x double]], [3 x [4 x double]]* %r57, i32 0, i32 2
%r53 = getelementptr inbounds [4 x double], [4 x double]* %r50, i32 0, i32 0
store double 0x4008000000000000, double* %r53
%r54 = getelementptr inbounds [4 x double], [4 x double]* %r50, i32 0, i32 1
store double 0x4008000000000000, double* %r54
%r55 = getelementptr inbounds [4 x double], [4 x double]* %r50, i32 0, i32 2
store double 0x3FF0000000000000, double* %r55
%r56 = getelementptr inbounds [4 x double], [4 x double]* %r50, i32 0, i32 3
store double 0x3FF0000000000000, double* %r56
call void @__C___Matrix__double__3__4__$ctor__$3x$4xdouble$( %__Matrix__double__3__4* %r33, [3 x [4 x double]]* %r57)
%r58 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r59 = getelementptr inbounds [2 x i8], [2 x i8]* @string5, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r58, i8* %r59)
call void @printMatrix__3__4____Matrix__double__3__4$( %__Matrix__double__3__4* %r33)
%r60 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r60)
%r61 = alloca %__Matrix__double__4__3, align 8
%r88 = alloca [4 x [3 x double]], align 8
%r64 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r88, i32 0, i32 0
%r67 = getelementptr inbounds [3 x double], [3 x double]* %r64, i32 0, i32 0
store double 0x3FF0000000000000, double* %r67
%r68 = getelementptr inbounds [3 x double], [3 x double]* %r64, i32 0, i32 1
store double 0xC000000000000000, double* %r68
%r69 = getelementptr inbounds [3 x double], [3 x double]* %r64, i32 0, i32 2
store double 0xBFF0000000000000, double* %r69
%r70 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r88, i32 0, i32 1
%r73 = getelementptr inbounds [3 x double], [3 x double]* %r70, i32 0, i32 0
store double 0xC008000000000000, double* %r73
%r74 = getelementptr inbounds [3 x double], [3 x double]* %r70, i32 0, i32 1
store double 0x0, double* %r74
%r75 = getelementptr inbounds [3 x double], [3 x double]* %r70, i32 0, i32 2
store double 0xBFF0000000000000, double* %r75
%r76 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r88, i32 0, i32 2
%r79 = getelementptr inbounds [3 x double], [3 x double]* %r76, i32 0, i32 0
store double 0xC010000000000000, double* %r79
%r80 = getelementptr inbounds [3 x double], [3 x double]* %r76, i32 0, i32 1
store double 0x3FF0000000000000, double* %r80
%r81 = getelementptr inbounds [3 x double], [3 x double]* %r76, i32 0, i32 2
store double 0xBFF0000000000000, double* %r81
%r82 = getelementptr inbounds [4 x [3 x double]], [4 x [3 x double]]* %r88, i32 0, i32 3
%r85 = getelementptr inbounds [3 x double], [3 x double]* %r82, i32 0, i32 0
store double 0xBFF0000000000000, double* %r85
%r86 = getelementptr inbounds [3 x double], [3 x double]* %r82, i32 0, i32 1
store double 0xC014000000000000, double* %r86
%r87 = getelementptr inbounds [3 x double], [3 x double]* %r82, i32 0, i32 2
store double 0xBFF0000000000000, double* %r87
call void @__C___Matrix__double__4__3__$ctor__$4x$3xdouble$( %__Matrix__double__4__3* %r61, [4 x [3 x double]]* %r88)
%r89 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r90 = getelementptr inbounds [2 x i8], [2 x i8]* @string6, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r89, i8* %r90)
call void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r61)
%r91 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r91)
%r92 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r93 = getelementptr inbounds [4 x i8], [4 x i8]* @string7, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r92, i8* %r93)
%r94 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$plus____Matrix__double__4__3$__const( %__Matrix__double__4__3* sret %r94, %__Matrix__double__4__3* %r2, %__Matrix__double__4__3* %r61)
call void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r94)
%r95 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r95)
%r96 = alloca %__Matrix__double__4__4, align 8
call void @__C___Matrix__double__4__3__$mul____Matrix__double__3__4$__const( %__Matrix__double__4__4* sret %r96, %__Matrix__double__4__3* %r2, %__Matrix__double__3__4* %r33)
%r97 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r98 = getelementptr inbounds [4 x i8], [4 x i8]* @string8, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r97, i8* %r98)
call void @printMatrix__4__4____Matrix__double__4__4$( %__Matrix__double__4__4* %r96)
%r99 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r99)
%r100 = alloca %__Matrix__double__4__3, align 8
call void @__C___Matrix__double__4__3__$mul__double__const( %__Matrix__double__4__3* sret %r100, %__Matrix__double__4__3* %r2, double 0x3FF6666666666666)
%r101 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r102 = getelementptr inbounds [6 x i8], [6 x i8]* @string9, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r101, i8* %r102)
call void @printMatrix__4__3____Matrix__double__4__3$( %__Matrix__double__4__3* %r100)
%r103 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r103)
%r104 = alloca %__Matrix__double__3__3, align 8
call void @__C___Matrix__double__3__4__$mul____Matrix__double__4__3$__const( %__Matrix__double__3__3* sret %r104, %__Matrix__double__3__4* %r33, %__Matrix__double__4__3* %r2)
%r105 = getelementptr inbounds [12 x i8], [12 x i8]* @string1, i64 0, i64 0
%r106 = getelementptr inbounds [4 x i8], [4 x i8]* @string10, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r105, i8* %r106)
call void @printMatrix__3__3____Matrix__double__3__3$( %__Matrix__double__3__3* %r104)
%r107 = getelementptr inbounds [2 x i8], [2 x i8]* @string4, i64 0, i64 0
call void(i8*,  ...) @printf( i8* %r107)
store i32 0, i32* %r1
br label %L2
L2:
call void @__dtor___Matrix__double__3__3( %__Matrix__double__3__3* %r104)
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r100)
call void @__dtor___Matrix__double__4__4( %__Matrix__double__4__4* %r96)
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r94)
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r61)
call void @__dtor___Matrix__double__3__4( %__Matrix__double__3__4* %r33)
call void @__dtor___Matrix__double__4__3( %__Matrix__double__4__3* %r2)
br label %L1
L1:
%r108 = load i32, i32* %r1
ret i32 %r108
}


