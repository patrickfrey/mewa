Shift token "extern" at line 1 in state 1, goto 4
Shift token DQSTRING = "C" at line 1 in state 4, goto 26
Shift token "procedure" at line 1 in state 26, goto 45
Shift token IDENT = "printf" at line 1 in state 45, goto 62
Shift token '(' at line 1 in state 62, goto 124
Shift token "const" at line 1 in state 124, goto 18
Shift token IDENT = "byte" at line 1 in state 18, goto 17
Reduce #1 to typename by token '^' at line 1 in state 17, goto 38
Shift token '^' at line 1 in state 38, goto 55
Reduce #3 to typespec by token ',' at line 1 in state 55, call typespec "const^", goto 233
Shift token ',' at line 1 in state 233, goto 300
Shift token IDENT = "int" at line 1 in state 300, goto 17
Reduce #1 to typename by token ')' at line 1 in state 17, goto 8
Reduce #1 to typespec by token ')' at line 1 in state 8, call typespec "", goto 233
Reduce #1 to extern_parameters by token ')' at line 1 in state 233, goto 324
Reduce #3 to extern_parameters by token ')' at line 1 in state 324, goto 231
Reduce #1 to extern_paramlist by token ')' at line 1 in state 231, call extern_paramdeflist, goto 232
Shift token ')' at line 1 in state 232, goto 298
Shift token ';' at line 1 in state 298, goto 322
Reduce #8 to extern_definition by token "private" at line 3 in state 322, call extern_procdef, goto 3
Reduce #0 to extern_definitionlist by token "private" at line 3 in state 3, goto 25
Reduce #2 to extern_definitionlist by token "private" at line 3 in state 25, goto 2
Shift token "private" at line 3 in state 2, goto 23
Reduce #1 to linkage by token "function" at line 3 in state 23, call linkage {name="private",linkage="internal"}, goto 14
Shift token "function" at line 3 in state 14, goto 34
Shift token IDENT = "fibonacci" at line 3 in state 34, goto 51
Shift token IDENT = "int" at line 3 in state 51, goto 17
Reduce #1 to typename by token '(' at line 3 in state 17, goto 8
Reduce #1 to typespec by token '(' at line 3 in state 8, call typespec "", goto 97
Shift token '(' at line 3 in state 97, goto 99
Shift token IDENT = "int" at line 3 in state 99, goto 17
Reduce #1 to typename by token IDENT = "n" at line 3 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "n" at line 3 in state 8, call typespec "", goto 186
Shift token IDENT = "n" at line 3 in state 186, goto 283
Reduce #2 to paramdecl by token ')' at line 3 in state 283, call paramdef, goto 189
Reduce #1 to parameters by token ')' at line 3 in state 189, goto 188
Reduce #1 to parameterlist by token ')' at line 3 in state 188, call paramdeflist, goto 187
Shift token ')' at line 3 in state 187, goto 284
Shift token '{' at line 4 in state 284, goto 310
Reduce #0 to linkage by token "procedure" at line 5 in state 310, call linkage {name="private",linkage="internal"}, goto 14
Shift token "procedure" at line 5 in state 14, goto 35
Shift token IDENT = "swap" at line 5 in state 35, goto 52
Shift token '(' at line 5 in state 52, goto 99
Shift token IDENT = "int" at line 5 in state 99, goto 17
Reduce #1 to typename by token '&' at line 5 in state 17, goto 8
Shift token '&' at line 5 in state 8, goto 30
Reduce #2 to typespec by token IDENT = "a" at line 5 in state 30, call typespec "&", goto 186
Shift token IDENT = "a" at line 5 in state 186, goto 283
Reduce #2 to paramdecl by token ',' at line 5 in state 283, call paramdef, goto 189
Shift token ',' at line 5 in state 189, goto 285
Shift token IDENT = "int" at line 5 in state 285, goto 17
Reduce #1 to typename by token '&' at line 5 in state 17, goto 8
Shift token '&' at line 5 in state 8, goto 30
Reduce #2 to typespec by token IDENT = "b" at line 5 in state 30, call typespec "&", goto 186
Shift token IDENT = "b" at line 5 in state 186, goto 283
Reduce #2 to paramdecl by token ')' at line 5 in state 283, call paramdef, goto 189
Reduce #1 to parameters by token ')' at line 5 in state 189, goto 311
Reduce #3 to parameters by token ')' at line 5 in state 311, goto 188
Reduce #1 to parameterlist by token ')' at line 5 in state 188, call paramdeflist, goto 187
Shift token ')' at line 5 in state 187, goto 284
Shift token '{' at line 6 in state 284, goto 310
Shift token "var" at line 7 in state 310, goto 85
Shift token IDENT = "int" at line 7 in state 85, goto 17
Reduce #1 to typename by token IDENT = "tmp" at line 7 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "tmp" at line 7 in state 8, call typespec "", goto 9
Shift token IDENT = "tmp" at line 7 in state 9, goto 32
Shift token '=' at line 7 in state 32, goto 49
Shift token IDENT = "a" at line 7 in state 49, goto 71
Reduce #1 to expression by token ';' at line 7 in state 71, call variable, goto 94
Reduce #4 to variabledefinition by token ';' at line 7 in state 94, call vardef_assign, goto 176
Shift token ';' at line 7 in state 176, goto 275
Reduce #3 to statement by token IDENT = "a" at line 8 in state 275, call definition, goto 67
Shift token IDENT = "a" at line 8 in state 67, goto 71
Reduce #1 to expression by token '=' at line 8 in state 71, call variable, goto 68
Shift token '=' at line 8 in state 68, goto 134
Shift token IDENT = "b" at line 8 in state 134, goto 71
Reduce #1 to expression by token ';' at line 8 in state 71, call variable, goto 240
Reduce #3 to expression by token ';' at line 8 in state 240, call operator "=", goto 68
Shift token ';' at line 8 in state 68, goto 130
Reduce #2 to statement by token IDENT = "b" at line 9 in state 130, call free_expression, goto 67
Shift token IDENT = "b" at line 9 in state 67, goto 71
Reduce #1 to expression by token '=' at line 9 in state 71, call variable, goto 68
Shift token '=' at line 9 in state 68, goto 134
Shift token IDENT = "tmp" at line 9 in state 134, goto 71
Reduce #1 to expression by token ';' at line 9 in state 71, call variable, goto 240
Reduce #3 to expression by token ';' at line 9 in state 240, call operator "=", goto 68
Shift token ';' at line 9 in state 68, goto 130
Reduce #2 to statement by token '}' at line 10 in state 130, call free_expression, goto 67
Reduce #0 to statementlist by token '}' at line 10 in state 67, goto 127
Reduce #2 to statementlist by token '}' at line 10 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 10 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 10 in state 127, goto 66
Reduce #1 to codeblock by token '}' at line 10 in state 66, call codeblock, goto 330
Shift token '}' at line 10 in state 330, goto 343
Reduce #6 to callablebody by token "var" at line 11 in state 343, call callablebody "&", goto 98
Reduce #4 to functiondefinition by token "var" at line 11 in state 98, call procdef, goto 64
Reduce #1 to statement by token "var" at line 11 in state 64, call definition, goto 67
Shift token "var" at line 11 in state 67, goto 85
Shift token IDENT = "int" at line 11 in state 85, goto 17
Reduce #1 to typename by token IDENT = "i1" at line 11 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i1" at line 11 in state 8, call typespec "", goto 9
Shift token IDENT = "i1" at line 11 in state 9, goto 32
Shift token '=' at line 11 in state 32, goto 49
Shift token CARDINAL = "0" at line 11 in state 49, goto 74
Reduce #1 to expression by token ';' at line 11 in state 74, call constant "constexpr uint", goto 94
Reduce #4 to variabledefinition by token ';' at line 11 in state 94, call vardef_assign, goto 176
Shift token ';' at line 11 in state 176, goto 275
Reduce #3 to statement by token "var" at line 12 in state 275, call definition, goto 67
Shift token "var" at line 12 in state 67, goto 85
Shift token IDENT = "int" at line 12 in state 85, goto 17
Reduce #1 to typename by token IDENT = "i2" at line 12 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i2" at line 12 in state 8, call typespec "", goto 9
Shift token IDENT = "i2" at line 12 in state 9, goto 32
Shift token '=' at line 12 in state 32, goto 49
Shift token CARDINAL = "1" at line 12 in state 49, goto 74
Reduce #1 to expression by token ';' at line 12 in state 74, call constant "constexpr uint", goto 94
Reduce #4 to variabledefinition by token ';' at line 12 in state 94, call vardef_assign, goto 176
Shift token ';' at line 12 in state 176, goto 275
Reduce #3 to statement by token "var" at line 13 in state 275, call definition, goto 67
Shift token "var" at line 13 in state 67, goto 85
Shift token IDENT = "int" at line 13 in state 85, goto 17
Reduce #1 to typename by token IDENT = "i" at line 13 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i" at line 13 in state 8, call typespec "", goto 9
Shift token IDENT = "i" at line 13 in state 9, goto 32
Shift token '=' at line 13 in state 32, goto 49
Shift token CARDINAL = "0" at line 13 in state 49, goto 74
Reduce #1 to expression by token ';' at line 13 in state 74, call constant "constexpr uint", goto 94
Reduce #4 to variabledefinition by token ';' at line 13 in state 94, call vardef_assign, goto 176
Shift token ';' at line 13 in state 176, goto 275
Reduce #3 to statement by token "while" at line 14 in state 275, call definition, goto 67
Shift token "while" at line 14 in state 67, goto 89
Shift token '(' at line 14 in state 89, goto 180
Shift token IDENT = "i" at line 14 in state 180, goto 71
Reduce #1 to expression by token '<' at line 14 in state 71, call variable, goto 279
Shift token '<' at line 14 in state 279, goto 151
Shift token IDENT = "n" at line 14 in state 151, goto 71
Reduce #1 to expression by token ')' at line 14 in state 71, call variable, goto 257
Reduce #3 to expression by token ')' at line 14 in state 257, call operator "<", goto 279
Shift token ')' at line 14 in state 279, goto 305
Shift token '{' at line 15 in state 305, goto 326
Shift token IDENT = "i1" at line 16 in state 326, goto 71
Reduce #1 to expression by token '=' at line 16 in state 71, call variable, goto 68
Shift token '=' at line 16 in state 68, goto 134
Shift token IDENT = "i2" at line 16 in state 134, goto 71
Reduce #1 to expression by token '+' at line 16 in state 71, call variable, goto 240
Shift token '+' at line 16 in state 240, goto 135
Shift token IDENT = "i1" at line 16 in state 135, goto 71
Reduce #1 to expression by token ';' at line 16 in state 71, call variable, goto 241
Reduce #3 to expression by token ';' at line 16 in state 241, call operator "+", goto 240
Reduce #3 to expression by token ';' at line 16 in state 240, call operator "=", goto 68
Shift token ';' at line 16 in state 68, goto 130
Reduce #2 to statement by token IDENT = "swap" at line 17 in state 130, call free_expression, goto 67
Shift token IDENT = "swap" at line 17 in state 67, goto 71
Reduce #1 to expression by token '(' at line 17 in state 71, call variable, goto 68
Shift token '(' at line 17 in state 68, goto 129
Shift token IDENT = "i1" at line 17 in state 129, goto 71
Reduce #1 to expression by token ',' at line 17 in state 71, call variable, goto 183
Shift token ',' at line 17 in state 183, goto 273
Shift token IDENT = "i2" at line 17 in state 273, goto 71
Reduce #1 to expression by token ')' at line 17 in state 71, call variable, goto 183
Reduce #1 to expressionlist by token ')' at line 17 in state 183, goto 303
Reduce #3 to expressionlist by token ')' at line 17 in state 303, goto 235
Shift token ')' at line 17 in state 235, goto 301
Reduce #4 to expression by token ';' at line 17 in state 301, call operator "()", goto 68
Shift token ';' at line 17 in state 68, goto 130
Reduce #2 to statement by token IDENT = "i" at line 18 in state 130, call free_expression, goto 67
Shift token IDENT = "i" at line 18 in state 67, goto 71
Reduce #1 to expression by token "+=" at line 18 in state 71, call variable, goto 68
Shift token "+=" at line 18 in state 68, goto 152
Shift token CARDINAL = "1" at line 18 in state 152, goto 74
Reduce #1 to expression by token ';' at line 18 in state 74, call constant "constexpr uint", goto 258
Reduce #3 to expression by token ';' at line 18 in state 258, call assign_operator "+", goto 68
Shift token ';' at line 18 in state 68, goto 130
Reduce #2 to statement by token '}' at line 19 in state 130, call free_expression, goto 67
Reduce #0 to statementlist by token '}' at line 19 in state 67, goto 127
Reduce #2 to statementlist by token '}' at line 19 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 19 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 19 in state 127, goto 66
Reduce #1 to codeblock by token '}' at line 19 in state 66, call codeblock, goto 340
Shift token '}' at line 19 in state 340, goto 352
Reduce #7 to statement by token "return" at line 20 in state 352, call conditional_while, goto 67
Shift token "return" at line 20 in state 67, goto 86
Shift token IDENT = "i2" at line 20 in state 86, goto 71
Reduce #1 to expression by token ';' at line 20 in state 71, call variable, goto 177
Shift token ';' at line 20 in state 177, goto 276
Reduce #3 to statement by token '}' at line 21 in state 276, call return_value, goto 67
Reduce #0 to statementlist by token '}' at line 21 in state 67, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 21 in state 127, goto 66
Reduce #1 to codeblock by token '}' at line 21 in state 66, call codeblock, goto 330
Shift token '}' at line 21 in state 330, goto 343
Reduce #6 to callablebody by token "main" at line 23 in state 343, call callablebody "&", goto 185
Reduce #5 to functiondefinition by token "main" at line 23 in state 185, call funcdef, goto 15
Reduce #1 to free_definition by token "main" at line 23 in state 15, call definition 1, goto 7
Reduce #0 to free_definitionlist by token "main" at line 23 in state 7, goto 29
Reduce #2 to free_definitionlist by token "main" at line 23 in state 29, goto 5
Shift token "main" at line 23 in state 5, goto 28
Shift token '{' at line 24 in state 28, goto 46
Shift token "var" at line 25 in state 46, goto 85
Shift token IDENT = "int" at line 25 in state 85, goto 17
Reduce #1 to typename by token IDENT = "val" at line 25 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "val" at line 25 in state 8, call typespec "", goto 9
Shift token IDENT = "val" at line 25 in state 9, goto 32
Shift token '=' at line 25 in state 32, goto 49
Shift token IDENT = "fibonacci" at line 25 in state 49, goto 71
Reduce #1 to expression by token '(' at line 25 in state 71, call variable, goto 94
Shift token '(' at line 25 in state 94, goto 129
Shift token CARDINAL = "20" at line 25 in state 129, goto 74
Reduce #1 to expression by token ')' at line 25 in state 74, call constant "constexpr uint", goto 183
Reduce #1 to expressionlist by token ')' at line 25 in state 183, goto 235
Shift token ')' at line 25 in state 235, goto 301
Reduce #4 to expression by token ';' at line 25 in state 301, call operator "()", goto 94
Reduce #4 to variabledefinition by token ';' at line 25 in state 94, call vardef_assign, goto 176
Shift token ';' at line 25 in state 176, goto 275
Reduce #3 to statement by token IDENT = "printf" at line 26 in state 275, call definition, goto 67
Shift token IDENT = "printf" at line 26 in state 67, goto 71
Reduce #1 to expression by token '(' at line 26 in state 71, call variable, goto 68
Shift token '(' at line 26 in state 68, goto 129
Shift token DQSTRING = "Result: %d\n" at line 26 in state 129, goto 72
Reduce #1 to expression by token ',' at line 26 in state 72, call string_constant "constexpr float", goto 183
Shift token ',' at line 26 in state 183, goto 273
Shift token IDENT = "val" at line 26 in state 273, goto 71
Reduce #1 to expression by token ')' at line 26 in state 71, call variable, goto 183
Reduce #1 to expressionlist by token ')' at line 26 in state 183, goto 303
Reduce #3 to expressionlist by token ')' at line 26 in state 303, goto 235
Shift token ')' at line 26 in state 235, goto 301
Reduce #4 to expression by token ';' at line 26 in state 301, call operator "()", goto 68
Shift token ';' at line 26 in state 68, goto 130
Reduce #2 to statement by token '}' at line 27 in state 130, call free_expression, goto 67
Reduce #0 to statementlist by token '}' at line 27 in state 67, goto 127
Reduce #2 to statementlist by token '}' at line 27 in state 127, goto 127
Reduce #2 to statementlist by token '}' at line 27 in state 127, goto 66
Reduce #1 to codeblock by token '}' at line 27 in state 66, call codeblock, goto 65
Shift token '}' at line 27 in state 65, goto 126
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 1,
          name = "DQSTRING",
          value = "C"},
        {
          line = 1,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  line = 1,
                  name = "IDENT",
                  value = "byte"}},
              call = {
                name = "typespec const^",
                obj = "const^",
                proc = <function>},
              line = 1,
              step = 0},
            {
              arg = {
                {
                  line = 1,
                  name = "IDENT",
                  value = "int"}},
              call = {
                name = "typespec ",
                obj = "",
                proc = <function>},
              line = 1,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 1,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 1,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {name="private",linkage="internal"}",
                obj = {
                  linkage = "internal",
                  name = "private"},
                proc = <function>},
              line = 1,
              step = 0},
            {
              line = 3,
              name = "IDENT",
              value = "fibonacci"},
            {
              arg = {
                {
                  line = 3,
                  name = "IDENT",
                  value = "int"}},
              call = {
                name = "typespec ",
                obj = "",
                proc = <function>},
              line = 3,
              step = 0},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 3,
                              name = "IDENT",
                              value = "int"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 3,
                          step = 0},
                        {
                          line = 3,
                          name = "IDENT",
                          value = "n"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 3,
                      step = 0}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 3,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {},
                              call = {
                                name = "linkage {name="private",linkage="internal"}",
                                obj = {
                                  linkage = "internal",
                                  name = "private"},
                                proc = <function>},
                              line = 3,
                              step = 0},
                            {
                              line = 5,
                              name = "IDENT",
                              value = "swap"},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 5,
                                              name = "IDENT",
                                              value = "int"}},
                                          call = {
                                            name = "typespec &",
                                            obj = "&",
                                            proc = <function>},
                                          line = 5,
                                          step = 0},
                                        {
                                          line = 5,
                                          name = "IDENT",
                                          value = "a"}},
                                      call = {
                                        name = "paramdef",
                                        proc = <function>},
                                      line = 5,
                                      step = 0},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 5,
                                              name = "IDENT",
                                              value = "int"}},
                                          call = {
                                            name = "typespec &",
                                            obj = "&",
                                            proc = <function>},
                                          line = 5,
                                          step = 0},
                                        {
                                          line = 5,
                                          name = "IDENT",
                                          value = "b"}},
                                      call = {
                                        name = "paramdef",
                                        proc = <function>},
                                      line = 5,
                                      step = 0}},
                                  call = {
                                    name = "paramdeflist",
                                    proc = <function>},
                                  line = 5,
                                  step = 0},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 7,
                                                  name = "IDENT",
                                                  value = "int"}},
                                              call = {
                                                name = "typespec ",
                                                obj = "",
                                                proc = <function>},
                                              line = 7,
                                              step = 0},
                                            {
                                              line = 7,
                                              name = "IDENT",
                                              value = "tmp"},
                                            {
                                              arg = {
                                                {
                                                  line = 7,
                                                  name = "IDENT",
                                                  value = "a"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 7,
                                              step = 0}},
                                          call = {
                                            name = "vardef_assign",
                                            proc = <function>},
                                          line = 7,
                                          step = 1}},
                                      call = {
                                        name = "definition",
                                        proc = <function>},
                                      line = 7,
                                      step = 1},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 8,
                                                  name = "IDENT",
                                                  value = "a"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 8,
                                              step = 1},
                                            {
                                              arg = {
                                                {
                                                  line = 8,
                                                  name = "IDENT",
                                                  value = "b"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 8,
                                              step = 1}},
                                          call = {
                                            name = "operator =",
                                            obj = "=",
                                            proc = <function>},
                                          line = 8,
                                          step = 1}},
                                      call = {
                                        name = "free_expression",
                                        proc = <function>},
                                      line = 8,
                                      step = 1},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 9,
                                                  name = "IDENT",
                                                  value = "b"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 9,
                                              step = 1},
                                            {
                                              arg = {
                                                {
                                                  line = 9,
                                                  name = "IDENT",
                                                  value = "tmp"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 9,
                                              step = 1}},
                                          call = {
                                            name = "operator =",
                                            obj = "=",
                                            proc = <function>},
                                          line = 9,
                                          step = 1}},
                                      call = {
                                        name = "free_expression",
                                        proc = <function>},
                                      line = 9,
                                      step = 1}},
                                  call = {
                                    name = "codeblock",
                                    proc = <function>},
                                  line = 9,
                                  step = 1}},
                              call = {
                                name = "callablebody &",
                                obj = "&",
                                proc = <function>},
                              line = 9,
                              scope = {
                                0,
                                2}}},
                          call = {
                            name = "procdef",
                            proc = <function>},
                          line = 9,
                          step = 2}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 9,
                      step = 2},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 11,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 11,
                              step = 2},
                            {
                              line = 11,
                              name = "IDENT",
                              value = "i1"},
                            {
                              arg = {
                                {
                                  line = 11,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 11,
                              step = 2}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 11,
                          step = 3}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 11,
                      step = 3},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 12,
                              step = 3},
                            {
                              line = 12,
                              name = "IDENT",
                              value = "i2"},
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "CARDINAL",
                                  value = "1"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 12,
                              step = 3}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 12,
                          step = 4}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 12,
                      step = 4},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 13,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 13,
                              step = 4},
                            {
                              line = 13,
                              name = "IDENT",
                              value = "i"},
                            {
                              arg = {
                                {
                                  line = 13,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 13,
                              step = 4}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 13,
                          step = 5}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 13,
                      step = 5},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 14,
                                  name = "IDENT",
                                  value = "i"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 14,
                              step = 5},
                            {
                              arg = {
                                {
                                  line = 14,
                                  name = "IDENT",
                                  value = "n"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 14,
                              step = 5}},
                          call = {
                            name = "operator <",
                            obj = "<",
                            proc = <function>},
                          line = 14,
                          step = 5},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 16,
                                          name = "IDENT",
                                          value = "i1"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 16,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "IDENT",
                                              value = "i2"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 16,
                                          step = 5},
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "IDENT",
                                              value = "i1"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 16,
                                          step = 5}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 16,
                                      step = 5}},
                                  call = {
                                    name = "operator =",
                                    obj = "=",
                                    proc = <function>},
                                  line = 16,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 16,
                              step = 5},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "swap"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "i1"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "i2"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 17,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 17,
                              step = 5},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 18,
                                          name = "IDENT",
                                          value = "i"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 18,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 18,
                                          name = "CARDINAL",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 18,
                                      step = 5}},
                                  call = {
                                    name = "assign_operator +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 18,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 18,
                              step = 5}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 18,
                          step = 5}},
                      call = {
                        name = "conditional_while",
                        proc = <function>},
                      line = 18,
                      scope = {
                        5,
                        6}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 20,
                              name = "IDENT",
                              value = "i2"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 20,
                          step = 6}},
                      call = {
                        name = "return_value",
                        proc = <function>},
                      line = 20,
                      step = 7}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 20,
                  step = 7}},
              call = {
                name = "callablebody &",
                obj = "&",
                proc = <function>},
              line = 20,
              scope = {
                0,
                8}}},
          call = {
            name = "funcdef",
            proc = <function>},
          line = 20,
          step = 8}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 20,
      step = 8},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 25,
                          name = "IDENT",
                          value = "int"}},
                      call = {
                        name = "typespec ",
                        obj = "",
                        proc = <function>},
                      line = 25,
                      step = 8},
                    {
                      line = 25,
                      name = "IDENT",
                      value = "val"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 25,
                              name = "IDENT",
                              value = "fibonacci"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 25,
                          step = 8},
                        {
                          arg = {
                            {
                              line = 25,
                              name = "CARDINAL",
                              value = "20"}},
                          call = {
                            name = "constant constexpr uint",
                            obj = "constexpr uint",
                            proc = <function>},
                          line = 25,
                          step = 8}},
                      call = {
                        name = "operator ()",
                        obj = "()",
                        proc = <function>},
                      line = 25,
                      step = 8}},
                  call = {
                    name = "vardef_assign",
                    proc = <function>},
                  line = 25,
                  step = 9}},
              call = {
                name = "definition",
                proc = <function>},
              line = 25,
              step = 9},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 26,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 26,
                      step = 9},
                    {
                      arg = {
                        {
                          line = 26,
                          name = "DQSTRING",
                          value = "Result: %d\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 26,
                      step = 9},
                    {
                      arg = {
                        {
                          line = 26,
                          name = "IDENT",
                          value = "val"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 26,
                      step = 9}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 26,
                  step = 9}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 26,
              step = 9}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 26,
          step = 9}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 26,
      scope = {
        8,
        10}}},
  call = {
    name = "program",
    proc = <function>},
  line = 26,
  step = 10}
