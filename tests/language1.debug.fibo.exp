Shift token "extern" at line 1 in state 1, goto 4
Shift token DQSTRING = "C" at line 1 in state 4, goto 27
Shift token "procedure" at line 1 in state 27, goto 49
Shift token IDENT = "printf" at line 1 in state 49, goto 70
Shift token '(' at line 1 in state 70, goto 135
Shift token "const" at line 1 in state 135, goto 18
Shift token IDENT = "byte" at line 1 in state 18, goto 17
Reduce #1 to typename by token '^' at line 1 in state 17, goto 39
Shift token '^' at line 1 in state 39, goto 59
Reduce #3 to typespec by token IDENT = "fmt" at line 1 in state 59, call typespec "const^", goto 245
Shift token IDENT = "fmt" at line 1 in state 245, goto 313
Shift token ',' at line 1 in state 313, goto 340
Shift token IDENT = "int" at line 1 in state 340, goto 17
Reduce #1 to typename by token IDENT = "arg" at line 1 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "arg" at line 1 in state 8, call typespec "", goto 245
Shift token IDENT = "arg" at line 1 in state 245, goto 313
Reduce #2 to extern_parameters by token ')' at line 1 in state 313, call extern_paramdef, goto 358
Reduce #4 to extern_parameters by token ')' at line 1 in state 358, call extern_paramdef, goto 243
Reduce #1 to extern_paramlist by token ')' at line 1 in state 243, call extern_paramdeflist, goto 244
Shift token ')' at line 1 in state 244, goto 311
Shift token ';' at line 1 in state 311, goto 338
Reduce #8 to extern_definition by token "private" at line 3 in state 338, call extern_procdef, goto 3
Reduce #0 to extern_definitionlist by token "private" at line 3 in state 3, goto 26
Reduce #2 to extern_definitionlist by token "private" at line 3 in state 26, goto 2
Shift token "private" at line 3 in state 2, goto 24
Reduce #1 to linkage by token "function" at line 3 in state 24, call linkage {private=true,linkage="internal"}, goto 14
Shift token "function" at line 3 in state 14, goto 35
Shift token IDENT = "fibonacci" at line 3 in state 35, goto 55
Shift token IDENT = "int" at line 3 in state 55, goto 17
Reduce #1 to typename by token '(' at line 3 in state 17, goto 8
Reduce #1 to typespec by token '(' at line 3 in state 8, call typespec "", goto 105
Shift token '(' at line 3 in state 105, goto 108
Shift token IDENT = "int" at line 3 in state 108, goto 17
Reduce #1 to typename by token IDENT = "n" at line 3 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "n" at line 3 in state 8, call typespec "", goto 198
Shift token IDENT = "n" at line 3 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 3 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 3 in state 201, goto 200
Reduce #1 to parameterlist by token ')' at line 3 in state 200, call paramdeflist, goto 199
Shift token ')' at line 3 in state 199, goto 296
Shift token '{' at line 4 in state 296, goto 324
Reduce #0 to linkage by token "procedure" at line 5 in state 324, call linkage {private=false,linkage="external"}, goto 14
Shift token "procedure" at line 5 in state 14, goto 36
Shift token IDENT = "swap" at line 5 in state 36, goto 56
Shift token '(' at line 5 in state 56, goto 108
Shift token IDENT = "int" at line 5 in state 108, goto 17
Reduce #1 to typename by token '&' at line 5 in state 17, goto 8
Shift token '&' at line 5 in state 8, goto 31
Reduce #2 to typespec by token IDENT = "a" at line 5 in state 31, call typespec "&", goto 198
Shift token IDENT = "a" at line 5 in state 198, goto 295
Reduce #2 to paramdecl by token ',' at line 5 in state 295, call paramdef, goto 201
Shift token ',' at line 5 in state 201, goto 297
Shift token IDENT = "int" at line 5 in state 297, goto 17
Reduce #1 to typename by token '&' at line 5 in state 17, goto 8
Shift token '&' at line 5 in state 8, goto 31
Reduce #2 to typespec by token IDENT = "b" at line 5 in state 31, call typespec "&", goto 198
Shift token IDENT = "b" at line 5 in state 198, goto 295
Reduce #2 to paramdecl by token ')' at line 5 in state 295, call paramdef, goto 201
Reduce #1 to parameters by token ')' at line 5 in state 201, goto 325
Reduce #3 to parameters by token ')' at line 5 in state 325, goto 200
Reduce #1 to parameterlist by token ')' at line 5 in state 200, call paramdeflist, goto 199
Shift token ')' at line 5 in state 199, goto 296
Shift token '{' at line 6 in state 296, goto 324
Shift token "var" at line 7 in state 324, goto 93
Shift token IDENT = "int" at line 7 in state 93, goto 17
Reduce #1 to typename by token IDENT = "tmp" at line 7 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "tmp" at line 7 in state 8, call typespec "", goto 9
Shift token IDENT = "tmp" at line 7 in state 9, goto 33
Shift token '=' at line 7 in state 33, goto 53
Shift token IDENT = "a" at line 7 in state 53, goto 79
Reduce #1 to expression by token ';' at line 7 in state 79, call variable, goto 102
Reduce #4 to variabledefinition by token ';' at line 7 in state 102, call vardef_assign, goto 187
Shift token ';' at line 7 in state 187, goto 287
Reduce #3 to statement by token IDENT = "a" at line 8 in state 287, call definition, goto 75
Shift token IDENT = "a" at line 8 in state 75, goto 79
Reduce #1 to expression by token '=' at line 8 in state 79, call variable, goto 76
Shift token '=' at line 8 in state 76, goto 145
Shift token IDENT = "b" at line 8 in state 145, goto 79
Reduce #1 to expression by token ';' at line 8 in state 79, call variable, goto 252
Reduce #3 to expression by token ';' at line 8 in state 252, call operator "=", goto 76
Shift token ';' at line 8 in state 76, goto 141
Reduce #2 to statement by token IDENT = "b" at line 9 in state 141, call free_expression, goto 75
Shift token IDENT = "b" at line 9 in state 75, goto 79
Reduce #1 to expression by token '=' at line 9 in state 79, call variable, goto 76
Shift token '=' at line 9 in state 76, goto 145
Shift token IDENT = "tmp" at line 9 in state 145, goto 79
Reduce #1 to expression by token ';' at line 9 in state 79, call variable, goto 252
Reduce #3 to expression by token ';' at line 9 in state 252, call operator "=", goto 76
Shift token ';' at line 9 in state 76, goto 141
Reduce #2 to statement by token '}' at line 10 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 10 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 10 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 10 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 10 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 10 in state 74, call codeblock, goto 347
Shift token '}' at line 10 in state 347, goto 363
Reduce #6 to callablebody by token "var" at line 11 in state 363, call callablebody, goto 106
Reduce #4 to functiondefinition by token "var" at line 11 in state 106, call procdef {const=false}, goto 72
Reduce #1 to statement by token "var" at line 11 in state 72, call definition, goto 75
Shift token "var" at line 11 in state 75, goto 93
Shift token IDENT = "int" at line 11 in state 93, goto 17
Reduce #1 to typename by token IDENT = "i1" at line 11 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i1" at line 11 in state 8, call typespec "", goto 9
Shift token IDENT = "i1" at line 11 in state 9, goto 33
Shift token '=' at line 11 in state 33, goto 53
Shift token CARDINAL = "0" at line 11 in state 53, goto 82
Reduce #1 to expression by token ';' at line 11 in state 82, call constant "constexpr uint", goto 102
Reduce #4 to variabledefinition by token ';' at line 11 in state 102, call vardef_assign, goto 187
Shift token ';' at line 11 in state 187, goto 287
Reduce #3 to statement by token "var" at line 12 in state 287, call definition, goto 75
Shift token "var" at line 12 in state 75, goto 93
Shift token IDENT = "int" at line 12 in state 93, goto 17
Reduce #1 to typename by token IDENT = "i2" at line 12 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i2" at line 12 in state 8, call typespec "", goto 9
Shift token IDENT = "i2" at line 12 in state 9, goto 33
Shift token '=' at line 12 in state 33, goto 53
Shift token CARDINAL = "1" at line 12 in state 53, goto 82
Reduce #1 to expression by token ';' at line 12 in state 82, call constant "constexpr uint", goto 102
Reduce #4 to variabledefinition by token ';' at line 12 in state 102, call vardef_assign, goto 187
Shift token ';' at line 12 in state 187, goto 287
Reduce #3 to statement by token "var" at line 13 in state 287, call definition, goto 75
Shift token "var" at line 13 in state 75, goto 93
Shift token IDENT = "int" at line 13 in state 93, goto 17
Reduce #1 to typename by token IDENT = "i" at line 13 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "i" at line 13 in state 8, call typespec "", goto 9
Shift token IDENT = "i" at line 13 in state 9, goto 33
Shift token '=' at line 13 in state 33, goto 53
Shift token CARDINAL = "0" at line 13 in state 53, goto 82
Reduce #1 to expression by token ';' at line 13 in state 82, call constant "constexpr uint", goto 102
Reduce #4 to variabledefinition by token ';' at line 13 in state 102, call vardef_assign, goto 187
Shift token ';' at line 13 in state 187, goto 287
Reduce #3 to statement by token "while" at line 14 in state 287, call definition, goto 75
Shift token "while" at line 14 in state 75, goto 97
Shift token '(' at line 14 in state 97, goto 191
Shift token IDENT = "i" at line 14 in state 191, goto 79
Reduce #1 to expression by token '<' at line 14 in state 79, call variable, goto 291
Shift token '<' at line 14 in state 291, goto 162
Shift token IDENT = "n" at line 14 in state 162, goto 79
Reduce #1 to expression by token ')' at line 14 in state 79, call variable, goto 269
Reduce #3 to expression by token ')' at line 14 in state 269, call operator "<", goto 291
Shift token ')' at line 14 in state 291, goto 319
Shift token '{' at line 15 in state 319, goto 343
Shift token IDENT = "i1" at line 16 in state 343, goto 79
Reduce #1 to expression by token '=' at line 16 in state 79, call variable, goto 76
Shift token '=' at line 16 in state 76, goto 145
Shift token IDENT = "i2" at line 16 in state 145, goto 79
Reduce #1 to expression by token '+' at line 16 in state 79, call variable, goto 252
Shift token '+' at line 16 in state 252, goto 146
Shift token IDENT = "i1" at line 16 in state 146, goto 79
Reduce #1 to expression by token ';' at line 16 in state 79, call variable, goto 253
Reduce #3 to expression by token ';' at line 16 in state 253, call operator "+", goto 252
Reduce #3 to expression by token ';' at line 16 in state 252, call operator "=", goto 76
Shift token ';' at line 16 in state 76, goto 141
Reduce #2 to statement by token IDENT = "swap" at line 17 in state 141, call free_expression, goto 75
Shift token IDENT = "swap" at line 17 in state 75, goto 79
Reduce #1 to expression by token '(' at line 17 in state 79, call variable, goto 76
Shift token '(' at line 17 in state 76, goto 140
Shift token IDENT = "i1" at line 17 in state 140, goto 79
Reduce #1 to expression by token ',' at line 17 in state 79, call variable, goto 194
Shift token ',' at line 17 in state 194, goto 285
Shift token IDENT = "i2" at line 17 in state 285, goto 79
Reduce #1 to expression by token ')' at line 17 in state 79, call variable, goto 194
Reduce #1 to expressionlist by token ')' at line 17 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 17 in state 317, goto 247
Shift token ')' at line 17 in state 247, goto 315
Reduce #4 to expression by token ';' at line 17 in state 315, call operator "()", goto 76
Shift token ';' at line 17 in state 76, goto 141
Reduce #2 to statement by token IDENT = "i" at line 18 in state 141, call free_expression, goto 75
Shift token IDENT = "i" at line 18 in state 75, goto 79
Reduce #1 to expression by token "+=" at line 18 in state 79, call variable, goto 76
Shift token "+=" at line 18 in state 76, goto 163
Shift token CARDINAL = "1" at line 18 in state 163, goto 82
Reduce #1 to expression by token ';' at line 18 in state 82, call constant "constexpr uint", goto 270
Reduce #3 to expression by token ';' at line 18 in state 270, call assign_operator "+", goto 76
Shift token ';' at line 18 in state 76, goto 141
Reduce #2 to statement by token '}' at line 19 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 19 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 19 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 19 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 19 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 19 in state 74, call codeblock, goto 360
Shift token '}' at line 19 in state 360, goto 372
Reduce #7 to statement by token "return" at line 20 in state 372, call conditional_while, goto 75
Shift token "return" at line 20 in state 75, goto 94
Shift token IDENT = "i2" at line 20 in state 94, goto 79
Reduce #1 to expression by token ';' at line 20 in state 79, call variable, goto 188
Shift token ';' at line 20 in state 188, goto 288
Reduce #3 to statement by token '}' at line 21 in state 288, call return_value, goto 75
Reduce #0 to statementlist by token '}' at line 21 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 21 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 21 in state 74, call codeblock, goto 347
Shift token '}' at line 21 in state 347, goto 363
Reduce #6 to callablebody by token "main" at line 23 in state 363, call callablebody, goto 196
Reduce #5 to functiondefinition by token "main" at line 23 in state 196, call funcdef {const=false}, goto 15
Reduce #1 to free_definition by token "main" at line 23 in state 15, call definition 1, goto 7
Reduce #0 to free_definitionlist by token "main" at line 23 in state 7, goto 30
Reduce #2 to free_definitionlist by token "main" at line 23 in state 30, goto 5
Shift token "main" at line 23 in state 5, goto 29
Shift token '{' at line 24 in state 29, goto 50
Shift token "var" at line 25 in state 50, goto 93
Shift token IDENT = "int" at line 25 in state 93, goto 17
Reduce #1 to typename by token IDENT = "val" at line 25 in state 17, goto 8
Reduce #1 to typespec by token IDENT = "val" at line 25 in state 8, call typespec "", goto 9
Shift token IDENT = "val" at line 25 in state 9, goto 33
Shift token '=' at line 25 in state 33, goto 53
Shift token IDENT = "fibonacci" at line 25 in state 53, goto 79
Reduce #1 to expression by token '(' at line 25 in state 79, call variable, goto 102
Shift token '(' at line 25 in state 102, goto 140
Shift token CARDINAL = "20" at line 25 in state 140, goto 82
Reduce #1 to expression by token ')' at line 25 in state 82, call constant "constexpr uint", goto 194
Reduce #1 to expressionlist by token ')' at line 25 in state 194, goto 247
Shift token ')' at line 25 in state 247, goto 315
Reduce #4 to expression by token ';' at line 25 in state 315, call operator "()", goto 102
Reduce #4 to variabledefinition by token ';' at line 25 in state 102, call vardef_assign, goto 187
Shift token ';' at line 25 in state 187, goto 287
Reduce #3 to statement by token IDENT = "printf" at line 26 in state 287, call definition, goto 75
Shift token IDENT = "printf" at line 26 in state 75, goto 79
Reduce #1 to expression by token '(' at line 26 in state 79, call variable, goto 76
Shift token '(' at line 26 in state 76, goto 140
Shift token DQSTRING = "Result: %d\n" at line 26 in state 140, goto 80
Reduce #1 to expression by token ',' at line 26 in state 80, call string_constant "constexpr float", goto 194
Shift token ',' at line 26 in state 194, goto 285
Shift token IDENT = "val" at line 26 in state 285, goto 79
Reduce #1 to expression by token ')' at line 26 in state 79, call variable, goto 194
Reduce #1 to expressionlist by token ')' at line 26 in state 194, goto 317
Reduce #3 to expressionlist by token ')' at line 26 in state 317, goto 247
Shift token ')' at line 26 in state 247, goto 315
Reduce #4 to expression by token ';' at line 26 in state 315, call operator "()", goto 76
Shift token ';' at line 26 in state 76, goto 141
Reduce #2 to statement by token '}' at line 27 in state 141, call free_expression, goto 75
Reduce #0 to statementlist by token '}' at line 27 in state 75, goto 138
Reduce #2 to statementlist by token '}' at line 27 in state 138, goto 138
Reduce #2 to statementlist by token '}' at line 27 in state 138, goto 74
Reduce #1 to codeblock by token '}' at line 27 in state 74, call codeblock, goto 73
Shift token '}' at line 27 in state 73, goto 137
Accept
Calling Lua function: program
Lua call result [1]
{
  arg = {
    {
      arg = {
        {
          line = 1,
          name = "DQSTRING",
          value = "C"},
        {
          line = 1,
          name = "IDENT",
          value = "printf"},
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      line = 1,
                      name = "IDENT",
                      value = "byte"}},
                  call = {
                    name = "typespec const^",
                    obj = "const^",
                    proc = <function>},
                  line = 1,
                  step = 0},
                {
                  line = 1,
                  name = "IDENT",
                  value = "fmt"},
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 1,
                          name = "IDENT",
                          value = "int"}},
                      call = {
                        name = "typespec ",
                        obj = "",
                        proc = <function>},
                      line = 1,
                      step = 0},
                    {
                      line = 1,
                      name = "IDENT",
                      value = "arg"}},
                  call = {
                    name = "extern_paramdef",
                    proc = <function>},
                  line = 1,
                  step = 0}},
              call = {
                name = "extern_paramdef",
                proc = <function>},
              line = 1,
              step = 0}},
          call = {
            name = "extern_paramdeflist",
            proc = <function>},
          line = 1,
          step = 0}},
      call = {
        name = "extern_procdef",
        proc = <function>},
      line = 1,
      step = 0},
    {
      arg = {
        {
          arg = {
            {
              arg = {},
              call = {
                name = "linkage {private=true,linkage="internal"}",
                obj = {
                  linkage = "internal",
                  private = true},
                proc = <function>},
              line = 1,
              step = 0},
            {
              line = 3,
              name = "IDENT",
              value = "fibonacci"},
            {
              arg = {
                {
                  line = 3,
                  name = "IDENT",
                  value = "int"}},
              call = {
                name = "typespec ",
                obj = "",
                proc = <function>},
              line = 3,
              step = 0},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 3,
                              name = "IDENT",
                              value = "int"}},
                          call = {
                            name = "typespec ",
                            obj = "",
                            proc = <function>},
                          line = 3,
                          step = 0},
                        {
                          line = 3,
                          name = "IDENT",
                          value = "n"}},
                      call = {
                        name = "paramdef",
                        proc = <function>},
                      line = 3,
                      step = 0}},
                  call = {
                    name = "paramdeflist",
                    proc = <function>},
                  line = 3,
                  step = 0},
                {
                  arg = {
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {},
                              call = {
                                name = "linkage {private=false,linkage="external"}",
                                obj = {
                                  linkage = "external",
                                  private = false},
                                proc = <function>},
                              line = 3,
                              step = 0},
                            {
                              line = 5,
                              name = "IDENT",
                              value = "swap"},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 5,
                                              name = "IDENT",
                                              value = "int"}},
                                          call = {
                                            name = "typespec &",
                                            obj = "&",
                                            proc = <function>},
                                          line = 5,
                                          step = 0},
                                        {
                                          line = 5,
                                          name = "IDENT",
                                          value = "a"}},
                                      call = {
                                        name = "paramdef",
                                        proc = <function>},
                                      line = 5,
                                      step = 0},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 5,
                                              name = "IDENT",
                                              value = "int"}},
                                          call = {
                                            name = "typespec &",
                                            obj = "&",
                                            proc = <function>},
                                          line = 5,
                                          step = 0},
                                        {
                                          line = 5,
                                          name = "IDENT",
                                          value = "b"}},
                                      call = {
                                        name = "paramdef",
                                        proc = <function>},
                                      line = 5,
                                      step = 0}},
                                  call = {
                                    name = "paramdeflist",
                                    proc = <function>},
                                  line = 5,
                                  step = 0},
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 7,
                                                  name = "IDENT",
                                                  value = "int"}},
                                              call = {
                                                name = "typespec ",
                                                obj = "",
                                                proc = <function>},
                                              line = 7,
                                              step = 0},
                                            {
                                              line = 7,
                                              name = "IDENT",
                                              value = "tmp"},
                                            {
                                              arg = {
                                                {
                                                  line = 7,
                                                  name = "IDENT",
                                                  value = "a"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 7,
                                              step = 0}},
                                          call = {
                                            name = "vardef_assign",
                                            proc = <function>},
                                          line = 7,
                                          step = 1}},
                                      call = {
                                        name = "definition",
                                        proc = <function>},
                                      line = 7,
                                      step = 1},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 8,
                                                  name = "IDENT",
                                                  value = "a"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 8,
                                              step = 1},
                                            {
                                              arg = {
                                                {
                                                  line = 8,
                                                  name = "IDENT",
                                                  value = "b"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 8,
                                              step = 1}},
                                          call = {
                                            name = "operator =",
                                            obj = "=",
                                            proc = <function>},
                                          line = 8,
                                          step = 1}},
                                      call = {
                                        name = "free_expression",
                                        proc = <function>},
                                      line = 8,
                                      step = 1},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              arg = {
                                                {
                                                  line = 9,
                                                  name = "IDENT",
                                                  value = "b"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 9,
                                              step = 1},
                                            {
                                              arg = {
                                                {
                                                  line = 9,
                                                  name = "IDENT",
                                                  value = "tmp"}},
                                              call = {
                                                name = "variable",
                                                proc = <function>},
                                              line = 9,
                                              step = 1}},
                                          call = {
                                            name = "operator =",
                                            obj = "=",
                                            proc = <function>},
                                          line = 9,
                                          step = 1}},
                                      call = {
                                        name = "free_expression",
                                        proc = <function>},
                                      line = 9,
                                      step = 1}},
                                  call = {
                                    name = "codeblock",
                                    proc = <function>},
                                  line = 9,
                                  step = 1}},
                              call = {
                                name = "callablebody",
                                proc = <function>},
                              line = 9,
                              scope = {
                                0,
                                2}}},
                          call = {
                            name = "procdef {const=false}",
                            obj = {
                              const = false},
                            proc = <function>},
                          line = 9,
                          step = 2}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 9,
                      step = 2},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 11,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 11,
                              step = 2},
                            {
                              line = 11,
                              name = "IDENT",
                              value = "i1"},
                            {
                              arg = {
                                {
                                  line = 11,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 11,
                              step = 2}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 11,
                          step = 3}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 11,
                      step = 3},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 12,
                              step = 3},
                            {
                              line = 12,
                              name = "IDENT",
                              value = "i2"},
                            {
                              arg = {
                                {
                                  line = 12,
                                  name = "CARDINAL",
                                  value = "1"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 12,
                              step = 3}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 12,
                          step = 4}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 12,
                      step = 4},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 13,
                                  name = "IDENT",
                                  value = "int"}},
                              call = {
                                name = "typespec ",
                                obj = "",
                                proc = <function>},
                              line = 13,
                              step = 4},
                            {
                              line = 13,
                              name = "IDENT",
                              value = "i"},
                            {
                              arg = {
                                {
                                  line = 13,
                                  name = "CARDINAL",
                                  value = "0"}},
                              call = {
                                name = "constant constexpr uint",
                                obj = "constexpr uint",
                                proc = <function>},
                              line = 13,
                              step = 4}},
                          call = {
                            name = "vardef_assign",
                            proc = <function>},
                          line = 13,
                          step = 5}},
                      call = {
                        name = "definition",
                        proc = <function>},
                      line = 13,
                      step = 5},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  line = 14,
                                  name = "IDENT",
                                  value = "i"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 14,
                              step = 5},
                            {
                              arg = {
                                {
                                  line = 14,
                                  name = "IDENT",
                                  value = "n"}},
                              call = {
                                name = "variable",
                                proc = <function>},
                              line = 14,
                              step = 5}},
                          call = {
                            name = "operator <",
                            obj = "<",
                            proc = <function>},
                          line = 14,
                          step = 5},
                        {
                          arg = {
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 16,
                                          name = "IDENT",
                                          value = "i1"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 16,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "IDENT",
                                              value = "i2"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 16,
                                          step = 5},
                                        {
                                          arg = {
                                            {
                                              line = 16,
                                              name = "IDENT",
                                              value = "i1"}},
                                          call = {
                                            name = "variable",
                                            proc = <function>},
                                          line = 16,
                                          step = 5}},
                                      call = {
                                        name = "operator +",
                                        obj = "+",
                                        proc = <function>},
                                      line = 16,
                                      step = 5}},
                                  call = {
                                    name = "operator =",
                                    obj = "=",
                                    proc = <function>},
                                  line = 16,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 16,
                              step = 5},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "swap"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "i1"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 17,
                                          name = "IDENT",
                                          value = "i2"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 17,
                                      step = 5}},
                                  call = {
                                    name = "operator ()",
                                    obj = "()",
                                    proc = <function>},
                                  line = 17,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 17,
                              step = 5},
                            {
                              arg = {
                                {
                                  arg = {
                                    {
                                      arg = {
                                        {
                                          line = 18,
                                          name = "IDENT",
                                          value = "i"}},
                                      call = {
                                        name = "variable",
                                        proc = <function>},
                                      line = 18,
                                      step = 5},
                                    {
                                      arg = {
                                        {
                                          line = 18,
                                          name = "CARDINAL",
                                          value = "1"}},
                                      call = {
                                        name = "constant constexpr uint",
                                        obj = "constexpr uint",
                                        proc = <function>},
                                      line = 18,
                                      step = 5}},
                                  call = {
                                    name = "assign_operator +",
                                    obj = "+",
                                    proc = <function>},
                                  line = 18,
                                  step = 5}},
                              call = {
                                name = "free_expression",
                                proc = <function>},
                              line = 18,
                              step = 5}},
                          call = {
                            name = "codeblock",
                            proc = <function>},
                          line = 18,
                          step = 5}},
                      call = {
                        name = "conditional_while",
                        proc = <function>},
                      line = 18,
                      scope = {
                        5,
                        6}},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 20,
                              name = "IDENT",
                              value = "i2"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 20,
                          step = 6}},
                      call = {
                        name = "return_value",
                        proc = <function>},
                      line = 20,
                      step = 7}},
                  call = {
                    name = "codeblock",
                    proc = <function>},
                  line = 20,
                  step = 7}},
              call = {
                name = "callablebody",
                proc = <function>},
              line = 20,
              scope = {
                0,
                8}}},
          call = {
            name = "funcdef {const=false}",
            obj = {
              const = false},
            proc = <function>},
          line = 20,
          step = 8}},
      call = {
        name = "definition 1",
        obj = 1,
        proc = <function>},
      line = 20,
      step = 8},
    {
      arg = {
        {
          arg = {
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 25,
                          name = "IDENT",
                          value = "int"}},
                      call = {
                        name = "typespec ",
                        obj = "",
                        proc = <function>},
                      line = 25,
                      step = 8},
                    {
                      line = 25,
                      name = "IDENT",
                      value = "val"},
                    {
                      arg = {
                        {
                          arg = {
                            {
                              line = 25,
                              name = "IDENT",
                              value = "fibonacci"}},
                          call = {
                            name = "variable",
                            proc = <function>},
                          line = 25,
                          step = 8},
                        {
                          arg = {
                            {
                              line = 25,
                              name = "CARDINAL",
                              value = "20"}},
                          call = {
                            name = "constant constexpr uint",
                            obj = "constexpr uint",
                            proc = <function>},
                          line = 25,
                          step = 8}},
                      call = {
                        name = "operator ()",
                        obj = "()",
                        proc = <function>},
                      line = 25,
                      step = 8}},
                  call = {
                    name = "vardef_assign",
                    proc = <function>},
                  line = 25,
                  step = 9}},
              call = {
                name = "definition",
                proc = <function>},
              line = 25,
              step = 9},
            {
              arg = {
                {
                  arg = {
                    {
                      arg = {
                        {
                          line = 26,
                          name = "IDENT",
                          value = "printf"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 26,
                      step = 9},
                    {
                      arg = {
                        {
                          line = 26,
                          name = "DQSTRING",
                          value = "Result: %d\\n"}},
                      call = {
                        name = "string_constant constexpr float",
                        obj = "constexpr float",
                        proc = <function>},
                      line = 26,
                      step = 9},
                    {
                      arg = {
                        {
                          line = 26,
                          name = "IDENT",
                          value = "val"}},
                      call = {
                        name = "variable",
                        proc = <function>},
                      line = 26,
                      step = 9}},
                  call = {
                    name = "operator ()",
                    obj = "()",
                    proc = <function>},
                  line = 26,
                  step = 9}},
              call = {
                name = "free_expression",
                proc = <function>},
              line = 26,
              step = 9}},
          call = {
            name = "codeblock",
            proc = <function>},
          line = 26,
          step = 9}},
      call = {
        name = "main_procdef",
        proc = <function>},
      line = 26,
      scope = {
        8,
        10}}},
  call = {
    name = "program",
    proc = <function>},
  line = 26,
  step = 10}
