return {
	double = {
		def_local = "{1} = alloca double, align 8",
		def_local_val = "{1} = alloca double, align 8\nstore double {2}, double* {1}, align 8",
		def_global = "{1} = internal global double 0.00000, align 8",
		def_global_val = "{1} = internal global double {2}, align 8",
		default = "0.00000",
		store = "store double {2}, double* {1}, align 8",
		load = "{2} = load double, double* {1} align 8",
		conv = {
			_double = "{2} = load double, double* {1} align 8",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fpext float {3} to double",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = uitofp i64 {3} to double",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = sitofp i64 {3} to double",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = uitofp i32 {3} to double",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = sitofp i32 {3} to double",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = uitofp i16 {3} to double",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sitofp i16 {3} to double",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = uitofp i8 {3} to double",
			_bool = "{3} = load i8, i8* {1}, align 1\n{4} = trunc i8 {3} to i1\n{5} = zext i1 {4} to i32\n{2} = sitofp i32 {5} to double"},
		unop = {
			_neg = "{2} = fneg double {1}"},
		binop = {
			_add = "{3} = fadd double {1}, {2}",
			_sub = "{3} = fsub double {1}, {2}",
			_mul = "{3} = fmul double {1}, {2}",
			_div = "{3} = fdiv double {1}, {2}",
			_mod = "{3} = frem double {1}, {2}"}
	},
	float = {
		def_local = "{1} = alloca float, align 4",
		def_local_val = "{1} = alloca float, align 4\nstore float {2}, float* {1}, align 4",
		def_global = "{1} = internal global float 0.00000, align 4",
		def_global_val = "{1} = internal global float {2}, align 4",
		default = "0.00000",
		store = "store float {2}, float* {1}, align 4",
		load = "{2} = load float, float* {1} align 4",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptrunc double {3} to float",
			_float = "{2} = load float, float* {1} align 4",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = uitofp i64 {3} to float",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = sitofp i64 {3} to float",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = uitofp i32 {3} to float",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = sitofp i32 {3} to float",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = uitofp i16 {3} to float",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sitofp i16 {3} to float",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = uitofp i8 {3} to float",
			_bool = "{3} = load i8, i8* {1}, align 1\n{4} = trunc i8 {3} to i1\n{5} = zext i1 {4} to i32\n{2} = sitofp i32 {5} to float"},
		unop = {
			_neg = "{2} = fneg float {1}"},
		binop = {
			_add = "{3} = fadd float {1}, {2}",
			_sub = "{3} = fsub float {1}, {2}",
			_mul = "{3} = fmul float {1}, {2}",
			_div = "{3} = fdiv float {1}, {2}",
			_mod = "{3} = frem float {1}, {2}"}
	},
	ulong = {
		def_local = "{1} = alloca i64, align 8",
		def_local_val = "{1} = alloca i64, align 8\nstore i64 {2}, i64* {1}, align 8",
		def_global = "{1} = internal global i64 0, align 8",
		def_global_val = "{1} = internal global i64 {2}, align 8",
		default = "0",
		store = "store i64 {2}, i64* {1}, align 8",
		load = "{2} = load i64, i64* {1} align 8",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptoui double {3} to i64",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptoui float {3} to i64",
			_ulong = "{2} = load i64, i64* {1} align 8",
			_long = "{2} = load i64, i64* {1} align 8",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = zext i32 {3} to i64",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = sext i32 {3} to i64",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = zext i16 {3} to i64",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sext i16 {3} to i64",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i64",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i64"},
		unop = {
			_not = "{2} = xor i64 {1}, -1"},
		binop = {
			_add = "{3} = add nuw i64 {1}, {2}",
			_sub = "{3} = add nsw i64 {1}, {2}",
			_mul = "{3} = mul nsw i64 {1}, {2}",
			_div = "{3} = udiv i64 {1}, {2}",
			_mod = "{3} = urem i64 {1}, {2}",
			_shl = "{3} = shl i64 {1}, {2}",
			_shr = "{3} = lshr i64 {1}, {2}",
			_and = "{3} = and i64 {1}, {2}",
			_or = "{3} = or i64 {1}, {2}",
			_xor = "{3} = xor i64 {1}, {2}"}
	},
	long = {
		def_local = "{1} = alloca i64, align 8",
		def_local_val = "{1} = alloca i64, align 8\nstore i64 {2}, i64* {1}, align 8",
		def_global = "{1} = internal global i64 0, align 8",
		def_global_val = "{1} = internal global i64 {2}, align 8",
		default = "0",
		store = "store i64 {2}, i64* {1}, align 8",
		load = "{2} = load i64, i64* {1} align 8",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptosi double {3} to i64",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptosi float {3} to i64",
			_ulong = "{2} = load i64, i64* {1} align 8",
			_long = "{2} = load i64, i64* {1} align 8",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = zext i32 {3} to i64",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = sext i32 {3} to i64",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = zext i16 {3} to i64",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sext i16 {3} to i64",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i64",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i64"},
		unop = {
			_neg = "{2} = sub i64 0, {1}"},
		binop = {
			_add = "{3} = add nsw i64 {1}, {2}",
			_sub = "{3} = sub nsw i64 {1}, {2}",
			_mul = "{3} = mul nsw i64 {1}, {2}",
			_div = "{3} = sdiv i64 {1}, {2}",
			_mod = "{3} = srem i64 {1}, {2}",
			_shl = "{3} = shl nsw i64 {1}, {2}",
			_shr = "{3} = ashr i64 {1}, {2}"}
	},
	uint = {
		def_local = "{1} = alloca i32, align 4",
		def_local_val = "{1} = alloca i32, align 4\nstore i32 {2}, i32* {1}, align 4",
		def_global = "{1} = internal global i32 0, align 4",
		def_global_val = "{1} = internal global i32 {2}, align 4",
		default = "0",
		store = "store i32 {2}, i32* {1}, align 4",
		load = "{2} = load i32, i32* {1} align 4",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptoui double {3} to i32",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptoui float {3} to i32",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i32",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i32",
			_uint = "{2} = load i32, i32* {1} align 4",
			_int = "{2} = load i32, i32* {1} align 4",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = zext i16 {3} to i32",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sext i16 {3} to i32",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i32",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i32"},
		unop = {
			_not = "{2} = xor i32 {1}, -1"},
		binop = {
			_add = "{3} = add nuw i32 {1}, {2}",
			_sub = "{3} = add nsw i32 {1}, {2}",
			_mul = "{3} = mul nsw i32 {1}, {2}",
			_div = "{3} = udiv i32 {1}, {2}",
			_mod = "{3} = urem i32 {1}, {2}",
			_shl = "{3} = shl i32 {1}, {2}",
			_shr = "{3} = lshr i32 {1}, {2}",
			_and = "{3} = and i32 {1}, {2}",
			_or = "{3} = or i32 {1}, {2}",
			_xor = "{3} = xor i32 {1}, {2}"}
	},
	int = {
		def_local = "{1} = alloca i32, align 4",
		def_local_val = "{1} = alloca i32, align 4\nstore i32 {2}, i32* {1}, align 4",
		def_global = "{1} = internal global i32 0, align 4",
		def_global_val = "{1} = internal global i32 {2}, align 4",
		default = "0",
		store = "store i32 {2}, i32* {1}, align 4",
		load = "{2} = load i32, i32* {1} align 4",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptosi double {3} to i32",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptosi float {3} to i32",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i32",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i32",
			_uint = "{2} = load i32, i32* {1} align 4",
			_int = "{2} = load i32, i32* {1} align 4",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = zext i16 {3} to i32",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = sext i16 {3} to i32",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i32",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i32"},
		unop = {
			_neg = "{2} = sub i32 0, {1}"},
		binop = {
			_add = "{3} = add nsw i32 {1}, {2}",
			_sub = "{3} = sub nsw i32 {1}, {2}",
			_mul = "{3} = mul nsw i32 {1}, {2}",
			_div = "{3} = sdiv i32 {1}, {2}",
			_mod = "{3} = srem i32 {1}, {2}",
			_shl = "{3} = shl nsw i32 {1}, {2}",
			_shr = "{3} = ashr i32 {1}, {2}"}
	},
	ushort = {
		def_local = "{1} = alloca i16, align 2",
		def_local_val = "{1} = alloca i16, align 2\nstore i16 {2}, i16* {1}, align 2",
		def_global = "{1} = internal global i16 0, align 2",
		def_global_val = "{1} = internal global i16 {2}, align 2",
		default = "0",
		store = "store i16 {2}, i16* {1}, align 2",
		load = "{2} = load i16, i16* {1} align 2",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptoui double {3} to i16",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptoui float {3} to i16",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i16",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i16",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i16",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i16",
			_ushort = "{2} = load i16, i16* {1} align 2",
			_short = "{2} = load i16, i16* {1} align 2",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i16",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i16"},
		unop = {
			_not = "{2} = xor i16 {1}, -1"},
		binop = {
			_add = "{3} = add nuw i16 {1}, {2}",
			_sub = "{3} = add nsw i16 {1}, {2}",
			_mul = "{3} = mul nsw i16 {1}, {2}",
			_div = "{3} = udiv i16 {1}, {2}",
			_mod = "{3} = urem i16 {1}, {2}",
			_shl = "{3} = shl i16 {1}, {2}",
			_shr = "{3} = lshr i16 {1}, {2}",
			_and = "{3} = and i16 {1}, {2}",
			_or = "{3} = or i16 {1}, {2}",
			_xor = "{3} = xor i16 {1}, {2}"}
	},
	short = {
		def_local = "{1} = alloca i16, align 2",
		def_local_val = "{1} = alloca i16, align 2\nstore i16 {2}, i16* {1}, align 2",
		def_global = "{1} = internal global i16 0, align 2",
		def_global_val = "{1} = internal global i16 {2}, align 2",
		default = "0",
		store = "store i16 {2}, i16* {1}, align 2",
		load = "{2} = load i16, i16* {1} align 2",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptosi double {3} to i16",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptosi float {3} to i16",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i16",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i16",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i16",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i16",
			_ushort = "{2} = load i16, i16* {1} align 2",
			_short = "{2} = load i16, i16* {1} align 2",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = zext i8 {3} to i16",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i16"},
		unop = {
			_neg = "{2} = sub i16 0, {1}"},
		binop = {
			_add = "{3} = add nsw i16 {1}, {2}",
			_sub = "{3} = sub nsw i16 {1}, {2}",
			_mul = "{3} = mul nsw i16 {1}, {2}",
			_div = "{3} = sdiv i16 {1}, {2}",
			_mod = "{3} = srem i16 {1}, {2}",
			_shl = "{3} = shl nsw i16 {1}, {2}",
			_shr = "{3} = ashr i16 {1}, {2}"}
	},
	byte = {
		def_local = "{1} = alloca i8, align 1",
		def_local_val = "{1} = alloca i8, align 1\nstore i8 {2}, i8* {1}, align 1",
		def_global = "{1} = internal global i8 0, align 1",
		def_global_val = "{1} = internal global i8 {2}, align 1",
		default = "0",
		store = "store i8 {2}, i8* {1}, align 1",
		load = "{2} = load i8, i8* {1} align 1",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fptoui double {3} to i8",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fptoui float {3} to i8",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i8",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = trunc i64 {3} to i8",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i8",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = trunc i32 {3} to i8",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = trunc i16 {3} to i8",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = trunc i16 {3} to i8",
			_byte = "{2} = load i8, i8* {1} align 1",
			_bool = "{3} = load i1, i1* {1}, align 1\n{2} = zext i1 {3} to i8"},
		unop = {
			_not = "{2} = xor i8 {1}, -1"},
		binop = {
			_add = "{3} = add nuw i8 {1}, {2}",
			_sub = "{3} = add nsw i8 {1}, {2}",
			_mul = "{3} = mul nsw i8 {1}, {2}",
			_div = "{3} = udiv i8 {1}, {2}",
			_mod = "{3} = urem i8 {1}, {2}",
			_shl = "{3} = shl i8 {1}, {2}",
			_shr = "{3} = lshr i8 {1}, {2}",
			_and = "{3} = and i8 {1}, {2}",
			_or = "{3} = or i8 {1}, {2}",
			_xor = "{3} = xor i8 {1}, {2}"}
	},
	bool = {
		def_local = "{1} = alloca i8, align 1",
		def_local_val = "{1} = alloca i8, align 1\n{3} = zext i1 {2} to i8\nstore i8 {3}, i8* {1}, align 1",
		def_global = "{1} = internal global i8 false, align 1",
		def_global_val = "{1} = internal global i8 {2}, align 1",
		default = "false",
		store = "{3} = zext i1 {2} to i8\nstore i8 {3}, i8* {1}, align 1",
		load = "{3} = load i8, i8* {1}, align 1\n{2} = trunc i8 {3} to i1",
		conv = {
			_double = "{3} = load double, double* {1}, align 8\n{2} = fcmp une double {3}, 0.000000e+00",
			_float = "{3} = load float, float* {1}, align 4\n{2} = fcmp une float {3}, 0.000000e+00",
			_ulong = "{3} = load i64, i64* {1}, align 8\n{2} = cmp ne i64 {3}, 0",
			_long = "{3} = load i64, i64* {1}, align 8\n{2} = cmp ne i64 {3}, 0",
			_uint = "{3} = load i32, i32* {1}, align 4\n{2} = cmp ne i32 {3}, 0",
			_int = "{3} = load i32, i32* {1}, align 4\n{2} = cmp ne i32 {3}, 0",
			_ushort = "{3} = load i16, i16* {1}, align 2\n{2} = cmp ne i16 {3}, 0",
			_short = "{3} = load i16, i16* {1}, align 2\n{2} = cmp ne i16 {3}, 0",
			_byte = "{3} = load i8, i8* {1}, align 1\n{2} = cmp ne i8 {3}, 0",
			_bool = "{3} = load i8, i8* {1}, align 1\n{2} = trunc i8 {3} to i1"},
		unop = {
			_not = "{2} = xor i1 {1}, true"},
		binop = {
			_and = "{3} = and i1 {1}, {2}",
			_or = "{3} = or i1 {1}, {2}",
			_xor = "{3} = xor i1 {1}, {2}"}
	}
}
