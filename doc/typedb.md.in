# The mewa.typedb API

The type database API referred to as _mewa.typedb_ offers you the functions needed to build up the typesystem of your language. 

## Create a new type database
```lua
mewa = require("mewa")
typedb = mewa.typedb()
```
The variable typedb holds now the type database created.

## User defined objects in different scopes:
### typedb:set_instance
#### Parameter
| Name     | Type              | Description                                           |
| -------- | ----------------- | ----------------------------------------------------- |
| name     | string            | Name of the object we declare an instance of          |
| -------- | ----------------- | ----------------------------------------------------- |
| scope    | pair of integers  | The scope if the instance                             |
| -------- | ----------------- | ----------------------------------------------------- |
| instance | anything not nil  | The instance of the object                            |
| -------- | ----------------- | ----------------------------------------------------- |

#### Description
Defines the instance for the object with name _name_ to be _object_ for the scope _scope_.

### typedb:get_instance
#### Parameter
| Name | Type     | Description                                           |
| ---- | -------- | ----------------------------------------------------- |
| name | string   | Name of the object we declare an instance of          |
| ---- | -------- | ----------------------------------------------------- |
| step | integer  | Scope step to locate the instance we are referring to |
| ---- | -------- | ----------------------------------------------------- |
#### Description
Returns the instance for the object with name _name_ for the innermost scope including the scope step _step_.

### Example typedb:set_instance / typedb:get_instance
Implementation of a register allocator for LLVM IR.

#### Source
```lua
$EXAMPLE:RegisterAlloc
```
#### Output
```
$EXAMOUT:RegisterAlloc
```



