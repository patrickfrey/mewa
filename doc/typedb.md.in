# The mewa.typedb API

The type database API referred to as _mewa.typedb_ offers you the functions needed to build up the typesystem of your language. 

## Table of Contents
1. [Create a New Type Database](#createTypeDb)
1. [Implementing the Concept of Scope](#scopeImpl)
    * [typedb:scope](#scope)
    * [typedb:step](#step)
1. [User Defined Objects in Different Scopes](#instance)
    * [typedb:set_instance](#set_instance)
    * [typedb:get_instance](#get_instance)
1. [Definition and Lookup of Types](#types)
    * [typedb:def_type](#def_type)
    * [typedb:get_type](#get_type)
1. [Reductions](#reductions)
    * [typedb:def_reduction](#def_reduction)
    * [typedb:reduction_tagmask](#reduction_tagmask)
    * [typedb:get_reduction](#get_reduction)
    * [typedb:get_reductions](#get_reductions)
1. [Derive and Resolve Types](#deriveAndResolveTypes)
    * [typedb:derive_type](#derive_type)
    * [typedb:resolve_type](#resolve_type)
1. [Type Attributes](#typeAttributes)
    * [typedb:type_name](#type_name)
    * [typedb:type_string](#type_string)
    * [typedb:type_parameters](#type_parameters)
    * [typedb:type_nof_parameters](#type_nof_parameters)
    * [typedb:type_constructor](#type_constructor)
1. [Instrospection for Debugging](#introspection)
    * [typedb:instance_tree](#instance_tree)
    * [typedb:type_tree](#type_tree)
    * [typedb:reduction_tree](#reduction_tree)


<a name="createTypeDb"/>

## Create a New Type Database
```lua
mewa = require("mewa")
typedb = mewa.typedb()
```
The variable typedb holds now the type database created.


<a name="#scopeImpl"/>

## Implementing the Concept of Scope

<a name="scope"/>

### typedb:scope
Get or/and set the current scope. All methods defining objects dependent on a scope (and as exception the getter get_type) like

 - [typedb:set_instance](#set_instance)
 - [typedb:def_type](#def_type)
 - [typedb:get_type](#get_type)
 - [typedb:def_reduction](#def_reduction)

are referring to the current scope. Without parameter the function just returns the current scope.
With a parameter the function sets the current scope to the parameter value and returns the previously defined value for the current scope.

#### Note
This function was designed to support the mapping of AST nodes to scopes in the tree traversal: You set the current scope when you enter the node and restore the old current scope value when leaving the node.

#### Parameter
| #      | Name     | Type              | Description                                                                   |
| :----- | :------- | :---------------- | :---------------------------------------------------------------------------- |
| 1st    | scope    | array             | (optional) pair of integers describing the scope to set as current scope      |
| Return |          | array             | pair of integers describing the (previously defined) current scope            |


<a name="step"/>

### typedb:step
Get or/and set the current scope step. All methods retrieving objects dependent on a scope like

 - [typedb:get_instance](#get_instance)
 - [typedb:derive_type](#derive_type)
 - [typedb:resolve_type](#resolve_type)
 - [typedb:get_reduction](#get_reduction)
 - [typedb:get_reductions](#get_reductions)

are referring to the current scope step. Without parameter the function just returns the current scope step.
With a parameter the function sets the current scope step to the parameter value and returns the previously defined value for the current scope step.

#### Note
This function was designed to support the mapping of AST nodes to scope steps in the tree traversal in the same way as [typedb:scope](#scope).

#### Parameter
| #      | Name     | Type              | Description                                                    |
| :----- | :------- | :---------------- | :------------------------------------------------------------- |
| 1st    | step     | integer           | (optional) integer describing the scope step                   |
| Return |          | integer           | integer describing the (previously defined) current scope step |

#### Remark
The call of [typedb:scope](#scope) with parameter sets the scope step implicitely to the start of the scope.
_If you are not relying on a scope step different from that, you don't have to call scope step for every scope step value provided by the grammar description_.


<a name="instance"/>

## User Defined Object Instances in Different Scopes

<a name="set_instance"/>

### typedb:set_instance
Set the instance for the object with name _name_ to be _object_ for the current scope (set with [typedb::scope](#scope)).

#### Parameter
| #   | Name     | Type              | Description                                            |
| :-- | :------- | :---------------- | :----------------------------------------------------- |
| 1st | name     | string            | Name of the object we declare an instance of           |
| 2nd | instance | any type not nil  | The instance of the object                             |


<a name="get_instance"/>

### typedb:get_instance
Get the instance for the object with name _name_ for the innermost scope including the current scope step (set with [typedb::scope](#scope) or [typedb::step](#step)).

#### Parameter
| #      | Name     | Type     | Description                                                                                                      |
| :----- | :------- | :------- | :--------------------------------------------------------------------------------------------------------------- |
| 1st    | name     | string   | Name of the object we are addressing                                                                             |
| Return |          | *        | The instance of the object we addressed or *nil* if not defined in an enclosing scope of the current scope step. |

### Example typedb:set_instance / typedb:get_instance
Implementation of a register allocator for LLVM IR.

#### Source
```lua
$EXAMPLE:RegisterAlloc
```
#### Output
```
$EXAMOUT:RegisterAlloc
```

<a name="types"/>

## Definition and Lookup of Types

<a name="def_type"/>

### typedb:def_type
Define a type and describe how the type is built by assigning a constructor to it. 
The scope of the newly defined type has been set with the last call of the setter [typedb::scope](#scope). 

#### Parameter
| #      | Name         | Type             | Description                                                                                                   |
| :----- | :----------- | :--------------- | :------------------------------------------------------------------------------------------------------------ |
| 1st    | context-type | integer          | Type referring to the context of the type or 0 if the type is not a member of some other structure            |
| 2nd    | name         | string           | Name of the type defined                                                                                      |
| 3rd    | constructor  | any type         | (optional) Constructor describing how the type is built (*nil* if undefined)                                  |
| 4th    | parameter    | array            | (optional) Array of type/constructor pair or type handles without constructor (parameters). (*)               |
| 5th    | priority     | integer          | (optional) Priority of the definition; a higher priority overwrites a lower priority definition. (**)         |
| Return |              | integer          | identifier assigned to the type or -1 if the definition is a duplicate or 0 if it is silently discarded (***) |

##### Remark (*)
Putting no parameters on the same level as an empty parameter list, we risk falling into a trap of language design, equalizing *null* and *empty* where it shouldn't.
If your compiler has to distinguish these cases, you have to encode the property "has parameters" or "is a variable" into the type name.
##### Remark (**)
The motivation here is to support default declarations that are complicated to implement without a mechanism of priorization.
##### Remark (***)
A definition is siletly discarded it is a duplicate but with lower priority than the previous definition.


<a name="get_type"/>

### typedb:get_type
Get a type definition if it exists in the current scope (Does not search a valid definition in enclosing scopes).
The scope of the lookup type has been set with the last call of the setter [typedb::scope](#scope). 

#### Parameter
| #      | Name         | Type             | Description                                                                                                 |
| :----- | :----------- | :--------------- | :---------------------------------------------------------------------------------------------------------- |
| 1st    | context-type | integer          | Type referring to the context of the type or 0 if the type is not a member of some other structure          |
| 2nd    | name         | string           | Name of the type defined                                                                                    |
| 3rd    | parameter    | array            | (optional) Array of type handles (integers) or *nil* if no parameters defined                               |
| Return |              | integer          | identifier assigned to the type or 0 if not found                                                           |


<a name="reductions"/>

## Define Reductions

<a name="def_reduction"/>

### typedb:def_reduction
Define a reduction from a type resulting in another type with a tag to classify it.
The scope of the newly defined reduction has been set with the last call of the setter [typedb::scope](#scope). 

#### Parameter
| #      | Name         | Type             | Description                                                                                                         |
| :----- | :----------- | :--------------- | :------------------------------------------------------------------------------------------------------------------ |
| 1st    | dest-type    | integer          | Resulting type of the reduction                                                                                     |
| 2nd    | src-type     | integer          | Origin type of the reduction                                                                                        |
| 3rd    | constructor  | any type         | Constructor describing how the type reduction is implemented (*nil* if undefined ~ identity).                       |
| 4th    | tag          | integer 1..32    | Tag assigned to the reduction, used to restrict a type search or derivation to selected classes of reductions.      |
| 5th    | weight       | number           | (optional) Weight assigned to the reduction, used to calculate the shortest path of reductions for resolving types. |


<a name="reduction_tagmask"/>

### typedb:reduction_tagmask
Create a set of tags for selecting a set of reductions valid in the context of a type search.

#### Parameter
| #      | Name         | Type    | Description                                 |
| :----- | :----------- | :------ | :------------------------------------------ |
| ....   | tag          | integer | Element of a list of tags to add to the set |


<a name="get_reduction"/>

### typedb:get_reduction
Get the constructor of a reduction from a type to another if it exists.
The scope step of the search that defines the valid reduction candidates has been set with the last call of the setter [typedb::step](#step) or [typedb::scope](#scope). 

#### Parameter
| #          | Name         | Type              | Description                                                                                                          |
| :--------- | :----------- | :---------------- | :------------------------------------------------------------------------------------------------------------------- |
| 1st        | dest-type    | integer           | Resulting type to of the reduction.                                                                                  |
| 2nd        | src-type     | integer           | Start type of the reduction.                                                                                         |
| 3rd        | tagmask      | bit set (integer) | Set of tags (*) that selects the reduction classes to consider.                                                      |
| Return 1st |              | integer           | Handle of destination type if the reduction exists in a scope and the result is valid. (**)                          |
| Return 2nd |              | any type          | Constructor of the reduction if it exists or *nil* if it is not defined by a scope covering the current scope step. |

#### Remark (*)
Built with [typedb:reduction_tagmask](#reduction_tagmask).
#### Remark (**)
First result can be treated a boolean for the validity of the result as 0 is not a valid result, because reductions to the global context are not allowed.


<a name="get_reductions"/>

### typedb:get_reductions
Get the list of reductions defined for a type from a list of selected classes defined by tag.
The scope step of the search that defines the valid reduction candidates has been set with the last call of the setter [typedb::step](#step) or [typedb::scope](#scope). 

#### Parameter
| #      | Name         | Type              | Description                                                                                        |
| :----- | :----------- | :---------------- | :------------------------------------------------------------------------------------------------- |
| 1st    | type         | integer           | Start type of the reductions to inspect.                                                           |
| 2nd    | tagmask      | bit set (integer) | Set of tags (*) that selects the reduction classes to consider.                                    |
| Return |              | array             | List of type/constructor pairs as structures with "type","constructor" member names.               | 

#### Remark (*)
Built with [typedb:reduction_tagmask](#reduction_tagmask).


<a name="deriveAndResolveTypes"/>

## Derive and Resolve Types

<a name="derive_type"/>

### typedb:derive_type
Finds the shortest path (sum of reduction weights) of reductions of the classes selected by the _tagmask_ parameter. Throws an error if the result is ambiguous.
The scope step of the search that defines the valid reduction candidates has been set with the last call of the setter [typedb::step](#step) or [typedb::scope](#scope). 

#### Parameter
| #          | Name         | Type              | Description                                                                                           |
| :--------- | :----------- | :---------------- | :---------------------------------------------------------------------------------------------------- |
| 1st        | dest-type    | integer           | Resulting type to derive.                                                                             |
| 2nd        | src-type     | integer           | Start type of the reduction path leading to the result type.                                          |
| 3rd        | tagmask      | bit set (integer) | (optional) Set of tags (*) that selects the reductions to use (select all if undefined).              |
| Return 1st |              | array             | List of type/constructor pairs as structures with "type","constructor" member names.                  |
| Return 2nd |              | number            | Weight sum of best path found                                                                         |
| Return 3rd |              | array             | Alternative path with same weight found. There is an ambiguus reference if this value is not *nil*.   |

#### Remark (*)
Built with [typedb:reduction_tagmask](#reduction_tagmask).

<a name="resolve_type"/>

### typedb:resolve_type
Finds the matching type with the searched name and a context-type derivable from the searched context-type, that has the shortest path (sum of reduction weights) of reductions of the classes selected by the _tagmask_ parameter. 
The returned list of candidates (2nd return value) has to be inspected by the client to find the best match.
The scope step of the search that defines the valid reduction candidates has been set with the last call of the setter [typedb::step](#step) or [typedb::scope](#scope). 

#### Parameter
| #          | Name            | Type              | Description                                                                                                       |
| :--------- | :-------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------- |
| 1st        | context-type(s) | integer/array     | Single type or array of types referring to the context of the type (*)                                            |
| 2nd        | name            | string            | Name of the type searched                                                                                         |
| 3rd        | tagmask         | bit set (integer) | (optional) Set of tags (**) that selects the reduction classes to use.                                            |
| Return 1st |                 | integer           | Derived context-type of the result, *nil* if not found, array with two types in case of an ambiguous result.      | 
| Return 2nd |                 | array             | List of context-type reductions, type/constructor pairs as structures with "type","constructor" member names.     |
| Return 3rd |                 | array             | List of candidates found, differing in the parameters. The final result has to be client matching the parameters. |

#### Remark (*)
The context-type 0 is reserved for types that are not a member of some other structure.
#### Remark (**)
Built with [typedb:reduction_tagmask](#reduction_tagmask).

#### Note
To inspect the result you first have to look if the 1st return value is *nil* (=> the type could not be resolved).
Then you have to check if the first return value is an array (=> ambiguous reference). The array contains two conflicting context types.
Otherwise the first return value is the context-type of the resolved type and the 2nd and 3rd return value specify how the resolved type is built.


<a name="typeAttributes"/>

## Inspect Type Attributes

<a name="type_name"/>

### typedb:type_name
Get the name of the type as it was specified as argument of 'typedb:def_type'.

#### Parameter
| #          | Name   | Type              | Description                      |
| :--------- | :----- | :---------------- | :------------------------------- |
| 1st        | type   | integer           | Type identifier                  |
| Return     |        | string            | Name of the type without context |


<a name="type_string"/>

### typedb:type_string
Get the full signature of the type as string. This is the full name of the context type, the name and the full name of all parameters defined.

#### Parameter
| #          | Name | Type              | Description                                                                                    |
| :--------- | :--- | :---------------- | :--------------------------------------------------------------------------------------------- |
| 1st        | type | integer           | Type identifier                                                                                |
| Return     |      | string            | Full name of the type with context separated by spaces and parameters in oval brackets '(' ')' |


<a name="type_parameters"/>

### typedb:type_parameters
Get the list of parameters defined for a type.

#### Parameter
| #          | Name | Type     | Description                                                                          |
| :--------- | :--- | :------- | :----------------------------------------------------------------------------------- |
| 1st        | type | integer  | Type identifier                                                                      |
| Return     |      | array    | List of type/constructor pairs as structures with "type","constructor" member names. |


<a name="type_nof_parameters"/>

### typedb:type_nof_parameters
Get the number of parameters defined for a type.

#### Parameter
| #          | Name | Type     | Description                                     |
| :--------- | :--- | :------- | :---------------------------------------------- |
| 1st        | type | integer  | Type identifier                                 |
| Return     |      | integer  | Number of parameters defined for this function. |


<a name="type_constructor"/>

### typedb:type_constructor
Get the constructor of a type.

#### Parameter
| #          | Name | Type              | Description                                    |
| :--------- | :--- | :---------------- | :--------------------------------------------- |
| 1st        | type | integer           | Type identifier                                |
| Return     |      | any type          | Constructor of the type or *nil* if undefined. |

#### Remark
Exits with error if the type passed is not valid. Returns *nil* if type is 0 or if not constructor is defined for that type.


<a name="introspection"/>

## Instrospection for Debugging:

<a name="instance_tree"/>

### typedb:instance_tree
Get the tree of scopes with the instances defined. 

#### Parameter
| #      | Name     | Type      | Description                                           |
| :----- | :------- | :-------- | :---------------------------------------------------- |
| 1st    | name     | string    | Name of the object we are addressing                  |
| Return |          | structure | Tree structure with a node for each definition scope  |

#### Remark
This is a costly operation and not intended to be used as data structure for the compiler itself. 
It is thought as help during development.

#### Fields of the Returned Tree Structure
| Name     | Type      | Description                                                                             |
| :------- | :-------- | :-------------------------------------------------------------------------------------- |
| chld     | function  | Iterator function to iterate on the child nodes (also tree structures like this node).  |
| scope    | function  | Function returning an array (pair of integers) describing the scope of this node.       |
| instance | function  | Function returning the instance defined for this node.                                  |


<a name="type_tree"/>

### typedb:type_tree
Get the tree of scopes with the list of types defined there. 

#### Parameter
| #      | Name     | Type      | Description                                           |
| :----- | :------- | :-------- | :---------------------------------------------------- |
| Return |          | structure | Tree structure with a node for each definition scope  |

#### Fields of the Returned Tree Structure
| Name     | Type      | Description                                                                             |
| :------- | :-------- | :-------------------------------------------------------------------------------------- |
| chld     | function  | Iterator function to iterate on the child nodes (also tree structures like this node)   |
| scope    | function  | Function returning an array (pair of integers) describing the scope of this node.       |
| list     | function  | Function returning the list of types (integers) defined in the scope of this node       |

#### Remark
This is a costly operation and not intended to be used as data structure for the compiler itself. 
It is thought as help during development.


<a name="reduction_tree"/>

### typedb:reduction_tree
Get the tree of scopes with the list of reductions defined there. 

#### Parameter
| #      | Name     | Type      | Description                                           |
| :----- | :------- | :-------- | :---------------------------------------------------- |
| Return |          | structure | Tree structure with a node for each definition scope  |

#### Fields of the Returned Tree Structure
| Name     | Type      | Description                                                                               |
| :------- | :-------- | :---------------------------------------------------------------------------------------- |
| chld     | function  | Iterator function to iterate on the child nodes (also tree structures like this node)     |
| scope    | function  | Function returning an array (pair of integers) describing the scope of this node          |
| list     | function  | Function returning the list of reductions (structures) defined in the scope of this node  |

#### Members of the Tree Structure List Elements
| Name          | Type             | Description                                                     |
| :------------ | :--------------- | :-------------------------------------------------------------- |
| to            | integer          | Destination type of the reduction                               |
| from          | integer          | Origin type of the reduction                                    |
| constructor   | any type not nil | Constructor describing how the type reduction is implemented.   |
| tag           | integer 1..32    | Tag assigned to the reduction.                                  |
| weight        | number           | Weight assigned to the reduction.                               |

#### Remark
This is a costly operation and not intended to be used as data structure for the compiler itself. 
It is thought as help during development.




