# Writing Compiler Front-Ends for LLVM with _Lua_ using _Mewa_

## Lead Text
_LLVM IR_ text representation makes it possible to write a compiler front-end without being bound to an API. We can map the source text to the text of _LLVM IR_ and use the tools of the _Clang_ compiler for further compilation steps. This opens the doors to implement compiler front-ends in different ways. _Mewa_ tries to optimize the amount of code written. It targets single authors that would like to write a prototype of a non-trivial programming language fast, but at the expense of a structure supporting collaborative work. This makes it rather a tool for experiment than for building a product.

## Introduction

The _Mewa_ compiler-compiler is a tool to script compiler front-ends in _Lua_. A compiler written with _Mewa_ takes a source file as input and prints an intermediate representation as input for the next compilation step. The example in this article uses the text format of _LLVM IR_ as output. An executable is built using the ```llc``` command of _Clang_.

_Mewa_ provides no support for the evaluation of different paths of code generation. The idea is to do a one-to-one mapping of program structures to code and to leave all analytical optimization steps to the backend.

For implementing a compiler with _Mewa_, you define a grammar attributed with _Lua_ function calls.
The program ```mewa``` will generate a _Lua_ script that will transform any source passing the grammar specified into an _AST_ with the _Lua_ function calls attached to the nodes. The compiler will call the functions of the top-level nodes of the _AST_ that take the control of the further processing of the compiler front-end. The functions called with their _AST_ node as argument invoke the further tree traversal. The types and data structures of the program are built and the output is printed in the process.

## Goals

We start with a tutorial of the **typedb** library of _Mewa_ for _Lua_ with some self-contained examples. Self-contained means that nothing is used but the library. The examples are also not dependent on each other. This allows you to continue reading even if you did not understand it completely and to return later.

After this, this article will guide you through the implementation of a compiler for a simple programming language missing many features.
The example program we will compile is the following:
```
$EXAMPLE:tutorial_program
```
We will compile this program with the our example compiler and run it in a shell. We will also look at different parts including the grammar of the language.
Finally, I will talk about the features missing in the language to give you some outlook on how to implement a compiler of a complete programming language.

## Target Audience

To understand this article some knowledge about formal languages and parser generators is helpful. To understand the examples you should be familiar with some scripting languages that have a concept of closures similar to _Lua_. If you have read an introduction to [LLVM IR](links.md), you will get grip on the code generation in the examples.

## Deeper Digging

For a deeper digging you have to look at the _Mewa_ project itself and the implementation of [the main example language](example_language1.md), a strongly typed multiparadigm programming language with structures, classes, interfaces, free functions, generics, lambdas and exceptions. There exists an [FAQ](faq.md) that also tries to answer problem-solving questions.

## Preparation

The _Mewa_ program and the _Lua_ module are written in C++. Follow the instructions to install it.
The installation description is written for _Ubuntu_. For other platforms you might need to lookup the corresponding package names.

### Installation

To install _Mewa_ you need a C++ compiler with C++17 support. _Mewa_ is tested with _clang_ and _gcc_. 

#### Required system packages
##### For Lua 5.2
```Bash
lua5.2 liblua5.2-dev luarocks llvm llvm-runtime
```
##### For Lua 5.1
```Bash
lua5.1 liblua5.1-0-dev luarocks llvm llvm-runtime
```
#### Required luarocks packages
```Bash
luarocks install bit32
luarocks install penlight 
luarocks install LuaBcd
```
#### Build LuaBcd from sources (if luarocks install LuaBcd fails)
If the build of _LuaBcd_ with _luarocks_ fails, you can fetch the sources from _github_ and build it:
```Bash
git clone https://github.com/patrickfrey/luabcd.git
cd LuaBcd
./configure
make
make install
```
#### Fetch sources of latest release version
```Bash
git clone https://github.com/patrickfrey/mewa
cd mewa
git checkout -b `cat VERSION`
```
#### Configure to find Lua includes and to write the file Lua.inc included by make
```Bash
./configure
```
#### Build with GNU C/C++
```Bash
make COMPILER=gcc RELEASE=YES
```
#### Build with Clang C/C++
```Bash
make COMPILER=clang RELEASE=YES
```
#### Run tests
```Bash
make test
```
#### Install
```Bash
make install
```
#### Lua Environment
Don't forget to set the _Lua_ environment (LUA_CPATH,LUA_PATH) correctly when running the _Lua_ scripts from command line. 
You find a luaenv.sh in the archive of this article. Load it with.
```Bash
. tutorial/luaenv.sh
```


## Tutorial

In this tutorial we will learn how to use the typedb library with some self-contained examples.

### Declaring a variable

Let's start with a complicated example that is a substantial step forward. 
We print the LLVM code needed to assign a variable value to another variable. 
For this, we need to introduce **types** and **reductions**.

#### Introduction
##### Types
Types are items represented as integers. They are declared and retrieved by the name of the type and a context type.
The context type is itself a type or 0.
Global free variables have for example no associated context type and are declared with 0 as context type. 
Types are associated with a constructor. A constructor is a value, structure, or a function that describes the construction of the type.
Optionally, types can have parameters attached. Parameters are a list of type/constructor pairs. Types are declared with 
```Lua
typeid = typedb:def_type( contextType, name, constructor, parameters)
```
The ```typeid``` returned is the integer that represents the type for the _typedb_.
##### Reductions
Reductions are paths to derive a type from another. You can imagine the typesystem as a directed graph of vertices (types) and edges (reductions).
We will introduce some concepts that allow a partial view of this graph later. For now, imagine it as a graph.
Reductions have also an associated constructor. The constructor describes the construction of the type in the direction of the reduction from its source.
Here is an example:
```Lua
typedb:def_reduction( destType, srcType, constructor, 1)
```
The 1 as parameter is an integer value we will explain later.
##### Resolve Type
Types can be resolved by their name and a single or a list of context types, one having a path of reductions to the context type of the resolved type.
##### Derive type
Types can be constructed by querying a reduction path from one type to another and constructing the type from the source type constructor
by applying the list of constructors on this path. 

Let's have a look at the example:

#### Source
File examples/variable.lua
```Lua
$EXAMPLE:tutorial_variable
```
#### Output
```
$EXAMOUT:tutorial_variable
```
#### Conclusion
If you got here you got already quite far. We saw the application of an operator ('=') with an argument. 
Applying a function with more than one argument is imaginable. 
The first match of the operator was our candidate match chosen as a result. But selecting a match by other criteria is imaginable.
We declared a variable with a name, a concept of scope is missing here. We will look at scopes in the next example.


### Scope

Now let's see how scope is represented in the _typedb_.

#### Introduction
Scope in _Mewa_ is represented as a pair of non-negative integer numbers. The first number is the start, the first scope step that belongs to the scope, the second number the end, the first scope step that is not part of the scope. Scope steps are generated by a counter with increments declared in the grammar of your language parser.
All declarations in the _typedb_ are bound to a scope, all queries of the _typedb_ are bound to the current scope step. A declaration is considered to contribute to the result if its scope is covering the scope step of the query.

##### Set the current scope
```Lua
scope_old = typedb:scope( scope_new )
```
##### Get the current scope
```Lua
current_scope = typedb:scope()
```

The example is fairly artificial, but it shows how it works:

#### Source
File examples/scope.lua
```Lua
$EXAMPLE:tutorial_scope
```
#### Output
```
$EXAMOUT:tutorial_scope
```
#### Conclusion
This was easy, wasn't it? What is missing now is how the current scope step and scope are set. I chose the variant of treating it as an own aspect. 
The function used for the _AST_ tree traversal sets the current scope step and scope. This works for most cases. Sometimes you have to set the scope manually in nodes that implement declarations of different scopes, like for example function declarations with a function body in an own scope.


### Reduction Weight

Now we have to look again at something a little bit puzzling. We have to assign a weight to reductions. The problem is that even trivial examples of type queries lead to ambiguity if we do not introduce a weighting scheme that memorizes a preference. Real ambiguity is something we want to detect as an error.
I concluded that it is best to declare all reduction weights at one central place in the source and to document it well.

Let's have a look at an example without weighting of reductions that will lead to ambiguity. 

#### Failing example
File examples/weight1.lua
```Lua
$EXAMPLE:tutorial_weight1
```
#### Output
```
$EXAMOUT:tutorial_weight1
```
#### Adding weights
File examples/weight2.lua

Here is a diff with the edits we have to make for fixing the problem:
```
$EXAMPLE:tutorial_weight_diff
```
#### Output with weights
```
$EXAMOUT:tutorial_weight2
```
#### Conclusion
We introduced a 5th parameter of the ```typedb:def_reduction``` command that is 0 if not specified. 
This new parameter is meant to be declared in a way that it memorizes a preference of solution paths. 
The weights should be referenced by constants we declare at a central place where the trains of thought that led to the weighting schema are documented.


### Reduction Tag

The display of the typesystem as one graph is not enough for all cases. There are type derivation paths that are fitting in one case and undesirable in other cases. The following example declares an object of a class derived from a base class that calls a constructor function with no arguments. The constructor function is only declared for the base class. But when calling an object constructor an error should be reported if it does not exist for the class. The same behavior as for a method call is bad in this case.

Let's first look at an example failing:

#### Failing example
File examples/tags1.lua
```Lua
$EXAMPLE:tutorial_tags1
```
#### Output
```
$EXAMOUT:tutorial_tags1
```
#### Adding tags
File examples/tags2.lua

Here is a diff with the edits we have to make for fixing the problem:
```
$EXAMPLE:tutorial_tags_diff
```
#### Output with tags
```
$EXAMOUT:tutorial_tags2
```
#### Conclusion
We explained now the 4th parameter of the ```typedb:def_reduction``` defined as ```1``` in the first examples. It is the mandatory tag assigned to the reduction.
The command ```typedb.reduction_tagmask``` is used to declare named sets of tags selected for resolving and deriving types.

#### Remark
```typedb:derive_type``` has a second optional tag mask parameter that selects reductions to count and limit to a specified number, 1 by default.
The aim behind that is to allow restrictions on some classes of reductions. Most statically typed programming languages impose restrictions on the number of conversions of a parameter. The second tag mask helps you to implement such restrictions.  


### Objects with a Scope

In a compiler, we have building blocks that are bound to a scope. For example functions. These building blocks are best represented as objects. If we are in the depth of an _AST_ tree traversal we would like to have a way to address these objects without complicated structures passed down as parameters. This would be very error-prone. Especially in a non strictly typed language as _Lua_. 

#### Introduction
##### Define object instance in the current scope
```Lua
typedb:set_instance( name, obj)
```
##### Get the object instance of this or the nearest enclosing scope
```Lua
obj = typedb:get_instance( name)
```
##### Get the object instance declared of the current scope
```Lua
obj = typedb:this_instance( name)
```

#### Source
```Lua
$EXAMPLE:tutorial_env
```
#### Output
```
$EXAMOUT:tutorial_env
```
#### Conclusion
The possibility of attaching named objects to a scope is a big deal for readability, an important property for prototyping.
It brings structure into a system in an interpreter context where we have few possibilities to ensure safety by contracts.


### Control Structures, Implementing an IF
The next step is implementing an IF and to introduce a new class of type. 
Most programming languages require that the evaluation of a boolean expression stops when its outcome is determined.
An expression like ```if ptr && ptr->value()``` should not crash in the case ptr is a NULL pointer.

#### Introduction
For evaluating boolean expressions and as condition type of conditionals we define two new types.
##### Control True Type
This type has a field ```code``` that holds the code executed as long as it evaluates to true and a field ```out``` that holds an unbound label where the control branches to in case of evaluating to false.
##### Control False Type
This type is the mirror type of the control true type. It has a field ```code``` that holds the code that is executed as long as it evaluates to false and a field ```out``` that holds an unbound label where the control branches to in case of evaluating to true.
##### The IF statement
The IF takes the condition argument and transforms it into a control true type. The code of the resulting constructor is joined with the constructor code of the statements to evaluate in the case the condition is true. At the end, the unbound label is bound and declared at the end of the code.

#### Source
```Lua
$EXAMPLE:tutorial_control
```
#### Output
```
$EXAMOUT:tutorial_control
```

#### Conclusion
Control structures are implemented by constructing the control boolean types required. Boolean operators as the logical **AND** or the logical **OR** are constructed by wiring control boolean types together. This has not been done in this example, but it is imaginable after constructing an **IF**. The construction of types with reduction rules does not stop here. Control structures are not entirely different animals.

We have seen the whole variety of functions of the _typedb_ library now. The remaining functions not explained yet are convenient functions to set and get attributes of types. There is nothing substantial left to explain about the API though there is a lot more to talk about best practices and how to use this API.

I think we are now ready to look at our example compiler as a whole.


## Example Language Grammar

Now we will take a look at the grammar of the example language. 

### Parser Generator
_Mewa_ implements an _LALR(1)_ parser generator. The source file of the attributed grammar has 3 parts. 

  * Some configuration marked with a prefix '**%**'
  * The named lexems as a regular expression that matches the lexem value as argument.
  * An attributed grammar with keywords as strings and lexem or production names as identifiers

### Production Attribute Operators
The operator **>>** in the production attributes in oval brackets on the right side is incrementing the scope-step.
The operator **{}** in the production attributes is defining a scope range.

### Production Head Attributes
The attributes **L1**,**L2**,... are defining the production to be left associative with a priority specified as a number. 
The attributes **R1**,**R2**,... are defining the production to be right associative with a priority specified as a number. 

### Source
```
$EXAMPLE:tutorial_grammar
```


## Typesystem
Now let's overview the implementation of the typesystem module that generates the code.
The code shown now will be more organised, more complete, but in contrary to the tutorial not self-contained anymore.

In contrary to the example [language1](example_language1.md) the typesystem module has been splitted in several parts of maximum 100 lines of code to make them digestible. The snippets implementing helper functions are in the directory ```tutorial/sections```. The snippets implementing the functions attached to the **AST** nodes are in the directory ```tutorial/ast```.

Because the amount of code in this second part, we will not inspect it so closely as in the tutorial anymore. 
But I hope that after the tutorial you will still get a grip on the code shown.

### Header
Let's first take a look at the header of typesystem.lua. 

#### Submodule llvmir
The submodule ```llvmir``` implements all templates for the LLVM IR code generation. We sah such templates like ```{out} = load i32, i32* {this}``` with substututes in curly brackets in the examples of the tutorial. In the example compiler these templates are all declared in the module ```llvmir``` and referred to by name. The module ```llvmir``` has a submodule ```llvmir_scalar``` that is generated from a description of the scalar types of our language.

#### Submodule utils
The submodule ```typesystem_utils``` implements functions that are language independent. For example the function ```constructor_format``` that instantiated the llvmir code templates in the tutorial. It is implemented there in a more sophisticated form. String encoding, mangling, and AST tree traversal functions are other examples.

#### Global variables
The approach of _Mewa_ is not pure. Things are stored in the _typedb_ if it helps. For everything else we use global variables. I tried to keep the API of the _typedb_ as minimal as reasonable. The header of ```typesystem.lua ``` has about a dozen global variables declared. In the example **language1** there are around 50 variables defined. For example ```typeDescriptionMap```, a map that associates every type with a table with the code generation templates for this type as members.

#### Source
```
$EXAMPLE:tutorial_typesystem
```

### AST Node functions
Now we will visit the functions attchached to the AST nodes. I split them into snippets covering different aspects. Most of the code is just delegating to functions we will inspect in the following section. All AST node functions do some sort of traversal, as it is in their responsibility to call the subnodes of the AST. I already mentioned in the tutorial that the current scope is implemented as own aspect and set by the AST traversal function. Because it is so important I would like you to have a look at the traversal functions implemented in the ```typesystem_utils``` module. There are two variants of the traversal function:

  * ```function traverse( typedb, node, ...)```
  * ```function traverseRange( typedb, node, range, ...)```

The range is a pair of Lua array indices referring to subnodes to process for partial traversal. Partial traversal is used for processing the subnodes selectively at different times or conditions. You may for example traverse the function parameters and the body at different time, because you have top declare the function first before caring about the implementation. 
The variable arguments **...** are forwarded to the AST functions called. This way you can pass parameters down to the subnodes. The examples of _Mewa_ use parameters extensively. For example to pass down the declaration context that decides, wheter a variable declaration is member of a structure or a local or a global variable. Parameters are also used to implement multipass traversal or the AST to parse declarations of a subtree, e.g. a class in a specific order. You pass down the index of the pass you want to process and an AST node function. But be aware that this way of passing information and state is error prone. You should restrict it to a bare minimum and use scope bound data (```typedb:set_instance```, ```typedb:get_instance```) or even global variables instead.
```Lua
-- Tree traversal helper function setting the current scope/step and calling the function of one node, and returning its result:
local function processSubnode( typedb, subnode, ...)
	local rt
	if subnode.call then
		if (subnode.scope) then
			local scope_bk,step_bk = typedb:scope( subnode.scope)
			typedb:set_instance( "node", subnode)
			if subnode.call.obj then rt = subnode.call.proc( subnode, subnode.call.obj, ...) else rt = subnode.call.proc( subnode, ...) end
			typedb:scope( scope_bk,step_bk)
		elseif (subnode.step) then
			local step_bk = typedb:step( subnode.step)
			if subnode.call.obj then rt = subnode.call.proc( subnode, subnode.call.obj, ...) else rt = subnode.call.proc( subnode, ...) end
			typedb:step( step_bk)
		else
			if subnode.call.obj then rt = subnode.call.proc( subnode, subnode.call.obj, ...) else rt = subnode.call.proc( subnode, ...) end
		end
	else
		rt = subnode.value
	end
	return rt
end
-- Tree traversal or a subrange of argument nodes, define scope/step and do the traversal call
function utils.traverseRange( typedb, node, range, ...)
	if node.arg then
		local rt = {}
		local start,last = table.unpack(range)
		local lasti,ofs = last-start+1,start-1
		for ii=1,lasti do rt[ ii] = processSubnode( typedb, node.arg[ ofs+ii], ...) end
		return rt
	else
		return node.value
	end
end
-- Tree traversal, define scope/step and do the traversal call
function utils.traverse( typedb, node, ...)
	if node.arg then
		local rt = {}
		for ii,subnode in ipairs(node.arg) do rt[ii] = processSubnode( typedb, subnode, ...) end
		return rt
	else
		return node.value
	end
end
```
#### AST Traversal


#### Constants
Define atomic and structure constants in the source. 

##### Note
A structure has a list of type/constructor pairs as constructor. This resembles the parameter list of a function and that's what it is. For recursive initialization of objects from initializer lists, we declare a reduction from the type constexprStructureType to the object type with this list as constructor argument. The constructor is using the typedb to find a matching constructor with this list matching as parameter list. If it fails the constructor returns *nil* to indicate that it failed and that the solution relying on this reduction should be dropped. This kind of enveloping helps us to map initializer lists recursively.
```Lua
$EXAMPLE:tutorial_ast_constants
```

#### Variables
Define and query variables. 
```Lua
$EXAMPLE:tutorial_ast_variables
```

#### Extern Function Declarations
Define extern functions with their parameters.
```Lua
$EXAMPLE:tutorial_ast_extern
```

#### Data Types
Define and reference classes, arrays and other data types.
```Lua
$EXAMPLE:tutorial_ast_types
```

#### Function Declarations
Define functions with the parameters and the callable body.
```Lua
$EXAMPLE:tutorial_ast_functions
```

#### Operators
Define the functions of AST nodes implementing operators.
```Lua
$EXAMPLE:tutorial_ast_operators
```

#### Control Structures
Define the AST control structures like conditionals and the return statements.
```Lua
$EXAMPLE:tutorial_ast_controls
```

#### Blocks and the Rest
Define the AST block elements defined and the rest that does not fall in any other category.
```Lua
$EXAMPLE:tutorial_ast_blocks
```

### Typesystem Functions

This chapter will survey the functions implementing the typesystem. They are also split into snippets covering different aspects.

#### Reduction Weights
Define all reduction weights of our language. We have explained the need for weighting reductions in the tutorial.
```Lua
$EXAMPLE:tutorial_section_reductionWeights
```

#### Reduction Tags and Tagmasks
Define all reduction tags and tagmasks of our example language. We have explained the need for tagging in the tutorial.
```Lua
$EXAMPLE:tutorial_section_reductionTagsAndTagmasks
```

#### Declaration String
This function provides a signature string of the type including context type and parameter types.
```Lua
$EXAMPLE:tutorial_section_declarationString
```

#### Calls and Promote Calls
Here are the functions to define calls with parameters and a return value. For first class scalar types we often need to look also at the argument to determine the constructor to call. Most statically typed programming languages specify a multiplication of an interger with a floating point number as a multiplication of floating point numbers. If we define the operator dependent on the first argument, we have to define the call int * float as conversion of the first operand to a float followed by a float multiplication. I call these calls promote calls in the example **language1** and in this language. The first argument an integer is promoted to a float and then the constructor of the float multiplication is taken.
```Lua
$EXAMPLE:tutorial_section_defineCalls
```

#### Apply Constructors
The call of a constructor to build an object has been shown in the part 1 of the turial (variable assignment).
```Lua
$EXAMPLE:tutorial_section_applyConstructors
```

#### Resolve Types
Functions for resolving types, mapping types, and asserting type properties
```Lua
$EXAMPLE:tutorial_section_resolveTypes
```

#### Apply Callable
Find the best match of a callable with parameters. The candidates are fetched from a priority queue ordered by weight. Constructor functions of the top candidates are called and if they succeed to build the objects then the match is returned.
```Lua
$EXAMPLE:tutorial_section_applyCallable
```

#### Constructor Functions
Functions for building constructors with parameters like for function calls.
```Lua
$EXAMPLE:tutorial_section_constructorFunctions
```

#### Define Function Call
Define a function as "()" operator with arguments of a callable.
```Lua
$EXAMPLE:tutorial_section_defineFunctionCall
```

#### Const Expression Types
Constants in the source trigger the creation of const expression types. Const expression types have their own implementation of operators. But the operators do not produce code, but calculate the resulting value. A const expression type has the value as data type depending on the const expression type as constructor.
```Lua
$EXAMPLE:tutorial_section_constexprTypes
```

#### First Class Scalar Types
Define the first class scalar types of the language from the descriptions in the module llvmir_scalar.lua.
```Lua
$EXAMPLE:tutorial_section_firstClassScalarTypes
```

#### Variables
Define the functions to declare variables of any kind depending on the context: local variables, global variables, member variables, function parameter, etc.
```Lua
$EXAMPLE:tutorial_section_variables
```

#### Define Data Types
Define all sorts of data types, including structures and arrays.
```Lua
$EXAMPLE:tutorial_section_defineDataTypes
```

#### Context Types
Define the list of context types used for resolving types dependent on the scope. Define the context type for declarations of new types.
```Lua
$EXAMPLE:tutorial_section_contextTypes
```

#### Callable Environment
Define the object with all data related to a callable bound to the scope of the function body, e.g. register allocator, label allocator, return type, etc.
```Lua
$EXAMPLE:tutorial_section_callableEnvironment
```

#### Control Boolean Types
Complete definition of the control boolean types as introduced in the tutorial.
```Lua
$EXAMPLE:tutorial_section_controlBooleanTypes
```

#### Control Structures
Some helper functions for implementing control structures.
```Lua
$EXAMPLE:tutorial_section_controlStructures
```

### Running the compiler
```bash
cd examples
mkdir build

LUABIN=`which $ARG`
. tutorial/luaenv.sh

echo "Build the compiler ..."
mewa -b "$LUABIN" -g -o build/tutorial.compiler.lua tutorial/grammar.g
chmod +x build/tutorial.compiler.lua

echo "[1] Run the compiler on a test program ..."
build/tutorial.compiler.lua -o build/tutorial.program.llr tutorial/program.prg

echo "[2] Create an object file ..."
llc -relocation-model=pic -O=3 -filetype=obj build/tutorial.program.llr -o build/tutorial.program.o

echo "[3] Create an executable ..."
clang -lm -lstdc++ -o build/tutorial.program build/tutorial.program.o

echo "[4] Run the executable file build/tutorial.program"
build/tutorial.program

```
#### Output
```
[1] Run the compiler on a test program ...
DECLARE global class Employee
-- MEMBER VARIABLES class Employee
DECLARE member variable name string
DECLARE member variable age int
DECLARE member variable salary double
-- FUNCTION DECLARATIONS class Employee
PARAMDECL function setSalary
DECLARE member function Employee__setSalary (double) -> void
-- FUNCTION IMPLEMENTATIONS class Employee
STATEMENTS function setSalary
IMPLEMENTATION function setSalary
-- DONE class Employee
PARAMDECL function salarySum
DECLARE global function salarySum (Employee [10]&) -> double
STATEMENTS function salarySum
DECLARE local variable idx int
DECLARE local variable sum double
IMPLEMENTATION function salarySum
PARAMDECL function salaryRaise
DECLARE global function salaryRaise (Employee [10]&, double) -> void
STATEMENTS function salaryRaise
DECLARE local variable idx int
IMPLEMENTATION function salaryRaise
DECLARE local variable list Employee [10]
[2] Create an object file ...
[3] Create an executable ...
[4] Run the executable file build/tutorial.program
Salary sum: 280720.00
```

### What is Missing
This article showed the implementation of a primitive language missing lots of features. For example:
  * Dynamic Memory Allocation
  * Exceptions
  * More Language Features
  * Generics

And many more. You can visit the [FAQ](faq.md) and dig into the main [example language1](example_language1.md).
Writing a compiler is a matter of organization. I hope this article could give you some anchors for your personal compiler project.


